<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TrozWare</title>
    <description>Mac &amp;amp; iOS Developer</description>
    <link>http://troz.net/</link>
    <atom:link href="http://troz.net/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>How do I start to learn Swift</title>
        <description>&lt;p&gt;The first thing to do is to download the latest version of Apple’s &lt;a href=&quot;https://itunes.apple.com/book/swift-programming-language/id881256329&quot;&gt;Swift Programming Language book&lt;/a&gt; from the iBooks Store.&lt;/p&gt;

&lt;p&gt;You can just read this book, especially the first section: “A Swift Tour”, but you will get more out of it if you follow along with the playground. There is a link to download the playground from the book which you can use directly if you are reading using iBooks on the Mac. If you are not, here is the &lt;a href=&quot;https://developer.apple.com/go/?id=swift-tour&quot;&gt;download link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will also need to install &lt;a href=&quot;https://itunes.apple.com/app/xcode/id497799835&quot;&gt;Xcode&lt;/a&gt; from the Mac App Store. Xcode is Apple’s IDE and is used for programming Mac, iPhones, iPads, Apple Watches and Apple TVs.&lt;/p&gt;

&lt;p&gt;Swift introduced the playground to Xcode. A playground is a fantastic way to learn and experiment. You do not need to create a project, build, run a separate app, install on a device. Code typed into a playground is run immediately and you can see the results instantly, line by line.&lt;/p&gt;

&lt;p&gt;Here is an example of a playground showing the code on the left and the result of each line appearing on the right.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Playground1.png&quot; alt=&quot;Playground&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Once you have gone through the Swift Tour, Apple’s book becomes more of a reference guide to return to whenever you get stuck. The other way I use it is to check up on changes made when a new version of Swift is released. As the language is still rapidly evolving, these can be quite extensive. Once I have the latest version of the book, I go to the Revision History at the back and click the links to read about the features that have been added or changed.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Apart from Apple’s documentation, there are a lot of great web sites, blogs and Twitter accounts out there. There are also useful newsletters that give a weekly summary of exciting developments.&lt;/p&gt;

&lt;p&gt;Here are some of my favourites:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.natashatherobot.com&quot;&gt;Natasha the Robot&lt;/a&gt; - my favourite Swift blogger - sign up for her newsletter and follow her on Twitter.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/swift/blog/&quot;&gt;Apple’s Swift Blog&lt;/a&gt; - not many posts, but good for learning about new features.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ericasadun.com&quot;&gt;Erica Sadun&lt;/a&gt; - sometimes a bit too technical for me, but often contains some really useful snippets. Erica has the distinction of being the first person outside Apple to have had a Swift language proposal accepted as part of the open source development process.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://andybargh.com&quot;&gt;Andy Bargh&lt;/a&gt; - detailed articles on various aspects of Swift, plus a weekly newsletter.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.raywenderlich.com&quot;&gt;Ray Wenderlich tutorials&lt;/a&gt; - search for Swift and find heaps of tutorials covering many difference aspects.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://swiftsandbox.io&quot;&gt;Swift Sandbox&lt;/a&gt; - weekly newsletter filled with interesting articles.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://swiftsandbox.io&quot;&gt;SwiftMonthly&lt;/a&gt; - useful newsletter with links to tutorials, videos and projects.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://swiftdoc.org&quot;&gt;SwiftDoc.org&lt;/a&gt; - the documentation in Xcode is still heavily skewed towards Objective-C programmers and it can be difficult to find Swift-specific entries. This site makes it easy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And I hope you will keep coming back to this site to see what new Swift-related articles are available.&lt;/p&gt;

</description>
        <pubDate>Tue, 16 Feb 2016 00:00:00 +1000</pubDate>
        <link>http://troz.net/2016/02/how-do-i-start-to-learn-swift/</link>
        <guid isPermaLink="true">http://troz.net/2016/02/how-do-i-start-to-learn-swift/</guid>
      </item>
    
      <item>
        <title>Learning Swift - Optionals</title>
        <description>&lt;p&gt;Today I plan to discuss optionals since they were a feature of Swift that I found difficult to grasp at first.&lt;/p&gt;

&lt;h3 id=&quot;what-is-an-optional-in-swift&quot;&gt;What is an optional in Swift?&lt;/h3&gt;

&lt;p&gt;An optional is a variable of a specified type that can also be nil.&lt;/p&gt;

&lt;h3 id=&quot;why-does-this-matter&quot;&gt;Why does this matter?&lt;/h3&gt;

&lt;p&gt;In Objective-C, any object type could be nil. If you declared a variable like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;then &lt;code class=&quot;highlighter-rouge&quot;&gt;myString&lt;/code&gt; was set to nil by default.&lt;/p&gt;

&lt;p&gt;But this could cause issues, especially as Objective-C does not complain if you send a message to nil. This could lead to bugs that were very difficult to track down.&lt;/p&gt;

&lt;p&gt;The other big use for nil is when returning from a function which has found no appropriate data to return. The classic example is when looking for the index of an element in an array. What should be returned if the element is not found in the array?&lt;/p&gt;

&lt;p&gt;Some languages return -1, Objective-C uses &lt;code class=&quot;highlighter-rouge&quot;&gt;NSNotFound&lt;/code&gt;, but you have to know what each language is going to do. The more logical answer is nil. However if your function is expected to return an integer, then it cannot return nil because nil is not an integer.&lt;/p&gt;

&lt;p&gt;This is where optionals come in: if the function is expected to return an optional integer, it can return with an integer with the index of the matching element, or it can return nil if the element was not found. This is much clearer and less prone to error.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;how-does-swift-handle-optionals&quot;&gt;How does Swift handle optionals?&lt;/h2&gt;

&lt;p&gt;One of the first things that struck me about Swift was how clean the code looked, without so many non-alphanumeric characters scattered around. Gone were all the:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But instead, Swift code sprouted:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What were these?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The key to understanding optionals is to realise that when you declare an optional variable of a certain type, you are actually declaring a box that can hold a variable of that type or can hold nil.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once you grasp that concept, it all becomes much more obvious.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;optionalInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The ? indicates that this is an optional variable. It does not have to be initialised as it is already set to nil which is valid for an optional variable. Without the ? this would require initialisation as it would not be valid for it to be nil.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;setting-an-optional&quot;&gt;Setting an optional:&lt;/h3&gt;

&lt;p&gt;Setting the value of an optional variable is just the same as any other variable:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;optionalInteger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;optionalInteger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;getting-an-optional&quot;&gt;Getting an optional:&lt;/h3&gt;

&lt;p&gt;The difference arises when you need to get the data out of the optional variable in order to use it. This process is called un-wrapping and it means to get the variable value out of the ‘box’ it is stored it.&lt;/p&gt;

&lt;h4 id=&quot;the-most-obvious-way-is-to-use-&quot;&gt;The most obvious way is to use !&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newInteger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optionalInteger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;DO NOT DO THIS!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is called forced-unwrapping and assumes that the optional variable is not nil. If the optional is nil, this will crash.
In Xcode, when you connect interface elements from your storyboard to a Swift file, Xcode will use ! like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;startButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I have to assume Xcode knows what it is doing and the button will be available when needed, but you should not use ! - it is un-safe. By using it, you are vowing to the compiler that when it gets to that point, the optional value will not be nil. There are much better and safer ways of doing that.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;use-if-let&quot;&gt;Use ‘if let’:&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doubleNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;optionalInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;integerValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optionalInteger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// integerValue is not an optional&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// and is guaranteed to contain an Int&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integerValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// no integer found in the optional,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// so return nil to indicate failure&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;use-guard&quot;&gt;Use guard:&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doubleNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;optionalInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;integerValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optionalInteger&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// get out quickly, &lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// returning nil to indicate failure&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// integerValue is not an optional &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// and is guaranteed to contain an Int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integerValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These two alternatives (&lt;code class=&quot;highlighter-rouge&quot;&gt;if let&lt;/code&gt; &amp;amp; &lt;code class=&quot;highlighter-rouge&quot;&gt;guard&lt;/code&gt;) do the same job but in opposite ways. In both cases, they perform a conditional un-wrapping that may or may not give a valid result. &lt;code class=&quot;highlighter-rouge&quot;&gt;if let&lt;/code&gt; checks if it is OK to proceed. &lt;code class=&quot;highlighter-rouge&quot;&gt;guard&lt;/code&gt; checks to see if it is NOT OK to proceed. Which you use is really a matter of personal preference and working out what is more logical in each case.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;guard&lt;/code&gt; statement is really good for checking data early in a process and making a quick exit it something is wrong.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;if let&lt;/code&gt; construct encloses your success code inside a block and can sometimes leave the failure code a long way from the check which can make it less obvious. The other potential issue with &lt;code class=&quot;highlighter-rouge&quot;&gt;if let&lt;/code&gt; is the “pyramid of doom” common in early Swift code as demonstrated in this rather contrived example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isValidAddressBookEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;emailAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;phoneNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;validFirstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;validLastName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;validEmail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailAddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;validPhone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phoneNumber&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Thankfully, Swift 2 allows us to chain both &lt;code class=&quot;highlighter-rouge&quot;&gt;if let&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;guard&lt;/code&gt; statements. Here is the previous example re-factored for Swift 2:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isValidAddressBookEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;emailAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;phoneNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;validFirstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;validLastName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;validEmail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;validPhone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phoneNumber&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;use-optional-chaining&quot;&gt;Use optional chaining:&lt;/h4&gt;

&lt;p&gt;The final way to deal with optionals safely is to use optional chaining:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SocialMediaAccounts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;facebook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;twitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;socialMedia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SocialMediaAccounts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;socialMedia&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SocialMediaAccounts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;twitterAccount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;socialMedia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;facebook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;twitterAccount&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;twitterHandle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socialMedia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;twitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this example, we have defined a &lt;code class=&quot;highlighter-rouge&quot;&gt;SocialMediaAccounts&lt;/code&gt; struct that holds optional &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt; structs for the various social media outlets. The &lt;code class=&quot;highlighter-rouge&quot;&gt;socialMedia&lt;/code&gt; variable is defined as an optional and then created. A &lt;code class=&quot;highlighter-rouge&quot;&gt;twitterAccount&lt;/code&gt; variable of type &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt; is also created but contains no data at the moment.&lt;/p&gt;

&lt;p&gt;When assigning the &lt;code class=&quot;highlighter-rouge&quot;&gt;twitterAccount&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;socialMedia.twitter&lt;/code&gt; property, a ? is inserted which checks to see that &lt;code class=&quot;highlighter-rouge&quot;&gt;socialMedia&lt;/code&gt; is not nil. If it is nil, then execution of that line stops at the ? and nothing bad will happen.&lt;/p&gt;

&lt;p&gt;In the same way, when trying to read back the twitter handle, we chained together 2 optionals with ?’s. If either &lt;code class=&quot;highlighter-rouge&quot;&gt;socialMedia&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;socialMedia.twitter&lt;/code&gt; is nil, that line will not complete. Again this is perfectly safe and the app will not crash.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;All the examples in this article are available in a &lt;a href=&quot;https://github.com/trozware/optionals&quot;&gt;Swift playground&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Fri, 12 Feb 2016 00:00:00 +1000</pubDate>
        <link>http://troz.net/2016/02/learning-swift-optionals/</link>
        <guid isPermaLink="true">http://troz.net/2016/02/learning-swift-optionals/</guid>
      </item>
    
      <item>
        <title>Quick Score - Tennis</title>
        <description>&lt;p&gt;Quick Score: Tennis is available from the &lt;a href=&quot;https://itunes.apple.com/app/quick-score-tennis/id1065155745&quot;&gt;iTunes App Store&lt;/a&gt; for iPhone and Apple Watch.&lt;/p&gt;

&lt;p&gt;Quick Score: Tennis is an app designed to allow you to score tennis matches quickly and easily on your iPhone or your Apple Watch.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/QST_Watch.png&quot; alt=&quot;Quick Score: Tennis on Apple Watch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When playing in a tennis match, your Apple Watch is the best way to score. Set your watch to resume last activity when raised, and at the end of every point a single tap is all it takes to record whether you won or lost the point. The watch will tell you the score for the current game as well as the score for the previous games and sets. If you enter a point wrong, a force-press allows you to undo the last point, or to end the match.&lt;/p&gt;

&lt;p&gt;Any significant information is displayed: game won or lost, set won or last, match complete, change of ends, tie-breakers.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/QST1.png&quot; alt=&quot;Quick Score: Tennis on iPhone&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If scoring for a match that does not include you, the phone makes a good scoring device although the watch still works just as well. As with the watch, after every point it just takes a single tap to record the result of the point. The scores are displayed and significant information is announced.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The phone app records all matches played so any match can be reviewed later with the result of every game and set displayed. On the phone, the names of the players can be entered, either manually or by choosing from your contacts.  The result can be shared via email or message.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/QST2.png&quot; alt=&quot;Quick Score: Tennis summary&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No ads, no in-app purchases, no features missing - you get the complete app for less than the price of a can of tennis balls.&lt;/p&gt;

&lt;p&gt;If you like this app, please leave a rating or a review at the App Store. If you have a problem or want to suggest a new feature, please &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#115;&amp;#097;&amp;#114;&amp;#097;&amp;#104;&amp;#064;&amp;#116;&amp;#114;&amp;#111;&amp;#122;&amp;#046;&amp;#110;&amp;#101;&amp;#116;&amp;#063;&amp;#115;&amp;#117;&amp;#098;&amp;#106;&amp;#101;&amp;#099;&amp;#116;&amp;#061;&amp;#081;&amp;#117;&amp;#105;&amp;#099;&amp;#107;&amp;#037;&amp;#050;&amp;#048;&amp;#083;&amp;#099;&amp;#111;&amp;#114;&amp;#101;&amp;#037;&amp;#051;&amp;#065;&amp;#037;&amp;#050;&amp;#048;&amp;#084;&amp;#101;&amp;#110;&amp;#110;&amp;#105;&amp;#115;&quot;&gt;contact me directly&lt;/a&gt; so I can respond.&lt;/p&gt;

</description>
        <pubDate>Thu, 11 Feb 2016 00:00:00 +1000</pubDate>
        <link>http://troz.net/quick-score-tennis/</link>
        <guid isPermaLink="true">http://troz.net/quick-score-tennis/</guid>
      </item>
    
      <item>
        <title>Why is Swift so great?</title>
        <description>&lt;p&gt;Firstly, I can give you the technical answer, as published by Apple:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Swift is a new programming language for iOS, OS X, watchOS, and tvOS apps that builds on the best of C and Objective-C, without the constraints of C compatibility. Swift adopts safe programming patterns and adds modern features to make programming easier, more flexible, and more fun. Swift’s clean slate, backed by the mature and much-loved Cocoa and Cocoa Touch frameworks, is an opportunity to reimagine how software development works.&lt;br /&gt;&lt;br /&gt;
Swift has been years in the making. Apple laid the foundation for Swift by advancing our existing compiler, debugger, and framework infrastructure. We simplified memory management with Automatic Reference Counting (ARC). Our framework stack, built on the solid base of Foundation and Cocoa, has been modernized and standardized throughout. Objective-C itself has evolved to support blocks, collection literals, and modules, enabling framework adoption of modern language technologies without disruption. Thanks to this groundwork, we can now introduce a new language for the future of Apple software development.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Excerpt From: Apple Inc. “&lt;a href=&quot;https://itunes.apple.com/book/swift-programming-language/id881256329&quot;&gt;The Swift Programming Language (Swift 2.1)&lt;/a&gt;.”&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;now-i-can-give-you-my-opinion&quot;&gt;Now I can give you my opinion:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Swift makes for code that is easier &amp;amp; faster to write.&lt;/li&gt;
  &lt;li&gt;Swift makes for code that is easier &amp;amp; cleaner to read (much more important than ease of writing).&lt;/li&gt;
  &lt;li&gt;Swift code is safer code.&lt;/li&gt;
  &lt;li&gt;Swift breaks free from the out-dated conventions of C-based languages.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;When Apple announced Swift at WWDC 2105, I was astounded. That such a major event could have been kept completely secret was amazing. Then I watched every video from WWDC 2015 that discussed Swift. Some were beyond me and others I absorbed. Looking back, I can see that the development of Objective-C over the past few years was all aimed at getting to this point, especially with the introduction of ARC and blocks.&lt;/p&gt;

&lt;p&gt;At that time, I was deeply involved in an existing Objective-C project and not able to  do much in Swift. But I went through the introduction at the start of the &lt;a href=&quot;https://itunes.apple.com/book/swift-programming-language/id881256329&quot;&gt;Swift Programming Language&lt;/a&gt; book in iBooks and was able to get some ideas about how the language worked.&lt;/p&gt;

&lt;p&gt;Some months later, I was able to spend time on Swift. As a learning exercise, I converted an existing Objective-C iOS app to Swift. As might be expected, I really just wrote Objective-C code using Swift syntax. It took a lot more learning before I was able to write Swift-y code instead of just translated Objective-C. In future posts of this series, I hope to enable others to cross that divide faster than I did.&lt;/p&gt;

&lt;p&gt;Now when I go back to an Objective-C app, I feel like I am walking a tight-rope. When I use an NSArray, NSSet or NSDictionary, I think “How can I tell what sort of objects are in that array?”. When I use an object, I think “What if that object is nil?”. All of a sudden, code that appeared stable now feels random.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;One of the big things that people have latched onto with Swift is that it allows functional programming. I plan several detailed posts on functional programming in this series. But for now I would just recommend that you not worry about the distinction between procedural &amp;amp; functional programming. Both have their advocates and their detractors. Both have their advantages and disadvantages. Just do what ever works for you and we can worry about this later.&lt;/p&gt;

</description>
        <pubDate>Wed, 10 Feb 2016 00:00:00 +1000</pubDate>
        <link>http://troz.net/2016/02/why-is-swift-so-great/</link>
        <guid isPermaLink="true">http://troz.net/2016/02/why-is-swift-so-great/</guid>
      </item>
    
      <item>
        <title>Icon Builder 3.2 Released</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://itunes.apple.com/app/icon-builder/id552293482&quot;&gt;Icon Builder 3.2&lt;/a&gt; is now available from the Mac App Store.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Icons for Apple Watch apps now have their alpha channel removed.&lt;/li&gt;
  &lt;li&gt;Tidier folder structure for related files (iTunes Artwork files and Read Me).&lt;/li&gt;
  &lt;li&gt;Updated to work with Xcode 7’s Assets.xcassets folders.&lt;/li&gt;
  &lt;li&gt;Creates iPad Pro icons for Xcode 7.2 or later.&lt;/li&gt;
  &lt;li&gt;Fix for Retina Macs creating double-sized images.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 10 Feb 2016 00:00:00 +1000</pubDate>
        <link>http://troz.net/2016/02/icon-builder-32-released/</link>
        <guid isPermaLink="true">http://troz.net/2016/02/icon-builder-32-released/</guid>
      </item>
    
      <item>
        <title>New Twitter account</title>
        <description>&lt;p&gt;I have started a new Twitter account so that I can provide rapid support to users of my apps.
Please contact me &lt;a href=&quot;https://twitter.com/trozware&quot;&gt;@trozware&lt;/a&gt; if you have any questions, suggestions, bug reports or would just like to chat.&lt;/p&gt;

&lt;p&gt;I will also be using this account to promote my new &lt;a href=&quot;/2016/02/learning-swift-an-introduction/&quot;&gt;Learning Swift&lt;/a&gt; series.&lt;/p&gt;

</description>
        <pubDate>Tue, 09 Feb 2016 00:00:00 +1000</pubDate>
        <link>http://troz.net/2016/02/new-twitter-account/</link>
        <guid isPermaLink="true">http://troz.net/2016/02/new-twitter-account/</guid>
      </item>
    
      <item>
        <title>Learning Swift - An Introduction</title>
        <description>&lt;h3 id=&quot;welcome-to-learning-swift&quot;&gt;Welcome to Learning Swift.&lt;/h3&gt;

&lt;p&gt;This is the first post in what I hope will be an extensive series dealing with the Swift language. Here are some of the questions I hope to answer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Should I learn Swift? Why?&lt;/li&gt;
  &lt;li&gt;Why is Swift so great?&lt;/li&gt;
  &lt;li&gt;How should I start learning Swift?&lt;/li&gt;
  &lt;li&gt;I already know Objective-C - how do I convert?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After that, I am planning a series of posts discussing the major differences of Swift from the view point of an Objective-C programmer and the aspects of Swift that I found difficult to grasp. Topics covered will include such things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;optionals&lt;/li&gt;
  &lt;li&gt;closures&lt;/li&gt;
  &lt;li&gt;functional programming&lt;/li&gt;
  &lt;li&gt;protocols&lt;/li&gt;
  &lt;li&gt;generics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am coming from a background of Objective-C, so many of my posts will be dealing with aspects of Swift that are not familiar to Objective-C programmers. I will not assume any Objective-C programming experience, but some features of Swift that are new to me, will be familiar to people accustomed to other languages.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So let’s start by answering the first question:&lt;/p&gt;

&lt;h3 id=&quot;should-i-learn-swift&quot;&gt;Should I learn Swift?&lt;/h3&gt;

&lt;p&gt;If you are writing or planning apps for any Apple platform - YES.&lt;br /&gt;
If not, wait until Swift is available for the platforms you need to support.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;why&quot;&gt;Why?&lt;/h3&gt;

&lt;h4 id=&quot;if-you-are-already-an-ios-or-mac-developer-yes&quot;&gt;If you are already an iOS or Mac developer: YES&lt;/h4&gt;

&lt;p&gt;This is the new language and Apple is very committed to it. Objective-C is not going away any time soon, but Swift is where it is going to end up, so why not make the jump now while the language is still in development? You have to accept that fact that every release of Xcode is going to break your code, but the automatic re-factoring works very well. And by moving to Swift now, you get the chance to influence the direction of a new language. How often does that happen?&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;if-you-are-starting-to-learn-ios-or-mac-development-yes&quot;&gt;If you are starting to learn iOS or Mac development: YES&lt;/h4&gt;

&lt;p&gt;If you have no history with Objective-C, then do not waste your time learning it. There is still a lot of sample code out there in Objective-C, but increasing numbers of tutorial sites are using Swift and converting their existing tutorials to Swift. It will help if you know just enough Objective-C to read it, but you do not need to know enough to write it.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;if-you-do-not-program-for-mac-or-ios-not-yet&quot;&gt;If you do NOT program for Mac or iOS: NOT YET&lt;/h4&gt;

&lt;p&gt;Swift went open source in late 2015. This is a big deal and Apple’s plans for Swift are quite clear. They want Swift to be such a main-stream language that it is used instead of Java for basic computer science courses in universities. This was never going to happen unless the language was open-source and cross-platform. It is now open-source and available for &lt;a href=&quot;https://swift.org/download/#latest-development-snapshots&quot;&gt;Linux as well as Mac/iOS&lt;/a&gt;. While Apple has not yet released any further ports, I think there are more on the way for Raspberry Pi, Arduino and other embedded systems as well as server-side Swift libraries like &lt;a href=&quot;http://perfect.org&quot;&gt;Perfect&lt;/a&gt;. I expect that a version for Windows will not be far behind.&lt;/p&gt;

</description>
        <pubDate>Tue, 09 Feb 2016 00:00:00 +1000</pubDate>
        <link>http://troz.net/2016/02/learning-swift-an-introduction/</link>
        <guid isPermaLink="true">http://troz.net/2016/02/learning-swift-an-introduction/</guid>
      </item>
    
      <item>
        <title>Possible issues with Icon Builder &amp; Watch icons</title>
        <description>&lt;p&gt;It has come to my attention that there are two possible issues with Icon Builder 3.0.1 when using icons created for an Apple Watch app.
Once of them is something I can fix and the other appears to be a bug in Xcode 7.2&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Version 3.2 of Icon Builder is now available in the &lt;a href=&quot;http://itunes.apple.com/app/icon-builder/id552293482&quot;&gt;Mac App Store&lt;/a&gt;. This removes the alpha channel from icons for a watch app.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The first problem is that iTines Connect now requires that the icons for an Apple Watch app include no alpha channel. This is becoming an increasing trend with it first having applied to the large icon file you upload directly to iTunes Connect, then to screen shots. I expect it to extend to iOS app icons soon, but hopefully Mac app icons can continue to include transparency.&lt;/p&gt;

&lt;p&gt;With Apple Watch icons, you are supposed to create a set of square icons and watchOS or iTunesConnect applies the rounding mask. Presumably this is more complicated if the icon contains an alpha channel even if there are no transparent pixels. If your Watch app icons contain an alpha channel, you will see errors like this after uploading your app to iTunes Connect:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Invalid Icon - The watch application ‘AppName.app/Watch/AppName WatchKit App.app’ contains an icon file ‘AppName.app/Watch/AppName WatchKit App.app/AppIcon-Watch24x24@2x.png’ with an alpha channel. Icons should not have an alpha channel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will probably get this error message for every icon size in the Watch app (8 in total).
Until I release a new version of Icon Builder that allows for this this, I suggest you use this &lt;a href=&quot;https://www.cocoacontrols.com/controls/alpha-channel-remover&quot;&gt;Alpha Channel Remover app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In your Xcode project, go to WatchKit App Assets.xcassets, select the AppIcon set, right-click and choose “Show in Finder”. A folder will open containing eight .png files and one .json file. Drag &amp;amp; drop the .png files into the Alpha Channel Remover window and click the “Remove Alpha Channel” button. This will replace all those image files with new versions without alpha channels. To confirm this, select any of the images and press Command-I to get info. In the More Info section, you will see “Alpha channel: No”.&lt;/p&gt;

&lt;p&gt;You can now submit your app again, but that only solves one of the issues.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The other problem is that you will get a warning about the 44x44@2x.png icon file.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Invalid Icon Name - The watch application ‘AppName.app/Watch/AppName WatchKit App.app’ contains an invalid icon file name ‘AppName.app/Watch/AppName WatchKit App.app/AppIcon-Watch44x44@2x.png’. Make sure that icon file names follow the pattern&lt;br /&gt; “&lt;code class=&quot;highlighter-rouge&quot;&gt;*&amp;lt;dimension&amp;gt;@&amp;lt;scale&amp;gt;x.png&lt;/code&gt;” and they match the required dimensions. Please visit https://developer.apple.com/watchkit/ for more information.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see in the error message, the icon name (which is set by Xcode) does conform to the required pattern, and the image is the correct size. This appears to be a &lt;a href=&quot;http://www.openradar.me/23801324&quot;&gt;bug in Xcode 7.2&lt;/a&gt; but does not stop you from submitting your app as it is only a warning and not an error. Presumably this will be fixed in later version of Xcode. I am running Xcode 7.2.1 and still see this warning.&lt;/p&gt;

</description>
        <pubDate>Sat, 06 Feb 2016 00:00:00 +1000</pubDate>
        <link>http://troz.net/2016/02/possible-issues-with-iconbuilder/</link>
        <guid isPermaLink="true">http://troz.net/2016/02/possible-issues-with-iconbuilder/</guid>
      </item>
    
      <item>
        <title>Man Reader 1.5</title>
        <description>&lt;p&gt;Man Reader has been updated to version 1.5 with a major improvement in the way it looks for available man pages.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/manreader/&quot;&gt;Man Reader 1.5&lt;/a&gt; is now available through the &lt;a href=&quot;http://itunes.apple.com/app/man-reader/id522583774?mt=12&quot;&gt;Mac App Store&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;change-log&quot;&gt;Change Log:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Much improved searching for available man pages.&lt;/li&gt;
  &lt;li&gt;Sand-boxed version now works just as well as the non-sand-boxed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main feature of this version is that it solves the previous problems with the App Store version and sand-boxing. This was restricting the number of man pages listed in Man Reader so I had to release a non-sand-boxed version of the app to allow for full functionality.&lt;/p&gt;

&lt;p&gt;However I discovered that although this gave better results, it was still missing a lot of man pages. Version 1.5 now queries the man page files in a completely different way which is listing many more man pages.&lt;/p&gt;

&lt;p&gt;If you previously had downloaded the Man Reader (no SB) version of the app from this site, please revert to the App Store version which you would have needed to have bought in order to use the downloaded app. If you bought the app from Paddle, &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#115;&amp;#097;&amp;#114;&amp;#097;&amp;#104;&amp;#064;&amp;#116;&amp;#114;&amp;#111;&amp;#122;&amp;#046;&amp;#110;&amp;#101;&amp;#116;&amp;#063;&amp;#115;&amp;#117;&amp;#098;&amp;#106;&amp;#101;&amp;#099;&amp;#116;&amp;#061;&amp;#077;&amp;#097;&amp;#110;&amp;#037;&amp;#050;&amp;#048;&amp;#082;&amp;#101;&amp;#097;&amp;#100;&amp;#101;&amp;#114;&amp;#037;&amp;#050;&amp;#048;&amp;#116;&amp;#114;&amp;#097;&amp;#110;&amp;#115;&amp;#102;&amp;#101;&amp;#114;&amp;#037;&amp;#050;&amp;#048;&amp;#116;&amp;#111;&amp;#037;&amp;#050;&amp;#048;&amp;#065;&amp;#112;&amp;#112;&amp;#037;&amp;#050;&amp;#048;&amp;#083;&amp;#116;&amp;#111;&amp;#114;&amp;#101;&quot;&gt;contact me&lt;/a&gt; and I will transfer you to the App Store version. Neither of these other versions will be supported or updated any more.&lt;/p&gt;

</description>
        <pubDate>Sun, 31 Jan 2016 00:00:00 +1000</pubDate>
        <link>http://troz.net/2016/01/man-reader-1.5/</link>
        <guid isPermaLink="true">http://troz.net/2016/01/man-reader-1.5/</guid>
      </item>
    
      <item>
        <title>Using 19th Hole on the Apple Watch</title>
        <description>&lt;p&gt;19th Hole for iPhone and Apple Watch version 3 is now available through the &lt;a href=&quot;https://itunes.apple.com/us/app/the-19th-hole/id871686159?mt=8&amp;amp;uo=4&quot;&gt;iTunes App Store&lt;/a&gt;.
This version is a complete re-write to accommodate the changes in iOS 9 and watchOS2.&lt;/p&gt;

&lt;p&gt;The major changes are to do with the way the iPhone and the Watch communicate. In watchOS1, all the brains of the app had to live in the iPhone, meaning that every single interaction on the Watch had to be referred back to the iPhone for processing and the result sent back to the Watch for display. This lead to communications delays and breakdowns which caused third-party apps to work sluggishly or not at all. In watchOS2, the brains of the watch part of the app can now operate inside the watch, greatly reducing the number of communications needed. As well as that, Apple has now provided us with multiple ways of getting data to and from the Watch which again improves performance and reliability.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;With the 19th Hole, I made the decision to change the method of inputting scores. The previous version used a slider with plus and minus buttons to adjust scores. The problems with this were the small target area of the plus &amp;amp; minus buttons as well as the fact that a slider with more than about 3 divisions was not useful as a visual indicator.&lt;/p&gt;

&lt;p&gt;When watchOS2 allowed developers access to the digital crown, I decided to switch to using that instead. Now you tap the score box of the player you wish to adjust and use the digital crown to select a number. I think this will be easier to use while wearing a glove and hope that it is still easy to read out doors.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The other suggestion is not to do with watchOS2 but is a general tip for using apps of this kind. By default, the Apple Watch will always show the watch face when you raise your wrist. Normally this is the most useful thing, but when scoring a round of golf, it would be easier if The 19th Hole app stayed at the front. To make this happen, you need to set to watch to show the last used app instead of the watch face. This can be set using the Apple Watch app on the phone or on the watch itself.&lt;/p&gt;

&lt;p&gt;On the phone:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open the Apple Watch app.&lt;/li&gt;
  &lt;li&gt;Select My Watch from the tabs at the bottom.&lt;/li&gt;
  &lt;li&gt;Tap “General” and then scroll down to tap “Wake Screen”.&lt;/li&gt;
  &lt;li&gt;Make sure “Resume Last Activity” is checked.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the watch:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Press the digital crown to see the app icons.&lt;/li&gt;
  &lt;li&gt;Find and tap the Settings icon.&lt;/li&gt;
  &lt;li&gt;Scroll down and tap “General”.&lt;/li&gt;
  &lt;li&gt;Tap “Wake Screen” and scroll down to make sure that “Previous Activity” is checked in the “Resume To” section.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 12 Dec 2015 00:00:00 +1000</pubDate>
        <link>http://troz.net/2015/12/using-19th-hole-on-the-apple-watch/</link>
        <guid isPermaLink="true">http://troz.net/2015/12/using-19th-hole-on-the-apple-watch/</guid>
      </item>
    
  </channel>
</rss>
