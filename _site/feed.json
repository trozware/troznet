{
    "version": "https://jsonfeed.org/version/1",
    "title": "TrozWare",
    "description": "macOS, iOS and watchOS Developer",
    "home_page_url": "http://troz.net/",
    "feed_url": "http://troz.net/feed.json",
    "icon": "http://troz.net/icons/apple-touch-icon-180x180.png",
    "favicon": "http://troz.net/icons/favicon-96x96.png",
    "expired": false,
    "author": {
        "name": "Sarah Reichelt"
    },
    "items": [

        {
            "id": "/2017/05/json-feed-for-trozware",
            "title": "JSON Feed for TrozWare",
            "content_html": "<p><a href=\"https://jsonfeed.org/2017/05/17/announcing_json_feed\">jsonfeed.org</a> has announced a new format for web site feeds, designed as an alternative to RSS. TrozWare has had an XML RSS feed for years, but I don’t think anyone ever uses it (I certainly don’t), so today I have replaced it with a JSON feed, which you can access through the <a class=\"fa fa-rss\" href=\"/feed.json\"></a> button at the top of every page.</p>\n\n<p>I am sure many JSON Feed viewers will appear soon, but the only one I know about so far is at <a href=\"http://json-feed-viewer.herokuapp.com\">http://json-feed-viewer.herokuapp.com</a>. As soon as this update to my site goes live, I will apply to have TrozWare added to the list of sites on this page. Meanwhile, you can paste in the URL: <code class=\"highlighter-rouge\">http://troz.net/feed.json</code>.</p>\n\n<p>This site is constructed using Jekyll, so I am very grateful to Niclas Darville for his very easy to follow <a href=\"https://ndarville.com/blog/2017/05/19/json-feed-for-jekyll/\">guide</a>. However it is still well worth reading through the <a href=\"https://jsonfeed.org/version/1\">official specs</a> to see what else you want to add, or if you want to remove anything. I had to tweak a few settings to make it work for my configuration, and I added some more objects, but Niclas got me off to a flying start.</p>\n\n<p>Two things to watch out for:</p>\n\n<ol>\n  <li>Make sure your feed is producing valid JSON (I had an extra comma that was breaking it…).</li>\n  <li>As third-party apps &amp; sites may be displaying your content, you need to make sure that you are not using relative URLs for images and internal links. I was using relative image URLs like <code class=\"highlighter-rouge\">/images/WorkHelp1.png</code> but that showed a broken link in the feed viewer, so I have changed all such links to <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">{</span><span class=\"w\"> </span><span class=\"err\">site.url</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"err\">}/images/WorkHelp</span><span class=\"mi\">1</span><span class=\"err\">.png</span></code>. Hopefully that will work correctly on my local test server as well as when published.\n<br /><br /></li>\n</ol>\n\n<p><img src=\"https://jsonfeed.org/graphics/icon.png\" alt=\"JSON Feed icon\" /></p>\n\n<p>JSON Feed offers a nice icon which I would have liked to use, but I could not work out a way to make it play nicely with the existing icons on my pages which all use <a href=\"http://fontawesome.io\">Font Awesome</a> icons. So I ended up just using the existing Feed icon. Hopefully Font Awesome will soon add a JSON Feed icon to their already impressive list.</p>\n\n<p>If anyone still wants to use the <a href=\"http://troz.net/feed.xml\">RSS feed</a>, it is no longer linked to the buttons at the top of the pages, but you can access it manually.</p>\n\n",
            "url": "http://troz.net/2017/05/json-feed-for-trozware/",
            "summary": "<p><a href=\"https://jsonfeed.org/2017/05/17/announcing_json_feed\">jsonfeed.org</a> has announced a new format for web site feeds, designed as an alternative to RSS. TrozWare has had an XML RSS feed for years, but I don’t think anyone ever uses it (I certainly don’t), so today I have replaced it with a JSON feed, which you can access through the <a class=\"fa fa-rss\" href=\"/feed.json\"></a> button at the top of every page.</p>\n",
            "date_published": "2017-05-20 00:00:00 +1000",
            "tags": ["json", "rss", "trozware"]
        },

        {
            "id": "/2017/03/blackmail-marketing",
            "title": "Blackmail Marketing",
            "content_html": "<p>I use my iPad to play games as a form of  relaxation. Nearly all the games I play are puzzle apps with levels that can be played in a few minutes. Nearly all of them are free to install. So how do they make money?</p>\n\n<p>Now I would be the last person you should consult about marketing but it has always seemed to me that the best way to market your product is to convince people that it offers something they want so that they are prepared to pay for it.</p>\n\n<p>This is not the currently favored approach for mobile apps - at least certainly not for games. No, the theory at the moment is to cause so much frustration and annoyance that people give you money to make it stop. Blackmail marketing.</p>\n\n<p>A frequently used method is showing ads, sometimes just banner ads but more often full screen video ads that run for up to 30 seconds. If you interrupt the ad, you don’t get the reward.</p>\n\n<ul>\n  <li>Every goal reached triggers an ad.</li>\n  <li>Quitting and resuming the app triggers an ad.</li>\n  <li>Wanting to play another level triggers an ad.</li>\n</ul>\n\n<p>The theory is that you get so annoyed with this that you pay money to disable the ads.</p>\n\n<p>The other common tactic is the delay. A tower defence game needs you to build a tower? OK, that will take 12 hours real time and you can’t proceed until it’s finished. Or you can spend 12 gems which are sold as an in-app purchase. Maybe you can only play 3 levels and then you need to recharge: again, pay up or wait. You keep dying on that level? You’re out of lives. Pay up or wait until tomorrow. These delays are completely artificial. They have nothing to do with game play but are solely designed to infuriate you enough to get you to pay.</p>\n\n<p>So when, and perhaps more importantly why, did mobile app marketing become so negative? What happened to making your customers happy? Do unhappy customers spend more?</p>\n\n<p>Financially, it appears that irritating your users is a successful strategy. Nearly all the top grossing games in the App Store are “free to play” in that the initial download costs nothing. But these big studios are raking in enormous sums of money, so many people are persuaded to spend significant money by these infuriating schemes.</p>\n\n<p>A large part of this must be due to the various App Stores driving prices to the bottom. Gone are the days when the price of a mobile app was other than risible. So app developers have four choices:</p>\n\n<ol>\n  <li>Do it as a hobby or learning exercise.</li>\n  <li>Distribute apps as a form of self–promotion for other work.</li>\n  <li>Work for someone who pays you a real wage to develop apps.</li>\n  <li>Join the blackmailers.</li>\n</ol>\n\n<p>So how does this relate to indy developers like me? I care about my users and want them to be happy.</p>\n\n<p>I have tried several different approaches to app distribution:</p>\n\n<ul>\n  <li>\n    <p>Totally free gets by far the most downloads but is economically ridiculous unless the app adds value to your business in some other way.</p>\n  </li>\n  <li>\n    <p>A tip jar gets you nothing.</p>\n  </li>\n  <li>\n    <p>In-app purchases (in my limited experience) make less than selling the app up-front for a small price.</p>\n  </li>\n  <li>\n    <p>Banner ads with no method of forcing people to watch them generate almost no revenue.</p>\n  </li>\n</ul>\n\n<p>So that leaves me with where I am today - selling apps for a few dollars and nothing more. Happily, I have found that Mac users are more prepared to pay a few dollars for an app, so I have shut down many of my iOS apps and am concentrating on the Mac app market.</p>\n\n<p>Am I letting my principles stand in the way of mobile app profits? Should I just join the gang and start blackmailing my customers? If so, what form should this take?</p>\n\n<p>At the moment, I am considering banner ads on the screen with an in-app purchase to disable them entirely. I read a suggestion for a less invasive method of doing this by creating your own ads for your other apps. This might be what I end up doing.</p>\n\n<p>I would welcome any suggestions, advice or comments. Please join the discussion below or contact me using one of the links at the top of the page.</p>\n",
            "url": "http://troz.net/2017/03/blackmail-marketing/",
            "summary": "<p>I use my iPad to play games as a form of  relaxation. Nearly all the games I play are puzzle apps with levels that can be played in a few minutes. Nearly all of them are free to install. So how do they make money?</p>\n",
            "date_published": "2017-03-08 00:00:00 +1000",
            "tags": ["app store"]
        },

        {
            "id": "/ncss-2017",
            "title": "NCSS 2017",
            "content_html": "<ul>\n  <li><a href=\"https://swiftlang.ng.bluemix.net/#/repl\">IBM Swift Sandbox</a></li>\n</ul>\n\n<hr />\n\n<h3 id=\"sandbox-code-samples\">Sandbox Code Samples</h3>\n\n<ul>\n  <li>\n    <p><a href=\"http://swiftlang.ng.bluemix.net/#/repl/58670662da20a814737c3562\">Strings</a></p>\n  </li>\n  <li>\n    <p><a href=\"http://swiftlang.ng.bluemix.net/#/repl/5868463fb5619f13e0a940af\">Optionals</a></p>\n  </li>\n  <li>\n    <p><a href=\"http://swiftlang.ng.bluemix.net/#/repl/5868954cb5619f13e0a940bd\">Functions</a></p>\n  </li>\n  <li>\n    <p><a href=\"http://swiftlang.ng.bluemix.net/#/repl/5866f31fda20a814737c353b\">Closures</a></p>\n  </li>\n  <li>\n    <p><a href=\"http://swiftlang.ng.bluemix.net/#/repl/5866f48bda20a814737c353c\">Objects</a></p>\n  </li>\n  <li>\n    <p><a href=\"http://swiftlang.ng.bluemix.net/#/repl/5866ed80da20a814737c3538\">Protocols</a></p>\n  </li>\n  <li>\n    <p><a href=\"http://swiftlang.ng.bluemix.net/#/repl/5866fc4dda20a814737c3557\">Generics</a></p>\n  </li>\n</ul>\n\n<hr />\n\n<h3 id=\"contact-details\">Contact Details:</h3>\n\n<ul>\n  <li>\n    <p>Email: <a href=\"mailto:sarah@troz.net?subject=NCSS%202017\">sarah@troz.net</a></p>\n  </li>\n  <li>\n    <p>Twitter: <a href=\"https://twitter.com/trozware\">@trozware</a></p>\n  </li>\n  <li>\n    <p>Slides: <a href=\"https://www.dropbox.com/s/09r19my3d6jk5jt/NCSS%202017%20Swift%20MC.pdf?dl=0\">NCSS 2017 Swift MC.pdf</a></p>\n  </li>\n</ul>\n\n<hr />\n\n<h3 id=\"useful-links\">Useful Links:</h3>\n\n<ul>\n  <li>\n    <p><a href=\"https://itunes.apple.com/au/book/swift-programming-language/id881256329?mt=11\">The Swift Programming Language</a></p>\n  </li>\n  <li>\n    <p><a href=\"https://swift.org\">Swift.org</a></p>\n  </li>\n  <li>\n    <p><a href=\"https://www.raywenderlich.com/132258/top-5-ios-swift-newsletters\">Newsletters</a></p>\n  </li>\n  <li>\n    <p><a href=\"https://www.raywenderlich.com\">Tutorials</a></p>\n  </li>\n</ul>\n",
            "url": "http://troz.net/ncss2017/",
            "summary": "<ul>\n  <li><a href=\"https://swiftlang.ng.bluemix.net/#/repl\">IBM Swift Sandbox</a></li>\n</ul>\n",
            "date_published": "2017-01-06 00:00:00 +1000",
            "tags": ["ncss", "swift"]
        },

        {
            "id": "/2016/11/looking-for-beta-testers",
            "title": "Looking for beta testers",
            "content_html": "<p>I am looking for beta testers for my latest Mac app: <strong><a href=\"http://troz.net/work/\">Work</a></strong>.</p>\n\n<p><strong>Work</strong> is a project organizer app for developers, designers, students or any professional who works with multiple projects involving files &amp; folders, web pages, email addresses and lists of tasks. Click the link above for more information and help for getting started.</p>\n\n<p><strong>Work</strong> requires macOS 10.12 or OS X 10.11.</p>\n\n<hr />\n\n<p>If you would like to test this app, please <a href=\"mailto:work@troz.net?subject=Work%20beta%20test\">contact me</a>, giving details of your Mac and operating system. The easiest way to do this is to select <strong>About This Mac</strong> in the Apple menu and send me a screen shot of the window that appears.</p>\n\n<p>All beta testers will receive a free license to Work when it is released.\nIf you report a legitimate bug or provide valuable feed-back, you will also receive a free license to your choice of one of my <a href=\"http://troz.net/applications/\">other apps</a>.</p>\n\n",
            "url": "http://troz.net/2016/11/looking-for-beta-testers/",
            "summary": "<p>I am looking for beta testers for my latest Mac app: <strong><a href=\"http://troz.net/work/\">Work</a></strong>.</p>\n",
            "date_published": "2016-11-17 00:00:00 +1000",
            "tags": ["beta", "mac", "productivity", "work"]
        },

        {
            "id": "/work",
            "title": "Work",
            "content_html": "<p><strong>Work</strong> is a project organizer app for developers, designers, students or any professional who works with multiple projects involving files &amp; folders, web pages, email addresses and lists of tasks.</p>\n\n<p><strong>Work</strong> requires macOS 10.12 or OS X 10.11 and will be available from the Mac App Store soon.</p>\n\n<hr />\n\n<p>We all know what it is like to be in the middle of a project or rushing to complete an assignment…</p>\n\n<p>We have files scattered all over the place, email addresses of team members or clients, web pages with specifications or useful information, tasks scribbled on sticky notes or scraps of paper.</p>\n\n<p>Wouldn’t it be better if there was one place where you could have quick and easy access to all these items, but without having to change the way you work? With the <strong>Work</strong> app, you can regain control - the app helps you get to what you want so you save time.</p>\n\n<hr />\n\n<p>Here is the project document you will see when you select <strong>Work Help</strong> from the <strong>Help</strong> menu:</p>\n\n<p><img src=\"http://troz.net/images/WorkHelp1.png\" alt=\"Work\" /></p>\n\n<p>It gathers together some useful links to information about <strong>Work</strong> and my other apps or to allow you to contact me. In <strong>Work</strong> documents for my apps, I assemble the project files I need to open, images, web page addresses etc. My most frequently used links are starred so I can focus on them whenever I want a shorter list.</p>\n\n<p>Drag files or folders into the window to link them to your <strong>Work</strong> document. Copy a web address or email address and use <strong>Add Web/Email</strong> to quickly create a new link entry with the copied address.</p>\n\n<p>Switching to <strong>Tasks</strong> mode allows you to focus on your tasks list. Tasks can be grouped, re-ordered and marked as complete. Use the <strong>View</strong> menu to hide completed tasks if you want a more compact list. Use the <strong>Edit</strong> menu or the toolbar buttons to edit groups - this allows you to create your own custom groupings.</p>\n\n<p><img src=\"http://troz.net/images/WorkHelp2.png\" alt=\"Work - Tasks\" /></p>\n\n<hr />\n\n<p><strong>Work</strong> doesn’t move or rename any of your files - it merely links all these things together for fast, convenient and searchable access. It even tracks files or folders if you move them later.</p>\n\n<p>Make a <strong>Work</strong> document for every project, drag in the relevant files or folders, add web page addresses and email addresses, make your own task lists.</p>\n\n<p>Create groups to gather items together, adjust the display to view only the entries you want, use quick look to get a fast glimpse of files or web pages.</p>\n\n<p>Work also supports the Touch Bar on the new MacBook Pros:</p>\n\n<p><img src=\"http://troz.net/images/Work_TB.png\" alt=\"Work - TouchBar\" /></p>\n\n<hr />\n\n<p>Select <strong>Work Help</strong> from the <strong>Help</strong> menu to see the special <strong>Work</strong> document pictured above. Use the links to keep in touch and step through the sequence of tasks to learn the basics of using the app.</p>\n\n",
            "url": "http://troz.net/work/",
            "summary": "<p><strong>Work</strong> is a project organizer app for developers, designers, students or any professional who works with multiple projects involving files &amp; folders, web pages, email addresses and lists of tasks.</p>\n",
            "date_published": "2016-11-16 00:00:00 +1000",
            "tags": ["mac", "productivity", "work"]
        },

        {
            "id": "/2016/11/another-man-reader-update",
            "title": "Another Man Reader Update…",
            "content_html": "<p>A quick update to <a href=\"http://troz.net/manreader/\">Man Reader</a> to version 1.8 is now available through the <a href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\">Mac App Store</a>.</p>\n\n<p>The main reason for this version was that Man Reader was not previously detecting man pages installed by third-party IDEs in the Applications folder. There was also an issue with Man Reader failing to display the text of the previously selected man page on app launch.</p>\n\n<ul>\n  <li>More complete search for man pages, including in third-party IDEs.</li>\n  <li>Fix for glitch when displaying previously selected page on launch.</li>\n</ul>\n\n",
            "url": "http://troz.net/2016/11/another-man-reader-update/",
            "summary": "<p>A quick update to <a href=\"http://troz.net/manreader/\">Man Reader</a> to version 1.8 is now available through the <a href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\">Mac App Store</a>.</p>\n",
            "date_published": "2016-11-05 00:00:00 +1000",
            "tags": ["mac", "man reader"]
        },

        {
            "id": "/2016/10/man-reader-update",
            "title": "Man Reader Update",
            "content_html": "<p><a href=\"http://troz.net/manreader/\">Man Reader</a> has just been updated to version 1.7 and is available through the <a href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\">Mac App Store</a>.</p>\n\n<p>The main reason for this update was to make the app work well with macOS Sierra, as I found that version 1.6 was sometimes crashing on launch. While doing this, the update was rejected by the App Store reviewers because it crashed on OS X 10.10. Since I no longer have a Mac running 10.10, I decided to set the minimum supported system version to OS X 10.11. If you need support for older versions, you should still be able to download version 1.6 which will work back to 10.7.</p>\n\n<p>I also took the opportunity to fix some graphical issues, dealing with different color schemes:</p>\n\n<ul>\n  <li>The man page list now shows alternating colors even when not using the default scheme.</li>\n  <li>When scrolling the man pages past the top or the bottom with a non-white background, you should no longer see white blocks top &amp; bottom.</li>\n</ul>\n\n",
            "url": "http://troz.net/2016/10/man-reader-update/",
            "summary": "<p><a href=\"http://troz.net/manreader/\">Man Reader</a> has just been updated to version 1.7 and is available through the <a href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\">Mac App Store</a>.</p>\n",
            "date_published": "2016-10-12 00:00:00 +1000",
            "tags": ["mac", "man reader"]
        },

        {
            "id": "/2016/10/podcasting",
            "title": "Podcasting",
            "content_html": "<p>I have recently started what I hope will be a weekly podcast with my friend and colleague, <a href=\"https://twitter.com/jerrydaniels\">Jerry Daniels</a>. Each podcast will be about 30 minutes in length.</p>\n\n<p>We will discuss Macs, iPhones, iPads, macOS, iOS, programming and anything tech-related that we find interesting. I hope you will find it entertaining and informative, so please join us.</p>\n\n<p>We are using <a href=\"https://zcast.co/zcasts\">ZCast</a> which has an iPhone app that makes it super easy to get together and record our chats. It doesn’t allow any post-processing, but really lowers the barrier to entry into the world of podcasting.</p>\n\n<p>If you get the <a href=\"https://itunes.apple.com/app/zcast-podcast-from-your-phone!/id1041586670\">ZCast app for iPhone</a>, go to the ZCasters tab and search for “Trozware” or “Jerry Daniels” to find all our podcasts. Or use these links to listen in your browser.</p>\n\n<ul>\n  <li><a href=\"https://zcast.co/j/ZyB8yK4z86\">The new macOS</a></li>\n  <li><a href=\"https://zcast.co/j/ewQe6x6E4d\">Hands-on with iPhone 7</a></li>\n  <li><a href=\"https://zcast.co/j/A9zvLAAEa3\">Hands on iOS 10</a></li>\n</ul>\n\n<p>Since the first one was recorded using my name instead of my <a href=\"https://twitter.com/trozware\">@trozware</a> Twitter account, I will embed it here as it will not show up if you search for “Trozware”.</p>\n\n<iframe src=\"https://zcast.co/embedded/ZyB8yK4z86\" width=\"350\" height=\"500\" style=\"width: 350; height: 500; border: none;\" scrolling=\"auto\"></iframe>\n\n",
            "url": "http://troz.net/2016/10/podcasting/",
            "summary": "<p>I have recently started what I hope will be a weekly podcast with my friend and colleague, <a href=\"https://twitter.com/jerrydaniels\">Jerry Daniels</a>. Each podcast will be about 30 minutes in length.</p>\n",
            "date_published": "2016-10-11 00:00:00 +1000",
            "tags": ["ios", "iphone", "mac"]
        },

        {
            "id": "/2016/09/how-much-work-does-icon-builder-save-you",
            "title": "How much work does Icon Builder save you?",
            "content_html": "<p><a href=\"http://troz.net/icon-builder/\">Icon Builder</a> is a Mac app that takes a single image file and creates all the different image sizes that you need to make a set of icons for your app: Mac, iPhone, iPad, iOS Universal or Apple Watch.</p>\n\n<p>Version 4, released 16 September 2016 is available through the <a href=\"https://itunes.apple.com/app/icon-builder/id552293482\">Mac App Store</a>.</p>\n\n<h3 id=\"whats-new-in-version-4\">What’s New in Version 4:</h3>\n\n<ul>\n  <li>Added support for iMessage apps and Sticker Pack apps.</li>\n  <li>Added support for creating Mac .icns files.</li>\n  <li>Better removal of alpha channel for Apple Watch icons.</li>\n  <li>Clearer usage instructions in ReadMe files.</li>\n  <li>iTunes Artwork folders will no longer be over-written with the latest image files.</li>\n  <li>Supports macOS Sierra and Xcode 8</li>\n</ul>\n\n<p><img src=\"http://troz.net/images/IconBuilder.png\" alt=\"Icon Builder\" /></p>\n\n<p>While working on version 4 and accommodating all these new icon sets (and wishing I had the time to re-write the app in Swift…), I counted up all the icon files that Icon Builder makes for each app type:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">App Type</th>\n      <th style=\"text-align: right\">Number of Icons</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\">Mac</td>\n      <td style=\"text-align: right\">10</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">iPhone</td>\n      <td style=\"text-align: right\">8</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">iPhone supporting pre iOS 7</td>\n      <td style=\"text-align: right\">11</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">iPad</td>\n      <td style=\"text-align: right\">9</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">iPad supporting pre iOS 7</td>\n      <td style=\"text-align: right\">13</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">iOS Universal</td>\n      <td style=\"text-align: right\">14</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">iOS Universal supporting pre iOS 7</td>\n      <td style=\"text-align: right\">20</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">Apple Watch (also requires iOS app icons)</td>\n      <td style=\"text-align: right\">8</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">Sticker Pack app</td>\n      <td style=\"text-align: right\">11</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">iMessages app</td>\n      <td style=\"text-align: right\">14</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">iMessages app Messages extension</td>\n      <td style=\"text-align: right\">9</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>So as you can see, Icon Builder is doing a lot of work for you. It also names all the icon files using the expected format, stores them in an concept folder, creates the JSON file that identifies them all to Xcode and optionally installs them in your Xcode project automatically. That’s a lot of value for dragging in an icon and clicking a button!</p>\n\n<p>So next time your designer sends you the twentieth tweaked icon for the day, don’t get mad. Just drop it into Icon Builder and sit back while it does all the work. (No need to tell the designer that…)</p>\n\n",
            "url": "http://troz.net/2016/09/how-much-work-does-icon-builder-save-you/",
            "summary": "<p><a href=\"http://troz.net/icon-builder/\">Icon Builder</a> is a Mac app that takes a single image file and creates all the different image sizes that you need to make a set of icons for your app: Mac, iPhone, iPad, iOS Universal or Apple Watch.</p>\n",
            "date_published": "2016-09-17 00:00:00 +1000",
            "tags": ["icons", "mac"]
        },

        {
            "id": "/2016/09/dice-pass-updated",
            "title": "Dice Pass Updated",
            "content_html": "<p><a href=\"http://troz.net/dicepass/\">Dice Pass 1.1</a> is now available from the <a href=\"https://itunes.apple.com/app/dice-pass/id997688302\">Mac App Store</a>.</p>\n\n<h3 id=\"what-does-dice-pass-do\">What does Dice Pass do?</h3>\n\n<p>Dice Pass is a utility to app to generate random passphrases based on the <a href=\"http://world.std.com/~reinhold/diceware.html\">Diceware</a> system. Diceware uses a table of pre-defined words, each assigned a 5 digit code number containing the digits 1 to 6. The official way to generate a phrase is to roll 5 dice for each word you want in your passphrase and then consult the words table to find the matching word.</p>\n\n<p>The resulting phrase uses real words or common abbreviations so it is easier to remember than a random collection of characters. At the same time, the random selection of words makes the generated passphrase much more secure as it avoids the human tendency to pick words with personal meaning.</p>\n\n<p>Dice Pass allows you to select the number of words in your passphrase, re-generate the entire passphrase any time, re-roll a single word in your passphrase or set the dice rolls manually for maximum security and randomness.</p>\n\n<h3 id=\"whats-new-in-version-11\">What’s New in Version 1.1:</h3>\n\n<p>You can now select from three word lists in the Word Lists menu:</p>\n\n<ul>\n  <li>original Diceware list</li>\n  <li>Beale list (fewer Americanisms and obscure words)</li>\n  <li>Diceware 8k list (a list of words that is a whole power of two in length)</li>\n</ul>\n\n<p>You can also import your own word list if you prefer.</p>\n\n<p>Dice Pass 1.1 is compatible with macOS Sierra.</p>\n\n",
            "url": "http://troz.net/2016/09/dice-pass-updated/",
            "summary": "<p><a href=\"http://troz.net/dicepass/\">Dice Pass 1.1</a> is now available from the <a href=\"https://itunes.apple.com/app/dice-pass/id997688302\">Mac App Store</a>.</p>\n",
            "date_published": "2016-09-17 00:00:00 +1000",
            "tags": ["dice", "mac", "passwords"]
        },

        {
            "id": "/2016/09/retiring-old-apps",
            "title": "Retiring old apps",
            "content_html": "<p>With the release of iOS 10 and the need to update iOS apps to suit, I have decided it is time to retire some of my lesser-performing apps as it is not worth the effort required to maintain them.</p>\n\n<p>At the moment, the following iOS apps are no longer available:</p>\n\n<ul>\n  <li>A Knight’s Move</li>\n  <li>Dice Pass</li>\n  <li>Pic-a-POD</li>\n  <li>Quick Score - Tennis</li>\n</ul>\n\n<p>For the first three listed there, the Mac versions are still available:</p>\n\n<ul>\n  <li><a href=\"https://itunes.apple.com/app/a-knights-move/id533321133\">A Knight’s Move for Mac</a></li>\n  <li><a href=\"https://itunes.apple.com/app/dice-pass/id997688302\">Dice Pass for Mac</a></li>\n  <li><a href=\"https://itunes.apple.com/app/pic-a-pod/id477909802\">Pic-a-POD for Mac</a></li>\n</ul>\n\n<p>If you bought any of these apps and would like a promo code for the Mac version, send me a screen shot of the app running on your iPhone or iPad and I will send you a code.</p>\n\n",
            "url": "http://troz.net/2016/09/retiring-old-apps/",
            "summary": "<p>With the release of iOS 10 and the need to update iOS apps to suit, I have decided it is time to retire some of my lesser-performing apps as it is not worth the effort required to maintain them.</p>\n",
            "date_published": "2016-09-15 00:00:00 +1000",
            "tags": ["app store", "apps", "ios"]
        },

        {
            "id": "/2016/07/man-reader-updated-to-1.6",
            "title": "Man Reader updated to 1.6",
            "content_html": "<p>Man Reader has been updated to version 1.6 with the permissions needed for finding all available man pages and a fix for search terms being over-written after a background update.</p>\n\n<p><a href=\"http://troz.net/manreader/\">Man Reader 1.6</a> is now available through the <a href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\">Mac App Store</a>.</p>\n\n<h4 id=\"change-log\">Change Log:</h4>\n\n<ul>\n  <li>Permissions fix when searching for available man pages.</li>\n  <li>Fixed error with new search term being over-written.</li>\n  <li>Sand-boxed version now works just as well as the non-sand-boxed so please switch back to this version.</li>\n</ul>\n\n<p>This version fixes a problem with sand-boxing permissions potentially not allowing access to all the installed man pages on your system. This should now be fixed but if you discover any man pages that are available through Terminal but not through Man Read, please <a href=\"mailto:sarah@troz.net?subject=Man%20Reader%20not%20detecting%20some%20man%20pages\">email me the details</a> and help me make Man Reader better.</p>\n\n<p>There was also an issue with a previous search being restored after a background update, even if a new search term had been entered. This has been fixed.</p>\n\n<p>If you previously had downloaded the Man Reader (no SB) version of the app from this site, please revert to the App Store version which you would have needed to have bought in order to use the downloaded app. If you bought the app from Paddle, <a href=\"mailto:sarah@troz.net?subject=Man%20Reader%20transfer%20to%20App%20Store\">contact me</a> and I will transfer you to the App Store version. Neither of these other versions will be supported or updated any more.</p>\n\n",
            "url": "http://troz.net/2016/07/man-reader-updated-to-1.6/",
            "summary": "<p>Man Reader has been updated to version 1.6 with the permissions needed for finding all available man pages and a fix for search terms being over-written after a background update.</p>\n",
            "date_published": "2016-07-16 00:00:00 +1000",
            "tags": ["mac", "man reader"]
        },

        {
            "id": "/2016/07/dice-pass-mac-update",
            "title": "Dice Pass Mac Update",
            "content_html": "<p>I recently got an email from someone who had purchased <a href=\"http://troz.net/dicepass/\">Dice Pass</a> for Mac from the <a href=\"https://itunes.apple.com/app/dice-pass/id997688302\">Mac App Store</a> but had been unable to get it to run. This person was using OS X 10.9.3.</p>\n\n<p>I checked the App Store specifications and it showed that 10.9 was the minimum system requirement, so it should have worked. But going back to my Xcode project, I found that it was set to a minimum of OS X 10.10.</p>\n\n<p>I tried to re-compile for OS X 10.9 but this failed as the app uses several features that are not available prior to 10.10.</p>\n\n<p>The minimum system version as displayed in the App Store is supposedly deduced automatically by the App Store servers from the app’s binary. Somehow this was incorrect in the App Store, so some people may have bought that app and found that it did not work despite them having what was listed as a compatible system.</p>\n\n<p>If you bought Dice Pass for OS X 10.9 and are unable to run it, I have two possible solutions for you:</p>\n\n<ol>\n  <li>Upgrade your operating system to at least 10.10.</li>\n  <li>Ask Apple for a refund since it was their error that caused you to buy an app that you cannot run.</li>\n</ol>\n\n<p>I have updated the app in the App Store changing nothing but the version number and it is now showing the correct minimum system requirement. My apologies if you have been inconvenienced by this error.</p>\n\n",
            "url": "http://troz.net/2016/07/dice-pass-mac-update/",
            "summary": "<p>I recently got an email from someone who had purchased <a href=\"http://troz.net/dicepass/\">Dice Pass</a> for Mac from the <a href=\"https://itunes.apple.com/app/dice-pass/id997688302\">Mac App Store</a> but had been unable to get it to run. This person was using OS X 10.9.3.</p>\n",
            "date_published": "2016-07-03 00:00:00 +1000",
            "tags": ["app store", "dice", "mac", "password"]
        },

        {
            "id": "/2016/05/learning-swift-sets",
            "title": "Learning Swift - Sets",
            "content_html": "<p>Sets are the forgotten collection type in many languages, including Swift. I think most developers use Arrays without really considering the advantages of using a Set but they have some amazingly useful features that should make them a part of any progammer’s toolkit.</p>\n\n<p>If you want to follow along with a playground, you can download it <a href=\"https://github.com/trozware/sets\">here</a>.</p>\n\n<h3 id=\"what-is-a-set\">What is a Set?</h3>\n\n<p><strong>A Set is an un-ordered collection of unique items.</strong> That’s it - nothing more than that. So it is very similar to an Array, but it is not indexed like an Array and it cannot contain more than one of each entry.</p>\n\n<h3 id=\"creating-a-set\">Creating a Set:</h3>\n\n<p>Creating a Set is as easy as creating an Array:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">var</span> <span class=\"nv\">myArray</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"dog\"</span><span class=\"p\">,</span> <span class=\"s\">\"cat\"</span><span class=\"p\">,</span> <span class=\"s\">\"hamster\"</span><span class=\"p\">,</span> <span class=\"s\">\"dog\"</span><span class=\"p\">]</span>\n<span class=\"k\">var</span> <span class=\"nv\">mySet</span><span class=\"p\">:</span> <span class=\"kt\">Set</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"dog\"</span><span class=\"p\">,</span> <span class=\"s\">\"cat\"</span><span class=\"p\">,</span> <span class=\"s\">\"hamster\"</span><span class=\"p\">,</span> <span class=\"s\">\"dog\"</span><span class=\"p\">]</span></code></pre></figure>\n\n<p>If you are running these commands in a playground, notice that the differences between the 2 results:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"p\">[</span><span class=\"s\">\"dog\"</span><span class=\"p\">,</span> <span class=\"s\">\"cat\"</span><span class=\"p\">,</span> <span class=\"s\">\"hamster\"</span><span class=\"p\">,</span> <span class=\"s\">\"dog\"</span><span class=\"p\">]</span>\t<span class=\"c1\">// myArray</span>\n<span class=\"p\">{</span><span class=\"s\">\"hamster\"</span><span class=\"p\">,</span> <span class=\"s\">\"cat\"</span><span class=\"p\">,</span> <span class=\"s\">\"dog\"</span><span class=\"p\">}</span>\t\t<span class=\"c1\">// mySet</span></code></pre></figure>\n\n<ol>\n  <li>The Array is shown wrapped in square brackets, the Set is shown wrapped in curly braces. This is just a visual clue and doesn’t really mean anything. You cannot initialize a set using curly braces.</li>\n  <li>All the supplied elements of the Array are listed, but the Set has removed the duplicate “dog” element. This did not cause an error or warning, it just happened quietly.</li>\n</ol>\n\n<p>When initializing a Set, you must add <code class=\"highlighter-rouge\">: Set</code> to distinguish it from an array initialization. In the example above, I did not specify the data type of the elements in the Set as the Swift compiler was able to infer this from the contents. But if initializing an empty array, the data type must be specified. To check how to do this, I option-clicked on <code class=\"highlighter-rouge\">mySet</code> to see what the Swift compiler thought it was.</p>\n\n<p><img src=\"http://troz.net/images/set_types.png\" alt=\"\" /></p>\n\n<p>So mySet is actually <code class=\"highlighter-rouge\">Set&lt;String&gt;</code>. This means that to create an empty Set, you need to use something like this:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">var</span> <span class=\"nv\">emptySetOfStrings</span><span class=\"p\">:</span> <span class=\"kt\">Set</span><span class=\"o\">&lt;</span><span class=\"kt\">String</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">var</span> <span class=\"nv\">emptySetOfInts</span><span class=\"p\">:</span> <span class=\"kt\">Set</span><span class=\"o\">&lt;</span><span class=\"kt\">Int</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></code></pre></figure>\n\n<h3 id=\"adding-and-removing-elements\">Adding and removing elements:</h3>\n\n<p>If you have been using an Array to store unique values, then you have probably written code like this:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">if</span> <span class=\"o\">!</span><span class=\"n\">myArray</span><span class=\"o\">.</span><span class=\"nf\">contains</span><span class=\"p\">(</span><span class=\"s\">\"cat\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"n\">myArray</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"s\">\"cat\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>With Sets, you don’t have to care. Just use <code class=\"highlighter-rouge\">insert()</code> and let the Set work out whether to add the item or not.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"n\">mySet</span><span class=\"o\">.</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"s\">\"goldfish\"</span><span class=\"p\">)</span>  \n<span class=\"c1\">// goldfish added: {\"hamster\", \"cat\", \"dog\", \"goldfish\"}</span>\n<span class=\"n\">mySet</span><span class=\"o\">.</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"s\">\"dog\"</span><span class=\"p\">)</span>       \n<span class=\"c1\">// dog already there: {\"hamster\", \"cat\", \"dog\", \"goldfish\"}</span></code></pre></figure>\n\n<p>Removing elements is also easier than in Arrays. For an Array, you first have to find the index of the element and remove it by index:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"c1\">// myArray.remove(\"hamster\") // will not compile</span>\n<span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">index</span> <span class=\"o\">=</span> <span class=\"n\">myArray</span><span class=\"o\">.</span><span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"nv\">of</span><span class=\"p\">:</span> <span class=\"s\">\"hamster\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"n\">myArray</span><span class=\"o\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"nv\">at</span><span class=\"p\">:</span> <span class=\"n\">index</span><span class=\"p\">)</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>But in a Set, you can remove any element easily and trying to remove an element that doesn’t exist will fail without an error.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"n\">mySet</span><span class=\"o\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"s\">\"hamster\"</span><span class=\"p\">)</span>\t\t<span class=\"c1\">// returns \"hamster\"</span>\n<span class=\"n\">mySet</span><span class=\"o\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"s\">\"canary\"</span><span class=\"p\">)</span>\t\t<span class=\"c1\">// returns nil</span></code></pre></figure>\n\n<h3 id=\"converting-between-sets-and-arrays\">Converting between Sets and Arrays:</h3>\n\n<p>Sometimes you need to be able to switch between the two. My most recent example was when I wanted to store data from a Set in a plist. Sets are not property list types but Arrays are, so I converted the Set to an Array before storing it in the plist. When reading the data in from the plist, I converted it back to a Set.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">let</span> <span class=\"nv\">myArrayAsSet</span> <span class=\"o\">=</span> <span class=\"kt\">Set</span><span class=\"p\">(</span><span class=\"n\">myArray</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">mySetAsArray</span> <span class=\"o\">=</span> <span class=\"kt\">Array</span><span class=\"p\">(</span><span class=\"n\">mySet</span><span class=\"p\">)</span></code></pre></figure>\n\n<p>One useful side-effect of these easy conversions is the ability to ‘unique’ an Array in a single line. This may be inefficient for large arrays, but works very well for small ones. Just be careful if the order of the elements is important as you cannot guarantee the order of elements in a Set.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">let</span> <span class=\"nv\">myArrayUniqued</span> <span class=\"o\">=</span> <span class=\"kt\">Array</span><span class=\"p\">(</span><span class=\"kt\">Set</span><span class=\"p\">(</span><span class=\"n\">myArray</span><span class=\"p\">))</span>\n<span class=\"c1\">// [\"cat\", \"dog\"]</span></code></pre></figure>\n\n<h3 id=\"iterating-over-elements-in-a-set\">Iterating over elements in a Set:</h3>\n\n<p>As with an Array, you can use a <code class=\"highlighter-rouge\">for element in set</code> structure, or you can use <code class=\"highlighter-rouge\">enumerated()</code>. But you cannot subscript a Set.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">for</span> <span class=\"n\">animal</span> <span class=\"k\">in</span> <span class=\"n\">mySet</span> <span class=\"p\">{</span>\n   <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">animal</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">animal</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">mySet</span><span class=\"o\">.</span><span class=\"nf\">enumerated</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\(</span><span class=\"n\">index</span><span class=\"se\">)</span><span class=\"s\"> = </span><span class=\"se\">\\(</span><span class=\"n\">animal</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// will not compile</span>\n<span class=\"c1\">//for index in 0 ..&lt; mySet.count {</span>\n<span class=\"c1\">//   print(\"\\(index) = \\(mySet[index])\")</span>\n<span class=\"c1\">//}</span></code></pre></figure>\n\n<hr />\n\n<h2 id=\"where-sets-get-really-interesting\">Where Sets get really interesting:</h2>\n\n<p>Remember in school when you learnt about Venn diagrams with pretty interlocking circles? Sets can do the same things, although you will have to do your own pretty drawings :-)</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">let</span> <span class=\"nv\">set1</span><span class=\"p\">:</span> <span class=\"kt\">Set</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"dog\"</span><span class=\"p\">,</span> <span class=\"s\">\"cat\"</span><span class=\"p\">,</span> <span class=\"s\">\"pig\"</span><span class=\"p\">]</span>\n<span class=\"k\">let</span> <span class=\"nv\">set2</span><span class=\"p\">:</span> <span class=\"kt\">Set</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"cow\"</span><span class=\"p\">,</span> <span class=\"s\">\"horse\"</span><span class=\"p\">,</span> <span class=\"s\">\"pig\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">intersect</span> <span class=\"o\">=</span> <span class=\"n\">set1</span><span class=\"o\">.</span><span class=\"nf\">intersection</span><span class=\"p\">(</span><span class=\"n\">set2</span><span class=\"p\">)</span>\n<span class=\"c1\">// {\"pig\"}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">subtract</span> <span class=\"o\">=</span> <span class=\"n\">set1</span><span class=\"o\">.</span><span class=\"nf\">subtracting</span><span class=\"p\">(</span><span class=\"n\">set2</span><span class=\"p\">)</span>\n<span class=\"c1\">// {\"cat\", \"dog\"}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">union</span> <span class=\"o\">=</span> <span class=\"n\">set1</span><span class=\"o\">.</span><span class=\"nf\">union</span><span class=\"p\">(</span><span class=\"n\">set2</span><span class=\"p\">)</span>\n<span class=\"c1\">// {\"pig\", \"cat\", \"dog\", \"cow\" \"horse\"}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">xor</span> <span class=\"o\">=</span> <span class=\"n\">set1</span><span class=\"o\">.</span><span class=\"nf\">symmetricDifference</span><span class=\"p\">(</span><span class=\"n\">set2</span><span class=\"p\">)</span>\n<span class=\"c1\">// {\"cat\", \"dog\", \"cow\", \"horse\"}</span></code></pre></figure>\n\n<p>In the code example above, we have two Sets  of animals, with one animal in common.</p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">intersection()</code> lists the elements in common.</li>\n  <li><code class=\"highlighter-rouge\">subtracting()</code> lists the elements in one Set after removing all elements that are in the other.</li>\n  <li><code class=\"highlighter-rouge\">union()</code> joins all the elements without duplicates.</li>\n  <li><code class=\"highlighter-rouge\">symmetricDifference()</code> lists the elements that are in one or other of the Sets but not in both. (Swift 3 renamed this function from <code class=\"highlighter-rouge\">exclusiveOr()</code>)</li>\n</ul>\n\n<p>Here is my best attempt at a pretty drawing to show how these go together:</p>\n\n<p><img src=\"http://troz.net/images/sets_1.png\" alt=\"\" /></p>\n\n<hr />\n\n<p>The next fun trick is working out sub-sets, super-sets and disjoint sets.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">let</span> <span class=\"nv\">set1</span><span class=\"p\">:</span> <span class=\"kt\">Set</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"dog\"</span><span class=\"p\">,</span> <span class=\"s\">\"cat\"</span><span class=\"p\">,</span> <span class=\"s\">\"pig\"</span><span class=\"p\">]</span>\n<span class=\"k\">let</span> <span class=\"nv\">set2</span><span class=\"p\">:</span> <span class=\"kt\">Set</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"cow\"</span><span class=\"p\">,</span> <span class=\"s\">\"horse\"</span><span class=\"p\">,</span> <span class=\"s\">\"pig\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">smallSet</span><span class=\"p\">:</span> <span class=\"kt\">Set</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"pig\"</span><span class=\"p\">,</span> <span class=\"s\">\"cow\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">smallSet</span><span class=\"o\">.</span><span class=\"nf\">isSubset</span><span class=\"p\">(</span><span class=\"nv\">of</span><span class=\"p\">:</span> <span class=\"n\">set1</span><span class=\"p\">)</span>\t<span class=\"c1\">// false</span>\n<span class=\"n\">smallSet</span><span class=\"o\">.</span><span class=\"nf\">isSubset</span><span class=\"p\">(</span><span class=\"nv\">of</span><span class=\"p\">:</span> <span class=\"n\">set2</span><span class=\"p\">)</span>\t<span class=\"c1\">// true</span></code></pre></figure>\n\n<p><code class=\"highlighter-rouge\">smallSet</code> is <strong>not</strong> a subset of <code class=\"highlighter-rouge\">set1</code> because it contains an element that is not in <code class=\"highlighter-rouge\">set1</code>.\n<code class=\"highlighter-rouge\">smallSet</code> <strong>is</strong> a subset of <code class=\"highlighter-rouge\">set2</code> because every element in <code class=\"highlighter-rouge\">smallSet</code> is also in <code class=\"highlighter-rouge\">set2</code>.</p>\n\n<p><img src=\"http://troz.net/images/sets_2.png\" alt=\"\" /></p>\n\n<p>If you want to get technical, a Set should not be considered a subset of an identical Set.\nThe default <code class=\"highlighter-rouge\">isSubset(of:)</code> allows this, but you can use <code class=\"highlighter-rouge\">isStrictSubset(of:)</code> if you prefer.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"n\">set1</span><span class=\"o\">.</span><span class=\"nf\">isSubset</span><span class=\"p\">(</span><span class=\"nv\">of</span><span class=\"p\">:</span> <span class=\"n\">set1</span><span class=\"p\">)</span>\t\t<span class=\"c1\">// true</span>\n<span class=\"n\">set1</span><span class=\"o\">.</span><span class=\"nf\">isStrictSubset</span><span class=\"p\">(</span><span class=\"nv\">of</span><span class=\"p\">:</span> <span class=\"n\">set1</span><span class=\"p\">)</span>\t<span class=\"c1\">// false</span></code></pre></figure>\n\n<p>Superset works just the same but in reverse so the diagram above explains it too:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">let</span> <span class=\"nv\">set1</span><span class=\"p\">:</span> <span class=\"kt\">Set</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"dog\"</span><span class=\"p\">,</span> <span class=\"s\">\"cat\"</span><span class=\"p\">,</span> <span class=\"s\">\"pig\"</span><span class=\"p\">]</span>\n<span class=\"k\">let</span> <span class=\"nv\">set2</span><span class=\"p\">:</span> <span class=\"kt\">Set</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"cow\"</span><span class=\"p\">,</span> <span class=\"s\">\"horse\"</span><span class=\"p\">,</span> <span class=\"s\">\"pig\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">smallSet</span><span class=\"p\">:</span> <span class=\"kt\">Set</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"pig\"</span><span class=\"p\">,</span> <span class=\"s\">\"cow\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">set1</span><span class=\"o\">.</span><span class=\"nf\">isSuperset</span><span class=\"p\">(</span><span class=\"nv\">of</span><span class=\"p\">:</span> <span class=\"n\">smallSet</span><span class=\"p\">)</span>\t<span class=\"c1\">// false</span>\n<span class=\"n\">set2</span><span class=\"o\">.</span><span class=\"nf\">isSuperset</span><span class=\"p\">(</span><span class=\"nv\">of</span><span class=\"p\">:</span> <span class=\"n\">smallSet</span><span class=\"p\">)</span>\t<span class=\"c1\">// true</span>\n\n<span class=\"n\">set1</span><span class=\"o\">.</span><span class=\"nf\">isSuperset</span><span class=\"p\">(</span><span class=\"nv\">of</span><span class=\"p\">:</span> <span class=\"n\">set1</span><span class=\"p\">)</span>\t\t<span class=\"c1\">// true</span>\n<span class=\"n\">set1</span><span class=\"o\">.</span><span class=\"nf\">isStrictSuperset</span><span class=\"p\">(</span><span class=\"nv\">of</span><span class=\"p\">:</span> <span class=\"n\">set1</span><span class=\"p\">)</span>\t\t<span class=\"c1\">// false</span></code></pre></figure>\n\n<p><code class=\"highlighter-rouge\">set1</code> is <strong>not</strong> a superset of <code class=\"highlighter-rouge\">smallSet</code> because it does not contain every element in <code class=\"highlighter-rouge\">smallSet</code>.\n<code class=\"highlighter-rouge\">set2</code> <strong>is</strong> a superset of <code class=\"highlighter-rouge\">smallSet</code> because every element in <code class=\"highlighter-rouge\">smallSet</code> is also in <code class=\"highlighter-rouge\">set2</code>.</p>\n\n<p>The <code class=\"highlighter-rouge\">isSuperset(of:)</code> and <code class=\"highlighter-rouge\">isStrictSuperset(of:)</code> functions allow or reject identical sets.</p>\n\n<p>The final comparison tool that might be useful is <code class=\"highlighter-rouge\">isDisjoint(with:)</code> which returns true only if the two Sets have no elements in common i.e. if there is no overlap in the circles.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">let</span> <span class=\"nv\">set1</span><span class=\"p\">:</span> <span class=\"kt\">Set</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"dog\"</span><span class=\"p\">,</span> <span class=\"s\">\"cat\"</span><span class=\"p\">,</span> <span class=\"s\">\"pig\"</span><span class=\"p\">]</span>\n<span class=\"k\">let</span> <span class=\"nv\">set2</span><span class=\"p\">:</span> <span class=\"kt\">Set</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"cow\"</span><span class=\"p\">,</span> <span class=\"s\">\"horse\"</span><span class=\"p\">,</span> <span class=\"s\">\"pig\"</span><span class=\"p\">]</span>\n<span class=\"k\">let</span> <span class=\"nv\">otherSet</span><span class=\"p\">:</span> <span class=\"kt\">Set</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"duck\"</span><span class=\"p\">,</span> <span class=\"s\">\"chicken\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">set1</span><span class=\"o\">.</span><span class=\"nf\">isDisjoint</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">set2</span><span class=\"p\">)</span>\t\t<span class=\"c1\">// false</span>\n<span class=\"n\">set1</span><span class=\"o\">.</span><span class=\"nf\">isDisjoint</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">otherSet</span><span class=\"p\">)</span>\t\t<span class=\"c1\">// true</span></code></pre></figure>\n\n<p>“pig” occurs in both <code class=\"highlighter-rouge\">set1</code> and <code class=\"highlighter-rouge\">set2</code> so they are <strong>not</strong> disjoint.\n<code class=\"highlighter-rouge\">otherSet</code> and <code class=\"highlighter-rouge\">set1</code> have no matching entries so they <strong>are</strong> disjoint.</p>\n\n<hr />\n\n<h3 id=\"when-should-you-use-a-set\">When should you use a Set?</h3>\n\n<ol>\n  <li>If you want the elements to be unique.</li>\n  <li>If you want easy methods of comparing the contents of different collections.</li>\n  <li>If you want to be able to remove elements easily.</li>\n</ol>\n\n<h3 id=\"when-should-you-not-use-a-set\">When should you not use a Set?</h3>\n\n<ol>\n  <li>If you need the collection to be able to hold multiples of an element.</li>\n  <li>If the order of the collection is important.</li>\n</ol>\n\n<hr />\n\n<p>For more details on Sets, check out <a href=\"http://swiftdoc.org/v2.2/type/Set/\">SwiftDoc.org</a>.</p>\n\n",
            "url": "http://troz.net/2016/05/learning-swift-sets/",
            "summary": "<p>Sets are the forgotten collection type in many languages, including Swift. I think most developers use Arrays without really considering the advantages of using a Set but they have some amazingly useful features that should make them a part of any progammer’s toolkit.</p>\n",
            "date_published": "2016-05-28 00:00:00 +1000",
            "tags": ["learning swift", "swift"]
        },

        {
            "id": "/2016/05/19th-hole-golf-scorer-3.1",
            "title": "19th Hole Golf Scorer 3.1",
            "content_html": "<p>One of the problems with using 19th Hole on the Apple Watch is making the app show every time you raise your wrist. My solution to this was to go into Settings (either on my iPhone through the Watch app, or directly on the watch) and change it to “Resume Last Activity” on wrist raise. This worked fine but as I usually prefer the watch face to show on wrist raise, I had to keep setting and re-setting this which was a pain.</p>\n\n<p>But last week I noticed the fine print when changing this setting. In this screen shot from the Watch app on my iPhone, you can see that “session-based apps” and “some third-party workout apps” will over-ride the “Show Watch Face” setting.</p>\n\n<p><img src=\"http://troz.net/images/WakeScreen.jpg\" alt=\"Wrist raise settings\" /></p>\n\n<p>I started to research this and found that if an app starts a “workout session”, then it will become the active app until the session is ended or some other app starts a session. So I got to work and added a workout session to the 19th Hole’s Apple Watch app.</p>\n\n<p>When you start scoring a round on the Apple Watch, you will see this dialog asking if you would like to start a workout:</p>\n\n<p><img src=\"http://troz.net/images/Watch-workout.png\" alt=\"Start workout dialog\" /></p>\n\n<p>The workout will be stopped automatically when you have scored the last hole. You can also use a force-press on the scoring screen to turn the workout off or on at any time.</p>\n\n<p><img src=\"http://troz.net/images/Watch_end_workout.png\" alt=\"Stop workout\" /></p>\n\n<p>This should make the app much more usable as an Apple Watch app, so happy golfing :-)</p>\n\n",
            "url": "http://troz.net/2016/05/19th-hole-golf-scorer-3.1/",
            "summary": "<p>One of the problems with using 19th Hole on the Apple Watch is making the app show every time you raise your wrist. My solution to this was to go into Settings (either on my iPhone through the Watch app, or directly on the watch) and change it to “Resume Last Activity” on wrist raise. This worked fine but as I usually prefer the watch face to show on wrist raise, I had to keep setting and re-setting this which was a pain.</p>\n",
            "date_published": "2016-05-07 00:00:00 +1000",
            "tags": ["golf", "ios", "scoring"]
        },

        {
            "id": "/2016/04/my-year-with-apple-watch",
            "title": "My Year With Apple Watch",
            "content_html": "<p>As the Apple Watch hits its first birthday, there seems to be in increasing number of bloggers complaining about it. One (which I refuse to link to) titled “My Year of Hell With the Apple Watch”. I think the article has since been re-published with a slightly less inflammatory title, but really! Did somebody rivet the watch to his wrist? If it was so awful, why not just stop using it?</p>\n\n<p>I am a watch nerd and have always loved watches and having one on me. I liked watches with features and even had a calculator watch at one point although as a woman with skinny wrists, I found it constantly annoying that watch makers put all the gadgets into man-sized watches so I was left with the choice of no features or a watch that looked stupidly large on my wrist.</p>\n\n<p>A few years ago I stopped wearing a watch. I can’t remember now why I did it - maybe my watch strap broke and it wasn’t important enough to get a new one. I always had my iPhone to give me the time.</p>\n\n<p>But I ordered three Apple Watches as soon as they were available and myself, husband and eldest son have been using them ever since.</p>\n\n<hr />\n\n<h3 id=\"here-are-what-i-consider-to-be-the-best-features-of-the-apple-watch\">Here are what I consider to be the best features of the Apple Watch:</h3>\n\n<ul>\n  <li>\n    <p><strong>Accuracy</strong>: It is a fantastically accurate time-piece. Not enough people give this credit, but we have always been used to clocks and watches that were inherently inaccurate. Having a device on my wrist that I <strong>know</strong> to be perfectly accurate is an amazing thing.</p>\n  </li>\n  <li>\n    <p><strong>Notifications</strong>: this takes a bit of work to get right and with every new app, you need to assess whether to have its notifications appear on your wrist. But the wonderful thing is knowing that you haven’t missed anything and being able to glance at your wrist when a notification arrives and tell - unobtrusively - whether this is something that needs immediate attention. And the ability to respond instantly to messages and emails with just a couple of taps is amazingly useful.</p>\n  </li>\n  <li>\n    <p><strong>Customisable watch faces</strong>: depending on what I am doing, I need quick access to different pieces of information. When travelling, I can set up a watch face with multiple time zones. When working, I need a timer. When on holiday, I prefer one of the more relaxing but less detailed watch faces.</p>\n  </li>\n  <li>\n    <p><strong>Activity</strong>: I am not the world’s most active person so I find the three rings to be a really good motivator. In fact I just had to stop typing and run up &amp; down the stairs to get another notch to the blue ring. The goals are not out of my reach, so I like trying to fill in the rings every day.</p>\n  </li>\n  <li>\n    <p><strong>Voice commands</strong>: being able to send a text message completely by voice when driving or when my hands are busy is fantastic. Starting a timer, doing unit conversions and navigating are things I do frequently by voice.</p>\n  </li>\n  <li>\n    <p><strong>Excellent battery life</strong>: I started off having the battery life complication always visible, but it very quickly became apparent that this was unnecessary. Right now I have been wearing the watch for about 11 hours and the battery is at 74%. And charging is so fast that if I did run it down, a 30 minute charge would get me through most of a day.</p>\n  </li>\n  <li>\n    <p><strong>The Milanese Loop</strong>: best watch band ever.</p>\n  </li>\n</ul>\n\n<p>There are other good features, but I think those are my favourites.</p>\n\n<hr />\n\n<h3 id=\"so-what-dont-i-like\">So what don’t I like?</h3>\n\n<ul>\n  <li>\n    <p><strong>Third-party apps are still a problem</strong>. I know. I have published three myself and sometimes they just doesn’t happen. However this appears to vary a lot. Some people say they can never get apps to run, even Apple’s apps. Others say they work but with a long delay. My watch seems to be better than the average but it is still an issue.</p>\n  </li>\n  <li>\n    <p><strong>Sketches don’t always get through or can take ages</strong>. We thought it would be a lot of fun to send each other little sketches and so it is, despite our total lack of any artistic skills. But it loses a bit of impact when you have to send a message 20 minutes later asking if the sketch has arrived.</p>\n  </li>\n  <li>\n    <p><strong>The exercise tracking seems to be a bit erratic</strong>. If my husband and I go for a walk together, he comes back with 25 minutes of exercise and I only have 7 minutes. Am I not going fast enough? Are my arms not swinging enough? If it is very hot and my wrist gets sweaty, I seem to get better numbers - is this because my heart is beating faster or the capillaries closer to the surface have expanded? Or is the watch picking up a better signal that way? Either way, I still like the activity circles, but the green ring frustrates me a bit.</p>\n  </li>\n</ul>\n\n<hr />\n\n<h3 id=\"and-what-would-i-like-to-see-in-watch-2--watchos-3\">And what would I like to see in Watch 2 / watchOS 3?</h3>\n\n<ul>\n  <li>\n    <p>Some sort of always-on display of the time.</p>\n  </li>\n  <li>\n    <p>A speaker to allow Siri to talk back to me and to play audio.</p>\n  </li>\n  <li>\n    <p>FaceTime audio calls.</p>\n  </li>\n  <li>\n    <p>Better support for third-party apps - perhaps open up some private APIs?</p>\n  </li>\n  <li>\n    <p>Allow developers to create watch faces or apps that told the time.</p>\n  </li>\n  <li>\n    <p>Allow developers to say that an app should stay as the frontmost app once opened.</p>\n  </li>\n</ul>\n\n<hr />\n\n<h3 id=\"will-i-buy-watch-2\">Will I buy Watch 2?</h3>\n\n<p>At this stage I would say no. We bought the bottom-of-the-line Sport models because with version 1.0 of anything, you don’t want to spend so much that upgrading is ruled out. However these watches are still going great and a lot of the improvements I am looking for will be in software not hardware.</p>\n\n<p>But 14 months ago, I was waiting for Apple to announce the iWatch as we all thought it would be called, and saying that I didn’t think I would get one. The feature list convinced me and I have been delighted with it. So if Watch 2 comes up with some killer feature that matters to me, then I might have to re-consider…</p>\n",
            "url": "http://troz.net/2016/04/my-year-with-apple-watch/",
            "summary": "<p>As the Apple Watch hits its first birthday, there seems to be in increasing number of bloggers complaining about it. One (which I refuse to link to) titled “My Year of Hell With the Apple Watch”. I think the article has since been re-published with a slightly less inflammatory title, but really! Did somebody rivet the watch to his wrist? If it was so awful, why not just stop using it?</p>\n",
            "date_published": "2016-04-28 00:00:00 +1000",
            "tags": ["apple watch", "watch"]
        },

        {
            "id": "/2016/04/how-to-confuse-testflight",
            "title": "How To Confuse TestFlight",
            "content_html": "<p><a href=\"#tldr\">TL;DR</a></p>\n\n<p>I ran into an unusual problem when testing my latest app: “<a href=\"http://troz.net/what-is-my-speed/\">What Is My Speed?</a>”. It is now available from the <a href=\"https://itunes.apple.com/app/what-is-my-speed/id1091394524\">iTunes App Store</a>, but getting there was a struggle.</p>\n\n<p>Xcode is terrible at renaming projects, so it is a really good idea to have worked out your app’s name before starting. I would even recommend creating an app ID in your Apple Developer account and registering the app name in iTunes Connect. Only once you get to iTunes Connect will the name be checked for uniqueness. Searching the App Stores is not enough as it does not cover un-released apps or apps that are not available in your country.</p>\n\n<p>So I set up my app. I was hoping for “What’s My Speed?” but was happy with “What Is My Speed?”.</p>\n\n<p>Next step was to create the project in Xcode which I did using the app name and manually entering the bundle identifier that I had registered at Apple Developer. Xcode accepted the name without any warnings and created the default targets using that name.</p>\n\n<p>In the default unit testing file, the module was defined like this:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"kd\">@testable</span> <span class=\"kd\">import</span> <span class=\"kt\">What_Is_My_Speed_</span></code></pre></figure>\n\n<p>which made me think that Xcode was quite happy to have parsed the app name as required to replace any unwanted characters to suit.</p>\n\n<p>The app was built, passed all unit tests, profiled, analyzed, tested on real devices as well as the simulators and uploaded to TestFlight.</p>\n\n<p><strong>BARRRPPPP!</strong></p>\n\n<p><img src=\"http://troz.net/images/TestFlight_error.png\" alt=\"This app cannot be installed\" /></p>\n\n<p>What?</p>\n\n<p><em>(I forgot to take a screenshot but found a similar one online. Thanks <a href=\"https://www.simpletechs.net/apps/easy-fix-for-testflight-problem-after-restoring-from-backup/\">Simple Techs</a>)</em></p>\n\n<p>I have had experience with TestFlight’s oddities in the past, so I incremented the build number and tried again, thinking that maybe there had been a processing issue. Same result.</p>\n\n<p>This started a very frustrating 24 hours as I ran through all the possibilities I could think of or find suggested on the net. Due to disastrous Australian internet speeds, especially uploads, each attempt took from 40 - 120 minutes. About 5 minutes to implement the next idea, 25 minutes upload time, then the rest waiting for Apple to process the app so I could try again.</p>\n\n<p>Here is what I tried:</p>\n\n<ol>\n  <li>Uploaded a fresh build.</li>\n  <li>Removed Bitcode.</li>\n  <li>Fixed the code signing identity which was set to iOS Developer for some reason.</li>\n  <li>Manually specified the provisioning profiles for all three components (iPhone app, WatchKit app, WatchKit Extension).</li>\n  <li>Manually selected the code signing identity for the provisioning profiles.</li>\n  <li>Uploaded using Application Loader instead of Xcode.</li>\n  <li>Removed third-party framework.</li>\n  <li>Removed WatchKit app.</li>\n  <li>Revoked my distribution profile, re-created it and updated all provisioning profiles.</li>\n  <li>Created a completely blank project with same app name and bundle identifier.</li>\n</ol>\n\n<p>As you can see from this list, I thought it was a code signing or profile error. Using <a href=\"https://itunes.apple.com/app/apple-configurator-2/id1037126344\">Apple Configurator 2</a> (the modern version of iPhone Configuration Utility), I was able to get the logs from my iPhone and entries like the following seemed to confirm this:</p>\n\n<blockquote>\n  <p><code class=\"highlighter-rouge\">Error Domain=LaunchServicesError Code=0 \"(null)\" UserInfo={Error=ApplicationVerificationFailed, ErrorDetail=-402620393, ErrorDescription=Failed to verify code signature of /private/var/installd/Library/Caches/com.apple.mobile.\ninstalld.staging/temp.2LWJ2h/extracted/Payload/What Is My Speed?.app : 0xe8008017 (A signed resource has been added, modified, or deleted.)}</code></p>\n</blockquote>\n\n<p>But when I got to the stage of a completely blank app still failing, I suddenly thought of the question mark. With the benefit of my preamble to this post, you all probably got there long before I did, but I got there in the end.</p>\n\n<p>The solution was to remove the question mark from the names of the targets in Xcode. I had to fix up the module names in my unit testing files, but apart from that, there were no changes. After this I was able to upload the complete app to TestFlight and install it on my iPhone.</p>\n\n<p>It is possible that it was the Product Names that were the issue, rather than the target name as in Build Settings, Product Name is set to be <code class=\"highlighter-rouge\">$(TARGET_NAME)</code> by default but I didn’t test that. Maybe next time…</p>\n\n<p><a name=\"tldr\">TL;DR</a> Do not put any unusual characters in your target names. Alphanumerics and spaces are OK, but I am not sure about anything else.</p>\n\n",
            "url": "http://troz.net/2016/04/how-to-confuse-testflight/",
            "summary": "<p><a href=\"#tldr\">TL;DR</a></p>\n",
            "date_published": "2016-04-24 00:00:00 +1000",
            "tags": ["app store", "testflight", "xcode"]
        },

        {
            "id": "/what-is-my-speed",
            "title": "What Is My Speed?",
            "content_html": "<style>\nimg {\n    display: block;\n    margin-left: auto;\n    margin-right: auto }\n</style>\n\n<p>“What Is My Speed?” is available now from the <a href=\"https://itunes.apple.com/app/what-is-my-speed/id1091394524\">iTunes App Store</a> for iPhone and Apple Watch.</p>\n\n<p><img src=\"http://troz.net/images/speed_1.png\" alt=\"What Is My Speed? - iPhone\" /></p>\n\n<p>If you read my recent blog post on <a href=\"http://troz.net/2016/04/road-trip-apps/\">Road Trip Apps</a> you will have realised that I was working on an app to fill a gap that I discovered in our road trip app arsenal. So here it is: “What Is My Speed?” for iPhone &amp; Apple Watch.</p>\n\n<hr />\n\n<p>Track your speed on your iPhone or Apple Watch while driving, bicycling, running or walking.\nSee your course and altitude at all times.</p>\n\n<p>Optionally set a speed limit and get audible warnings on your iPhone when you exceed it. Reduce the speed limit to zero or extend it over the maximum to turn off speed limit warnings.</p>\n\n<p>Designed for easy viewing in all light conditions and with very accessible swiping to change the speed limit quickly and easily.</p>\n\n<p>If you want more detailed information, tap the info button to see a complete list of available data about your current location. <em>Altitude and floor data may not always be available but will be displayed whenever possible.</em></p>\n\n<p><img src=\"http://troz.net/images/speed_2.png\" alt=\"What Is My Speed? details - iPhone\" /></p>\n\n<p>Your current iPhone settings are used to set the default units for speed and altitude, but these are easily changed after tapping the info button.</p>\n\n<hr />\n\n<p>To monitor your speed on your Apple Watch, you need to start the app on your iPhone, but then it does not have to remain in the foreground. However speed limit warnings will only be given when the iPhone app is active.</p>\n\n<p><img src=\"http://troz.net/images/speed_watch_1.png\" alt=\"What Is My Speed? Apple Watch\" /></p>\n\n<p>To adjust the speed limit, swipe from side to side. The speed limit indicator will expand for easier viewing and the speed limit will increase or decrease. Tap again to shrink the speed limit indicator or leave it for a few seconds and it will shrink automatically. You can also swipe up or down with two fingers to adjust the screen brightness for maximum visibility.</p>\n\n<p>Tap the “?” button on the main screen to be reminded of the available swipes.</p>\n\n<p><img src=\"http://troz.net/images/speed_3.png\" alt=\"What Is My Speed? adjust speed limit - iPhone\" /></p>\n\n<hr />\n\n<p><strong>Location permissions:</strong> On startup, the app will request permission to access your location. This is how the speed, course and altitude data is gathered so is essential for the app to operate. If you have an Apple Watch with the app installed, the app will continue to track your speed while in the background so that the data can be sent to your watch. If you do not have an Apple Watch or the app is not installed on the watch, your speed will only ever be tracked when the app is the current foreground app.</p>\n\n",
            "url": "http://troz.net/what-is-my-speed/",
            "summary": "<style>\nimg {\n    display: block;\n    margin-left: auto;\n    margin-right: auto }\n</style>\n\n",
            "date_published": "2016-04-17 00:00:00 +1000",
            "tags": ["apple watch", "ios", "speed", "travel", "watch"]
        },

        {
            "id": "/2016/04/road-trip-apps",
            "title": "Road Trip Apps",
            "content_html": "<p>Over the past few months, we have done two long road trips: one approximately 4,000 km and the other about 1,800 km. These gave us the chance to try out various apps for navigation and travel information. We live in Queensland, Australia and some of these comments may be country-specific.</p>\n\n<hr />\n\n<h3 id=\"navigation\">Navigation:</h3>\n\n<p>The basic navigation came down to three apps:</p>\n\n<ul>\n  <li><a href=\"https://www.apple.com/ios/maps/\">Apple Maps</a></li>\n  <li><a href=\"https://itunes.apple.com/app/google-maps-real-time-navigation/id585027354\">Google Maps</a></li>\n  <li><a href=\"https://itunes.apple.com/au/app/metroview-gps-navigation/id370753892\">Metroview</a> (Australia and New Zealand only)</li>\n</ul>\n\n<p>Each has their strengths and weaknesses:</p>\n\n<ul>\n  <li>\n    <p>Apple Maps is by far the most beautiful and easy to read. It integrates perfectly with Contacts (as you would expect). Turn-by-turn directions were mostly excellent. The biggest downside is that it does not allow you to specify a route avoiding tolls.</p>\n  </li>\n  <li>\n    <p>Google Maps allows you to plot a route avoiding tolls… if you can find the setting. Its traffic reporting is by far the best and it would offer suggested changes of routes during the trip to get around traffic. The interface is confusing at times. Turn-by-turn directions were good, although I would have preferred an Australian voice option.</p>\n  </li>\n  <li>\n    <p>Metroview has all the maps downloaded which saves on data connection costs and handles bad connectivity areas better. Its best feature is notification of speed limits and alerts if you go over the limit, although it gets confused when on over or under-passes. Another very useful feature is the display of lanes when approaching highway exits, so you could tell which lane to be in. Apparently the voice guidance is now more natural but we didn’t try this. The display is messy and cluttered compared to the others.</p>\n  </li>\n</ul>\n\n<p>We ended up with the following sequence:</p>\n\n<ol>\n  <li>Apple Maps for the bulk of the trip.</li>\n  <li>Google Maps &amp; Metroview (on 2 separate iPhones) in the metropolitan areas and when about to take a highway exit.</li>\n</ol>\n\n<p>Even then it was amusing to see the apps panic when you took a new road and the apps assumed you had left the road and were heading through the bush! And at one point there was a large and official sign saying “Ignore GPS - do not take this turn” and sure enough, both Apple Maps and Google Maps wanted us to turn down a little country lane instead of keeping to the highway.</p>\n\n<hr />\n\n<h3 id=\"speed-display\">Speed Display:</h3>\n\n<p>Apart from the basic navigation apps, we tried a couple of speed display apps. There are a lot of HUD speed apps out there that project the data on the the windscreen but they had two problems:</p>\n\n<ul>\n  <li>They only worked when it was dark. As soon as the sun got up, they became invisible.</li>\n  <li>They required you to place your iPhone flat on the dashboard so even if they had worked during the day, the iPhone would have got far too hot and shut-down. (We have a mount that holds our iPhones in front of the air vents to avoid this over-heating problem. Any mount that sticks to the windscreen itself leaves the iPhone too exposed to the sun.)</li>\n</ul>\n\n<p>One we stuck with (in non-HUD mode) was <a href=\"https://itunes.apple.com/app/speedometer-+-hud-digital/id375318117\">Speedometer + HUD</a>. This had a clear display with a few flaws:</p>\n\n<ul>\n  <li>When moving from 99 kph to 100 kph, the display was not re-arranged for 3 digits. Moving from 101 down to 100 fixed it, but as 100 kph is the standard speed limit, this was a frequent annoyance.</li>\n  <li>Adjusting the speed limit was too fiddly and difficult even for the passenger. It would have been impossible for the driver.</li>\n  <li>It only works in landscape mode which does not always suit the car mounts - we ended up perching the 2nd iPhone on the unused ashtray.</li>\n</ul>\n\n<p>We also tried <a href=\"https://itunes.apple.com/app/talking-hud-voice-prompt-speedometer/id873194479\">Talking HUD</a> but didn’t like it. It worked solely in HUD mode, so was only useful at night or very early morning. It had voice prompts to tell you when to change gear but in an automatic car, they were just a distraction and it was not obvious how to turn them off.</p>\n\n<p>But overall, we found having a speed display app as well as a navigation app to be the best combination. The audible alerts when you went over speed were very useful when over-taking or getting up to speed as you could get the information without having to take your eyes off the road.</p>\n\n<hr />\n\n<h3 id=\"future-app-plans\">Future App Plans:</h3>\n\n<p>Having determined that a speed display app is really useful, but not finding one that suited us perfectly, the obvious next step was to design my own. I wanted it to have the following features:</p>\n\n<ul>\n  <li>clean display, visible in all light conditions</li>\n  <li>easily settable speed limit</li>\n  <li>audible and visual over-speed warnings</li>\n  <li>no HUD mode</li>\n  <li>Apple Watch component for when you only had a single iPhone and it was navigating but you still wanted a speed display</li>\n</ul>\n\n<p>So watch this space for further news of my up-coming app…</p>\n\n<hr />\n\n<h3 id=\"update\">Update:</h3>\n\n<p>“<a href=\"http://troz.net/what-is-my-speed/\">What Is My Speed?</a>” is available now from the <a href=\"https://itunes.apple.com/app/what-is-my-speed/id1091394524\">iTunes App Store</a> for iPhone and Apple Watch.</p>\n\n",
            "url": "http://troz.net/2016/04/road-trip-apps/",
            "summary": "<p>Over the past few months, we have done two long road trips: one approximately 4,000 km and the other about 1,800 km. These gave us the chance to try out various apps for navigation and travel information. We live in Queensland, Australia and some of these comments may be country-specific.</p>\n",
            "date_published": "2016-04-07 00:00:00 +1000",
            "tags": ["ios", "travel"]
        },

        {
            "id": "/2016/03/structs-vs-classes",
            "title": "Structs vs Classes",
            "content_html": "<p>One of the big debates among Swift developers is when to use <code class=\"highlighter-rouge\">structs</code> and when to use <code class=\"highlighter-rouge\">classes</code>. Classes are the building blocks of object-oriented programming but structs as provided by Swift are newly powerful. Structs have been around in C-based languages for a long time, but Swift has made them more powerful and given them more features so that they are almost indistinguishable from classes. So what are the differences and which one should you use?</p>\n\n<hr />\n\n<h3 id=\"where-they-are-the-same\">Where they are the same:</h3>\n\n<ul>\n  <li>both can define initializers</li>\n  <li>both can define properties</li>\n  <li>both can define methods</li>\n  <li>both can conform to protocols</li>\n</ul>\n\n<h3 id=\"where-they-are-different\">Where they are different:</h3>\n\n<ul>\n  <li>classes can inherit from other classes</li>\n  <li>structs cannot inherit from other structs</li>\n  <li>classes are reference types</li>\n  <li>structs are value types</li>\n</ul>\n\n<hr />\n\n<p>The reference type vs value type difference is where things really get interesting. Have a look at this example of a class with a single property:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"kd\">class</span> <span class=\"kt\">PersonClass</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n\n    <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">var</span> <span class=\"nv\">personA</span> <span class=\"o\">=</span> <span class=\"kt\">PersonClass</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"Woody\"</span><span class=\"p\">)</span>\n<span class=\"n\">personA</span><span class=\"o\">.</span><span class=\"n\">name</span>    <span class=\"c1\">// Woody</span>\n\n<span class=\"k\">var</span> <span class=\"nv\">personB</span> <span class=\"o\">=</span> <span class=\"n\">personA</span>\n<span class=\"n\">personB</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Buzz\"</span>\n<span class=\"n\">personB</span><span class=\"o\">.</span><span class=\"n\">name</span>    <span class=\"c1\">// Buzz</span></code></pre></figure>\n\n<p>That looks like standard stuff, but what do you think <code class=\"highlighter-rouge\">personA</code>’s name is now? If you guessed “Buzz” then you win a prize! <em>(No, not a real prize - pat yourself on the back.)</em></p>\n\n<p>This is because when we created the <code class=\"highlighter-rouge\">personB</code> variable and assigned <code class=\"highlighter-rouge\">personA</code> to it, we did not assign the <strong>VALUE</strong> of <code class=\"highlighter-rouge\">personA</code>, we assigned a <strong>REFERENCE</strong> to <code class=\"highlighter-rouge\">personA</code> - actually the address in memory of <code class=\"highlighter-rouge\">personA</code> rather than the data inside.</p>\n\n<p>So now we have two objects and they are both looking at the same spot in memory for their data. This means that changing the name of <code class=\"highlighter-rouge\">personB</code> changed the name of <code class=\"highlighter-rouge\">personA</code> as well.</p>\n\n<p>Let’s try the same thing with a struct:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"kd\">struct</span> <span class=\"kt\">PersonStruct</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">var</span> <span class=\"nv\">personC</span> <span class=\"o\">=</span> <span class=\"kt\">PersonStruct</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"Rex\"</span><span class=\"p\">)</span>\n<span class=\"n\">personC</span><span class=\"o\">.</span><span class=\"n\">name</span>    <span class=\"c1\">// Rex</span>\n\n<span class=\"k\">var</span> <span class=\"nv\">personD</span> <span class=\"o\">=</span> <span class=\"n\">personC</span>\n<span class=\"n\">personD</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Hamm\"</span>\n<span class=\"n\">personD</span><span class=\"o\">.</span><span class=\"n\">name</span>    <span class=\"c1\">// Hamm</span>\n\n<span class=\"n\">personC</span><span class=\"o\">.</span><span class=\"n\">name</span>    <span class=\"c1\">// Rex</span></code></pre></figure>\n\n<p>This time, because we are using a struct, when we assign <code class=\"highlighter-rouge\">personC</code> to the new <code class=\"highlighter-rouge\">personD</code> variable, we are actually making a copy of <code class=\"highlighter-rouge\">personC</code> and setting the values of <code class=\"highlighter-rouge\">personD</code> to this new copy. So now we can change <code class=\"highlighter-rouge\">personD</code> without messing with <code class=\"highlighter-rouge\">personC</code>.</p>\n\n<p>Note that I did not have a define an <code class=\"highlighter-rouge\">init</code> for the struct because it creates one automatically. You can still add one yourself if you want to do anything different, but you do not have to.</p>\n\n<hr />\n\n<p>At first glance, you may think that you should now use structs all the time to avoid these unintended consequences, but it isn’t quite as simple as that. Sometimes a class is still the best thing to use.</p>\n\n<p>The inheritance capabilities of classes can make your decision simple: if you need to create a button and want to start by sub-classing UIButton or NSButton, then your button must be a class, not a struct. This will apply to most user interface objects.</p>\n\n<p>Apple really wants us to use structs and in the Swift standard libraries, a very high percentage of the objects are structs. But structs are especially well suited to a certain subset of objects.</p>\n\n<p>The best explanation that I have found of when to use a struct is the <a href=\"http://faq.sealedabstract.com/structs_or_classes/#an-alternative-hypothesis\">Jeff Trick</a>. Reduced down, the rule is:</p>\n\n<blockquote>\n  <p>If you can overload == to compare two instances of your object, use a struct. <br />\nIf this doesn’t make sense, use a class.</p>\n</blockquote>\n\n<p>So use structs for your things: Person, Shape, Brick, Cat. <br />\nUse classes for everything else.</p>\n\n<p>I would add one caveat: don’t fight the compiler. If using a struct is giving lots of errors and warnings, change to a class.</p>\n\n<hr />\n\n<p>A logical consequence of this is that all structs should conform to the <a href=\"http://swiftdoc.org/v2.2/protocol/Equatable/\">Equatable</a> protocol.</p>\n\n<p>Extending <code class=\"highlighter-rouge\">PersonStruct</code> to make it conform just requires a single function:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"kd\">extension</span> <span class=\"kt\">PersonStruct</span><span class=\"p\">:</span> <span class=\"kt\">Equatable</span> <span class=\"p\">{</span>\n    <span class=\"kd\">static</span> <span class=\"kd\">func</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"nv\">lhs</span><span class=\"p\">:</span> <span class=\"kt\">PersonStruct</span><span class=\"p\">,</span> <span class=\"nv\">rhs</span><span class=\"p\">:</span> <span class=\"kt\">PersonStruct</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Bool</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">rhs</span><span class=\"o\">.</span><span class=\"n\">name</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Since this struct only has one property, we can say that two instances of this struct are equal if the names are equal.</p>\n\n<p>Testing this, we can see:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">var</span> <span class=\"nv\">personC</span> <span class=\"o\">=</span> <span class=\"kt\">PersonStruct</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"Rex\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">var</span> <span class=\"nv\">personD</span> <span class=\"o\">=</span> <span class=\"n\">personC</span>\n<span class=\"n\">personD</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Hamm\"</span>\n\n<span class=\"n\">personC</span> <span class=\"o\">==</span> <span class=\"n\">personD</span>      <span class=\"c1\">// false</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">personE</span> <span class=\"o\">=</span> <span class=\"kt\">PersonStruct</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"Rex\"</span><span class=\"p\">)</span>\n<span class=\"n\">personC</span> <span class=\"o\">==</span> <span class=\"n\">personE</span>      <span class=\"c1\">// true</span>\n<span class=\"n\">personC</span> <span class=\"o\">!=</span> <span class=\"n\">personE</span>      <span class=\"c1\">// false</span></code></pre></figure>\n\n<p>Conveniently, providing an <code class=\"highlighter-rouge\">==</code> function effectively gives us a <code class=\"highlighter-rouge\">!=</code> function for free as you can see from the last example.</p>\n\n<hr />\n\n<p>There is one final point I would like to make about struct and that concerns mutating functions. Look at what happens if we include a function that changes the <code class=\"highlighter-rouge\">name</code> property in the struct:</p>\n\n<p><img src=\"http://troz.net/images/mutating.png\" alt=\"Mutating error\" /></p>\n\n<p>Fix-it is very helpfully pointing out that the method needs to be marked as <code class=\"highlighter-rouge\">mutating</code> for this to work and is showing where this should go. Accepting the suggestion will get rid of the error and then the name can be changed using this method.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"kd\">struct</span> <span class=\"kt\">PersonStruct</span><span class=\"p\">:</span> <span class=\"kt\">Equatable</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n\n    <span class=\"k\">mutating</span> <span class=\"kd\">func</span> <span class=\"nf\">changeName</span><span class=\"p\">(</span><span class=\"n\">to</span> <span class=\"nv\">newName</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">!</span><span class=\"n\">newName</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> <span class=\"p\">{</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">newName</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">var</span> <span class=\"nv\">personC</span> <span class=\"o\">=</span> <span class=\"kt\">PersonStruct</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"Woody\"</span><span class=\"p\">)</span>\n<span class=\"n\">personC</span><span class=\"o\">.</span><span class=\"n\">name</span>    <span class=\"c1\">// Woody</span>\n\n<span class=\"n\">personC</span><span class=\"o\">.</span><span class=\"nf\">changeName</span><span class=\"p\">(</span><span class=\"nv\">to</span><span class=\"p\">:</span> <span class=\"s\">\"Sid\"</span><span class=\"p\">)</span>\n<span class=\"n\">personC</span><span class=\"o\">.</span><span class=\"n\">name</span>    <span class=\"c1\">// Sid</span></code></pre></figure>\n\n<p>There is no problem about using <code class=\"highlighter-rouge\">mutating</code> and it will not have the unintended consequences of using classes. Despite the scary name, a mutating function actually returns a new copy of the struct.</p>\n\n<p>The problem arises if you have many nested structs and the mutating has to spread through the list. So don’t nest your structs - at least not more than two deep!</p>\n\n",
            "url": "http://troz.net/2016/03/structs-vs-classes/",
            "summary": "<p>One of the big debates among Swift developers is when to use <code class=\"highlighter-rouge\">structs</code> and when to use <code class=\"highlighter-rouge\">classes</code>. Classes are the building blocks of object-oriented programming but structs as provided by Swift are newly powerful. Structs have been around in C-based languages for a long time, but Swift has made them more powerful and given them more features so that they are almost indistinguishable from classes. So what are the differences and which one should you use?</p>\n",
            "date_published": "2016-03-30 00:00:00 +1000",
            "tags": ["class", "learning swift", "oop", "struct", "swift"]
        },

        {
            "id": "/2016/03/learning-swift-for-loops",
            "title": "Learning Swift - For-Loops",
            "content_html": "<p>Loops are a fundamental building block of any program. Doing repetitive tasks fast and accurately is what computers are really good at and what we humans get very bored doing. Swift offers several different ways to perform loops, but today we are going to concentrate on for-loops.</p>\n\n<p>The most basic form of loop is the <code class=\"highlighter-rouge\">for-in</code> loop. There are two ways this can be used: looping over the numbers in a range or looping over the elements in an array or dictionary.</p>\n\n<p>Firstly, the range:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"mi\">0</span> <span class=\"o\">..&lt;</span> <span class=\"mi\">5</span> <span class=\"p\">{</span>\n    <span class=\"nf\">printWithSpace</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// prints:  0 1 2 3 4 </span></code></pre></figure>\n\n<p><em>I am using a custom print function that allows me to print the results on a single line for convenience.</em></p>\n\n<p>This <code class=\"highlighter-rouge\">for-in</code> loop uses a half-open range and it is effectively saying:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>start with x at 0\nprint x with a space\nadd 1 to x\nis x still less than 5?\n    yes - go back to the print stage\n    no - stop\n</code></pre>\n</div>\n\n<p>If we wanted to go all the way to 5 instead of stopping before 5, we would use a closed range by replacing <code class=\"highlighter-rouge\">..&lt;</code> with <code class=\"highlighter-rouge\">...</code></p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"mi\">0</span> <span class=\"o\">...</span> <span class=\"mi\">5</span> <span class=\"p\">{</span>\n    <span class=\"nf\">printWithSpace</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// prints:  0 1 2 3 4 5 </span></code></pre></figure>\n\n<hr />\n\n<p>These methods work fine if we want to loop through a range of numbers one at a time but what if we want a different increment? There are several ways to vary the step.</p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">stride(from:to:by:)</code></li>\n  <li><code class=\"highlighter-rouge\">stride(from:through:by:)</code></li>\n  <li><code class=\"highlighter-rouge\">where</code></li>\n</ul>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"nf\">stride</span><span class=\"p\">(</span><span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">to</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"nv\">by</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nf\">printWithSpace</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// prints:  0 2 4 6 8 </span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"nf\">stride</span><span class=\"p\">(</span><span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">through</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"nv\">by</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nf\">printWithSpace</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// prints:  0 2 4 6 8 10 </span></code></pre></figure>\n\n<p>The 2 variations of <code class=\"highlighter-rouge\">stride</code> are analogous to the 2 ways of expressing the range in the the <code class=\"highlighter-rouge\">for-in</code> loop.</p>\n\n<p><code class=\"highlighter-rouge\">stride(from:to:by:)</code> starts with the number in the <code class=\"highlighter-rouge\">from</code> parameter and each time through the loop, increments that number by the amount of the <code class=\"highlighter-rouge\">by</code> parameter. If the incremented number is less than the <code class=\"highlighter-rouge\">to</code> parameter, the loop continues.</p>\n\n<p><code class=\"highlighter-rouge\">stride(from:through:by:)</code> works the same way but continues until the incremented number is greater than or equal to the <code class=\"highlighter-rouge\">through</code> parameter.</p>\n\n<p>Using a negative value for <code class=\"highlighter-rouge\">by</code> allows counting backwards:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"nf\">stride</span><span class=\"p\">(</span><span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"nv\">through</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">by</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nf\">printWithSpace</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// prints:  10 8 6 4 2 0 </span></code></pre></figure>\n\n<p>Stride can also be used for floating point loops although the result may contain some unexpected changes in precision e.g 0.7000000000000001 instead of the expected 0.7</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">let</span> <span class=\"nv\">startingNumber</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"nf\">stride</span><span class=\"p\">(</span><span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"n\">startingNumber</span><span class=\"p\">,</span> <span class=\"nv\">through</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"nv\">by</span><span class=\"p\">:</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nf\">printWithSpace</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// prints:  0.1  0.3  0.5  0.7  0.9  </span></code></pre></figure>\n\n<p>Note that the result does not contain the <code class=\"highlighter-rouge\">through</code> parameter as the next iteration would have produced 1.1 which is greater than it. And also <code class=\"highlighter-rouge\">startingNumber</code> did not have to be a variable as it is never actually changed.</p>\n\n<p>Using <code class=\"highlighter-rouge\">where</code> makes it possible to step through a loop while conforming to some conditional:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"mi\">0</span> <span class=\"o\">...</span> <span class=\"mi\">10</span> <span class=\"k\">where</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"mi\">3</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"p\">{</span>\n    <span class=\"nf\">printWithSpace</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// prints:  0 3 6 9</span></code></pre></figure>\n\n<hr />\n\n<p>The other main use for <code class=\"highlighter-rouge\">for-in</code> loops is for iterating through the elements of an array or dictionary:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">let</span> <span class=\"nv\">arrayOfInts</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span> <span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">arrayOfInts</span> <span class=\"p\">{</span>\n    <span class=\"nf\">printWithSpace</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// prints:  2 4 6 8 10 12</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">let</span> <span class=\"nv\">myDict</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"s\">\"one\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"s\">\"two\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"s\">\"three\"</span> <span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">myDict</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\(</span><span class=\"n\">key</span><span class=\"se\">)</span><span class=\"s\"> = </span><span class=\"se\">\\(</span><span class=\"n\">value</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// prints:</span>\n<span class=\"c1\">//   2 = two</span>\n<span class=\"c1\">//   3 = three</span>\n<span class=\"c1\">//   1 = one</span></code></pre></figure>\n\n<p>As a dictionary is un-sorted, the order of the items may vary.</p>\n\n<p>If you want to loop through an array while also monitoring the index of each element, you can use <code class=\"highlighter-rouge\">enumerated()</code></p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">let</span> <span class=\"nv\">arrayOfNames</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s\">\"Andy\"</span><span class=\"p\">,</span> <span class=\"s\">\"Buzz\"</span><span class=\"p\">,</span> <span class=\"s\">\"Woody\"</span> <span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">element</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">arrayOfNames</span><span class=\"o\">.</span><span class=\"nf\">enumerated</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"The name at index </span><span class=\"se\">\\(</span><span class=\"n\">index</span><span class=\"se\">)</span><span class=\"s\"> is </span><span class=\"se\">\\(</span><span class=\"n\">element</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// prints:</span>\n<span class=\"c1\">//   The name at index 0 is Andy</span>\n<span class=\"c1\">//   The name at index 1 is Buzz</span>\n<span class=\"c1\">//   The name at index 2 is Woody</span></code></pre></figure>\n\n<p>If your array contains optionals, you can use <code class=\"highlighter-rouge\">for case let</code> to test each value:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">let</span> <span class=\"nv\">arrayWithOptionals</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">?]</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s\">\"Woody\"</span><span class=\"p\">,</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"s\">\"Buzz\"</span><span class=\"p\">,</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"s\">\"Rex\"</span> <span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"k\">case</span> <span class=\"k\">let</span> <span class=\"nv\">name</span><span class=\"p\">?</span> <span class=\"k\">in</span> <span class=\"n\">arrayWithOptionals</span> <span class=\"p\">{</span>\n    <span class=\"nf\">printWithSpace</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// prints: Woody Buzz Rex </span></code></pre></figure>\n\n<p>The <code class=\"highlighter-rouge\">name</code> variable is un-wrapped each time through the loop so can be used safely.</p>\n\n<p>Any of these loop styles can be combined with <code class=\"highlighter-rouge\">where</code> to perform checks on each iteration:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">let</span> <span class=\"nv\">arrayWithOptionals</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">?]</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s\">\"Woody\"</span><span class=\"p\">,</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"s\">\"Buzz\"</span><span class=\"p\">,</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"s\">\"Rex\"</span> <span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"k\">case</span> <span class=\"k\">let</span> <span class=\"nv\">name</span><span class=\"p\">?</span> <span class=\"k\">in</span> <span class=\"n\">arrayWithOptionals</span> <span class=\"k\">where</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">characters</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span> <span class=\"p\">{</span>\n    <span class=\"nf\">printWithSpace</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// prints: Buzz Rex </span></code></pre></figure>\n\n<hr />\n\n<p>Some of you may be wondering what happened to the old C-style loops like this:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">for</span> <span class=\"k\">var</span> <span class=\"nv\">x</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"n\">x</span><span class=\"o\">++</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"nv\">terminator</span><span class=\"p\">:</span> <span class=\"s\">\" \"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>This does not work in Swift 3: the <code class=\"highlighter-rouge\">++</code> and <code class=\"highlighter-rouge\">--</code> operators and this style of loop declaration have been removed from the language. For further details, check out the relevant proposals at Swift Evolution:</p>\n\n<ul>\n  <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md\">Remove C-style for-loops with conditions and incrementers</a></li>\n  <li><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md\">Remove the ++ and – operators</a></li>\n</ul>\n\n<hr />\n\n<p>All the examples in this article are available in a <a href=\"https://github.com/trozware/for-loops\">Swift playground</a> now updated to Swift 3 syntax.</p>\n\n",
            "url": "http://troz.net/2016/03/learning-swift-loops/",
            "summary": "<p>Loops are a fundamental building block of any program. Doing repetitive tasks fast and accurately is what computers are really good at and what we humans get very bored doing. Swift offers several different ways to perform loops, but today we are going to concentrate on for-loops.</p>\n",
            "date_published": "2016-03-12 00:00:00 +1000",
            "tags": ["learning swift", "swift"]
        },

        {
            "id": "/2016/02/learning-swift-generics",
            "title": "Learning Swift - Generics",
            "content_html": "<p>One of the nice things about Swift is how clean your code looks. A lot of the weird characters that pepper the code of other languages has been eliminated: No more semi-colons, asterisks etc.</p>\n\n<p>But then you are reading somebody else’s code and you find these angle brackets all over the place and they don’t seem to make sense.</p>\n\n<p>What does this mean?</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"kd\">func</span> <span class=\"n\">mid</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"p\">:</span> <span class=\"kt\">Comparable</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nv\">array</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">T</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">T</span></code></pre></figure>\n\n<p>It looks like it is a function to find the middle element in an array, but what is <code class=\"highlighter-rouge\">&lt;T: Comparable&gt;</code> or <code class=\"highlighter-rouge\">[T]</code> or even just <code class=\"highlighter-rouge\">T</code>? They are describing Generic data types.</p>\n\n<p>Using the dictionary, I find the following definition for <code class=\"highlighter-rouge\">generic</code>:</p>\n\n<blockquote>\n  <p>characteristic of or relating to a class or group of things; not specific.</p>\n</blockquote>\n\n<p>And that really provides quite a good definition for Swift’s generics too. They allow you to assign a non-specific data type to a function so that function can be used for many different data types.</p>\n\n<hr />\n\n<p>But enough of the theory: by far the best way to understand generics is to encounter the problem they are meant to solve and then to solve it.</p>\n\n<p>The other day I was processing data to feed to a charting library. I ended up with an array of CGFloats, but there were too many of them, so I wrote a function to give me the last x elements of an array of CGFloats:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"kd\">func</span> <span class=\"nf\">endOf</span><span class=\"p\">(</span><span class=\"nv\">array</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">CGFloat</span><span class=\"p\">],</span> <span class=\"nv\">numberOfElementsToInclude</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">CGFloat</span><span class=\"p\">]</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"n\">numberOfElementsToInclude</span> <span class=\"o\">&gt;</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">array</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">let</span> <span class=\"nv\">startingElement</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">-</span> <span class=\"n\">numberOfElementsToInclude</span>\n    <span class=\"k\">let</span> <span class=\"nv\">endOfArray</span> <span class=\"o\">=</span> <span class=\"kt\">Array</span><span class=\"p\">(</span><span class=\"n\">array</span><span class=\"p\">[</span><span class=\"n\">startingElement</span> <span class=\"o\">..&lt;</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"n\">endOfArray</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">largeArray</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">CGFloat</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"mf\">4.0</span><span class=\"p\">,</span> <span class=\"mf\">5.0</span><span class=\"p\">,</span> <span class=\"mf\">6.0</span><span class=\"p\">,</span> <span class=\"mf\">7.0</span><span class=\"p\">,</span> <span class=\"mf\">8.0</span><span class=\"p\">,</span> <span class=\"mf\">9.0</span><span class=\"p\">,</span> <span class=\"mf\">10.0</span>\n<span class=\"p\">]</span>\n<span class=\"k\">let</span> <span class=\"nv\">smallArray</span> <span class=\"o\">=</span> <span class=\"nf\">endOf</span><span class=\"p\">(</span><span class=\"nv\">array</span><span class=\"p\">:</span> <span class=\"n\">largeArray</span><span class=\"p\">,</span> <span class=\"nv\">numberOfElementsToInclude</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"c1\">// smallArray now equals [8.0, 9.0, 10.0]</span></code></pre></figure>\n\n<p>OK, so <code class=\"highlighter-rouge\">largeArray</code> isn’t actually the largest array you have ever seen, but it works for demo purposes. In my code, I had over 20,000 entries in the large array and only wanted the last 5,000.</p>\n\n<p>I was completely happy with that until I found another data source where the data was an array of Ints. Still perfectly chartable using my charting library, but I could not get the end of the array using my nice function. First thought was to replicate the function:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"kd\">func</span> <span class=\"nf\">endOf</span><span class=\"p\">(</span><span class=\"nv\">array</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">],</span> <span class=\"nv\">numberOfElementsToInclude</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">]</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"n\">numberOfElementsToInclude</span> <span class=\"o\">&gt;</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">array</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">let</span> <span class=\"nv\">startingElement</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">-</span> <span class=\"n\">numberOfElementsToInclude</span>\n    <span class=\"k\">let</span> <span class=\"nv\">endOfArray</span> <span class=\"o\">=</span> <span class=\"kt\">Array</span><span class=\"p\">(</span><span class=\"n\">array</span><span class=\"p\">[</span><span class=\"n\">startingElement</span> <span class=\"o\">..&lt;</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"n\">endOfArray</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">largeArrayInt</span> <span class=\"o\">=</span> <span class=\"p\">[</span> \t<span class=\"c1\">// type inferred to be Int</span>\n    <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span>\n<span class=\"p\">]</span>\n<span class=\"k\">let</span> <span class=\"nv\">smallArrayInt</span> <span class=\"o\">=</span> <span class=\"nf\">endOf</span><span class=\"p\">(</span><span class=\"nv\">array</span><span class=\"p\">:</span> <span class=\"n\">largeArrayInt</span><span class=\"p\">,</span> <span class=\"nv\">numberOfElementsToInclude</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"c1\">// smallArrayInt now equals [4, 5, 6, 7, 8, 9, 10]</span></code></pre></figure>\n\n<p>A quick glance will reveal that the declaration line was the only thing that changed. I didn’t have to give the function a new name because the compiler worked out which of the two functions to use based on the types supplied. So all I was doing was replacing <code class=\"highlighter-rouge\">CGFloat</code> with <code class=\"highlighter-rouge\">Int</code> in two places (the <code class=\"highlighter-rouge\">numberOfElementsToInclude</code> parameter remains an <code class=\"highlighter-rouge\">Int</code> in both cases).</p>\n\n<p><strong>As soon as you find yourself replicating code and only changing the types of the data, that is a sign that you need to use generics.</strong></p>\n\n<p>For my first attempt at creating a generic function, all I did was replace the word <code class=\"highlighter-rouge\">CGFloat</code> with <code class=\"highlighter-rouge\">T</code> where <code class=\"highlighter-rouge\">T</code> indicates some type that will be specified when the function is called. The convention is to use single letters for generic types: <code class=\"highlighter-rouge\">T</code> for Type, <code class=\"highlighter-rouge\">A</code> for AnyObject, <code class=\"highlighter-rouge\">Z</code> because you feel like it. The choice is up to you.</p>\n\n<p>That produced this error:</p>\n\n<p><img src=\"http://troz.net/images/Generics_error.png\" alt=\"Generics error\" /></p>\n\n<p><code class=\"highlighter-rouge\">Use of undeclared type 'T'</code>. Well that seems fair enough… how is the compiler supposed to know what a <code class=\"highlighter-rouge\">T</code> is?</p>\n\n<p>It turns out that this is where the angle brackets come into play. You have to warn the compiler that this function is going to get a generic type and that the <code class=\"highlighter-rouge\">T</code> is only a placeholder, not a real type. So this version compiles and works - notice the <code class=\"highlighter-rouge\">&lt;T&gt;</code> between the function name and the opening bracket:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"kd\">func</span> <span class=\"n\">endOf</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nv\">array</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">T</span><span class=\"p\">],</span> <span class=\"nv\">numberOfElementsToInclude</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">T</span><span class=\"p\">]</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"n\">numberOfElementsToInclude</span> <span class=\"o\">&gt;</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">array</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">let</span> <span class=\"nv\">startingElement</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">-</span> <span class=\"n\">numberOfElementsToInclude</span>\n    <span class=\"k\">let</span> <span class=\"nv\">endOfArray</span> <span class=\"o\">=</span> <span class=\"kt\">Array</span><span class=\"p\">(</span><span class=\"n\">array</span><span class=\"p\">[</span><span class=\"n\">startingElement</span> <span class=\"o\">..&lt;</span> <span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"n\">endOfArray</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Now I have no code duplication and if I ever get another data set that uses a different object type, my function will still work.</p>\n\n<hr />\n\n<p>Now we know to use generics instead of replicating code that operates in the same way on different data types.</p>\n\n<p>And we know how to construct a generic function.</p>\n\n<p>Using it is identical to using the two functions I had before:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">let</span> <span class=\"nv\">largeArray</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">CGFloat</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"mf\">4.0</span><span class=\"p\">,</span> <span class=\"mf\">5.0</span><span class=\"p\">,</span> <span class=\"mf\">6.0</span><span class=\"p\">,</span> <span class=\"mf\">7.0</span><span class=\"p\">,</span> <span class=\"mf\">8.0</span><span class=\"p\">,</span> <span class=\"mf\">9.0</span><span class=\"p\">,</span> <span class=\"mf\">10.0</span>\n<span class=\"p\">]</span>\n<span class=\"k\">let</span> <span class=\"nv\">smallArray</span> <span class=\"o\">=</span> <span class=\"nf\">endOf</span><span class=\"p\">(</span><span class=\"nv\">array</span><span class=\"p\">:</span> <span class=\"n\">largeArray</span><span class=\"p\">,</span> <span class=\"nv\">numberOfElementsToInclude</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">largeArrayInt</span> <span class=\"o\">=</span> <span class=\"p\">[</span> \t<span class=\"c1\">// type inferred to be Int</span>\n    <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span>\n<span class=\"p\">]</span>\n<span class=\"k\">let</span> <span class=\"nv\">smallArrayInt</span> <span class=\"o\">=</span> <span class=\"nf\">endOf</span><span class=\"p\">(</span><span class=\"nv\">array</span><span class=\"p\">:</span> <span class=\"n\">largeArrayInt</span><span class=\"p\">,</span> <span class=\"nv\">numberOfElementsToInclude</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">)</span></code></pre></figure>\n\n<p>You do not have to specify what <code class=\"highlighter-rouge\">T</code> is when calling the function, that will be inferred from the supplied data.</p>\n\n<hr />\n\n<p>Moving on into more advanced use cases, we have two things to consider:</p>\n\n<ol>\n  <li>Functions where the generic parameters must conform to a protocol.</li>\n  <li>Functions that take generic parameters of different types.</li>\n</ol>\n\n<p>The example function I started with (not mine but I forget where I got it… If it is yours, thanks you very much) used:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"kd\">func</span> <span class=\"n\">mid</span> <span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"p\">:</span> <span class=\"kt\">Comparable</span><span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"nv\">array</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">T</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">T</span></code></pre></figure>\n\n<p>Instead of specifying the type as completely generic, it specified that it must conform to the Comparable protocol.\nThis is because the function body used a <code class=\"highlighter-rouge\">sort()</code> function so the generic function needed to be sure that the elements in the array could be compared. This technique can also be used to restrict the parameter types to sub-classes of a certain class.</p>\n\n<p>For a function with more than one generic data type, you need to use more than one placeholder letter:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"kd\">func</span> <span class=\"n\">genericWithTwoDifferentTypes</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"p\">,</span> <span class=\"kt\">U</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nv\">param1</span><span class=\"p\">:</span> <span class=\"kt\">T</span><span class=\"p\">,</span> <span class=\"nv\">param2</span><span class=\"p\">:</span> <span class=\"kt\">U</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Bool</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// ...</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>And in exactly the same way, both <code class=\"highlighter-rouge\">T</code> and <code class=\"highlighter-rouge\">U</code> can be set to conform to a protocol or be members of a certain super-class.</p>\n\n<hr />\n\n<p>Hopefully this has taken some of the mystery out of generics, but if you have any questions, please get in touch using the <a href=\"http://troz.net/contact/\">Contact page</a>, comment below or contact me via Twitter: <a href=\"https://twitter.com/trozware\">@trozware</a>.</p>\n\n",
            "url": "http://troz.net/2016/02/learning-swift-generics/",
            "summary": "<p>One of the nice things about Swift is how clean your code looks. A lot of the weird characters that pepper the code of other languages has been eliminated: No more semi-colons, asterisks etc.</p>\n",
            "date_published": "2016-02-29 00:00:00 +1000",
            "tags": ["learning swift", "swift"]
        },

        {
            "id": "/2016/02/singleton-to-protocol",
            "title": "Singleton to Protocol",
            "content_html": "<p>I was driving through the town of <a href=\"https://en.wikipedia.org/wiki/Singleton,_New_South_Wales\">Singleton</a> the other day and of course, it got me thinking about using singletons in my apps. Singletons were a commonly used pattern in Objective-C programming and appear in many of Apple’s own APIs, but seem to be increasingly frowned upon in the Swift world.</p>\n\n<h3 id=\"so-what-is-a-singleton\">So what is a singleton?</h3>\n\n<p>A singleton is a class that only expects to have a single instance. Think of it as a global instance of a class. In some cases this makes perfect sense if there can only ever be one instance of a particular class or if there is a default variant that suits most cases e.g.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"kt\">UIApplication</span><span class=\"o\">.</span><span class=\"n\">shared</span>\n<span class=\"kt\">UserDefaults</span><span class=\"o\">.</span><span class=\"n\">standard</span>\n<span class=\"kt\">NotificationCenter</span><span class=\"o\">.</span><span class=\"k\">default</span>\n<span class=\"kt\">FileManager</span><span class=\"o\">.</span><span class=\"k\">default</span>\n<span class=\"kt\">URLSession</span><span class=\"o\">.</span><span class=\"n\">shared</span></code></pre></figure>\n\n<p>If you are using an object with a property name of “shared”, “standard” or “default” you can be pretty sure it is an singleton.</p>\n\n<h3 id=\"and-whats-the-problem-with-singletons\">And what’s the problem with singletons?</h3>\n\n<p>There are probably many different opinions here but I have two thoughts about this:</p>\n\n<ol>\n  <li>They are effectively global variables and global variables can make your code messy and un-predictable.</li>\n  <li>If they can be accessed by multiple other objects, possibly at the same time, then you can get conflicts. These can be handled by clever use of background queues, but it isn’t easy.</li>\n</ol>\n\n<h3 id=\"what-to-use-instead\">What to use instead?</h3>\n\n<p>As I drove, I mused on a singleton that I had implemented recently. It was a logging utility that allowed any object in my app (mostly view controllers) to save a new entry to a log file. The basic structure of the Logger class was this:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"kd\">class</span> <span class=\"kt\">Logger</span> <span class=\"p\">{</span>\n    <span class=\"kd\">static</span> <span class=\"k\">let</span> <span class=\"nv\">sharedLogger</span> <span class=\"o\">=</span> <span class=\"kt\">Logger</span><span class=\"p\">()</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">addToLog</span><span class=\"p\">(</span><span class=\"nv\">event</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// use private functions to find log file URL</span>\n      <span class=\"c1\">// append event text with time stamp</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Any object in my app could use the Logger like this:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"kt\">Logger</span><span class=\"o\">.</span><span class=\"n\">sharedLogger</span><span class=\"o\">.</span><span class=\"nf\">addToLog</span><span class=\"p\">(</span><span class=\"nv\">event</span><span class=\"p\">:</span> <span class=\"n\">newLogEvent</span><span class=\"p\">)</span></code></pre></figure>\n\n<p>When I got to think about how I was using this, I realised that instead of a Logger <em>object</em> that everything could use, what I really needed was a Loggable <em>behaviour</em> that I could apply &amp; restrict to the few classes that actually needed to log events. For me, this was the break-through:</p>\n\n<blockquote>\n  <p><strong>Create a behaviour, not an object.</strong></p>\n</blockquote>\n\n<p>As soon as I started thinking about this as a behaviour, a protocol became the obvious solution, so this is what I created:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"kd\">protocol</span> <span class=\"kt\">Loggable</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// not declaring functions here</span>\n  <span class=\"c1\">// as they should NOT be over-written</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">extension</span> <span class=\"kt\">Loggable</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">addToLog</span><span class=\"p\">(</span><span class=\"nv\">event</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// use private functions to find log file URL</span>\n      <span class=\"c1\">// append event text with time stamp</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>We run immediately into one of the peculiarities of Swift protocol extensions which has been very well explained by <a href=\"http://cjwirth.com/2016/01/20/swift-protocol-extension-weirdness/\">Caesar Wirth</a>. If I had declared <code class=\"highlighter-rouge\">addToLog(_:)</code> in the protocol, then any class or struct conforming to this protocol would have been free to over-write this function and provide its own version. This is not what I wanted here - I wanted every object to use the same version. So I left the function declaration out of the protocol definition and only included it in the protocol extension.</p>\n\n<p>To use this behaviour, a class or struct just has to be declared as conforming to the Loggable protocol:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"kd\">class</span> <span class=\"kt\">MyClass</span><span class=\"p\">:</span> <span class=\"kt\">Loggable</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">doSomething</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nf\">addToLog</span><span class=\"p\">(</span><span class=\"nv\">event</span><span class=\"p\">:</span> <span class=\"s\">\"I did something!\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>For my app, I knew that I would want all my NSViewControllers to be able to add log events, so instead of setting them all individually as conforming to the protocol, I used this shortcut which extends all NSViewControllers to conform to the protocol.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"kd\">extension</span> <span class=\"kt\">NSViewController</span><span class=\"p\">:</span> <span class=\"kt\">Loggable</span> <span class=\"p\">{}</span></code></pre></figure>\n\n<p>I added this line to the Loggable.swift file where I declared the protocol and its extension, but outside both of them.</p>\n\n<hr />\n\n<p>Protocol-oriented programming is a new technique to me, so it really helps when I can find a practical example of where it solves a problem.</p>\n\n<p>If you are new to POP, I highly recommend the <a href=\"https://developer.apple.com/videos/play/wwdc2015/408/\">Crusty talk</a> from WWDC 2015. And this article by <a href=\"http://matthijshollemans.com/2015/07/22/mixins-and-traits-in-swift-2/\">Matthijs Hollemans</a> was invaluable to me in demonstrating the problems with object inheritance that are solved by protocols.</p>\n\n",
            "url": "http://troz.net/2016/02/singleton-to-protocol/",
            "summary": "<p>I was driving through the town of <a href=\"https://en.wikipedia.org/wiki/Singleton,_New_South_Wales\">Singleton</a> the other day and of course, it got me thinking about using singletons in my apps. Singletons were a commonly used pattern in Objective-C programming and appear in many of Apple’s own APIs, but seem to be increasingly frowned upon in the Swift world.</p>\n",
            "date_published": "2016-02-26 00:00:00 +1000",
            "tags": ["learning swift", "swift"]
        },

        {
            "id": "/2016/02/three-rules-for-writing-better-swift",
            "title": "Three Rules for Writing Better Swift",
            "content_html": "<h3 id=\"1-do-not-use-\">1. Do not use !</h3>\n\n<p>Swift uses optionals for values that can be nil. To use an optional value, you need to “un-wrap” it first, which means getting the actual value out, assuming that the value exists and the optional is not actually nil.</p>\n\n<p><a href=\"http://troz.net/2016/02/learning-swift-optionals/\">Optionals</a> are the subject of a complete post by themselves, but for now, I will just say this:\nWhen you use ! you are <strong>promising</strong> the compiler that you will make sure there is a real value in that optional by the time it is needed.</p>\n\n<p>If this is not the case, your app will crash as shown in this playground:</p>\n\n<p><img src=\"http://troz.net/images/Playground2.png\" alt=\"Playground crash\" /></p>\n\n<p>Instead of using ! you should use optional chaining with ? or check the value with <code class=\"highlighter-rouge\">guard</code> or <code class=\"highlighter-rouge\">if let</code> before use.</p>\n\n<p>One trap to beware of is with Xcode’s attempts to be helpful and suggest fixes to problems. If you use an optional where it cannot work, Xcode will warn you that it is incorrect, but the suggested fix will be to insert !</p>\n\n<p><img src=\"http://troz.net/images/optional_fix.png\" alt=\"Optional fix\" /></p>\n\n<p>When you see this, do not accept the suggested fix, but use it as a warning to show that you need to fix the problem properly.</p>\n\n<hr />\n\n<h3 id=\"2-use-let-not-var\">2. Use let, not var</h3>\n\n<p>Using constants in C-based languages is a pain. I could never remember the Objective-C syntax for declaring a static constant, so used to fall back to using <code class=\"highlighter-rouge\">#define</code> for global constants. Inside my objects, all instance properties were variables, not constants. Inside functions, it was the same.</p>\n\n<p>It doesn’t take much imagination to work out that your apps will perform better and more securely if values that do not need to change are allocated as constants instead of variables.</p>\n\n<p>With Swift, this is easy as you just declare a constant using the <code class=\"highlighter-rouge\">let</code> keyword and declare variables using <code class=\"highlighter-rouge\">var</code>. The Swift compiler will now warn you if you have used <code class=\"highlighter-rouge\">var</code> where <code class=\"highlighter-rouge\">let</code> would do, but I prefer to declare everything using <code class=\"highlighter-rouge\">let</code> and only change to <code class=\"highlighter-rouge\">var</code> when this causes an error as shown in this playground example:</p>\n\n<p><img src=\"http://troz.net/images/Playground3.png\" alt=\"Playground let error\" /></p>\n\n<hr />\n\n<h3 id=\"3-allow-the-compiler-to-infer-types\">3. Allow the compiler to infer types</h3>\n\n<p>With Objective-C and many other languages, you have to tell the compiler exactly what each variable is going to be: a string, an integer, an object of a certain type.</p>\n\n<p>With Swift, the compiler is clever enough to work this out for you, which can make your code much cleaner looking and easy to read.</p>\n\n<p>There are a few exceptions to this rule which are shown in the playground below:</p>\n\n<p>Lines 3 - 6 are allowing the Swift compiler to decide what the type is and it is choosing valid types: Int, Double, String and UIView.</p>\n\n<p>Line 8 is a case where we do not want the default type, which would be Double so we need to tell the compiler that this one really should be a CGFloat.</p>\n\n<p>Lines 10 &amp; 11 both deal with an array of Ints. In line 10, the values are supplied so the type of the array can be inferred.\nIn the second case, the array is initially empty, so the type needs to be specified in the declaration.</p>\n\n<p>Lines 13 and 14 are the same but with dictionaries instead of arrays.</p>\n\n<p>In each case, it would have been valid Swift to specify the type but why bother? The more text you enter , the more change of mistake and it leaves your code looking cluttered.</p>\n\n<p>If you ever need to check what type has been assigned to a constant or variable, Option-click on it in Xcode and you willl get a popup telling you what it is.</p>\n\n<p><img src=\"http://troz.net/images/Playground4.png\" alt=\"Playground types\" /></p>\n\n<hr />\n\n<p>This was going to be five rules, but then I got a bit too verbose so will add more rules in a separate post.</p>\n\n",
            "url": "http://troz.net/2016/02/three-rules-for-writing-better-swift/",
            "summary": "<h3 id=\"1-do-not-use-\">1. Do not use !</h3>\n",
            "date_published": "2016-02-24 00:00:00 +1000",
            "tags": ["learning swift", "swift"]
        },

        {
            "id": "/2016/02/configuring-xcode",
            "title": "Configuring Xcode",
            "content_html": "<p>While not strictly a part of my Learning Swift series, today I thought I would discuss some of the ways to configure and use Xcode to be a more productive and comfortable programmer.</p>\n\n<h3 id=\"1-editor-color-themes-and-fonts\">1. Editor color themes and fonts:</h3>\n\n<p><img src=\"http://troz.net/images/XcodeFontPrefs.png\" alt=\"\" /></p>\n\n<p>Step through the supplied themes and find the best one for you. Then click the ‘+’ button at the bottom of the list and duplicate the selected theme. Now you can tweak it to suit you. Each text category can have its own font and size, but you can make multiple selections in order to do a bulk change. don’t forget to check out the Console section too - I dislike the default bold text for many of the console reports, so always change that.</p>\n\n<p>An editing font should be mono-spaced i.e. every character should take up exactly the same width on the screen. This makes your code look neater and neater code is easier to read when you come back to it. I also much prefer a sans-serif font, but that is a matter of preference.</p>\n\n<p>Menlo is the font used by Xcode as a default, but there are many other options either in the default installation of OS X or as free downloads. I change every now and then just to keep things interesting, but my current selection is <a href=\"https://github.com/tonsky/FiraCode\">Fira Code</a>. I love the way it merges two character symbols into a single character for faster comprehension.</p>\n\n<p>My other favourites are:</p>\n\n<ul>\n  <li><a href=\"https://github.com/adobe-fonts/source-code-pro\">Source Code Pro</a></li>\n  <li><a href=\"https://github.com/chrissimpkins/hack\">Hack</a></li>\n  <li><a href=\"https://github.com/mozilla/Fira\">Fira</a></li>\n  <li><a href=\"http://www.fontsquirrel.com/fonts/Inconsolata\">Inconsolata</a></li>\n</ul>\n\n<p>Look for a font that makes it easy to distinguish the digit ‘1’ from a lowercase ‘l’ and where the digit ‘0’ is different to the ‘O’.</p>\n\n<p>To install and use a new font, download the files and then double-click a TTF or OTF font file to install it in FontBook. Once the font is installed, you may need to restart Xcode in order to make it available.</p>\n\n<hr />\n\n<h3 id=\"2-add-ons\">2. Add-ons:</h3>\n\n<p><strong>Update:</strong> Xcode 8 has removed the ability to run any plugins or to use Alcatraz, so this sectrion is no longer valid. Instead Apple is offering offical support for Xcode Source Editor Extensions, so they are the way of the future.</p>\n\n<hr />\n\n<h3 id=\"3-documentation\">3. Documentation:</h3>\n\n<p>Xcode has excellent documentation, but unless you specifically download it, this will all be accessed online. If you have a bad or non-existent connection, this can be annoying. Go to Xcode’s Preferences -&gt; Downloads and download all the document sets you are interested in. They are quite large, but having them local will be a big bonus.</p>\n\n<p>The other tool I use for documentation is <a href=\"https://kapeli.com/dash\">Dash</a>. It supports many languages and is not just for use in Xcode. I found the Xcode integration plugin was not very useful as it conflicted with other useful behaviours. So I set up a global shortcut in System Preferences to search Dash for the selected text. This is much faster than Xcode’s built-in documentation.</p>\n\n<p><img src=\"http://troz.net/images/Dash.png\" alt=\"\" /></p>\n\n<hr />\n\n<h3 id=\"4-other-preferences\">4. Other preferences:</h3>\n\n<p>Go through the preference panes in Xcode’s preferences and tweak to suit your style or your group’s preferred style.</p>\n\n<p>General and Text Editing are important. Text Editing has a second tab for Indentation which is easy to miss. Indentation styles seem to cause a lot of heated debate, so make sure you check this out.</p>\n\n<p>Accounts is vital if you are publishing to the App Stores and also makes it easy to transfer all your develop information from one computer to another.</p>\n\n<p>Fonts &amp; Colors and Downloads are discussed above.</p>\n\n<p>I tend to leave the  others set to the defaults.</p>\n\n",
            "url": "http://troz.net/2016/02/configuring-xcode/",
            "summary": "<p>While not strictly a part of my Learning Swift series, today I thought I would discuss some of the ways to configure and use Xcode to be a more productive and comfortable programmer.</p>\n",
            "date_published": "2016-02-17 00:00:00 +1000",
            "tags": ["learning swift", "xcode"]
        },

        {
            "id": "/2016/02/how-do-i-start-to-learn-swift",
            "title": "How do I start to learn Swift?",
            "content_html": "<p>The first thing to do is to download the latest version of Apple’s <a href=\"https://itunes.apple.com/book/swift-programming-language/id881256329\">Swift Programming Language book</a> from the iBooks Store.</p>\n\n<p>You can just read this book, especially the first section: “A Swift Tour”, but you will get more out of it if you follow along with the playground. There is a link to download the playground from the book which you can use directly if you are reading using iBooks on the Mac. If you are not, here is the <a href=\"https://developer.apple.com/go/?id=swift-tour\">download link</a>.</p>\n\n<p>You will also need to install <a href=\"https://itunes.apple.com/app/xcode/id497799835\">Xcode</a> from the Mac App Store. Xcode is Apple’s IDE and is used for programming Mac, iPhones, iPads, Apple Watches and Apple TVs.</p>\n\n<p>Swift introduced the playground to Xcode. A playground is a fantastic way to learn and experiment. You do not need to create a project, build, run a separate app, install on a device. Code typed into a playground is run immediately and you can see the results instantly, line by line.</p>\n\n<p>Here is an example of a playground showing the code on the left and the result of each line appearing on the right.</p>\n\n<p><img src=\"http://troz.net/images/Playground1.png\" alt=\"Playground\" /></p>\n\n<hr />\n\n<p>Once you have gone through the Swift Tour, Apple’s book becomes more of a reference guide to return to whenever you get stuck. The other way I use it is to check up on changes made when a new version of Swift is released. As the language is still rapidly evolving, these can be quite extensive. Once I have the latest version of the book, I go to the Revision History at the back and click the links to read about the features that have been added or changed.</p>\n\n<hr />\n\n<p>Apart from Apple’s documentation, there are a lot of great web sites, blogs and Twitter accounts out there. There are also useful newsletters that give a weekly summary of exciting developments.</p>\n\n<p>Here are some of my favourites:</p>\n\n<ul>\n  <li><a href=\"https://www.natashatherobot.com\">Natasha the Robot</a> - my favourite Swift blogger - sign up for her newsletter and follow her on Twitter.</li>\n  <li><a href=\"https://developer.apple.com/swift/blog/\">Apple’s Swift Blog</a> - not many posts, but good for learning about new features.</li>\n  <li><a href=\"http://ericasadun.com\">Erica Sadun</a> - sometimes a bit too technical for me, but often contains some really useful snippets. Erica has the distinction of being the first person outside Apple to have had a Swift language proposal accepted as part of the open source development process.</li>\n  <li><a href=\"http://andybargh.com\">Andy Bargh</a> - detailed articles on various aspects of Swift, plus a weekly newsletter.</li>\n  <li><a href=\"http://www.raywenderlich.com\">Ray Wenderlich tutorials</a> - search for Swift and find heaps of tutorials covering many different aspects.</li>\n  <li><a href=\"http://swiftsandbox.io\">Swift Sandbox</a> - weekly newsletter filled with interesting articles.</li>\n  <li><a href=\"http://swiftmonthly.com\">SwiftMonthly</a> - useful newsletter with links to tutorials, videos and projects.</li>\n  <li><a href=\"http://swiftdoc.org\">SwiftDoc.org</a> - the documentation in Xcode is still heavily skewed towards Objective-C programmers and it can be difficult to find Swift-specific entries. This site makes it easy.</li>\n</ul>\n\n<p>And I hope you will keep coming back to this site to see what new Swift-related articles are available.</p>\n\n",
            "url": "http://troz.net/2016/02/how-do-i-start-to-learn-swift/",
            "summary": "<p>The first thing to do is to download the latest version of Apple’s <a href=\"https://itunes.apple.com/book/swift-programming-language/id881256329\">Swift Programming Language book</a> from the iBooks Store.</p>\n",
            "date_published": "2016-02-16 00:00:00 +1000",
            "tags": ["learning swift", "swift"]
        },

        {
            "id": "/2016/02/learning-swift-optionals",
            "title": "Learning Swift - Optionals",
            "content_html": "<p>Today I plan to discuss optionals since they were a feature of Swift that I found difficult to grasp at first.</p>\n\n<h3 id=\"what-is-an-optional-in-swift\">What is an optional in Swift?</h3>\n\n<p>An optional is a variable of a specified type that can also be nil.</p>\n\n<h3 id=\"why-does-this-matter\">Why does this matter?</h3>\n\n<p>In Objective-C, any object type could be nil. If you declared a variable like this:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-objc\" data-lang=\"objc\"><span class=\"n\">NSString</span> <span class=\"o\">*</span><span class=\"n\">myString</span><span class=\"p\">;</span></code></pre></figure>\n\n<p>then <code class=\"highlighter-rouge\">myString</code> was set to nil by default.</p>\n\n<p>But this could cause issues, especially as Objective-C does not complain if you send a message to nil. This could lead to bugs that were very difficult to track down.</p>\n\n<p>The other big use for nil is when returning from a function which has found no appropriate data to return. The classic example is when looking for the index of an element in an array. What should be returned if the element is not found in the array?</p>\n\n<p>Some languages return -1, Objective-C uses <code class=\"highlighter-rouge\">NSNotFound</code>, but you have to know what each language is going to do. The more logical answer is nil. However if your function is expected to return an integer, then it cannot return nil because nil is not an integer.</p>\n\n<p>This is where optionals come in: if the function is expected to return an optional integer, it can return with an integer with the index of the matching element, or it can return nil if the element was not found. This is much clearer and less prone to error.</p>\n\n<hr />\n\n<h2 id=\"how-does-swift-handle-optionals\">How does Swift handle optionals?</h2>\n\n<p>One of the first things that struck me about Swift was how clean the code looked, without so many non-alphanumeric characters scattered around. Gone were all the:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"o\">*</span> <span class=\"p\">;</span> <span class=\"p\">[</span> <span class=\"p\">]</span>\n  </code></pre></figure>\n\n<p>But instead, Swift code sprouted:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"o\">!</span> <span class=\"p\">?</span></code></pre></figure>\n\n<p>What were these?</p>\n\n<p><strong>The key to understanding optionals is to realise that when you declare an optional variable of a certain type, you are actually declaring a box that can hold a variable of that type or can hold nil.</strong></p>\n\n<p>Once you grasp that concept, it all becomes much more obvious.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">var</span> <span class=\"nv\">optionalInteger</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">?</span></code></pre></figure>\n\n<p>The ? indicates that this is an optional variable. It does not have to be initialised as it is already set to nil which is valid for an optional variable. Without the ? this would require initialisation as it would not be valid for it to be nil.</p>\n\n<hr />\n\n<h3 id=\"setting-an-optional\">Setting an optional:</h3>\n\n<p>Setting the value of an optional variable is just the same as any other variable:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"n\">optionalInteger</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">optionalInteger</span> <span class=\"o\">=</span> <span class=\"mi\">42</span></code></pre></figure>\n\n<hr />\n\n<h3 id=\"getting-an-optional\">Getting an optional:</h3>\n\n<p>The difference arises when you need to get the data out of the optional variable in order to use it. This process is called un-wrapping and it means to get the variable value out of the ‘box’ it is stored it.</p>\n\n<h4 id=\"the-most-obvious-way-is-to-use-\">The most obvious way is to use !</h4>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"k\">let</span> <span class=\"nv\">newInteger</span> <span class=\"o\">=</span> <span class=\"n\">optionalInteger</span><span class=\"o\">!</span></code></pre></figure>\n\n<p><strong>DO NOT DO THIS!</strong></p>\n\n<p>This is called forced-unwrapping and assumes that the optional variable is not nil. If the optional is nil, this will crash.\nIn Xcode, when you connect interface elements from your storyboard to a Swift file, Xcode will use ! like this:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"kd\">@IBOutlet</span> <span class=\"k\">weak</span> <span class=\"k\">var</span> <span class=\"nv\">startButton</span><span class=\"p\">:</span> <span class=\"kt\">UIButton</span><span class=\"o\">!</span></code></pre></figure>\n\n<p>I have to assume Xcode knows what it is doing and the button will be available when needed, but you should not use ! - it is un-safe. By using it, you are vowing to the compiler that when it gets to that point, the optional value will not be nil. There are much better and safer ways of doing that.</p>\n\n<hr />\n\n<h4 id=\"use-if-let\">Use ‘if let’:</h4>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"kd\">func</span> <span class=\"nf\">doubleNumber</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">optionalInteger</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">?)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span><span class=\"p\">?</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">integerValue</span> <span class=\"o\">=</span> <span class=\"n\">optionalInteger</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// integerValue is not an optional</span>\n        <span class=\"c1\">// and is guaranteed to contain an Int</span>\n        <span class=\"k\">return</span> <span class=\"n\">integerValue</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"c1\">// no integer found in the optional,</span>\n    <span class=\"c1\">// so return nil to indicate failure</span>\n    <span class=\"k\">return</span> <span class=\"kc\">nil</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<hr />\n\n<h4 id=\"use-guard\">Use guard:</h4>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"kd\">func</span> <span class=\"nf\">doubleNumber</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">optionalInteger</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">?)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span><span class=\"p\">?</span> <span class=\"p\">{</span>\n    <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">integerValue</span> <span class=\"o\">=</span> <span class=\"n\">optionalInteger</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// get out quickly, </span>\n        <span class=\"c1\">// returning nil to indicate failure</span>\n        <span class=\"k\">return</span> <span class=\"kc\">nil</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"c1\">// integerValue is not an optional </span>\n    <span class=\"c1\">// and is guaranteed to contain an Int</span>\n    <span class=\"k\">return</span> <span class=\"n\">integerValue</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>These two alternatives (<code class=\"highlighter-rouge\">if let</code> &amp; <code class=\"highlighter-rouge\">guard</code>) do the same job but in opposite ways. In both cases, they perform a conditional un-wrapping that may or may not give a valid result. <code class=\"highlighter-rouge\">if let</code> checks if it is OK to proceed. <code class=\"highlighter-rouge\">guard</code> checks to see if it is NOT OK to proceed. Which you use is really a matter of personal preference and working out what is more logical in each case.</p>\n\n<p>The <code class=\"highlighter-rouge\">guard</code> statement is really good for checking data early in a process and making a quick exit it something is wrong.\nThe <code class=\"highlighter-rouge\">if let</code> construct encloses your success code inside a block and can sometimes leave the failure code a long way from the check which can make it less obvious. The other potential issue with <code class=\"highlighter-rouge\">if let</code> is the “pyramid of doom” common in early Swift code as demonstrated in this rather contrived example:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"kd\">func</span> <span class=\"nf\">isValidAddressBookEntry</span><span class=\"p\">(</span>\n    <span class=\"nv\">firstName</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">?,</span>\n    <span class=\"nv\">lastName</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">?,</span>\n    <span class=\"nv\">emailAddress</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">?,</span>\n    <span class=\"nv\">phoneNumber</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">?)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Bool</span> <span class=\"p\">{</span>\n    \n        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">validFirstName</span> <span class=\"o\">=</span> <span class=\"n\">firstName</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">validLastName</span> <span class=\"o\">=</span> <span class=\"n\">lastName</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">validEmail</span> <span class=\"o\">=</span> <span class=\"n\">emailAddress</span> <span class=\"p\">{</span>\n                    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">validPhone</span> <span class=\"o\">=</span> <span class=\"n\">phoneNumber</span> <span class=\"p\">{</span>\n                        <span class=\"k\">return</span> <span class=\"kc\">true</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>Thankfully, Swift 2 allows us to chain both <code class=\"highlighter-rouge\">if let</code> and <code class=\"highlighter-rouge\">guard</code> statements. Here is the previous example re-factored for Swift 2:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"kd\">func</span> <span class=\"nf\">isValidAddressBookEntry</span><span class=\"p\">(</span>\n    <span class=\"nv\">firstName</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">?,</span>\n    <span class=\"nv\">lastName</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">?,</span>\n    <span class=\"nv\">emailAddress</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">?,</span>\n    <span class=\"nv\">phoneNumber</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">?)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Bool</span> <span class=\"p\">{</span>\n    \n        <span class=\"k\">if</span> <span class=\"k\">let</span>\n            <span class=\"nv\">validFirstName</span> <span class=\"o\">=</span> <span class=\"n\">firstName</span><span class=\"p\">,</span>\n            <span class=\"n\">validLastName</span> <span class=\"o\">=</span> <span class=\"n\">lastName</span><span class=\"p\">,</span>\n            <span class=\"n\">validEmail</span> <span class=\"o\">=</span> <span class=\"n\">emailAddress</span><span class=\"p\">,</span>\n            <span class=\"n\">validPhone</span> <span class=\"o\">=</span> <span class=\"n\">phoneNumber</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<hr />\n\n<h4 id=\"use-optional-chaining\">Use optional chaining:</h4>\n\n<p>The final way to deal with optionals safely is to use optional chaining:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\"><span class=\"kd\">struct</span> <span class=\"kt\">SocialMediaAccounts</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">facebook</span><span class=\"p\">:</span> <span class=\"kt\">Person</span><span class=\"p\">?</span>\n    <span class=\"k\">var</span> <span class=\"nv\">twitter</span><span class=\"p\">:</span> <span class=\"kt\">Person</span><span class=\"p\">?</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">struct</span> <span class=\"kt\">Person</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">firstName</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">?</span>\n    <span class=\"k\">var</span> <span class=\"nv\">lastName</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">?</span>\n    <span class=\"k\">var</span> <span class=\"nv\">handle</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">?</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">var</span> <span class=\"nv\">socialMedia</span><span class=\"p\">:</span> <span class=\"kt\">SocialMediaAccounts</span><span class=\"p\">?</span>\n<span class=\"n\">socialMedia</span> <span class=\"o\">=</span> <span class=\"kt\">SocialMediaAccounts</span><span class=\"p\">()</span>\n<span class=\"k\">var</span> <span class=\"nv\">twitterAccount</span> <span class=\"o\">=</span> <span class=\"kt\">Person</span><span class=\"p\">()</span>\n\n<span class=\"n\">socialMedia</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">twitter</span> <span class=\"o\">=</span> <span class=\"n\">twitterAccount</span>\n<span class=\"k\">let</span> <span class=\"nv\">twitterHandle</span> <span class=\"o\">=</span> <span class=\"n\">socialMedia</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">twitter</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">handle</span></code></pre></figure>\n\n<p>In this example, we have defined a <code class=\"highlighter-rouge\">SocialMediaAccounts</code> struct that holds optional <code class=\"highlighter-rouge\">Person</code> structs for the various social media outlets. The <code class=\"highlighter-rouge\">socialMedia</code> variable is defined as an optional and then created. A <code class=\"highlighter-rouge\">twitterAccount</code> variable of type <code class=\"highlighter-rouge\">Person</code> is also created but contains no data at the moment.</p>\n\n<p>When assigning the <code class=\"highlighter-rouge\">twitterAccount</code> to the <code class=\"highlighter-rouge\">socialMedia.twitter</code> property, a ? is inserted which checks to see that <code class=\"highlighter-rouge\">socialMedia</code> is not nil. If it is nil, then execution of that line stops at the ? and nothing bad will happen.</p>\n\n<p>In the same way, when trying to read back the twitter handle, we chained together 2 optionals with ?’s. If either <code class=\"highlighter-rouge\">socialMedia</code> or <code class=\"highlighter-rouge\">socialMedia.twitter</code> is nil, that line will not complete. Again this is perfectly safe and the app will not crash.</p>\n\n<hr />\n\n<p>All the examples in this article are available in a <a href=\"https://github.com/trozware/optionals\">Swift playground</a> which has been updated to Swift 3 syntax.</p>\n\n",
            "url": "http://troz.net/2016/02/learning-swift-optionals/",
            "summary": "<p>Today I plan to discuss optionals since they were a feature of Swift that I found difficult to grasp at first.</p>\n",
            "date_published": "2016-02-12 00:00:00 +1000",
            "tags": ["learning swift", "optionals", "swift"]
        },

        {
            "id": "/2016/02/why-is-swift-so-great",
            "title": "Why is Swift so great?",
            "content_html": "<p>Firstly, I can give you the technical answer, as published by Apple:</p>\n\n<blockquote>\n  <p>Swift is a new programming language for iOS, OS X, watchOS, and tvOS apps that builds on the best of C and Objective-C, without the constraints of C compatibility. Swift adopts safe programming patterns and adds modern features to make programming easier, more flexible, and more fun. Swift’s clean slate, backed by the mature and much-loved Cocoa and Cocoa Touch frameworks, is an opportunity to reimagine how software development works.<br /><br />\nSwift has been years in the making. Apple laid the foundation for Swift by advancing our existing compiler, debugger, and framework infrastructure. We simplified memory management with Automatic Reference Counting (ARC). Our framework stack, built on the solid base of Foundation and Cocoa, has been modernized and standardized throughout. Objective-C itself has evolved to support blocks, collection literals, and modules, enabling framework adoption of modern language technologies without disruption. Thanks to this groundwork, we can now introduce a new language for the future of Apple software development.”</p>\n</blockquote>\n\n<p>Excerpt From: Apple Inc. “<a href=\"https://itunes.apple.com/book/swift-programming-language/id881256329\">The Swift Programming Language (Swift 2.1)</a>.”</p>\n\n<hr />\n\n<h3 id=\"now-i-can-give-you-my-opinion\">Now I can give you my opinion:</h3>\n\n<ul>\n  <li>Swift makes for code that is easier &amp; faster to write.</li>\n  <li>Swift makes for code that is easier &amp; cleaner to read (much more important than ease of writing).</li>\n  <li>Swift code is safer code.</li>\n  <li>Swift breaks free from the out-dated conventions of C-based languages.</li>\n</ul>\n\n<hr />\n\n<p>When Apple announced Swift at WWDC 2105, I was astounded. That such a major event could have been kept completely secret was amazing. Then I watched every video from WWDC 2015 that discussed Swift. Some were beyond me and others I absorbed. Looking back, I can see that the development of Objective-C over the past few years was all aimed at getting to this point, especially with the introduction of ARC and blocks.</p>\n\n<p>At that time, I was deeply involved in an existing Objective-C project and not able to  do much in Swift. But I went through the introduction at the start of the <a href=\"https://itunes.apple.com/book/swift-programming-language/id881256329\">Swift Programming Language</a> book in iBooks and was able to get some ideas about how the language worked.</p>\n\n<p>Some months later, I was able to spend time on Swift. As a learning exercise, I converted an existing Objective-C iOS app to Swift. As might be expected, I really just wrote Objective-C code using Swift syntax. It took a lot more learning before I was able to write Swift-y code instead of just translated Objective-C. In future posts of this series, I hope to enable others to cross that divide faster than I did.</p>\n\n<p>Now when I go back to an Objective-C app, I feel like I am walking a tight-rope. When I use an NSArray, NSSet or NSDictionary, I think “How can I tell what sort of objects are in that array?”. When I use an object, I think “What if that object is nil?”. All of a sudden, code that appeared stable now feels random.</p>\n\n<hr />\n\n<p>One of the big things that people have latched onto with Swift is that it allows functional programming. I plan several detailed posts on functional programming in this series. But for now I would just recommend that you not worry about the distinction between procedural &amp; functional programming. Both have their advocates and their detractors. Both have their advantages and disadvantages. Just do what ever works for you and we can worry about this later.</p>\n\n",
            "url": "http://troz.net/2016/02/why-is-swift-so-great/",
            "summary": "<p>Firstly, I can give you the technical answer, as published by Apple:</p>\n",
            "date_published": "2016-02-10 00:00:00 +1000",
            "tags": ["learning swift", "swift"]
        },

        {
            "id": "/2016/02/icon-builder-32-released",
            "title": "Icon Builder 3.2 Released",
            "content_html": "<p><a href=\"http://itunes.apple.com/app/icon-builder/id552293482\">Icon Builder 3.2</a> is now available from the Mac App Store.</p>\n\n<ul>\n  <li>Icons for Apple Watch apps now have their alpha channel removed.</li>\n  <li>Tidier folder structure for related files (iTunes Artwork files and Read Me).</li>\n  <li>Updated to work with Xcode 7’s Assets.xcassets folders.</li>\n  <li>Creates iPad Pro icons for Xcode 7.2 or later.</li>\n  <li>Fix for Retina Macs creating double-sized images.</li>\n</ul>\n\n",
            "url": "http://troz.net/2016/02/icon-builder-32-released/",
            "summary": "<p><a href=\"http://itunes.apple.com/app/icon-builder/id552293482\">Icon Builder 3.2</a> is now available from the Mac App Store.</p>\n",
            "date_published": "2016-02-10 00:00:00 +1000",
            "tags": ["app store", "apple watch", "icons", "ios", "mac", "watch"]
        },

        {
            "id": "/2016/02/new-twitter-account",
            "title": "New Twitter account",
            "content_html": "<p>I have started a new Twitter account so that I can provide rapid support to users of my apps.\nPlease contact me <a href=\"https://twitter.com/trozware\">@trozware</a> if you have any questions, suggestions, bug reports or would just like to chat.</p>\n\n<p>I will also be using this account to promote my new <a href=\"http://troz.net/2016/02/learning-swift-an-introduction/\">Learning Swift</a> series.</p>\n\n",
            "url": "http://troz.net/2016/02/new-twitter-account/",
            "summary": "<p>I have started a new Twitter account so that I can provide rapid support to users of my apps.\nPlease contact me <a href=\"https://twitter.com/trozware\">@trozware</a> if you have any questions, suggestions, bug reports or would just like to chat.</p>\n",
            "date_published": "2016-02-09 00:00:00 +1000",
            "tags": ["learning swift", "support", "swift", "twitter"]
        },

        {
            "id": "/2016/02/learning-swift-an-introduction",
            "title": "Learning Swift - An Introduction",
            "content_html": "<h3 id=\"welcome-to-learning-swift\">Welcome to Learning Swift.</h3>\n\n<p>This is the first post in what I hope will be an extensive series dealing with the Swift language. Here are some of the questions I hope to answer:</p>\n\n<ul>\n  <li>Should I learn Swift? Why?</li>\n  <li>Why is Swift so great?</li>\n  <li>How should I start learning Swift?</li>\n  <li>I already know Objective-C - how do I convert?</li>\n</ul>\n\n<p>After that, I am planning a series of posts discussing the major differences of Swift from the view point of an Objective-C programmer and the aspects of Swift that I found difficult to grasp. Topics covered will include such things:</p>\n\n<ul>\n  <li>optionals</li>\n  <li>closures</li>\n  <li>functional programming</li>\n  <li>protocols</li>\n  <li>generics</li>\n</ul>\n\n<p>I am coming from a background of Objective-C, so many of my posts will be dealing with aspects of Swift that are not familiar to Objective-C programmers. I will not assume any Objective-C programming experience, but some features of Swift that are new to me, will be familiar to people accustomed to other languages.</p>\n\n<hr />\n\n<p>So let’s start by answering the first question:</p>\n\n<h3 id=\"should-i-learn-swift\">Should I learn Swift?</h3>\n\n<p>If you are writing or planning apps for any Apple platform - YES.<br />\nIf not, wait until Swift is available for the platforms you need to support.</p>\n\n<hr />\n\n<h3 id=\"why\">Why?</h3>\n\n<h4 id=\"if-you-are-already-an-ios-or-mac-developer-yes\">If you are already an iOS or Mac developer: YES</h4>\n\n<p>This is the new language and Apple is very committed to it. Objective-C is not going away any time soon, but Swift is where it is going to end up, so why not make the jump now while the language is still in development? You have to accept that fact that every release of Xcode is going to break your code, but the automatic re-factoring works very well. And by moving to Swift now, you get the chance to influence the direction of a new language. How often does that happen?</p>\n\n<hr />\n\n<h4 id=\"if-you-are-starting-to-learn-ios-or-mac-development-yes\">If you are starting to learn iOS or Mac development: YES</h4>\n\n<p>If you have no history with Objective-C, then do not waste your time learning it. There is still a lot of sample code out there in Objective-C, but increasing numbers of tutorial sites are using Swift and converting their existing tutorials to Swift. It will help if you know just enough Objective-C to read it, but you do not need to know enough to write it.</p>\n\n<hr />\n\n<h4 id=\"if-you-do-not-program-for-mac-or-ios-not-yet\">If you do NOT program for Mac or iOS: NOT YET</h4>\n\n<p>Swift went open source in late 2015. This is a big deal and Apple’s plans for Swift are quite clear. They want Swift to be such a main-stream language that it is used instead of Java for basic computer science courses in universities. This was never going to happen unless the language was open-source and cross-platform. It is now open-source and available for <a href=\"https://swift.org/download/#latest-development-snapshots\">Linux as well as Mac/iOS</a>. While Apple has not yet released any further ports, I think there are more on the way for Raspberry Pi, Arduino and other embedded systems as well as server-side Swift libraries like <a href=\"http://perfect.org\">Perfect</a>. I expect that a version for Windows will not be far behind.</p>\n\n",
            "url": "http://troz.net/2016/02/learning-swift-an-introduction/",
            "summary": "<h3 id=\"welcome-to-learning-swift\">Welcome to Learning Swift.</h3>\n",
            "date_published": "2016-02-09 00:00:00 +1000",
            "tags": ["learning swift", "swift"]
        },

        {
            "id": "/2016/02/possible-issues-with-iconbuilder",
            "title": "Possible issues with Icon Builder &amp; Watch icons",
            "content_html": "<p>It has come to my attention that there are two possible issues with Icon Builder 3.0.1 when using icons created for an Apple Watch app.\nOnce of them is something I can fix and the other appears to be a bug in Xcode 7.2</p>\n\n<hr />\n\n<p><strong>Update:</strong> Version 3.2 of Icon Builder is now available in the <a href=\"http://itunes.apple.com/app/icon-builder/id552293482\">Mac App Store</a>. This removes the alpha channel from icons for a watch app.</p>\n\n<hr />\n\n<p>The first problem is that iTines Connect now requires that the icons for an Apple Watch app include no alpha channel. This is becoming an increasing trend with it first having applied to the large icon file you upload directly to iTunes Connect, then to screen shots. I expect it to extend to iOS app icons soon, but hopefully Mac app icons can continue to include transparency.</p>\n\n<p>With Apple Watch icons, you are supposed to create a set of square icons and watchOS or iTunesConnect applies the rounding mask. Presumably this is more complicated if the icon contains an alpha channel even if there are no transparent pixels. If your Watch app icons contain an alpha channel, you will see errors like this after uploading your app to iTunes Connect:</p>\n\n<blockquote>\n  <p>Invalid Icon - The watch application ‘AppName.app/Watch/AppName WatchKit App.app’ contains an icon file ‘AppName.app/Watch/AppName WatchKit App.app/AppIcon-Watch24x24@2x.png’ with an alpha channel. Icons should not have an alpha channel.</p>\n</blockquote>\n\n<p>You will probably get this error message for every icon size in the Watch app (8 in total).\nUntil I release a new version of Icon Builder that allows for this this, I suggest you use this <a href=\"https://www.cocoacontrols.com/controls/alpha-channel-remover\">Alpha Channel Remover app</a>.</p>\n\n<p>In your Xcode project, go to WatchKit App Assets.xcassets, select the AppIcon set, right-click and choose “Show in Finder”. A folder will open containing eight .png files and one .json file. Drag &amp; drop the .png files into the Alpha Channel Remover window and click the “Remove Alpha Channel” button. This will replace all those image files with new versions without alpha channels. To confirm this, select any of the images and press Command-I to get info. In the More Info section, you will see “Alpha channel: No”.</p>\n\n<p>You can now submit your app again, but that only solves one of the issues.</p>\n\n<hr />\n\n<p>The other problem is that you will get a warning about the 44x44@2x.png icon file.</p>\n\n<blockquote>\n  <p>Invalid Icon Name - The watch application ‘AppName.app/Watch/AppName WatchKit App.app’ contains an invalid icon file name ‘AppName.app/Watch/AppName WatchKit App.app/AppIcon-Watch44x44@2x.png’. Make sure that icon file names follow the pattern<br /> “<code class=\"highlighter-rouge\">*&lt;dimension&gt;@&lt;scale&gt;x.png</code>” and they match the required dimensions. Please visit https://developer.apple.com/watchkit/ for more information.</p>\n</blockquote>\n\n<p>As you can see in the error message, the icon name (which is set by Xcode) does conform to the required pattern, and the image is the correct size. This appears to be a <a href=\"http://www.openradar.me/23801324\">bug in Xcode 7.2</a> but does not stop you from submitting your app as it is only a warning and not an error. Presumably this will be fixed in later version of Xcode. I am running Xcode 7.2.1 and still see this warning.</p>\n\n",
            "url": "http://troz.net/2016/02/possible-issues-with-iconbuilder/",
            "summary": "<p>It has come to my attention that there are two possible issues with Icon Builder 3.0.1 when using icons created for an Apple Watch app.\nOnce of them is something I can fix and the other appears to be a bug in Xcode 7.2</p>\n",
            "date_published": "2016-02-06 00:00:00 +1000",
            "tags": ["apple watch", "icons", "watch", "xcode"]
        },

        {
            "id": "/2016/01/man-reader-1.5",
            "title": "Man Reader 1.5",
            "content_html": "<p>Man Reader has been updated to version 1.5 with a major improvement in the way it looks for available man pages.</p>\n\n<p><a href=\"http://troz.net/manreader/\">Man Reader 1.5</a> is now available through the <a href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\">Mac App Store</a>.</p>\n\n<h4 id=\"change-log\">Change Log:</h4>\n\n<ul>\n  <li>Much improved searching for available man pages.</li>\n  <li>Sand-boxed version now works just as well as the non-sand-boxed.</li>\n</ul>\n\n<p>The main feature of this version is that it solves the previous problems with the App Store version and sand-boxing. This was restricting the number of man pages listed in Man Reader so I had to release a non-sand-boxed version of the app to allow for full functionality.</p>\n\n<p>However I discovered that although this gave better results, it was still missing a lot of man pages. Version 1.5 now queries the man page files in a completely different way which is listing many more man pages.</p>\n\n<p>If you previously had downloaded the Man Reader (no SB) version of the app from this site, please revert to the App Store version which you would have needed to have bought in order to use the downloaded app. If you bought the app from Paddle, <a href=\"mailto:sarah@troz.net?subject=Man%20Reader%20transfer%20to%20App%20Store\">contact me</a> and I will transfer you to the App Store version. Neither of these other versions will be supported or updated any more.</p>\n\n",
            "url": "http://troz.net/2016/01/man-reader-1.5/",
            "summary": "<p>Man Reader has been updated to version 1.5 with a major improvement in the way it looks for available man pages.</p>\n",
            "date_published": "2016-01-31 00:00:00 +1000",
            "tags": ["mac", "man reader"]
        },

        {
            "id": "/2015/12/using-19th-hole-on-the-apple-watch",
            "title": "Using 19th Hole on the Apple Watch",
            "content_html": "<p>19th Hole for iPhone and Apple Watch version 3 is now available through the <a href=\"https://itunes.apple.com/us/app/the-19th-hole/id871686159?mt=8&amp;uo=4\">iTunes App Store</a>.\nThis version is a complete re-write to accommodate the changes in iOS 9 and watchOS2.</p>\n\n<p>The major changes are to do with the way the iPhone and the Watch communicate. In watchOS1, all the brains of the app had to live in the iPhone, meaning that every single interaction on the Watch had to be referred back to the iPhone for processing and the result sent back to the Watch for display. This lead to communications delays and breakdowns which caused third-party apps to work sluggishly or not at all. In watchOS2, the brains of the watch part of the app can now operate inside the watch, greatly reducing the number of communications needed. As well as that, Apple has now provided us with multiple ways of getting data to and from the Watch which again improves performance and reliability.</p>\n\n<hr />\n\n<p>With the 19th Hole, I made the decision to change the method of inputting scores. The previous version used a slider with plus and minus buttons to adjust scores. The problems with this were the small target area of the plus &amp; minus buttons as well as the fact that a slider with more than about 3 divisions was not useful as a visual indicator.</p>\n\n<p>When watchOS2 allowed developers access to the digital crown, I decided to switch to using that instead. Now you tap the score box of the player you wish to adjust and use the digital crown to select a number. I think this will be easier to use while wearing a glove and hope that it is still easy to read out doors.</p>\n\n<hr />\n\n<p>The other suggestion is not to do with watchOS2 but is a general tip for using apps of this kind. By default, the Apple Watch will always show the watch face when you raise your wrist. Normally this is the most useful thing, but when scoring a round of golf, it would be easier if The 19th Hole app stayed at the front. To make this happen, you need to set to watch to show the last used app instead of the watch face. This can be set using the Apple Watch app on the phone or on the watch itself.</p>\n\n<p>On the phone:</p>\n\n<ul>\n  <li>Open the Apple Watch app.</li>\n  <li>Select My Watch from the tabs at the bottom.</li>\n  <li>Tap “General” and then scroll down to tap “Wake Screen”.</li>\n  <li>Make sure “Resume Last Activity” is checked.</li>\n</ul>\n\n<p>On the watch:</p>\n\n<ul>\n  <li>Press the digital crown to see the app icons.</li>\n  <li>Find and tap the Settings icon.</li>\n  <li>Scroll down and tap “General”.</li>\n  <li>Tap “Wake Screen” and scroll down to make sure that “Previous Activity” is checked in the “Resume To” section.</li>\n</ul>\n\n",
            "url": "http://troz.net/2015/12/using-19th-hole-on-the-apple-watch/",
            "summary": "<p>19th Hole for iPhone and Apple Watch version 3 is now available through the <a href=\"https://itunes.apple.com/us/app/the-19th-hole/id871686159?mt=8&amp;uo=4\">iTunes App Store</a>.\nThis version is a complete re-write to accommodate the changes in iOS 9 and watchOS2.</p>\n",
            "date_published": "2015-12-12 00:00:00 +1000",
            "tags": ["golf", "watch"]
        },

        {
            "id": "/2015/05/dice-pass-for-mac",
            "title": "Dice Pass for Mac",
            "content_html": "<p>We live in a world of passwords and passphrases and there is a constant struggle between having a secure and a memorable password. As a result, many of us re-use passwords even though we know this is a bad idea.</p>\n\n<p><a href=\"https://xkcd.com/936/\">XKCD</a> had a wonderful comic that illustrated the theory of using a passphrase composed of words that are easy to remember but with a combination that made the passphrase very hard to guess. However even when deciding to use a passphrase like this, it is not easy for us humans to avoid using words that have meaning for us, particularly when it is something we really need to remember.</p>\n\n<p><a href=\"http://world.std.com/~reinhold/diceware.html\">Diceware</a> was developed to solve this problem. You have a set of 5 dice and a list of words assigned to each possible dice roll for 11111 to 66666. You roll the five dice and get the matching word from the list. Repeat this for the number of words you want to use in your passphrase and you have a random phrase that is hopefully still memorable.</p>\n\n<p>But this sounds like a lot of effort and not something you are likely to do when faced by a password entry field on a web page. So <a href=\"http://troz.net/dicepass/\">Dice Pass</a> was written to do the work for you quickly and easily.</p>\n\n<p><img src=\"http://troz.net/images/DicePass_Mac.png\" alt=\"Dice Pass for Mac\" /></p>\n\n<p>Select the number of words you want in your passphrase and see the phrase immediately. Keep clicking the “Generate New Phrase” button until you get a phrase you like. If you feel that the computer is not to be trusted when generating a random number for the dice rolls, use your real dice and click the dice to change them to the roll you got. If you get a passphrase that is good except for one or two words, use the Re-Roll button beside those words to get a new roll for just that word.</p>\n\n<p>Dice Pass is available from the <a href=\"https://itunes.apple.com/app/dice-pass/id997688302?mt=12&amp;uo=4\">Mac App Store</a> now.</p>\n\n",
            "url": "http://troz.net/2015/05/dice-pass-for-mac/",
            "summary": "<p>We live in a world of passwords and passphrases and there is a constant struggle between having a secure and a memorable password. As a result, many of us re-use passwords even though we know this is a bad idea.</p>\n",
            "date_published": "2015-05-30 00:00:00 +1000",
            "tags": ["dice", "mac", "password"]
        },

        {
            "id": "/dicepass",
            "title": "Dice Pass",
            "content_html": "<p>Dice Pass is available from the <a href=\"https://itunes.apple.com/us/app/dice-pass/id997688302\">Mac App Store</a>.</p>\n\n<p>Dice Pass is a utility to app to generate random passphrases based on the <a href=\"http://world.std.com/~reinhold/diceware.html\">Diceware system</a>. Diceware uses a table of pre-defined words, each assigned a 5 digit code number containing the digits 1 to 6. The official way to generate a phrase is to roll 5 dice for each word you want in your passphrase and then consult the words table to find the matching word.</p>\n\n<p><img src=\"http://troz.net/images/DicePass_Mac.png\" alt=\"Dice Pass for Mac\" /></p>\n\n<p>The resulting phrase uses real words or common abbreviations, so it is easier to remember than a random collection of characters. At the same time, the random selection of words makes the generated passphrase much more secure as it avoids the human tendency to pick words with personal meaning.</p>\n\n<p>The Diceware system was invented by Arnold Reinhold. This utility is not associated with or supported by Arnold Reinhold in any way, but uses his techniques with thanks. For more information about Diceware, have a look at the <a href=\"http://world.std.com/%7Ereinhold/dicewarefaq.html\">Diceware Passphrase FAQ page</a>.</p>\n\n<p>The default word list used in this app is a variation compiled by <a href=\"http://world.std.com/~reinhold/beale.wordlist.asc\">Alan Beale</a> that removes some of the more obscure words. But you can select the original Diceware word list or the Diceware 8k word list fromt rh Word List menu if you prefer to use something different. You can also provide your own word list file if you prefer.</p>\n\n<hr />\n\n<h3 id=\"faq\">F.A.Q.</h3>\n\n<p><strong>How many words should I use in my passphrase?</strong></p>\n\n<p>Arnold Reinhold recommends 6 words. He used to suggest that 5 was sufficient for most needs, but as of 2014 has increased this to 6. See the Diceware Passphrase FAQ page for more details. (Link above.)</p>\n\n<p><strong>How often can I re-generate the passphrase?</strong></p>\n\n<p>As often as you like. Keep clicking until you get a phrase that you can remember. If you get a phrase where most of the words are good but you would like to change one or two, you can click ‘Re-Roll’ on individual words to change them.</p>\n\n<p><strong>Is there a way to check the strength of my passphrase?</strong></p>\n\n<p>There are many password strength checkers on the internet and three of these are listed below. But always be careful when pasting your passphrase into a web page.</p>\n\n<p><strong>Online password strength checkers:</strong></p>\n\n<ul>\n  <li><a href=\"http://rumkin.com/tools/password/passchk.php\">Rumkin.com Strength Test</a></li>\n  <li><a href=\"https://howsecureismypassword.net\">How Secure Is My Password?</a></li>\n  <li><a href=\"http://www.passwordmeter.com\">The Password Meter</a></li>\n</ul>\n\n<p><strong>Some of the words in the phrase are not complete words.</strong></p>\n\n<p>The theory is that shorter words or abbreviations are easier to remember than long ones, without compromising security. But if you get a word you don’t like or think that you will not be able to remember, just re-roll that word.</p>\n\n<p><strong>What if I want to roll the dice myself?</strong></p>\n\n<p>Dice Pass allows you to tap on the 5 dice to set the numbers needed for each word manually. Each time you tap the number will go up be one, wrapping from 6 back to 1. The app will then look up the word table for you and show the new word.</p>\n\n<p><strong>When the phrase gets too long I can’t see all the words.</strong></p>\n\n<p>The “Copy” button will copy the complete passphrase even if it is not all visible. You can also scroll by clicking and dragging along the passphrase.</p>\n\n<p><strong>Does my passphrase get saved by the app or transmitted over the internet?</strong></p>\n\n<p>No. The app saves no data except for basic preferences (window positioning &amp; size, preferred word list etc.). There is never any data sent over the network and the app will work perfectly if you disconnect your computer before using.</p>\n\n<p><strong>What are those 3 buttons: #, A and 1?</strong></p>\n\n<p>Some sites may require a passphrase that contains a mix of character types. These buttons will insert a special character, change the start of one word to uppercase, or insert a number. Tap the button again to undo the change. Again, these characters are chosen using the dice roll system and the special characters are selected and positioned using the method and data suggested by Arnold Reinhold.</p>\n\n<p><strong>I thought there was a version of Dice Pass for iOS!</strong></p>\n\n<p>There was, but with the need to update apps to support iOS 10, I decided to drop support for some under-performing iOS apps. If you bought the iOS version and would like to switch to the Mac, send me a screen shot of the app running on your iPhone or iPad and I will send you a free promo code for the Mac version.</p>\n\n",
            "url": "http://troz.net/dicepass/",
            "summary": "<p>Dice Pass is available from the <a href=\"https://itunes.apple.com/us/app/dice-pass/id997688302\">Mac App Store</a>.</p>\n",
            "date_published": "2015-05-29 00:00:00 +1000",
            "tags": ["dice", "mac", "passwords"]
        },

        {
            "id": "/2015/04/apple-watch-first-impressions",
            "title": "Apple Watch First Impressions",
            "content_html": "<p>I realise that every one has written one of these posts, but given that everyone looks for and notices different things, I think it is still valid.</p>\n\n<p>My first impression was “Why does it come in such a large box?”. The courier delivered two boxes - my 38mm Apple Watch Sport and Tim’s 42mm Apple Watch Sport. They both came in long boxes, with the 42mm box significantly longer. And both boxes were heavy!</p>\n\n<hr />\n\n<h4 id=\"un-boxing\">Un-boxing:</h4>\n\n<p>Opening them was a typical Apple experience: pull the tag to open the external cardboard box, lift out the white internal box. This opens to reveal the watch with the default strap attached (short for 38mm, long for 42mm). Lift the watch out and pull the tags to remove the plastic protective coating. (On a side note, it drives me crazy when people leave this coating on devices, but I can’t see this happening on the watch.) Underneath there is a sleeve containing the other half watch strap so you can swap from long to short. My family tells me that this also includes a user guide, but I didn’t read that - typical Apple user… Under the sleeve is the power block and charging cable. The charging puck is larger than I expected and the cable is very long. Having removed all the components, the packaging is still quite heavy, so I guess Apple just wanted to make sure that no watches were damaged in transit and that it felt like a quality product.</p>\n\n<hr />\n\n<h4 id=\"pairing\">Pairing:</h4>\n\n<p>Pairing my watch to my iPhone was amazingly slick. After selecting my language, the watch displayed a sort of nebula pattern. On the iPhone, I launched the Apple Watch app, selected the pairing option and pointed the phone camera at the watch display. This did the pairing. Then I waited while all the relevant apps transferred their Apple Watch components to the watch and I was ready to start using it.</p>\n\n<hr />\n\n<h4 id=\"the-watch\">The Watch:</h4>\n\n<p>The watch comes with the modular watch face showing by default. This is a digital time read-out with various ‘complications’. \nForce-touch the watch face to change it - this takes a surprisingly strong touch. Then you can swipe sideways to select a watch style. Once you have a style selected, some of them offer further customisations: select how much detail is shown, choose what extra information to display, adjust colors.</p>\n\n<p>This is a lot of fun and I am still changing mine very frequently. The good thing is that your customisations are stored, so if you set up the utility watch face in a particular way, then swap to the modular and configure it, when you go back to utility, your previous settings are all still there.</p>\n\n<p>The screen is gorgeous - very crisp and easy to read.</p>\n\n<p>Twisting your wrist to show the time works well most of the time. There is a delay that I would estimate at about half a second, presumably to avoid false positives triggering unnecessary displays. If you are holding your wrist at an unusual angle e.g. showing the watch to someone, this twist will not always work, but tapping the screen will display the watch face instantly.</p>\n\n<p>Tapping on a complication will take you to the relevant parent app e.g. tapping the current temperature will open the Weather app.</p>\n\n<p>A minor quibble is that the phases of the moon are displayed from a northern hemisphere point of view and do not match what we actually see here in Australia.</p>\n\n<hr />\n\n<h4 id=\"battery-life\">Battery Life:</h4>\n\n<p>This is a complete non-issue. On my first day with the watch, the battery was at 70% when I first turned it on. As you can imagine, usage was very intense that first day and I got to 8%. Since then, the battery level has only got down to 40 -50% over a day and it recharges to 100% within 2 hours. Tim’s 42mm model gets slightly better battery life as expected.</p>\n\n<p>I started off having the battery indicator as one of the ‘complications’ on my watch face, but now I just ignore it.</p>\n\n<p>And the battery life of my iPhone has improved remarkably due to so many quick transactions being done through the watch instead.</p>\n\n<p>I did have a charging problem one night. I woke up and checked the time and realised that the watch was quite warm to the touch. I checked the battery level which was actually lower than when I had put it on the charger. I took it off the charger for a few hours, then put it back and all was well.</p>\n\n<hr />\n\n<h4 id=\"notifications\">Notifications:</h4>\n\n<p>Here is where you need to be careful. I had turned off most notifications on my phone before getting the watch, so I have not been inconvenienced, in fact I have been able to re-enable many notifications as they are no longer so intrusive.</p>\n\n<p>At first we thought some notifications were not getting through to the watch, then we found out that if your iPhone is awake and un-locked, notifications are not passed on to the watch. So drop the time until sleep on your phone to the minimum which saves your phone battery and makes sure you receive most notifications on the watch.</p>\n\n<p>If you want to stop any apps sending notifications through to the watch, this is easily set in the iPhone’s Apple Watch app.</p>\n\n<p>I have noticed there is a bit of a delay. I hear an email or message arriving on my phone and it can be half a minute before it gets to my watch.</p>\n\n<p>Once you get a notification, you can tap it to go to the parent app, swipe up to process it in some way depending on the type of notification, or swipe to the left to see a button that will clear the notification. If you want to get rid of all your notifications at once, do a force-touch on the notifications screen to get the option to clear them all.</p>\n\n<hr />\n\n<h4 id=\"glances\">Glances:</h4>\n\n<p>Glances are designed to be one screen indicators giving you important information as quickly as possible. From there, you can decide whether to go to the parent app or not. These are accessed by swiping up from the bottom of the screen when looking at the watch face.</p>\n\n<p>I found that the most important thing here was to reduce the number of glances shown, since they are displayed sequentially. If you have 20 glances installed, you have to swipe at least 20 times to see them all. So go to the Apple Watch app on your iPhone and turn off the glances you do not find essential.</p>\n\n<p>The first glance in the sequence is essential though as it allows you to toggle airplane mode, do not disturb and silent mode. It also has a button that can make your iPhone make a sound to help you locate it. Hold this button down to make the iPhone flash come on as well.</p>\n\n<hr />\n\n<h4 id=\"activity\">Activity:</h4>\n\n<p>Here I have to confess to my first disappointment. The activity app tracks three things: Move, Exercise and Stand. When you first start the watch, you tell it your age, sex, weight and height. It computes a suggested daily move goal for you which you can adjust at any time. Then it tracks your daily activities and shows how well you are doing in relation to your goal. For exercise and standing the goals are 30 minutes exercise and standing for at least one minute in an hour 12 times though the day.</p>\n\n<p>The move tracking seems to be fine. I am not sure what metrics it uses, but on more active days, the numbers go up.</p>\n\n<p>The exercise one doesn’t work for me. We went for a walk and when we returned, Tim’s watch showed 25 minutes exercise and mine showed 1 minute. We had walked the same distance at the same speed, as confirmed by the pedometer. Subsequent tests revealed that I don’t swing my arms enough when walking to trigger what ever sensor this is using. I can’t quite see why it ignores the pedometer completely, but hopefully this can be fixed by a software update. For now, I just ignore this circle.</p>\n\n<p>Standing is another issue since I use a standing desk, so I stand for many hours each day. Even when standing, I get my hourly reminders to stand. However I use this as a trigger to make me to move about for a minute, so I suppose that is still useful.</p>\n\n<hr />\n\n<h4 id=\"communications\">Communications:</h4>\n\n<p>The various forms of communication are a real strength of the watch. With Tim &amp; I both having watches, we can phone, message (audio or text) and use the new Digital Touch to send sketches, taps or heart beats. While it feels a bit weird to be talking to your wrist, this works really well and the sound quality is amazing for such a small device. If you need more privacy, it is very easy to transfer a phone call back to your phone.</p>\n\n<p>Oddly, the watch does not appear to offer FaceTime but always uses standard phone calls.</p>\n\n<p>Messages are where the watch excels. If you get a message with a question, the watch can suggest possible answers so you just have to tap a button. Even without this, there is a set of pre-defined answers which you can edit in the Apple Watch app on your iPhone. And you can also use dictation or the new animated emojis. Dictation seems a lot better on the watch than it ever was before on the phone. And even if dictation is not transcribed perfectly, you can send the message as an audio recording instead of text.</p>\n\n<p>When recording, tap the Done button as soon as you have finished speaking. The inclination is to wait for the text to be processed, but the recording carries on, so stop the recording and let the text processing finish in its own time.</p>\n\n<p>The animated emojis work when you send them to other devices as they appear as GIFs. You can choose from 3 sets: faces, hands and hearts. Once you have swiped to select a set, use the crown to scroll between the options. You can also swipe further to get to the standard emojis.</p>\n\n<p>Digital Touch works between watches only. It is a fun gimmick and I can imagine us developing a set of key codes or sketches, but neither of us can draw very well, so the sketches are very rough. The heart beat is amusing, but the tapping is surprisingly effective as an attention-getter.</p>\n\n<hr />\n\n<h4 id=\"summary\">Summary:</h4>\n\n<p>I think this is the start of a new way of interacting with our technology in a way that is both closer to us and less intrusive. I am loving the watch so far and can’t wait to see where it goes from here.</p>\n\n<hr />\n",
            "url": "http://troz.net/2015/04/apple-watch-first-impressions/",
            "summary": "<p>I realise that every one has written one of these posts, but given that everyone looks for and notices different things, I think it is still valid.</p>\n",
            "date_published": "2015-04-29 00:00:00 +1000",
            "tags": ["apple watch", "ios", "iphone", "watch"]
        },

        {
            "id": "/2015/04/time-in-words-4.0",
            "title": "Time In Words 4.0",
            "content_html": "<p><a href=\"http://troz.net/time-in-words/\">Time In Words</a> for iOS started off as a fun gimmick, emulating the <a href=\"http://www.qlocktwo.com/\">Qlocktwo</a> type of time display where the relevant words are highlighted in some way to spell out the time as a sentence. This very quickly evolved into what I hoped would be more useful app, still showing the original display, but also providing the current time &amp; date as complete sentences. Then I added time conversions and discovered the real power and utility of writing out times as words.</p>\n\n<p>When it comes to converting times, I doubt there are many people in the world who haven’t had problems.</p>\n\n<ul>\n  <li>Is that morning or afternoon for them?</li>\n  <li>Are they in tomorrow, today or yesterday?</li>\n  <li>What if they are using daylight-savings?</li>\n</ul>\n\n<p>Having the time written out removes all ambiguity.\nAs an example, Time In Words currently reports very clearly:</p>\n\n<blockquote>\n  <p>In Los Angeles, it is nine minutes to ten on Tuesday evening (daylight-savings time).</p>\n</blockquote>\n\n<p>When writing <a href=\"http://troz.net/time-in-words-for-mac/\">Time In Words for Mac</a>, I focussed immediately on the time zone conversion facilities, and provided a menu bar app that can display as many time zones as you like (although more than will show on a single screen would probably get annoying).</p>\n\n<p>So when I decided to do a complete re-write of Time In Words for iOS, the obvious move was to emulate the Mac version and allow for as many time zones as the user wants, instead of the current 2 or 4 (iPhone or iPad). So I discarded the Qlocktwo display and the separate date display which used a similar mechanic. I kept the display that shows the current date and time, but every display after that shows the time in a different time zone. The time zones can be changed and re-ordered, so the ones you need most are the fastest to get to once the app opens.</p>\n\n<hr />\n\n<p>One new feature (again taken from the Mac version), is the ability to calculate “What time will it be…”</p>\n\n<p><img src=\"http://troz.net/images/TiW_what_time.png\" alt=\"What time\" /></p>\n\n<p>You dial in your local date and time to see what time that will be in your selected zone. And if you want to calculate the other way around, tap the “Swap time zones” button.</p>\n\n<hr />\n\n<p>The main impetus for a re-write was the Apple Watch. I thought this would be a perfect app for the watch as it could use the Apple Watch’s superb time-keeping in conjunction with my text generation, to add a significant level of usability to the Apple Watch as regards time zone conversions.</p>\n\n<p>Sadly, Apple disagrees…</p>\n\n<p>I completed the app and submitted it to the App Store for review. The review process seems to be very fast at the moment and the app moved into review only one day later. And there it stuck for 3 days. This was very odd. My experience is that once an app gets into review, it only takes a few hours, if that. For <a href=\"http://troz.net/19th-hole/\">19th Hole</a> - my other app with an Apple Watch component, the review process took 30 hours. But 3 days!</p>\n\n<p>Then I got a phone call from Apple where a very polite person explained to me that although this was not mentioned in any of the documentation, the marketing people had decided that no apps were to be allowed on the watch if they told the time.</p>\n\n<p>I offered to remove the initial screen telling the local time, so the app would not actually supply the current time but only the time conversions, but that was not acceptable either.</p>\n\n<p>Then I tried appealing the rejection. My hopes were not high, but I didn’t see any harm in asking. I again offered to remove the local time display and emphasised the accessibility advantages of displaying times in this manner. Another day, another phone call, another polite Apple person saying no.</p>\n\n<p>So now I have re-submitted the app for review without the Apple Watch component, which is a shame. I am hoping that after some months they will review this policy and allow me to try again, but who knows.</p>\n\n<p>So you can see what you are missing, here are a couple of screen shots from the watch app showing my local time, plus one time zone:</p>\n\n<p><img src=\"http://troz.net/images/Watch_1.png\" alt=\"Local time\" />\n<span class=\"float_right\"><img src=\"/images/Watch_2.png\" alt=\"Converted time\" /></span></p>\n\n<hr />\n\n<p>One more minor point. People who actually look at version numbers may wonder why I have gone from version 2.5 to version 4.0. When I was working on version 2.5, I considered making it version 3.0 and then changed my mind. However by that time I had already created a version 3.0 in iTunesConnect, so I was not able to use 3.0 again this time. This version was such a big change that I wanted it to be a .0 release, so that meant going to version 4.0</p>\n\n",
            "url": "http://troz.net/2015/04/time-in-words-4.0/",
            "summary": "<p><a href=\"http://troz.net/time-in-words/\">Time In Words</a> for iOS started off as a fun gimmick, emulating the <a href=\"http://www.qlocktwo.com/\">Qlocktwo</a> type of time display where the relevant words are highlighted in some way to spell out the time as a sentence. This very quickly evolved into what I hoped would be more useful app, still showing the original display, but also providing the current time &amp; date as complete sentences. Then I added time conversions and discovered the real power and utility of writing out times as words.</p>\n",
            "date_published": "2015-04-15 00:00:00 +1000",
            "tags": ["ios", "time in words"]
        },

        {
            "id": "/2015/04/apple-watch-rejected-then-accepted",
            "title": "Apple Watch App - Rejected, then Accepted",
            "content_html": "<p>As described in a <a href=\"http://troz.net/2015/04/my-first-apple-watch-app/\">previous post</a>, about 9 days ago I submitted my first Apple Watch app for review.\nThe app was an extension of my golf scoring app: <a href=\"http://troz.net/19th-hole/\">The 19th Hole</a>.</p>\n\n<p>I expected that App Store review times would go up dramatically once Apple had allowed developers to submit watch apps, but this proved to be incorrect. Three days after submission, the app was marked as “In Review”. This seemed to happen last thing on a Saturday, so there was no further action for two days, at which point the app was rejected, with the following details (sic):</p>\n\n<blockquote>\n  <p>We noticed an issue in your app that contributes to a lower quality user experience than Apple users expect. Specifically,</p>\n</blockquote>\n\n<blockquote>\n  <ul>\n    <li>while using the Apple Watch app with the phone app is in the background mode (display off), the new data entry on the Watch App does not refresh accordingly until the phone app is turn back on.</li>\n  </ul>\n</blockquote>\n\n<p>So it appeared that the communication between the watch and the phone, which worked perfectly on the simulators, did not work at all on the actual devices. This is the problem with developing for a device that you do not have.</p>\n\n<hr />\n\n<p>After some research, it appears that the problem is with the phone not operating correctly in background mode. Apple provides for communications from the watch to the phone. The phone can respond, but only the watch can initiate a connection. I guess this makes sense since every watch will be paired with a phone but the reverse will not always be true.</p>\n\n<p>To talk to the phone, the watch uses this function:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\">    <span class=\"kd\">func</span> <span class=\"nf\">openParentApplication</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">userInfo</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">NSObject</span> <span class=\"p\">:</span> <span class=\"kt\">AnyObject</span><span class=\"p\">],</span>\n         <span class=\"n\">reply</span> <span class=\"nv\">reply</span><span class=\"p\">:</span> <span class=\"p\">(([</span><span class=\"kt\">NSObject</span> <span class=\"p\">:</span> <span class=\"kt\">AnyObject</span><span class=\"p\">]</span><span class=\"o\">!</span><span class=\"p\">,</span>\n         <span class=\"kt\">NSError</span><span class=\"o\">!</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)?)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Bool</span></code></pre></figure>\n\n<p>The phone listens for messages in this event handler:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-swift\" data-lang=\"swift\">    <span class=\"kd\">func</span> <span class=\"nf\">application</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">application</span><span class=\"p\">:</span> <span class=\"kt\">UIApplication</span><span class=\"p\">,</span>\n         <span class=\"n\">handleWatchKitExtensionRequest</span> <span class=\"nv\">userInfo</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">NSObject</span> <span class=\"p\">:</span> <span class=\"kt\">AnyObject</span><span class=\"p\">]?,</span>\n         <span class=\"n\">reply</span> <span class=\"nv\">reply</span><span class=\"p\">:</span> <span class=\"p\">(([</span><span class=\"kt\">NSObject</span> <span class=\"p\">:</span> <span class=\"kt\">AnyObject</span><span class=\"p\">]</span><span class=\"o\">!</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)</span><span class=\"o\">!</span><span class=\"p\">)</span></code></pre></figure>\n\n<p>The name of the WatchKit function is slightly misleading as it does open the parent application, but only in the background.\nThen the parent app is supposed to do whatever tasks are called for in the handleWatchKitExtensionRequest function, and return any required data using the supplied reply() function.</p>\n\n<p>So far, so good, and it all worked perfectly in the simulator. But it appears that although this call wakes the iPhone app, it does not stay awake long enough to do anything. Many thanks to Brian at <a href=\"http://www.fiveminutewatchkit.com/blog/2015/3/11/one-weird-trick-to-fix-openparentapplicationreply\">Five Minute WatchKit</a> who pointed out the way to make this work. Firstly, you create a dummy background task guaranteed to keep the iPhone app awake for 2 seconds. Then you perform your own work, using another background task. When that is finished, the phone can send the response and end the real background task. The dummy task will time out by itself after 2 seconds.</p>\n\n<p>For my needs, I could probably reduce the 2 seconds considerably, but since this is a problem I am unable to test, I decided just to go with Brian’s suggestion as it is.</p>\n\n<p>I re-submitted the app the same day it was rejected, and two days later it was back in review. The review process took longer than usual, but about 30 hours later, the app was marked “Pending an Apple Release”. I assumed this meant that Apple would release all WatchKit apps on 24th April when the watches shipped, but the following day the app was reported as “Pending Developer Release” (I had set it to release manually). Now I have told iTunesConnect to release the app and it is “Processing for App Store”.</p>\n\n<hr />\n\n<p>On a related note, the start of pre-ordering for the Apple Watch was scheduled for a very civilised 5:01 pm here in eastern Australia. I had three watches all lined up in my Favorites in the Apple Store app, ready for ordering. When the store became live (at about 5:03 pm), I could not work out how to order all three in a single operation, so had to place these orders one at a time. I got the first two ordered for the soonest possible delivery, but by the time I got to the third (about 3 minutes later), I had missed out and it will ship in 4 to 6 weeks!</p>\n\n",
            "url": "http://troz.net/2015/04/apple-watch-rejected-then-accepted/",
            "summary": "<p>As described in a <a href=\"http://troz.net/2015/04/my-first-apple-watch-app/\">previous post</a>, about 9 days ago I submitted my first Apple Watch app for review.\nThe app was an extension of my golf scoring app: <a href=\"http://troz.net/19th-hole/\">The 19th Hole</a>.</p>\n",
            "date_published": "2015-04-11 00:00:00 +1000",
            "tags": ["apple watch", "golf", "watch"]
        },

        {
            "id": "/2015/04/my-first-apple-watch-app",
            "title": "My First Apple Watch App",
            "content_html": "<p>I have just submitted my first Apple Watch app to the iTunes App Store. This is a scary thing to do, since I have never seen, touched or used an Apple Watch and all I had to go on was the Simulator that Apple supplies with Xcode.</p>\n\n<p>At the moment, Apple has only made a limited set of Apple Watch features available to developers, and all Apple Watch apps come tethered to an iOS app - presumably this will mainly be iPhone apps, but I wonder will we be able to connect Apple Watches to iPads? Anyway, it made sense to extend one of my existing apps to use the Apple Watch instead of starting from scratch.</p>\n\n<p>Of my <a href=\"http://troz.net/apps-ios/\">iOS apps</a>, I decided that <a href=\"http://troz.net/19th-hole/\">The 19th Hole</a>, my golf scoring app, would be well suited to the Apple Watch. The problem with using the iPhone version to score is that you have to keep pulling your iPhone in and out of your golf bag, sometimes in the rain, sometimes in bright sunlight. Being able to enter the scores on your wrist sounds like a big improvement. We know that the Apple Watch is at least somewhat water-resistant, but we are yet to see how well it performs in bright sunlight, however I would expect that Apple has put considerable effort into this.</p>\n\n<hr />\n\n<p>Once I decided to write an Apple Watch app, the first step was to learn how. I read all Apple’s published documents to get a feel for what was possible and what user-interface objects would be available. I find online courses very helpful and by far the best Apple Watch course that I found was <a href=\"http://www.raywenderlich.com/video-tutorials#watchkit\">Ray Wenderlich’s WatchKit video tutorial series</a>. The instructors were very clear and explained how the layout and sizing of objects works on the Apple Watch, as well as how to set up and move between views and how to communicate from the Watch back to the iPhone. The layout section of the course was particularly valuable as no other course I found even mentioned this, although it is crucial to the interface design and allowing for the two sizes of watch.</p>\n\n<p>I had released an update to <a href=\"http://troz.net/19th-hole/\">The 19th Hole</a> recently in preparation for this. I wanted to have squashed the bugs and updated the interface, so the only changes needed would be the WatchKit ones.</p>\n\n<p>The first step in adding a WatchKit app to your existing app is to create a new target in the Xcode project. Choosing WatchKit actually adds two new targets: the WatchKit Extension which lives on the iPhone and supplies the code for the Watch, and the WatchKit App which lives on the Watch and provides the interface.</p>\n\n<p>I decided to use a paged interface with one page per hole. Each of these pages has a table, with one row per player. A slider with plus &amp; minus buttons lets you enter the score for each player and the total score for each player is also displayed.</p>\n\n<p><img src=\"http://troz.net/images/19thHole-Watch2.png\" alt=\"Data entry\" /></p>\n\n<p>Apart from this data entry view, I have a splash screen which shows you the current round as set up on the iPhone and a final summary screen showing everyone’s totals.</p>\n\n<p><img src=\"http://troz.net/images/19thHole-Watch1.png\" alt=\"Splash screen\" />\n<img src=\"http://troz.net/images/19thHole-Watch3.png\" alt=\"Summary\" /></p>\n\n<p>These images are taken from the Apple Watch simulator running in 42mm mode.</p>\n\n<hr />\n\n<p>The biggest programming problem was getting the communications working beween the two devices. The 19th Hole uses Core Data for all data storage. My first attempt shared this data between the two apps, allowing both to read and update the database. This almost worked, but if both apps were open, then changes in one device did not get across to the other. It seemed that the data was cached and I was unable to find a way to force either app to update every time.</p>\n\n<p>My next attempt kept all the data in the iPhone app and had the WatchKit extension ask for whatever data it needed and send changes to the iPhone app. This worked much better and I was able to get live updates between the two devices.</p>\n\n<p>The other issue is the fact that I have never seen, touched or used an Apple Watch. This means that I had to guess a lot of things:</p>\n\n<ul>\n  <li>how well will it perform?</li>\n  <li>will the icon look OK?</li>\n  <li>are the controls large enough to use?</li>\n  <li>will the text be large enough to read?</li>\n</ul>\n\n<p>My main philosophy was to keep the Watch app as simple as possible and use the standard interface elements, font sizes etc. Hopefully that will work.</p>\n\n<hr />\n\n<p>The final step was submitting the app to iTunes Connect for review. It was not clear to me how to do this, so I logged into iTunes Connect, created a new version and entered the meta-data. I couldn’t see anywhere to say anything about the Watch. I archived the main iOS app as usual and validated it with the Store. I had a few things to fix up, but I got the build submitted.</p>\n\n<p>Back to iTunes Connect and once the uploaded build had been processed, I was able to select it and click “Submit for Review”. At this point, the page reported an error and showed me a new section where I could upload the Apple Watch icon and screen shots.</p>\n\n<p>I had been unsure how the icon would look when made round, but it looks OK on the iTunes Connect page. How it will look on a tiny watch screen remains to be seen. Anyway, once I had my icon and screen shots uploaded, I was able to proceed to the next step. But then I got a message saying that the app could not be processed - no explanation. Thankfully, I had seen some developers on Twitter reporting this, and somebody said that the solution was to remove the alpha channel from your screen shots. Sorry for not giving credit here - I forget who said this, but it worked, so thank you whoever you are.</p>\n\n<p>So now my app is waiting for review and who knows how long that will take. According to <a href=\"http://appreviewtimes.com\">App Review Times</a>, the current estimate is 8 days, but the trend is heading upwards. I would expect that to blow out in the next few weeks as developers try to get their apps ready for the Apple Watch release date of April 24th.</p>\n\n",
            "url": "http://troz.net/2015/04/my-first-apple-watch-app/",
            "summary": "<p>I have just submitted my first Apple Watch app to the iTunes App Store. This is a scary thing to do, since I have never seen, touched or used an Apple Watch and all I had to go on was the Simulator that Apple supplies with Xcode.</p>\n",
            "date_published": "2015-04-02 00:00:00 +1000",
            "tags": ["apple watch", "golf", "ios", "watch"]
        },

        {
            "id": "/2015/03/livecode-stacks",
            "title": "LiveCode stacks",
            "content_html": "<p>When I converted my site to Jekyll &amp; GitHub, one of the things I left behind was a collection of LiveCode (Revolution) stacks. For many years I was active in the Revolution community before going in other directions and over that time, I built up a small library of stacks that I released into the public domain.</p>\n\n<p><a href=\"http://livecode.com\">LiveCode</a> is a cross-platform rapid development environment. There is an open source community edition available for anyone wishing to get started.</p>\n\n<p>I had assumed that since I had not been an active LiveCode user for many years, these stacks would have become worthless. But in the last couple of days, I have received a couple of queries from people looking for them.</p>\n\n<p>So I created a new GitHub repository and uploaded them all to here:\n<br />\n<a href=\"https://github.com/trozware/rev_stacks\">LiveCode stacks</a></p>\n\n<p>None of these stacks have been updated recently, but feel free to use or adapt as you see fit. They have not been tested using recent versions of LiveCode, so may not work as expected. As stacks are provided as is. Use at your own risk.</p>\n\n",
            "url": "http://troz.net/2015/03/livecode-stacks/",
            "summary": "<p>When I converted my site to Jekyll &amp; GitHub, one of the things I left behind was a collection of LiveCode (Revolution) stacks. For many years I was active in the Revolution community before going in other directions and over that time, I built up a small library of stacks that I released into the public domain.</p>\n",
            "date_published": "2015-03-18 00:00:00 +1000",
            "tags": ["livecode", "revolution"]
        },

        {
            "id": "/2015/03/icon-builder-3.0.1",
            "title": "Icon Builder 3.0.1",
            "content_html": "<p>So why an announcement for such a minor upgrade?</p>\n\n<p>Version 3.0 got no announcement because it was not the release I wanted.</p>\n\n<p>Having downloaded the Xcode 6.2 &amp; 6.3 betas, I had worked out what icons were needed to a WatchKit app.\nThis, combined with several other changes, made me bump the version number to 3.0.</p>\n\n<p>Sadly, Apple rejected the update because it referred to pre-release products. So I pulled all mentions of WatchKit out of the interface and meta data and got 3.0 released.</p>\n\n<p>After the Apple keynote on March 9th, I re-enabled the WatchKit portions of the app and re-submitted to the App Store, hoping that with the WatchKit SDK now part of the official Xcode release, Apple’s reviewers would allow it to get through this time.</p>\n\n<p>This worked - in fact the app was reviewed and accepted within 6 days - so now Icon Builder adds WatchKit to its list of supported platforms.</p>\n\n<p>Actually, Apple may have done me a favour in rejecting the first one as they changed the specifications for the icons slightly between Xcode 6.2 beta and Xcode 6.2 release.</p>\n\n<ul>\n  <li><a href=\"http://troz.net/icon-builder/\">Icon Builder page</a></li>\n  <li><a href=\"https://itunes.apple.com/us/app/icon-builder/id552293482?mt=12&amp;uo=4\">Mac App Store link</a></li>\n</ul>\n\n<hr />\n\n<h4 id=\"whats-new-in-version-3\">What’s New in version 3?</h4>\n\n<ul>\n  <li>Support for WatchKit app icons (version 3.0.1)</li>\n  <li>Simplified interface: removed display of smaller icons.</li>\n  <li>Fix for @3x images not being saved when you selected iOS 6 support.</li>\n  <li>iTunesArtwork@2x file now saved as a JPG to avoid iTunes Connect errors.</li>\n  <li>Removed CarPlay icon - Xcode sometimes gave errors when this was included.</li>\n</ul>\n\n",
            "url": "http://troz.net/2015/03/icon-builder-3.0.1/",
            "summary": "<p>So why an announcement for such a minor upgrade?</p>\n",
            "date_published": "2015-03-17 00:00:00 +1000",
            "tags": ["apple watch", "icons", "ios", "mac", "watch", "xcode"]
        },

        {
            "id": "/2015/03/app-store-preview-videos",
            "title": "App Store Preview Videos",
            "content_html": "<p>Apple now allows app developers to add a video preview of their app when uploading to iTunes Connect. This video is shown to potential purchasers when they are looking at an app in the iTunes App Store, just like the screen shots.</p>\n\n<p>I have been working on an update to <a href=\"http://troz.net/19th-hole/\">19th Hole</a> and since it uses a custom method for data input, I decided that a video would be really useful in this case.</p>\n\n<p>The first step was to work out how to record video from my iPhone. In OS X Yosemite (10.10), this can be done using QuickTime Player. Connect your device to your Mac using a Lightning cable (I think it has to be a Lightning cable - the old cables will not work). Open up QuickTime Player and choose “New Movie Recording” from the File menu. By default this shows input from the Mac’s FaceTime camera, but just to the right of the red Record button, there is a down arrow that shows a popup menu. Click this and you can select your iPhone as the Camera. Since I wanted the sound effects included, I also selected my iPhone as the Microphone, but if you want to provide a voice-over or sound-track, you might want to change this.</p>\n\n<p>That handles the technical side of recording, but I needed a way to show where I was tapping and pressing on the iPhone screen. After some searching, I found <a href=\"https://github.com/toddreed/Touchpose\">Touchpose</a> which was exactly what I wanted. Since it requires changing the main.m file, as well as changes to the app delegate, I created a branch in my app’s git repository so that I could apply these changes temporarily, but save them for next time. The only alternation I made to the default settings was to change the color of the cursor indicator to suit the color scheme of my app. And since this was a temporary change, I set it to show the cursor indicator all the time, not just when the screen was mirrored. All the details are shown in the sample project.</p>\n\n<p>Next step was to actually record a session. After my first attempt (which lasted about 67 seconds), I checked the Apple specs and found that the video could not be longer than 30 seconds. So I re-thought what I wanted to include and tried again. It took a few tries to get what I wanted, but finally I ended up with a .mov file that was 26 seconds long.</p>\n\n<p>On to iTunes Connect where I had the new version of the app set up already with its screen shots. Since I have an iPhone 6, the video was only suited for the 4.7 inch section. So I dragged it into the drop zone and waited. No good - the video frame rate was too high. It has to be 30 fps or less. QuickTime Player had made a video that was 50 fps.</p>\n\n<p>The app I usually turn to for any video conversion needs is <a href=\"https://handbrake.fr\">Handbrake</a>. So I ran the app through Handbrake, specifying a frame rate of 30. This converted the video to .mp4 instead of .mov, but it was 30 fps. It wasn’t until I tried to upload it to iTunes Connect that I realised Handbrake had cropped the video from 750 x 1334 to 750 x 1330. After searching through the settings, I found where I needed to turn on custom clipping and set it to 0 so that the original dimensions were preserved. But iTunes Connect still didn’t like it, although this time the error message was un-informative.</p>\n\n<p>Eventually, the brains trust on the other side of the room suggested iMovie. Not only that, but he found that once the original had been dragged into iMovie, the share options included an “App Preview” setting. This gave us a .mov file of the correct dimensions and the correct frame rate which iTunes Connect accepted.</p>\n\n<p>iTunes Connect that allowed me to select the poster frame for the video and save the changes to the app meta data. At that point, it showed a notice saying that the app preview was being processed which could take up to 24 hours. It appears that the processing has been finished, as that notice has disappeared.</p>\n\n<p>For the next stage, I ned to wait until the app gets reviewed and hopefully approved. Then it will be interesting to see how the video looks in the iTunes App Store.</p>\n\n<hr />\n\n<p>As a reward for reading this post, here is a pre-release of the video, showing how to enter the score data for a hole of golf using <a href=\"http://troz.net/19th-hole/\">19th Hole</a>:</p>\n\n<video controls=\"\" poster=\"/images/19thHole-scoring-web.png\">\n  <source src=\"/images/19thHole-scoring-web.mp4\" type=\"video/mp4\" />\n\tYour browser does not support the video tag.\n</video>\n\n",
            "url": "http://troz.net/2015/03/app-store-preview-videos/",
            "summary": "<p>Apple now allows app developers to add a video preview of their app when uploading to iTunes Connect. This video is shown to potential purchasers when they are looking at an app in the iTunes App Store, just like the screen shots.</p>\n",
            "date_published": "2015-03-16 00:00:00 +1000",
            "tags": ["app store", "ios"]
        },

        {
            "id": "/19th-hole",
            "title": "19th Hole",
            "content_html": "<p>19th Hole is the golf scoring app for everyone, and it is available from the <a href=\"https://itunes.apple.com/us/app/the-19th-hole/id871686159?mt=8&#038;uo=4\" target=\"_blank\">iTunes App Store</a>.</p>\n\n<p>Whether you are playing for the club championship, having a weekend round with friends or playing pitch’n’putt with the kids, 19th Hole makes it easy to keep score.</p>\n\n<p>Designed for fast, accurate score keeping with a color scheme chosen for optimal outdoor viewing, 19th Hole uses a simple setup process and an intuitive, gesture-based score entry system. During and after the round, you can see totals and results using various methods: total strokes, total putts, match play (Irish match play for more than 2 players) &amp; Stableford.</p>\n\n<p>19th Hole now includes an Apple Watch app so strokes can be entered quickly and easily using the watch to avoid having to pull your iPhone out of your bag.</p>\n\n<p>When you have finished, you can archive the score card for future reference and email the completed card to your fellow players.</p>\n\n<h3 id=\"scoring-a-round-is-very-simple\">Scoring a round is very simple:</h3>\n\n<ol>\n  <li>Select a course – the last played course is pre-selected.</li>\n  <li>Select the players – the last set of players is pre-selected.</li>\n  <li>Tap ‘Start Round’</li>\n  <li>Optionally enter the players’ handicaps – the last used handicaps are pre-selected.</li>\n  <li>After each hole, enter the strokes played by each person, on your iPhone or Apple Watch.</li>\n  <li>You can also record putts and various other statistics (iPhone only).</li>\n</ol>\n\n<p><img src=\"/http://troz.netimages/19-1_4-500.png\" alt=\"Scoring\" />\n<br />iPhone</p>\n\n<p><img title=\"Watch Scoring\" alt=\"Watch Scoring\" src=\"http://troz.net/images/19thHole-Watch-v3.jpg\" />\n<br />Apple Watch</p>\n\n<p>Courses only need to be entered once and are then saved for future use.<br />\nEnter the course name, number of holes and select the tees in use. For each hole, enter the par, index/handicap, and the distance from each tee.</p>\n\n<p>If you are in a hurry to start the round, enter the name of the course and the number of holes. The rest of the data can be entered for each hole as you play, or can be edited later.</p>\n\n<p><img src=\"http://troz.net/images/19-3_4-500.png\" alt=\"Adding a course\" /></p>\n\n<p>Players can be selected from your Contacts or entered manually. Add email addresses so the completed cards can be emailed after the round. Choose an icon for each player. If a player was selected from Contacts, you can use the photo assigned in the Contacts app.</p>\n\n<p><img src=\"http://troz.net/images/19-4_4-500.png\" alt=\"Adding a player\" /></p>\n\n<h3 id=\"gesture-controlled\">Gesture-controlled:</h3>\n\n<p>All scores are entered using a special number button that you tap, then drag your finger up or down the screen to raise or lower the number.</p>\n\n<p>Hold your finger down on the number, then move it up or down to change the number displayed. To make it easier to see what you are doing, hold your finger down on the number, then first drag to one side before dragging up or down. Play the video below to see how this works.</p>\n\n<video controls=\"\" poster=\"http://troz.net/images/19thHole-scoring-web.png\">\n  <source src=\"http://troz.net/images/19thHole-scoring-web.mp4\" type=\"video/mp4\" />\n</video>\n\n<p><br />\nTo change hole, swipe left or right in the lower half of the screen, below the line. Swiping back from hole 1 allows you to change the handicaps. Swiping on from the last hole takes you to Notes where you can record any interesting events during this round.</p>\n\n<p>During a round, cumulative statistics are shown at the bottom of the screen.<br />\nFor a more complete score card, you can swipe downwards in the middle of the screen.</p>\n\n<p>Tap on the hole details at the top of the screen to edit that data.</p>\n\n<p><img src=\"http://troz.net/images/19-5_4-500.png\" alt=\"Gestures\" /></p>\n\n<h3 id=\"after-the-game\">After the game:</h3>\n\n<p>While relaxing at “The 19th Hole” after the game, you can check the scores and swipe back and forth between holes to see what happened during the round.</p>\n\n<p>Once you are sure the scores are correct, tap the “Action” button in the top right. You can add some notes to the round at this point or archive the round so that the completed score card is saved on your iPhone. After this, you will not be able to make any further changes.</p>\n\n<p>Completed rounds are listed when you tap “See Old Cards” with the most recent at the top. Tap one to see the complete score card for that round. Tap “Strokes”, “Putts” or “Stableford” to change what is shown for each hole. The summary is shown at the bottom.</p>\n\n<p><img src=\"http://troz.net/images/19-2_4-500.png\" alt=\"Final Score Card\" /></p>\n",
            "url": "http://troz.net/19th-hole/",
            "summary": "<p>19th Hole is the golf scoring app for everyone, and it is available from the <a href=\"https://itunes.apple.com/us/app/the-19th-hole/id871686159?mt=8&#038;uo=4\" target=\"_blank\">iTunes App Store</a>.</p>\n",
            "date_published": "2015-03-16 00:00:00 +1000",
            "tags": ["golf", "ios", "scoring"]
        },

        {
            "id": "/testing-automation",
            "title": "Testing automation",
            "content_html": "<p>Today I am experimenting with automating post generation.</p>\n\n<p>Firstly, there is the structure of the post Markdown document, which really boils down to the file name and the header.</p>\n\n<p>I have set up a macro in <a href=\"http://www.ergonis.com/products/typinator/\">Typinator</a> so that I just type the title of the post in a text document. I copy that title to the clipboard and type the shortcut. The header is then created with the title and the formatted permalink.</p>\n\n<p>To save the document, I use another Typinator snippet to convert the title (still in the clipboard) to lower case and to replace the spaces in the title with dashes.</p>\n\n<p>For starting the local Jekyll server, I have turned to an <a href=\"http://www.alfredapp.com\">Alfred</a> workflow. I have two actions in the workflow. One opens Terminal, cd’s to my site folder and runs the command to start the local Jekyll server. The second opens my default browser to the local Jekyll test address.</p>\n\n<p>Both these actions happen simultaneously so the browser usually fails until refreshed.\nThe server is left running in Terminal so I can shut it down when finished testing.</p>\n\n<p>After writing the post, the final stage is to publish, so I need to work out the commands for doing a git commit and push. Then I should be able to automate those tasks.</p>\n\n<p>Testing the git commands using Terminal, I have come up with the following sequence:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>git add .\ngit commit -a -m \"Commit message here\"\ngit push\n</code></pre>\n</div>\n\n<p>The commit message could be the title of the post, so I need a way to construct the command and then execute it. Typinator is good at text manipulation, so I constructed another macro that takes the clipboard, uses it as the commit message and performs the git commands. This gave a good commit message, but the actual commit failed, so that was no use.</p>\n\n<p>So then I went back to Alfred and created a workflow there with a series of Terminal commands to perform the actions above. This only allows a generic commit message, but it works as expected.</p>\n\n<p>So there is still room for improvement, but with a set of macros, I can automate a lot of the standard text entry, which is always good for reducing errors.</p>\n\n<hr />\n\n<p>The sequence now is:</p>\n\n<ol>\n  <li>Open the text editor and type the title of the post.</li>\n  <li>Cut this into the clipboard.</li>\n  <li>Run the Typinator macro to fill in the post header.</li>\n  <li>Save the post file, using the Typinator macro to construct the file name.</li>\n  <li>Write the post, then use an Alfred workflow to test it locally.</li>\n  <li>When ready, use an Alfred workflow to publish.</li>\n</ol>\n\n<hr />\n",
            "url": "http://troz.net/testing-automation/",
            "summary": "<p>Today I am experimenting with automating post generation.</p>\n",
            "date_published": "2015-03-12 00:00:00 +1000",
            "tags": ["jekyll", "web"]
        },

        {
            "id": "/workflow-for-writing-a-post",
            "title": "Workflow for writing a post",
            "content_html": "<p>So here is where I need to get used to Jekyll and how things are done.\nI will end up automating this when I am sure of the process, but for now, I am just going to work my way through it.</p>\n\n<ol>\n  <li><strong>Start up the local Jekyll server:</strong>\n    <ul>\n      <li>I opened Terminal and used <code class=\"highlighter-rouge\">cd</code> to get to the folder containing my site.</li>\n      <li>Next I started the Jekyll server locally using <code class=\"highlighter-rouge\">jekyll serve</code>.</li>\n      <li>This gave me the address of the local server - in my case <code class=\"highlighter-rouge\">http://127.0.0.1:4000/</code> - so I went there in my browser to see the default page.</li>\n    </ul>\n  </li>\n  <li><strong>My goal is to write a new blog post (this one in fact).</strong>\n    <ul>\n      <li>For advice on creating a new post, I went to the <a href=\"http://jekyllrb.com/docs/posts/\">Jekyll docs</a>.</li>\n      <li>Jekyll needs the file name to be a specific format which includes the date and title.</li>\n      <li>Looking in the <code class=\"highlighter-rouge\">_posts</code> folder of the site folder, I see the previous post file is titled <code class=\"highlighter-rouge\">2015-03-08-new-site-for-trozware.md</code>.</li>\n      <li>As it is now 10th March 2015, I am saving this file as: <code class=\"highlighter-rouge\">2015-03-10-workflow-for-writing-a-post.md</code>.</li>\n      <li>Saving at this point shows a Jekyll error in the Terminal, but the next stage will fix that.</li>\n    </ul>\n  </li>\n  <li><strong>Front matter:</strong>\n    <ul>\n      <li>Jekyll specifies that each file must have a <a href=\"http://jekyllrb.com/docs/frontmatter/\">front matter block</a> in a certain format.</li>\n      <li>The header has certain essential parameters and then more optional ones.</li>\n      <li>My site was imported from WordPress, so the older posts contain several header parameters that may not be necessary any more.</li>\n      <li>Look at the screen shot below to see what I have in this post file:</li>\n      <li>After saving, I see this entry in my Terminal:</li>\n      <li><code class=\"highlighter-rouge\">Regenerating: 1 file(s) changed at 2015-03-10 13:50:40 ...done in 0.421789 seconds.</code></li>\n      <li>Now I can see the title and the start of the post on my first page and when clicking on it, I can see all the text.</li>\n    </ul>\n  </li>\n  <li><strong>Adding an image:</strong>\n    <ul>\n      <li>This is not really necessary for this post, but I wanted to document it as part of the workflow.</li>\n      <li>I wanted to show the front matter and start of this post, so I took a screen shot of the top of my editor window.</li>\n      <li>Then I renamed the image file and moved it into the <code class=\"highlighter-rouge\">images</code> folder of my site.</li>\n      <li>Now to embed the image using this Markdown: <code class=\"highlighter-rouge\">![Post header][2]</code></li>\n      <li>As you can see, I prefer to group all links (images &amp; URLs) at the end of the document and keep the body of the text as clean as possible.</li>\n      <li><img src=\"http://troz.net/images/post_header.png\" alt=\"Post header\" /></li>\n    </ul>\n  </li>\n  <li><strong>Proofing:</strong>\n    <ul>\n      <li>Now that I have the text of my post, I need to proof-read it from the local Jekyll server.</li>\n      <li>The <code class=\"highlighter-rouge\">jekyll serve</code> command running in Terminal keeps the pages up-to-date as you edit, but you will need to refresh your page in the browser manually to check your changes.</li>\n      <li>And I have found that if you make a major change to the site e.g. a CSS file or a config file, then it is best to stop the Jekyll server and start it again to make it re-build all the files.</li>\n      <li>To be completely sure, stop the server and run <code class=\"highlighter-rouge\">jekyll build</code> in Terminal although this may only do what <code class=\"highlighter-rouge\">jekyll serve</code> does on startup anyway.</li>\n    </ul>\n  </li>\n  <li><strong>Publishing:</strong>\n    <ul>\n      <li>Now it is time to publish.</li>\n      <li>As I am using GitHub Pages to host, the site files are all part of a single Git repository.</li>\n      <li>And as I understand it, the data <strong>must</strong> be in the <code class=\"highlighter-rouge\">master</code> branch.</li>\n      <li>Opening up the GitHub client, I see that my repository has a bunch of changes:\n        <ul>\n          <li>the file I am working on</li>\n          <li>the image I inserted</li>\n          <li>feed.xml</li>\n          <li>index.html files for each page</li>\n        </ul>\n      </li>\n      <li>This is as expected, since all pages are pre-generated when using Jekyll, so pages of posts must be re-rendered when a new post is added to the top.</li>\n      <li>Note that several of the files appear twice: once from where they are edited and once from the _site folder which serves them.</li>\n      <li>Just two simple steps now, using the GitHub client:\n        <ol>\n          <li>Commit</li>\n          <li>Sync</li>\n        </ol>\n      </li>\n      <li>And that’s it. My new post is online and ready for reading.</li>\n    </ul>\n  </li>\n  <li><strong>Summary:</strong>\n    <ul>\n      <li>This was my first post after the one I wrote when setting up, so the first real post.</li>\n      <li>While there appear to be a lot of steps, none of them are difficult.</li>\n      <li>But I do have 4 apps running to do it:\n        <ol>\n          <li>TextWrangler for editing</li>\n          <li>Terminal to run the local Jekyll server</li>\n          <li>Safari to check the finished post</li>\n          <li>GitHub to commit and upload</li>\n        </ol>\n      </li>\n      <li>Automating this is an obvious next step, so stay tuned…</li>\n    </ul>\n  </li>\n</ol>\n\n",
            "url": "http://troz.net/workflow-for-writing-a-post/",
            "summary": "<p>So here is where I need to get used to Jekyll and how things are done.\nI will end up automating this when I am sure of the process, but for now, I am just going to work my way through it.</p>\n",
            "date_published": "2015-03-10 00:00:00 +1000",
            "tags": ["jekyll", "markdown", "web"]
        },

        {
            "id": "/new-site-for-trozware",
            "title": "New Site for TrozWare",
            "content_html": "<h3 id=\"welcome-to-trozwares-new-site\">Welcome to TrozWare’s new site.</h3>\n\n<p>It appears that I am not alone in deciding to move away from WordPress. WordPress is great - easy to set up and with lots of cool themes to allow customisation of your site. But it is slow, especially if (like me) you are running on a low-cost shared server.</p>\n\n<p>I had been reading about <a href=\"http://jekyllrb.com\">Jekyll</a>, so I decide to give it a go and also host my site on <a href=\"https://pages.github.com\">GitHub</a>, taking advantage of their faster servers.</p>\n\n<p>I followed the advice given by <a href=\"http://www.girliemac.com/blog/2013/12/27/wordpress-to-jekyll/\">Girlie Mac</a> and performed the migration from my self-hosted WordPress site. I am using the <a href=\"http://pixyll.com\">Pixyll</a> theme by <a href=\"http://johnotander.com\">John Otander</a> with a few tweaks of my own.\nThe site is much faster to load, and I am hoping that the easier editing will inspire me to write more posts.</p>\n\n<p>Of course it wasn’t all positive. WordPress did give me some features I liked, but I think overall the result is better.</p>\n\n<h4 id=\"wordpress\">WordPress:</h4>\n\n<ul>\n  <li>WordPress gave me a full LAMP stack, so I could run my own PHP scripts.</li>\n  <li>WordPress gave me a search function.</li>\n  <li>Commenting was built-in.</li>\n</ul>\n\n<h4 id=\"jekyll\">Jekyll:</h4>\n\n<ul>\n  <li>Jekyll builds the pages out as static HTML, so all pages are pre-generated for fast loading.</li>\n  <li>Writing for Jekyll is pure Markdown so it is easier to write and preview locally.</li>\n  <li>Some of the things I needed a plugin for in WordPress can be done natively in Jekyll:\n    <ul>\n      <li>tables</li>\n      <li>syntax-highlighting</li>\n    </ul>\n  </li>\n</ul>\n\n<p>For comments, I have switched to <a href=\"https://disqus.com\">Disqus</a>, but I am not sure about it yet. I will evaluate over the next few weeks. In WordPress, I used a plugin to handle the spam that inevitably arrived. I am hoping that Disqus will protect me from that, but I have to see how good a job it does and whether the few real comments are worth it.\nA better option might be to turn off comments completely and just have a contact form (which I have added using <a href=\"http://formspree.io\">Formspree</a>).</p>\n\n<p>Working in Markdown is great. I love how I can have a really clean look in my editor and still end up with well formatted HTML. I use Coda 2 on my Mac as my standard web editor, so that is what I am writing in now. I will probably experiment with other Markdown editors as I go. And for any Mac users out there working in Markdown, I highly recommend <a href=\"http://brettterpstra.com/projects/markdown-service-tools/\">Brett Terpstra’s Markdown Service Tools</a>.</p>\n\n",
            "url": "http://troz.net/new-site-for-trozware/",
            "summary": "<h3 id=\"welcome-to-trozwares-new-site\">Welcome to TrozWare’s new site.</h3>\n",
            "date_published": "2015-03-08 00:00:00 +1000",
            "tags": ["trozware", "web"]
        },

        {
            "id": "/world-time-in-words",
            "title": "World Time In Words",
            "content_html": "<p><a href=\"http://itunes.apple.com/au/app/time-in-words/id509085586?mt=8\" target=\"_blank\">World Time In Words version 3.0</a> is now available in the Mac App Store.</p>\n\n<p>With version 3.0 of this app, I have changed the name to “World Time In Words”. This is to reflect what I feel to be the most useful feature of this app: the ability to convert between time zones.</p>\n\n<p>It has two other new features:</p>\n\n<ol>\n  <li>The time shown in the menu bar can now be set to use 24-hour time. Go to Preferences to change this.</li>\n  <li>If you temporarily need to see the time in digital format, hold down Option when opening the menu.</li>\n</ol>\n\n<p>And there is one other thing in this version that I am almost too embarrassed to mention: after using this app for about two years, it was finally pointed out to me that the 3rd of every month was being shown as the “3th”. Oh dear – it was a copy-paste error but I should I found it a long time ago.</p>\n\n<p>As always, please let me know if you have any suggestions for future versions.</p>\n",
            "url": "http://troz.net/world-time-in-words/",
            "summary": "<p><a href=\"http://itunes.apple.com/au/app/time-in-words/id509085586?mt=8\" target=\"_blank\">World Time In Words version 3.0</a> is now available in the Mac App Store.</p>\n",
            "date_published": "2015-02-10 00:00:00 +1000",
            "tags": ["mac", "time in words"]
        },

        {
            "id": "/man-reader-1-4-now-available",
            "title": "Man Reader 1.4 Now Available",
            "content_html": "<p><a href=\"http://troz.net/manreader/\">Man Reader 1.4</a> is now available through the <a href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\">Mac App Store</a>.</p>\n\n<h5 id=\"the-new-features-and-fixes-are\">The new features and fixes are:</h5>\n\n<ul>\n  <li>Fix for plain text view not wrapping correctly for odd-sized fonts.</li>\n  <li>Fix for HTML text view over-riding font colors that may be invisible.</li>\n  <li>Search for missing entry (e.g. g++) no longer requires Enter or Return.</li>\n  <li>Better automatic selection of matching entries while searching.</li>\n  <li>Fix for animation warning message appearing in Console.</li>\n  <li>Status display shows when man page list is being updated.</li>\n  <li>Searching inside a page now allows a minimum of 2 characters (was 3), so flags<br />\ne.g. ‘-b’ do not need to be escaped.</li>\n  <li>Fixed path for Network Utility in tool bar (moved in OS X 10.9).</li>\n  <li>More information available about the effects of sand-boxing for this app.</li>\n</ul>\n\n",
            "url": "http://troz.net/man-reader-1-4-now-available/",
            "summary": "<p><a href=\"http://troz.net/manreader/\">Man Reader 1.4</a> is now available through the <a href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\">Mac App Store</a>.</p>\n",
            "date_published": "2014-04-03 00:00:00 +1000",
            "tags": ["mac", "man reader"]
        },

        {
            "id": "/email-clients-for-mac-ios",
            "title": "Email clients for Mac &#038; iOS",
            "content_html": "<p>Some people are moving away from email, but for me, it remains the best way to communicate online. I get to keep a record of conversations and the attached files are with the text so I can always see the context.</p>\n\n<p>But I think everyone would agree that Apple have dropped the ball with Mail in OS X Mavericks, and to a lesser extent, in iOS 7.</p>\n\n<p>So I have been on a campaign lately to find an email client that suits my needs. I don’t feel that I have found the perfect answer yet, but I am getting there.</p>\n\n<p>The first step was to work out what I really needed in an email client:</p>\n\n<ul>\n  <li>support for IMAP accounts and Gmail accounts</li>\n  <li><span style=\"line-height: 1.5;\">unified inbox – all accounts shown together</span></li>\n  <li>conversation threading</li>\n  <li>support for POP accounts (optional)</li>\n</ul>\n\n<p> </p>\n\n<p>On the Mac, I have narrowed it down to two clients that I am swapping between every few days: <a href=\"https://www.uniboxapp.com\" target=\"_blank\">Unibox</a> and <a href=\"http://airmailapp.com\" target=\"_blank\">Airmail</a>.</p>\n\n<p>Unibox is different in the way it displays your emails. It is much more focussed on people and conversations, so the side bar shows all the people who you have sent emails to or received emails from, grouped by date. I really like the merging of incoming &amp; outgoing emails, but it can be a bit weird if you delete the latest email from someone who then disappears from sight.</p>\n\n<p>Emails are grouped by a single person, not by conversation. There is a button on appropriate emails to toggle conversation view for that particular thread, but it doesn’t stick.</p>\n\n<p>In order to show a conversation, they truncate emails in the main part of the window and show a “More” button at the bottom of the email to expand it. This was annoying, but in the latest beta, it performs much better, so you are not continually tapping this to see a long email.</p>\n\n<p>Airmail has a more conventional display. Threading and the layout of threaded emails are both very nice. There are multiple view options, which I find can get a bit messy looking, so I prefer the “Minimized View” setting. Airmail also does POP accounts which is a plus.</p>\n\n<p>The main reason I keep going back to Unibox is the unification. I have grown to like having sent and received messages all in the same window without having to go and find them somewhere else.</p>\n\n<p> </p>\n\n<p>On the iPad, I am currently using <a href=\"http://www.getboxer.com\" target=\"_blank\">Boxer</a> and have tried numerous others. <a href=\"http://www.moltoapp.com/\" target=\"_blank\">Molto</a> was quite good and the interface was fun, but it would only use landscape mode and like to be able to swap. Boxer is not great in portrait mode, but it does work.</p>\n\n<p>So the jury is still out for iPad email clients, but on the Mac, I am leaning towards Unibox.</p>\n",
            "url": "http://troz.net/email-clients-for-mac-ios/",
            "summary": "<p>Some people are moving away from email, but for me, it remains the best way to communicate online. I get to keep a record of conversations and the attached files are with the text so I can always see the context.</p>\n",
            "date_published": "2014-03-25 00:00:00 +1000",
            "tags": ["email", "ios", "mac"]
        },

        {
            "id": "/berio-sequenza-vii",
            "title": "Berio Sequenza VII",
            "content_html": "<p>So my latest app is way outside my usual sphere but that’s what happens when family decide that what you do might actually be useful!</p>\n\n<p>My son is an oboist and he is currently learning Berio’s Sequenza VII for Oboe. This is a weird piece without a standard time signature. Instead each line has 13 bars with each bar being allocated a certain time span in actual seconds. As can easily be imagined, this makes learning and practicing this piece more of a mathematical exercise than a musical one.</p>\n\n<p>So I wrote him an app to sound out the end of each bar. Once he and his teacher used it, a few more features crept in and now I think it will be of great assistance to any student or teacher trying to work on this piece.</p>\n\n<p>While I doubt that many oboists frequent this web site, it anyone who does can pass this on to any oboist, I would be very grateful, and I think the oboist would be too!</p>\n\n<p>The app is available through the <a href=\"https://itunes.apple.com/us/app/sequenza-vii/id730234638?mt=8&#038;uo=4\" target=\"_blank\">iTunes App Store</a>.<br />\nMore details are on <a href=\"http://troz.net/berio/\" title=\"Berio’s Sequenza VII\">this page</a>.</p>\n\n",
            "url": "http://troz.net/berio-sequenza-vii/",
            "summary": "<p>So my latest app is way outside my usual sphere but that’s what happens when family decide that what you do might actually be useful!</p>\n",
            "date_published": "2013-11-07 00:00:00 +1000",
            "tags": ["ios", "music"]
        },

        {
            "id": "/berio",
            "title": "Berio’s Sequenza VII",
            "content_html": "<p><a href=\"http://en.wikipedia.org/wiki/Luciano_Berio\" target=\"_blank\">Luciano Berio</a> wrote a series of Sequenzas for various instruments with Sequenza VII being the one for oboe.<br />\n<img src=\"/images/Berio_icon.png\" alt=\"Sequenza VII icon\" width=\"86\" height=\"86\" /></p>\n\n<p>Preparing this work creates some unique problems for the oboist as Berio did not adhere to any time signature that could be indicated by a metronome. Instead, each line consists of <a href=\"http://www.nuoboe.com/berio/html/factsheet.html\" target=\"_blank\">13 bars (measures) with each bar’s length specified in exact seconds</a>.</p>\n\n<p>When my son (an oboist currently studying in Melbourne, Australia) started trying to learn this piece, it occurred to him that having an iOS app developer in the family could be of some assistance. So with instructions from him and with suggestions from other oboists, I have developed the <a href=\"https://itunes.apple.com/us/app/sequenza-vii/id730234638?mt=8&#038;uo=4\" target=\"_blank\">Berio Sequenza VII app for iPhone or iPod Touch</a>.</p>\n\n<p><img src=\"http://troz.net/images/Berio_2-500.png\" alt=\"Berio&#039;s Sequenza VII\" /></p>\n\n<p>With the default settings it will count the bar lengths, using metronome-like sounds to mark the starts of bars and lines. The player who needs to practice a specific bar can easily set the app to start at that bar and even to repeat that bar length continuously.</p>\n\n<p>Tapping the “i” button at the bottom right of the screen takes you to the more advanced options.</p>\n\n<p>The “Settings” section deals primarily with the B4 drone that is supposed to accompany the performance of this piece. While in an actual performance, the dynamics of this drone would vary, for this practice app it remains at a constant volume as specified by you. The volume can be set to a percentage of the iPhone’s current volume setting. If it is still too quiet, plug your iPhone into a speaker or use some sort of physical amplification. If you prefer to play with an A other than 440 Hz, that can be adjusted. And finally, the wave form used to generate this drone sound can be switched between a sine wave or a triangle wave. Disclaimer: excessive use of this drone may cause loss of friends!</p>\n\n<p><img src=\"http://troz.net/images/Berio_3-500.png\" alt=\"Settings\" /></p>\n\n<p>The Settings page also includes an option to slow down the times for practice. At 100% speed, bar 1 on each line will last for 3 seconds. The speed can be reduced to allow each bar to last longer, for use during the learning process.</p>\n\n<p>The “Bars &amp; Sounds” section allows you to customise the various options marking the start of each new bar. You can specify the number of seconds &amp; the sound used to count you in after tapping the Start button. You can also select which of the metronome sounds to use to mark the start of each bar, making the first bar of each line use a different sound if you prefer. Finally, in case you are playing so loudly that you are unable to hear the iPhone, you can set the screen to flash a different color at the start of each new bar.</p>\n\n<p><img src=\"http://troz.net/images/Berio_4-500.png\" alt=\"Bars &amp; Sounds\" /></p>\n\n<p>Jacqueline Leclair wrote a <a href=\"http://www.nuoboe.com/berio/index.html\" target=\"_blank\">supplementary edition</a> of this work in 2000 using traditional time signatures in a way that almost exactly duplicates the original timings. This app is designed for use with the original score using Berio’s real time bar lengths.</p>\n",
            "url": "http://troz.net/berio/",
            "summary": "<p><a href=\"http://en.wikipedia.org/wiki/Luciano_Berio\" target=\"_blank\">Luciano Berio</a> wrote a series of Sequenzas for various instruments with Sequenza VII being the one for oboe.<br />\n<img src=\"/images/Berio_icon.png\" alt=\"Sequenza VII icon\" width=\"86\" height=\"86\" /></p>\n",
            "date_published": "2013-11-06 00:00:00 +1000",
            "tags": ["ios", "music"]
        },

        {
            "id": "/icon-builder-ios-7",
            "title": "Icon Builder &#038; iOS 7",
            "content_html": "<p>Icon Builder 1.2 was released on 18 September 2013.<br />\nIt was an update with 2 new functions:</p>\n\n<ul>\n  <li>The ability to create images to suit an Xcode 5 assets library</li>\n  <li>The ability to create icons with the required sizes for IOS 7 apps.</li>\n</ul>\n\n<p>Knowing that iOS 7 apps can only be built using Xcode 5, I linked the switch for these 2 abilities in a single check box.<br />\nThe problem was not really that they were in a single checkbox but that I had labelled it badly, so it was not obvious that this was what needed to be checked to create iOS 7 sized icon files.</p>\n\n<p>After some feedback from early users, it became clear to me that this was not enough. So 1.2.1 is now waiting for Apple’s approval.<br />\nThe changes in this version are:</p>\n\n<ul>\n  <li>More informative labelling of the checkbox.</li>\n  <li>The checkbox is checked by default is Xcode 5 is installed</li>\n</ul>\n\n<p>While waiting for the new version to be approved, please be aware that iOS 7 icon sizes will only be generated if you select “Check Assets (for Xcode 5.x or later)”</p>\n",
            "url": "http://troz.net/icon-builder-ios-7/",
            "summary": "<p>Icon Builder 1.2 was released on 18 September 2013.<br />\nIt was an update with 2 new functions:</p>\n",
            "date_published": "2013-09-23 00:00:00 +1000",
            "tags": ["icons", "ios", "mac"]
        },

        {
            "id": "/icon-apps-updated",
            "title": "Icon apps updated",
            "content_html": "<p><a href=\"https://itunes.apple.com/au/app/icns-maker/id550942266?mt=12\" target=\"_blank\">Icns Maker</a> and <a href=\"https://itunes.apple.com/au/app/icon-builder/id552293482?mt=12\" target=\"_blank\">Icon Builder</a> have both just been updated to support Xcode 5.</p>\n\n<p>Icon Builder is a Mac app that takes your images and creates all the required icon files for use in your iOS apps.<br />\nIt now supports Xcode 5’s image assets folders and if you are using Xcode 5, it will create the icon sizes required for iOS 7 app.</p>\n\n<p>Icns Maker is a Mac app that takes your images and creates icons for use in your Mac apps.<br />\nFor Xcode 4 or earlier, it creates a .icns file.<br />\nFor Xcode 5, it creates a folder of images for use in your project’s image assets folder.</p>\n",
            "url": "http://troz.net/icon-apps-updated/",
            "summary": "<p><a href=\"https://itunes.apple.com/au/app/icns-maker/id550942266?mt=12\" target=\"_blank\">Icns Maker</a> and <a href=\"https://itunes.apple.com/au/app/icon-builder/id552293482?mt=12\" target=\"_blank\">Icon Builder</a> have both just been updated to support Xcode 5.</p>\n",
            "date_published": "2013-09-19 00:00:00 +1000",
            "tags": ["icons", "ios", "mac"]
        },

        {
            "id": "/markdown",
            "title": "Markdown",
            "content_html": "<p>For some time now, I have been aware of the increasing trend towards using Markdown for text editing and for creating HTML. Markdown has been on my list of “things I should learn some day” so I was interested last week to read about a new iBooks book called <a href=\"http://macsparky.com/markdown\">The MacSparky Markdown Field Guide</a>. This was sufficient inspiration so I got the book and read through it this weekend.</p>\n\n<p><img src=\"http://static.squarespace.com/static/5008676d84aeae82b8acdd8c/t/5147c7a6e4b0d224b4419401/1363658669971/Markdown%20Cover%20Art%20-%20JPG.jpg?format=500w\" alt=\"The MacSparky Markdown Field Guide\" /></p>\n\n<p>Actually, to say that I <em>read</em> through the book is a mis-representation. The book was written using iBooks Author specially for the iPad and contains screen casts and interviews as well as text. But by the end of it, I now feel I have a basic understanding on Markdown and the ways in which I can use it.</p>\n\n<p>I guess the really big thing about using Markdown is that is creates plain text files that are human-readable even without being converted to HTML. This makes them future-proof since they are not tied to a proprietary file format that may cease to exist at any time.</p>\n\n<hr />\n\n<h2 id=\"using-markdown\">Using Markdown:</h2>\n\n<p>Since this web site is a self-hosted WordPress site, my next step was to look for a WordPress plugin that would allow me to use Markdown to create my posts. I could have used a Markdown editor that had HTML export, but I wanted to try something that would eliminate the extra step. The first one I decide to try was <a href=\"http://wordpress.org/extend/plugins/markdown-on-save-improved/\">Markdown on Save Improved</a>.</p>\n\n<p>One of the main reasons for choosing this one was that it stores the posts as both Markdown and as HTML. This saves time when going back to edit a post, avoids the constant changes that creep in when converting between formats all the time, and makes it so that the post will still display correctly even if Markdown is no longer supported. The only problem I have found so far is that it doesn’t automatically create links &amp; image links using the Markdown format, but uses standard <code class=\"highlighter-rouge\">&lt;a&gt;</code> and <code class=\"highlighter-rouge\">&lt;img&gt;</code> links instead.</p>\n\n<p>My next stop, since I always use a Mac, was to get Brett Terpstra’s collection of <a href=\"http://brettterpstra.com/projects/markdown-service-tools/\">Services for Markdown</a>. These add a lot on convenient shortcuts: one of my favourites is the ability to convert inline links to references links for increased readability while editing.</p>\n\n<hr />\n\n<h2 id=\"first-impressions\">First Impressions:</h2>\n\n<p>So having written this first post in Markdown, how do I feel about it? I haven’t really tried anything too weird this time, but there are a few things that were very easy to do. Particularly in the paragraph where I was talking about links &amp; images and wanted to include the tags as text without having it interpreted as HTML. All I had to do was surround the text with back-ticks.</p>\n\n<p>Links are vastly easier to manage and edit in Markdown. I miss the ability to specify that links should open in a new tab – I prefer to have that setting for links that take you outside my web site, but the modern theories on usability seem to be heading towards deprecation of this feature, so I may just stop using it.</p>\n\n<p>With the standard WordPress editor, I always felt that I was fighting it. I had to swap between the visual &amp; HTML editor tabs and when I swapped tabs, things would sometimes change without me doing anything. So far, I feel more in control using Markdown and although I have lost the WYSIWYG visual editor, I no longer have to wade through the HTML editor to get the effect I want or to remove the results of a few careless clicks.</p>\n\n<hr />\n\n<h2 id=\"what-next\">What next?</h2>\n\n<p>Some of the things on my wish list would be solved by a better editor and some by more powerful syntax.</p>\n\n<p>Editor:</p>\n\n<ul>\n  <li>Adding links &#038; images using Markdown style instead of HTML</li>\n  <li>Being able to create lists\n    <ul>\n      <li>Markdown makes this very easy but this WP plugin does not support lists as far as I can tell</li>\n      <li>So these lists are in HTML</li>\n    </ul>\n  </li>\n</ul>\n\n<p>Syntax:</p>\n\n<ul>\n  <li>Alignment of text &#038; images</li>\n</ul>\n\n<p>Using a stand-alone Markdown editor would solve the editor questions, but I wanted to try writing this post completely in WordPress.<br />\nAnd with the alignment, there is nothing to stop me adding CSS to the Markdown.</p>\n\n<p>Next time, I will test out a different WordPress Markdown editor and see how that goes. I will also test using a standalone editor and exporting its HTML to create a post.</p>\n\n",
            "url": "http://troz.net/markdown/",
            "summary": "<p>For some time now, I have been aware of the increasing trend towards using Markdown for text editing and for creating HTML. Markdown has been on my list of “things I should learn some day” so I was interested last week to read about a new iBooks book called <a href=\"http://macsparky.com/markdown\">The MacSparky Markdown Field Guide</a>. This was sufficient inspiration so I got the book and read through it this weekend.</p>\n",
            "date_published": "2013-04-01 00:00:00 +1000",
            "tags": ["markdown"]
        },

        {
            "id": "/a-knights-move-1-3",
            "title": "A Knight’s Move 1.3",
            "content_html": "<p><strong>UPDATE:</strong> September 2016 - A Knight’s Move for iOS is no longer available.<br />\n<a href=\"http://troz.net/knightsmove/\">A Knight’s Move for Mac</a> is still supported.</p>\n\n<hr />\n\n<p>A Knight’s Move has been updated to version 1.3. The Mac version is available through the <a href=\"https://itunes.apple.com/app/a-knights-move/id533321133?mt=12\" target=\"_blank\">Mac App Store</a>.</p>\n\n<h2 id=\"three-new-level-packs\">Three new level packs:</h2>\n\n<ul>\n  <li>Eight by Eight</li>\n  <li>Bishops Rule</li>\n  <li>Castles</li>\n</ul>\n\n<p>Eight by Eight has every puzzle set in a chessboard sized grid with more conventional placing of pieces.<br />\nBishops Rule has at least one Bishop in every puzzle.<br />\nCastles has a Castle or Rook in every puzzle and is suited to players who would like more of a challenge.</p>\n\n<h2 id=\"new-feature\">New feature:</h2>\n\n<p>When your knight has been taken, you have the option to undo the last move so you can try again without losing the moves you have already made.</p>\n\n<p><img alt=\"Undo Last Move\" src=\"/images/KM-UndoLast.png\" /></p>\n\n",
            "url": "http://troz.net/a-knights-move-1-3/",
            "summary": "<p><strong>UPDATE:</strong> September 2016 - A Knight’s Move for iOS is no longer available.<br />\n<a href=\"http://troz.net/knightsmove/\">A Knight’s Move for Mac</a> is still supported.</p>\n",
            "date_published": "2013-02-27 00:00:00 +1000",
            "tags": ["chess", "knight's move", "mac"]
        },

        {
            "id": "/sand-boxing-man-reader",
            "title": "Sand-Boxing Man Reader",
            "content_html": "<p>These instructions are no longer valid. As of version 1.5, the App Store version of Man Reader has solved the sand-boxing issues and is now as powerful as the non-sand-boxed version.</p>\n\n<p>The non-sand-boxed version will no longer be supported or updated, so please revert to the App Store version.</p>\n\n<hr />\n\n<p>As with all apps in the App Store, <a href=\"http://troz.net/manreader/\">Man Reader</a> is restricted by Apple’s sand-boxing policy. Sand-boxing is a great thing. It isolates apps from each other and from the system, making it far less likely that a problem app will cause wide-spread havoc. However for an app like Man Reader, this can lead to a drop in functionality.</p>\n\n<p>Due to the permissions limitations of sand-boxing, Man Reader can only search defined paths on your system drive e.g. /usr/, /opt/<br />\nThis is where the default man pages are all stored, but if you install other software (Xcode is a good example), then Man Reader may not be able to list all the available man pages on your system.</p>\n\n<p>To tell if Man Reader is missing man pages, copy &amp; paste the following command into the Terminal app:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>whatis . &gt;&gt; ~/Desktop/whatis.txt\n</code></pre>\n</div>\n\n<p>Man Reader runs this command internally when it starts, but the Terminal app is not sand-boxed and so can access everything.<br />\nRunning this command will create a text file on your desktop with a list of all available man pages on your system. Open it in a text editor that can show the number of lines in a file. <a href=\"http://www.barebones.com/products/textwrangler/\">TextWrangler from Bare Bones Software</a> is a good free editor that will do this.</p>\n\n<p>To check what man pages ManReader can read, go to Finder and select ‘Go to Folder…” from the Go menu. Paste in the following path:</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>~/Library/Containers/net.troz.Man-Reader/Data/Library/Application Support/Man Reader/\n</code></pre>\n</div>\n\n<p>You will see two files: open the one called ‘ManReader.raw’ in your text editor. This is the result of Man Reader running the whatis command. Compare the number of lines in the two files. Don’t worry about the order of the items in the file as that may vary, you are only concerned with the total number of lines in each.</p>\n\n<p>There may be one or two lines more in the whatis.txt file but if there is a big difference, then you are being sand-boxed…<br />\nAs an example, on my system, the whatis.txt file contains 8954 lines and the ManReader.raw file contains 2320 lines!</p>\n\n<p><del>If you are affected by this or think that you might be, I now have a solution – actually two possible solutions:</del></p>\n\n<p><del>If you have already bought Man Reader from the App Store, then you can <a href=\"#\">download a non-sandboxed version</a>. This will only work if you have the App Store version of the app installed.</del></p>\n\n<p><del>If you do not already own a copy of Man Reader, and want to buy it un-sandboxed, then you can now <a href=\"#\">buy it directly</a>.</del></p>\n\n<p>Please <a href=\"mailto:sarah@troz.net?subject=Man%20Reader%20and%20Sand-Boxing\">contact me</a> if you have any issues with this.</p>\n\n",
            "url": "http://troz.net/manreader-sandbox/",
            "summary": "<p>These instructions are no longer valid. As of version 1.5, the App Store version of Man Reader has solved the sand-boxing issues and is now as powerful as the non-sand-boxed version.</p>\n",
            "date_published": "2013-02-06 00:00:00 +1000",
            "tags": ["mac", "man reader", "sand-box"]
        },

        {
            "id": "/man-reader-no-sb",
            "title": "Man Reader (no SB)",
            "content_html": "<p>These instructions are no longer valid. As of version 1.5, the App Store version of Man Reader has solved the sand-boxing issues and is now as powerful as the non-sand-boxed version.</p>\n\n<p>The non-sand-boxed version will no longer be supported or updated, so please revert to the App Store version.</p>\n\n<hr />\n\n<p>If you find that Man Reader is not working well for you due to Apple’s sandboxing restrictions, then you can download a non-sandboxed version here. To find out more about this, including how to test if you are affected, read the <a href=\"http://troz.net/manreader-sandbox/\">Sand-Boxing Man Reader</a> page.</p>\n\n<p>The non-sandboxed version will only work if you have the App Store version of Man Reader already installed.</p>\n\n<p>When you run ‘Man Reader (no SB)’ for the first time, it will check to see if you have a valid installation of ‘Man Reader’ that you have purchased from the App Store.<br />\nIf you do not, ‘Man Reader (no SB)’ will offer to take you to the App Store and then quit.</p>\n\n<p>If you already own the App Store version of Man Reader and ‘Man Reader (no SB)’ has started once, you can delete the App Store version and ‘Man Reader (no SB)’ will keep working.</p>\n\n<p>To install ‘Man Reader (no SB)’, click the download link below. This will download ‘ManReader-noSB.zip’. Double-click on this file to un-zip it, and then move the ‘Man Reader (no SB).app’ into your Applications folder and use as normal. Do not delete the App Store version of Man Reader until ‘Man Reader (no SB)’ has been run at least once.</p>\n\n<h2 id=\"download-man-reader-no-sb\"><a href=\"#\"><del>Download Man Reader (no SB)</del></a></h2>\n\n<p>I found out today (thanks Ron) that under OS X 10.10.3 the security settings no longer allow the downloaded version of Man Reader (no SB) to run, despite the fact that I have signed it with my Apple Developer ID. OS X gives a very un-helpful dialog reporting that the app is damaged. In fact the app is fine, but being blocked by the security settings. The solution as shown at <a href=\"http://www.tech-recipes.com/rx/45404/mac-downloaded-app-is-damaged-and-cant-be-opened-error-solved/\">TechRecipes</a> is to change your security system preferences to allow downloaded apps from anywhere. You only need to do this temporarily as after you have run the app once you can set this setting back to whatever you had before.</p>\n\n",
            "url": "http://troz.net/man-reader-no-sb/",
            "summary": "<p>These instructions are no longer valid. As of version 1.5, the App Store version of Man Reader has solved the sand-boxing issues and is now as powerful as the non-sand-boxed version.</p>\n",
            "date_published": "2013-02-06 00:00:00 +1000",
            "tags": ["mac", "man reader", "sand-box"]
        },

        {
            "id": "/icns-maker-icon-builder-updated",
            "title": "Icns Maker &#038; Icon Builder updated",
            "content_html": "<p>January 18th 2013:</p>\n\n<p>Both of the icon building apps have now been updated to fix a but that made incorrect icon sizes when running on a Retina MacBook Pro.</p>\n\n<p><a href=\"http://troz.net/icns-maker/\" title=\"Icns Maker\"> Icns Maker</a> uses your image to create an icns file for Mac apps.</p>\n\n<p><a href=\"http://itunes.apple.com/app/icns-maker/id550942266?mt=12&amp;uo=4\" target=\"itunes_store\"><img style=\"border: 0;\" alt=\"Icns Maker - TrozWare\" src=\"http://r.mzstatic.com/images/web/linkmaker/badge_macappstore-lrg.gif\" /></a></p>\n\n<p><a href=\"http://troz.net/icon-builder/\" title=\"Icon Builder\">Icon Builder</a> uses your image to create the suite of icon files needed for iOS apps.</p>\n\n<p><a href=\"http://itunes.apple.com/app/icon-builder/id552293482?mt=12&amp;uo=4\" target=\"itunes_store\"><img style=\"border: 0;\" alt=\"Icon Builder - TrozWare\" src=\"http://r.mzstatic.com/images/web/linkmaker/badge_macappstore-lrg.gif\" /></a></p>\n\n",
            "url": "http://troz.net/icns-maker-icon-builder-updated/",
            "summary": "<p>January 18th 2013:</p>\n",
            "date_published": "2013-01-19 00:00:00 +1000",
            "tags": ["icons", "mac"]
        },

        {
            "id": "/icon-makers-retina-macs",
            "title": "Icon Makers &#038; Retina Macs",
            "content_html": "<p>Icns Maker which makes an icns icon file for Mac apps, and Icon Builder which makes the suite of png files needed for iOS apps, are both compatible with the Retina MacBook Pro.</p>\n\n<p>However it was recently brought to my attention (thanks Cameron), that when running on a Retina MBP, all the icon files were exactly twice as large as they should be. The Icon.png file which supplies the main app icon for iPhone apps should be 57 pixels by 57 pixels. Using Icon Builder on a Retina MBP produced an Icon.png file that was 114 x 114 pixels.</p>\n\n<p>I have now worked out how to persuade the Retina Mac that when I ask for an image size, I actually want that size, not the size that OS X thinks would look better. Updates to these 2 apps will be submitted to the App Store for approval later today which will solve the problem.</p>\n\n<p>In the meantime, there is a work-around for Retina MBP users: force the app to run in low resolution mode.</p>\n\n<p>In Finder, open your Applications folder and select the app (this works for both Icns Maker and Icon Builder). Press Command-I or choose Get Info from the File menu which will open a window like this:</p>\n\n<p><img alt=\"Selecting low resolution mode\" src=\"http://troz.net/images/LowRes.png\" width=\"379\" height=\"952\" /></p>\n\n<p>Check the checkbox labelled “Open in Low Resolution”. Next time the app is opened, it will ignore the Retina options and use standard resolution only. This will create icon files with the correct sizes. However text may look slightly fuzzy.</p>\n\n<p>When the updates to these apps become available, make sure you go back and un-check this setting to return to Retina mode.</p>\n",
            "url": "http://troz.net/icon-makers-retina-macs/",
            "summary": "<p>Icns Maker which makes an icns icon file for Mac apps, and Icon Builder which makes the suite of png files needed for iOS apps, are both compatible with the Retina MacBook Pro.</p>\n",
            "date_published": "2013-01-14 00:00:00 +1000",
            "tags": ["icons", "ios", "mac"]
        },

        {
            "id": "/icon-makers-for-mac-ios-apps",
            "title": "Icon makers for Mac &#038; iOS apps",
            "content_html": "<p>Announcing two new apps for creating icons for with Mac or iOS projects:</p>\n\n<p><a href=\"http://troz.net/icns-maker/\" title=\"Icns Maker\">Icns Maker</a> helps you convert a single image into a .icns file in two steps.<br />\n<a href=\"http://troz.net/icon-builder/\" title=\"Icon Builder\">Icon Builder</a> creates all the files needed to set up your icons for any iOS project.</p>\n\n<h2 id=\"creating-icon-files-for-mac-apps\">Creating icon files for Mac apps:</h2>\n\n<p>In versions of Xcode before 4.4, Apple provided an app called “Icon Composer”. It allowed you to drag images into a window and export a .icns file for use in your Mac apps. With Xcode 4.4, Apple has changed the way icons are handled for Mac apps and “Icon Composer” is no longer supplied.</p>\n\n<p>The Xcode docs describe the process you need to go through to make a .icns file: create a suite of image files of the correct size and with the correct file names, bundle them into a specially named folder and then use Terminal to stitch them together.</p>\n\n<p><a href=\"http://troz.net/icns-maker/\" title=\"Icns Maker\">Icns Maker</a> does all this for you in two easy steps.</p>\n\n<ol>\n  <li>Drag in an image file (preferably 1024×1024 but 512×512 will also work).</li>\n  <li>Click a button.</li>\n</ol>\n\n<p>There are more options available for fine-tuning your icons allowing you to select different images for the various sizes, but this is all that is needed for basic operation.</p>\n\n<p>Icns Maker is available from the <a href=\"http://itunes.apple.com/app/icns-maker/id550942266?mt=12&amp;uo=4\" target=\"_blank\">Mac App Store</a>.</p>\n\n<hr />\n\n<h2 id=\"creating-icon-files-for-ios-apps\">Creating icon files for iOS apps:</h2>\n\n<p>Icons for iOS apps are not bundled into a single file like a Mac .icns file. You add various .png images to your project. Depending on the devices supported by your app, you will need many different sizes of icon file. There are some icons for iPad only, some for iPhone / iPod Touch only and others required for any device. Additionally, you will need larger versions of each image to support Retina displays.</p>\n\n<p><a href=\"http://troz.net/icon-builder/\" title=\"Icon Builder\">Icon Builder</a> is a Mac app that does all this for you. As with Icns Maker, you just drag your image into the app and click a button. You can also select which devices your icon needs to suit and use different images for the different sizes if you want finer control.</p>\n\n<p>When the app creates your icon files, it generates a ReadMe file with the information needed for installing these files in your project, including information to copy &amp; paste directly into your Info.plist file.</p>\n\n<p>Icon Builder is available from the <a href=\"http://itunes.apple.com/app/icon-builder/id552293482?mt=12\" target=\"_blank\">Mac App Store</a>.<br />\nNote that although this app builds icon files for iOS app, it runs on a Mac.</p>\n\n<hr />\n\n<h2 id=\"naming\">Naming:</h2>\n\n<p>Originally these apps were named in a consistent manner: Mac Icon Builder and iOS Icon Builder. However both these names were rejected by Apple – you are not allowed to use the words “Mac” or “iOS” in any app name sold through the Mac App Store.</p>\n\n<p>Then I tried Icns Maker and Icon Maker. Icns Maker was approved, but there is already an app called Icon Maker, so I went with Icon Builder. But by that time Icns Maker had already been released, so there was no way to make the names more consistent.</p>\n\n",
            "url": "http://troz.net/icon-makers-for-mac-ios-apps/",
            "summary": "<p>Announcing two new apps for creating icons for with Mac or iOS projects:</p>\n",
            "date_published": "2012-10-15 00:00:00 +1000",
            "tags": ["icons", "ios", "mac"]
        },

        {
            "id": "/app-store-review-times",
            "title": "App Store Review Times",
            "content_html": "<p>There are been a lots of stories going around about lengthening Mac App Store review times. <a href=\"http://reviewtimes.shinydevelopment.com\" target=\"_blank\">Shiny Developments</a> crowd-sourced data certainly backs this up although they have  much more data for iOS apps than for Mac apps.</p>\n\n<p>Some people, including <a href=\"http://www.macworld.com/article/2011430/developers-stymied-by-mac-app-store-approval-delays.html\" target=\"_blank\">Lex Friedman of MacWorld</a> and <a href=\"http://daringfireball.net/linked/2012/10/09/app-store-delays\" target=\"_blank\">John Gruber of Daring Fireball</a>, are suggesting that the delays are due to the rush of new apps to support the iPhone 5 and iOS 6. This implies that there is only one set of review staff and that a large proportion of them have been moved from Mac to iOS apps.</p>\n\n<p>I think this is an incorrect analysis. The slowdown started before iOS 6 and before the iPhone 5. I think it started in June when Apple started to enforce Mac sandboxing.</p>\n\n<p>As discussed in a <a href=\"http://troz.net/sandboxing-and-the-mac-app-store/\">previous post</a>, I have had a lot of trouble getting Man Reader to be sandbox-compatible leading to many rejections. One problem was that I had implemented sand-boxing before the deadline, but with some temporary entitlements to allow read-only access to required system files. This entitlement was approved initially, but after one rejection, an Apple reviewer told me that they had been approving all requested entitlements before the deadline, but now were actually reviewing them all.</p>\n\n<p>To me, this seems like a rather silly thing to have done which has now returned to haunt them. Instead of allowing developers time to get used to the restrictions, Apple reviewers allowed developers to think that their apps were sandbox-complient already. Then Apple was faced with the enormous task of re-checking all the entitlements that they had previously allowed without checking. This was unfair to developers and has only created extra work for the reviewers.</p>\n\n<p>Here is a table showing the recent review times for my Mac apps:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">App</th>\n      <th style=\"text-align: left\">Process</th>\n      <th style=\"text-align: center\">Review days</th>\n      <th style=\"text-align: center\">Dates</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\">Time In Words</td>\n      <td style=\"text-align: left\">update</td>\n      <td style=\"text-align: center\">22</td>\n      <td style=\"text-align: center\">Sept 22 – Oct 14</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">Icns Maker</td>\n      <td style=\"text-align: left\">new app</td>\n      <td style=\"text-align: center\">24</td>\n      <td style=\"text-align: center\">Aug 5 – Aug 29</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">A Knight’s Move</td>\n      <td style=\"text-align: left\">update</td>\n      <td style=\"text-align: center\">26</td>\n      <td style=\"text-align: center\">Sept 6 – Oct 2</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">Icon Builder</td>\n      <td style=\"text-align: left\">new app</td>\n      <td style=\"text-align: center\">33</td>\n      <td style=\"text-align: center\">Aug 22 – Sept 24</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><br />\nI have not included Man Reader as it was rejected too many times to be a valid data point.</p>\n\n<p>By comparison, when I submitted an update to A Knight’s Move for iOS in October, it was passed in only 8 days.</p>\n\n",
            "url": "http://troz.net/app-store-review-times/",
            "summary": "<p>There are been a lots of stories going around about lengthening Mac App Store review times. <a href=\"http://reviewtimes.shinydevelopment.com\" target=\"_blank\">Shiny Developments</a> crowd-sourced data certainly backs this up although they have  much more data for iOS apps than for Mac apps.</p>\n",
            "date_published": "2012-10-15 00:00:00 +1000",
            "tags": ["app store", "ios", "mac"]
        },

        {
            "id": "/a-knights-move-updates",
            "title": "A Knight’s Move updates",
            "content_html": "<p><strong>UPDATE:</strong> September 2016 - A Knight’s Move for iOS is no longer available.<br />\n<a href=\"http://troz.net/knightsmove/\">A Knight’s Move for Mac</a> is still supported.</p>\n\n<hr />\n\n<p>A Knight’s Move for iOS has been updated to take advantage of the taller iPhone 5 screen.</p>\n\n<p>In-app purchasing of packs has been removed from both Mac &amp; iOS versions.<br />\nFor iOS, the app is now free but supported by iAds (please click through if you would like to show your support).<br />\nApple does not have an ad system for Mac, so the Mac version is now a paid app that includes all the puzzle packs.</p>\n\n<p>The in-app purchasing was an interesting experiment, but the ratio of purchases to downloads was too low to sustain the development.</p>\n\n",
            "url": "http://troz.net/a-knights-move-updates/",
            "summary": "<p><strong>UPDATE:</strong> September 2016 - A Knight’s Move for iOS is no longer available.<br />\n<a href=\"http://troz.net/knightsmove/\">A Knight’s Move for Mac</a> is still supported.</p>\n",
            "date_published": "2012-10-15 00:00:00 +1000",
            "tags": ["knight's move"]
        },

        {
            "id": "/icon-builder",
            "title": "Icon Builder",
            "content_html": "<p><a href=\"http://itunes.apple.com/app/icon-builder/id552293482?mt=12\">Icon Builder 3.2</a> is available from the Mac App Store.</p>\n\n<h3 id=\"make-and-install-a-set-of-icons-for-an-ios-mac-or-apple-watch-app-in-3-steps\">Make and install a set of icons for an iOS, Mac or Apple Watch app in 3 steps:</h3>\n\n<p>1: Drag an image into the window.</p>\n\n<p><img src=\"http://troz.net/images/IconBuilder1.png\" alt=\"Make an icon set in 3 steps\" /></p>\n\n<p>2: Choose the device family you are building for: iOS Universal, iPhone, iPad, Mac or Apple Watch.</p>\n\n<p>If you are building for iOS and your app still supports iOS 6, then you need to change the setting in the iOS popup menu.</p>\n\n<p>3: Click “Create icon assets” and select the folder containing your Xcode project.</p>\n\n<p>Icon Builder will create an AppIcon set inside the “Images.xcassets” folder for that project.<br />\nThe icons are immediately ready for use in your project with no installation necessary.</p>\n<blockquote>\n  <p>You will get the best results if you start with a 1024 x 1024 image.</p>\n</blockquote>\n\n<hr />\n\n<h3 id=\"why-is-this-necessary\">Why is this necessary?</h3>\n\n<p>Depending on the devices supported by your app, you will need many different sizes of icon file. There are some icons for iPad only, some for iPhone / iPod Touch only and others required for any iOS device. Mac apps use completely different icon sizes. And now we have Apple Watch with a different set of icons again. Additionally, you will need larger versions of each image to support Retina displays and iOS 7 &amp; 8 use different icon sizes from the previous versions of iOS. The iPhone 6 Plus uses @3x images in some cases.</p>\n\n<p>With Xcode 5 and later, Apple has changed the way a project stores image files, including the various sizes of app icon. Now your project contains a special folder called “Images.xcassets” which contains all the image files used in your project, including the app icons. Icon Builder will install the icon files into your “Images.xcassets” folder automatically.</p>\n\n<hr />\n\n<h3 id=\"using-the-icon-images\">Using the icon images:</h3>\n\n<p><img src=\"http://troz.net/images/IconBuilder2.png\" alt=\"Using the icons\" /></p>\n\n<p>Icon Builder creates all the required image files in a folder called “AppIcon.appiconset” inside the “Images.xcassets” folder for your project. If you already have images stored in an appiconset folder, Icon Builder will not over-write them, but will add a new folder e.g. “AppIcon-1.appiconset”. You can then switch between AppIcon sets in the project settings for your target app.</p>\n\n<p>For submitting apps to the iTunes App Store, you will need a 1024x1024 image. For convenience, this file (iTunesArtwork@2x.jpg) is saved for you in a folder called iTunes Artwork images in the same folder as your xcodeproj file. For iOS, this folder will also include a 512x512 file called iTunesArtwork with no file extension. You will need to include this in your project (but not in “Images.xcassets”) if you are distributing an AdHoc version of your iOS app through iTunes.</p>\n\n<p>The ReadMe-IconBuilder.rtf file (saved in the same folder as your xcodeproj file) has more information about the image files created.</p>\n\n<hr />\n\n<h3 id=\"whats-new-in-version-3\">What’s New in version 3?</h3>\n\n<ul>\n  <li>Support for WatchKit app icons (version 3.0.1)</li>\n  <li>Simplified interface: removed display of smaller icons.</li>\n  <li>Fix for @3x images not being saved when you selected iOS 6 support.</li>\n  <li>iTunesArtwork@2x file now saved as a JPG to avoid iTunes Connect errors.</li>\n  <li>Removed CarPlay icon - Xcode sometimes gave errors when this was included.</li>\n</ul>\n\n<p>In previous versions of Icon Builder, the app saved all the icon files and you had to install them into your app project manually. Now Icon Builder creates an appiconset and installs it automatically in your project.</p>\n\n<p>The other big change is that Icon Builder now creates icons for Mac apps. Mac apps used to use a different file format, but now they use appiconsets too, so it made sense to merge both my icon apps into one.</p>\n\n<p>This app will NOT create the icns files that were used for Mac apps before Xcode 5 or 6. If you need icns files for another environment, use <a href=\"http://troz.net/icns-maker/\">Icns Maker</a> instead.</p>\n\n<hr />\n\n<h3 id=\"faq\">FAQ:</h3>\n\n<p>I thought there were only 2 steps before - why are there 3 now?</p>\n\n<ul>\n  <li>The 2 step process gave you a folder of image files. You then had to install them manually. So really, there were always three steps, but the app was not helping you with step 3. By adding a third step asking you to locate your project folder, I was able to make the app install the icons for you automatically. So the app is doing step 3 for you.</li>\n</ul>\n\n<p>What if I want to install the icon files myself?</p>\n\n<ul>\n  <li>When asked to select a folder to save the icons, select a folder that does not contain a .xcodeproj file. Icon Builder will save all the files, but not install them into an Images.xcassets folder automatically.</li>\n</ul>\n\n<p>What image types can I use?</p>\n\n<ul>\n  <li>Any image type compatible with QuickTime, including JPEG, PNG, TIFF, GIF, PDF, PSD, BMP.</li>\n</ul>\n\n<p>Does this app make icons for iOS 8 apps?</p>\n\n<ul>\n  <li>Yes, the default is to make icons for iOS 7 &amp; 8 only. If your app supports iOS 6 as well, select “Include iOS 6” from the iOS popup and the icon sizes will be altered to suit. iOS 8 does require some larger icons to support the higher resolution display in the iPhone 6 Plus. Icon Builder now also creates those files.</li>\n</ul>\n\n<p>Does Icon Builder create icons for use in Mac apps?</p>\n\n<ul>\n  <li>Yes. When Mac apps used a different file format, I had a separate app to create Mac icns files. Now Mac apps use image assets just like iOS apps, but with different image sizes. Select Mac in the Device popup to create icons for a Mac app.</li>\n</ul>\n\n<p>What version of Xcode do I need?</p>\n\n<ul>\n  <li>This app requires Xcode 5.x or later.</li>\n</ul>\n\n<p>I don’t use Xcode, I use an alternative IDE. Can I still use the icons created by this app?</p>\n\n<ul>\n  <li>Yes, you can save the icon set to a folder and install the icons manually in the IDE of your choice.</li>\n</ul>\n\n<p>What if my starting image is the wrong size?</p>\n\n<ul>\n  <li>If your image is not square, it will be cropped when you drag it in.</li>\n  <li>It will then be resized to create all the required image sizes.</li>\n</ul>\n\n<p>How do I start again with a blank slate?</p>\n\n<ul>\n  <li>Choose “New” from the File menu, or press Command-N.</li>\n</ul>\n\n<p>Do I have to drag images into the app?</p>\n\n<ul>\n  <li>No, you can copy &amp; paste an image file, or an image.</li>\n  <li>Or choose “Open Image…” from the File menu, or press Command-O.</li>\n</ul>\n\n<p>How can I delete the icons from my project?</p>\n\n<ul>\n  <li>Select “Images.xcassets” in the project navigator.</li>\n  <li>In the next sidebar, you will see a list of the asset sets in your project.</li>\n  <li>Select the one you want to delete (e.g. AppIcon, AppIcon-1) and press the Delete key.</li>\n</ul>\n\n<p>I have an old project with no “Images.xcassets” - how do I add that?</p>\n\n<ul>\n  <li>Select the project at the top of the Project Navigator.</li>\n  <li>Make sure you are editing the target and go to the General tab.</li>\n  <li>In the “App Icons” section, click the “Use Asset Catalog” button.</li>\n  <li>The “Images.xcassets” folder will be created and any existing icons will be migrated to the new structure.</li>\n</ul>\n\n<p>Why has the app made more icons than I need?</p>\n\n<ul>\n  <li>If your app only supports iOS 7/8 or only works with one family of iOS devices, then it does not need all the icons.</li>\n  <li>Select your options from the Device &amp; iOS popups to adjust the number of icons created.</li>\n</ul>\n\n<p>What if I want to use the images from a Mac .icns file?</p>\n\n<ul>\n  <li>Drag it in just like any image file. However the largest image in an .icns bundle is 512 x 512, so you may want to create a larger version.</li>\n</ul>\n\n<p>Why are there files with @2x and @3x in the names?</p>\n\n<ul>\n  <li>These are for Retina displays and for iOS 7 or 8. iOS knows it needs a certain image size, but if the device has a Retina display, the system will look for an @2x file so it can squeeze twice as many pixels in and make it look sharp. For the iPhone 6 Plus, the system will use the @3x files if they are available.</li>\n</ul>\n\n<p>Why is the iTunesArtwork@2x.jpg file a JPG when all the other files are PNGs?</p>\n\n<ul>\n  <li>iTunes Connect requires a 1024x1024 image file uploaded for each app. Recently, iTunes Connect has started rejecting some PNGs because they contained an alpha channel, even if they appeared to have no transparency. The best way to ensure there would be no alpha channel was to save the image as a JPG.</li>\n</ul>\n\n<p>Why does the iTunesArtwork file have no file extension?</p>\n\n<ul>\n  <li>I don’t know. But that is what Apple specifies for AdHoc distribution through iTunes. It is actually a .png image so if you need to open it, add the .png file extension temporarily.</li>\n</ul>\n\n<p>I use Pixelmator. Can I drag my pxm files into Icon Builder?</p>\n\n<ul>\n  <li>No. Pixelmator’s pxm files cannot be used directly. Export them as png files first.</li>\n</ul>\n\n<p>I’m a programmer, not a graphic designer. How do I make icon images?</p>\n\n<ul>\n  <li>One easy way to create basic shapes with gradients, text, added images etc. is to use Keynote. I presume PowerPoint has the same sort of abilities.</li>\n</ul>\n",
            "url": "http://troz.net/icon-builder/",
            "summary": "<p><a href=\"http://itunes.apple.com/app/icon-builder/id552293482?mt=12\">Icon Builder 3.2</a> is available from the Mac App Store.</p>\n",
            "date_published": "2012-10-01 00:00:00 +1000",
            "tags": ["icons", "ios", "mac"]
        },

        {
            "id": "/icns-maker",
            "title": "Icns Maker",
            "content_html": "<p><a href=\"http://troz.net/images/IcnsMaker1.png\">Icns Maker</a> is available from the Mac App Store.</p>\n\n<h1 id=\"make-an-icns-in-2-steps\">Make an icns in 2 steps:</h1>\n\n<p><a href=\"http://troz.net/images/IcnsMaker1.png\"><img alt=\"Make an icns in 2 steps\" src=\"http://troz.net/images/IcnsMaker1-300x255.png\" width=\"300\" height=\"255\" /></a></p>\n\n<ol>\n  <li>\n    <p>Drag an image into the window.</p>\n  </li>\n  <li>\n    <p>Click “Create icns” or “Create assets”.</p>\n  </li>\n</ol>\n\n<p>This creates a .icns file or assets folder that can be imported directly into your Xcode project for use in your app.</p>\n\n<hr />\n\n<h2 id=\"why-is-this-necessary\">Why is this necessary?</h2>\n\n<p>In versions of Xcode before 4.4, Apple provided an app called “Icon Composer”. It allowed you to drag images into a window and export a .icns file for use in your apps. With Xcode 4.4, Apple has changed the way icons are handled for Mac apps and “Icon Composer” is no longer supplied.</p>\n\n<p>Search the Xcode documentation for “Icon Design Guidelines” and scroll down to “Provide the Correct Resources” and “Packaging Your Icon Resources” for more info.</p>\n\n<p>For Xcode 4, you now create a special .iconset folder and load it up with various sized images. Then you run a shell command to stitch these specifically named files into a single .icns file that can be used in your Xcode project. None of this is rocket science, but it is tedious and repetitive – just the right sort of task for a computer.</p>\n\n<p>With Xcode 5.x, Apple has changed things again. Now your project contains a special folder called “Images.xcassets” which contains all the image files used in your project, including the app icons.</p>\n\n<p>If you have checked the “Create Assets (for Xcode 5.x or later)” checkbox, a folder of images will be created instead of the icns file. The images in this folder can be imported into your “Images.xcassets” folder for use as your app icon. A ReadMe file in the images folder will give the details on this.</p>\n\n<p>Note that apps submitted to the Mac App Store now require a 1024×1024 version of the icon.</p>\n\n<hr />\n\n<h2 id=\"if-you-want-more-control\">If you want more control:</h2>\n\n<p>Click the “Smaller sizes” switch to show all the other image sizes.<a href=\"http://troz.net/images/IcnsMaker2.png\"><img alt=\"Get More Control\" src=\"http://troz.net/images/IcnsMaker2-300x187.png\" width=\"300\" height=\"187\" /></a></p>\n\n<p>When you drag an image into the 1024 x 1024 area, it is resized to supply all the required images. If you have a smaller version of your icon image that you want to use for some of the smaller sizes, just drag the image into the largest image area that you want it to be used for.</p>\n\n<p>As an example, if you want to show a lower resolution image for 64×64, 32×32 and 16×16, create the lower resolution image at 64×64 pixels and drag it into the 64×64 area. It will be used for the 64×64 image and resized to make the 32×32 and 16×16 images. The larger images will still use the original 1024×1024 image scaled down.</p>\n\n<p>If you want, you can specify a different image for every required size.</p>\n\n<p>512×512 images will be resized to 1024×1024 if required to assist when converting older icons, but no other images will be enlarged.</p>\n\n<hr />\n\n<h2 id=\"faq\">FAQ:</h2>\n\n<p><strong>Q.</strong> What image types can I use?<br />\n<strong>A. </strong>Any image type compatible with QuickTime, including JPEG, PNG, TIFF, GIF, PDF, PSD, BMP.</p>\n\n<p><strong>Q.</strong> Does this app make icons for OS X Mavericks (10.9) apps?<br />\n<strong>A. </strong>Yes, the required image sizes for icons have not changed in 10.9.</p>\n\n<p><strong>Q.</strong> What version of Xcode do I need?<br />\n<strong>A. </strong>This app is designed to help when using Xcode 4.4 or later.</p>\n\n<ul>\n  <li>For Xcode 4.x, make sure to un-check “Create Assets (for Xcode 5.x or later)”.</li>\n  <li>For Xcode 5.x, check the “Create Assets (for Xcode 5.x or later)” checkbox.</li>\n</ul>\n\n<p><strong>Q.</strong> What if my starting image is the wrong size?<br />\n<strong>A. </strong> If your image is not square, it will be cropped when you drag it in. If it is the wrong size for the image area you are dragging it into, it will be resized to fit.</p>\n\n<p><strong>Q.</strong> How I start again with a blank slate?<br />\n<strong>A.</strong> Choose “New” from the File menu, or press Command-N.</p>\n\n<p><strong>Q.</strong> Do I have to drag images in?<br />\n<strong>A.</strong> No, you can copy &amp; paste an image file, or an image.</p>\n\n<p><strong>Q.</strong> What if I want to update an existing .icns file?<br />\n<strong>A.</strong> Drag it in or choose “Open icns…” from the File menu. You may find that you need to make a new image for the 1024×1024 size.</p>\n\n<p><strong>Q.</strong> Does Mac Icns Maker create icons suitable for Retina displays?<br />\n<strong>A.</strong> Yes. That is why it uses a 1024×1024 version of your image.</p>\n\n<p><strong>Q.</strong> Does Icns Maker create icons for use in iPad and iPhone apps?<br />\n<strong>A.</strong> No. icns files are used in Mac apps only. For iOS apps, check out the companion product:<a href=\"http://troz.net/icon-builder/\" title=\"Icon Builder\"> Icon Builder</a>.</p>\n\n<p><strong>Q.</strong> I’m a programmer, not a graphic designer. How do I make icon images?<br />\n<strong>A.</strong> One easy way to create basic shapes with gradients, text, added images etc. is to use Keynote. I presume PowerPoint has the same sort of abilities.</p>\n\n",
            "url": "http://troz.net/icns-maker/",
            "summary": "<p><a href=\"http://troz.net/images/IcnsMaker1.png\">Icns Maker</a> is available from the Mac App Store.</p>\n",
            "date_published": "2012-10-01 00:00:00 +1000",
            "tags": ["icons", "mac"]
        },

        {
            "id": "/updating-apps-for-iphone-5",
            "title": "Updating apps for iPhone 5",
            "content_html": "<p>I have started work updating my iOS apps to fill the larger screen of an iPhone 5. My iPhone 5 is on order – I missed out on the first shipment, but hopefully it won’t be too long. Meanwhile, I will just test in the iPhone Simulator and hope this is OK.</p>\n\n<p>But it was a puzzle to me how to get an app to fill the longer screen. I have the latest Xcode and the latest Simulator which allows you to specify what screen size iPhone to simulate. So I re-built an app and nothing changed – it showing black strips top &amp; bottom and left my app at the old size.</p>\n\n<p>After trying many different things and reading a lot of the new sections of the Apple developer documentation, I finally found the answer online:</p>\n\n<p style=\"padding-left: 30px;\">\n  <strong>If you want your app to fill the 4&#8243; screen, you must provide</strong><br /> <strong> a new launch image file called &#8220;Default-568h@2x.png&#8221;.</strong><br /> <strong> This image must be exactly 640 x 1136 pixels.</strong>\n</p>\n\n<p>Apparently the system uses the presence or absence of this file this to detect whether your app supports the longer iPhone.</p>\n\n<p>I read that Xcode is supposed to warn you of the consequences if this file is missing, but in my case, when I opened my project, Xcode helpfully used the old launch image in its place. It showed a warning icon that the image was the wrong size, but nothing else.</p>\n\n<p>The next problem was how to create this file. I use screen shots, but until the app worked in the correct format, I wasn’t going to be able to get the screen shot. So I made it a 2 step process: first I duplicated the original launch image, renamed it and resized it. It looked wrong but this was irrelevant – it was enough to get the app working in the correct format. Once I had the app working, I was able to take a screen shot and create the final launch image.</p>\n\n<p>Once you have the app working in 2 sizes, you have to do more work with the layout, either using springs &amp; struts or using the modern auto-layout feature. I find auto-layout confusing, but it is obviously more powerful and the way of the future, so I am trying to work it out. I found a good tutorial at <a href=\"http://www.raywenderlich.com/20881/beginning-auto-layout-part-1-of-2\" target=\"_blank\">Ray Wenderlich’s site</a>. While directed at iOS 6, it also applies to Mac apps.</p>\n",
            "url": "http://troz.net/updating-apps-for-iphone-5/",
            "summary": "<p>I have started work updating my iOS apps to fill the larger screen of an iPhone 5. My iPhone 5 is on order – I missed out on the first shipment, but hopefully it won’t be too long. Meanwhile, I will just test in the iPhone Simulator and hope this is OK.</p>\n",
            "date_published": "2012-09-24 00:00:00 +1000",
            "tags": ["ios", "operating systems", "ui"]
        },

        {
            "id": "/a-knights-move-for-ios-1-1",
            "title": "A Knight’s Move for iOS 1.1",
            "content_html": "<p><strong>UPDATE:</strong> September 2016 - A Knight’s Move for iOS is no longer available.<br />\n<a href=\"http://troz.net/knightsmove/\">A Knight’s Move for Mac</a> is still supported.</p>\n\n<hr />\n\n<p>A Knight’s Move for iPad &amp; iPhone has just been updated to version 1.1</p>\n\n<p>There were some minor changes:</p>\n\n<ul>\n  <li>New puzzle pack: Majestic.</li>\n  <li>iPhone now shows an info button of there is more help available for a particular puzzle. (This info was already visible in the iPad version.)</li>\n  <li>Minor cosmetic fixes.</li>\n</ul>\n\n<p>The big change was that all puzzles packs are now included in the free app, which is now supported by iAds. The sale of puzzle packs via in-app purchasing was disappointing, so I have decided to try using iAds instead. Hopefully they will not feel too intrusive, but if you want to support my apps, please tap on a few of the ads.</p>\n\n<p>Note that iAds will not appear in all countries. You may just see a banner linking you to my other apps on the iPad. On iPhone, you will not see anything different.</p>\n\n",
            "url": "http://troz.net/a-knights-move-for-ios-1-1/",
            "summary": "<p><strong>UPDATE:</strong> September 2016 - A Knight’s Move for iOS is no longer available.<br />\n<a href=\"http://troz.net/knightsmove/\">A Knight’s Move for Mac</a> is still supported.</p>\n",
            "date_published": "2012-09-13 00:00:00 +1000",
            "tags": ["knight's move"]
        },

        {
            "id": "/man-reader-1-1-released",
            "title": "Man Reader 1.1 Released",
            "content_html": "<p>The update of <a href=\"http://troz.net/manreader/\" title=\"Man Reader\">Man Reader</a> to version 1.1 has just become available through the Mac App Store. This update has a bunch of <a href=\"http://troz.net/manreader/#new_features\">new features</a> – thanks to everyone who made suggestions.</p>\n\n<p>As detailed in a <a href=\"http://troz.net/sandboxing-and-the-mac-app-store/\">previous post</a>, there have been major issues getting this app approved with Apple’s new sand-boxing restrictions fully in place. But to their credit, the Apple reviewers have been unfailing helpful and polite in answering my questions and keeping me informed.</p>\n\n<p>I hope everyone finds the new features useful. Please <a href=\"mailto:sarah@troz.net?subject=Man%20Reader\">keep the suggestions coming in</a> to make this app even better!</p>\n\n",
            "url": "http://troz.net/man-reader-1-1-released/",
            "summary": "<p>The update of <a href=\"http://troz.net/manreader/\" title=\"Man Reader\">Man Reader</a> to version 1.1 has just become available through the Mac App Store. This update has a bunch of <a href=\"http://troz.net/manreader/#new_features\">new features</a> – thanks to everyone who made suggestions.</p>\n",
            "date_published": "2012-08-14 00:00:00 +1000",
            "tags": ["mac", "man reader"]
        },

        {
            "id": "/sandboxing-and-the-mac-app-store",
            "title": "Sandboxing and the Mac App Store",
            "content_html": "<p>As of June 2012, all apps submitted to the Mac App Store have to be sandboxed i.e. they have to be able to run in a limited environment where they cannot interfere with other apps or other parts of the system. While this is generally a good thing, there are problems when apps have legitimate reasons for requiring access to other resources.</p>\n\n<p>One annoyance for developers is that Apple’s apps are mostly not sandboxed. To check what apps you have installed that are sandboxed, open up Activity Monitor (in Applications/Utilities). In the View menu, check that Sandbox is checked in the Columns submenu. Then you can sort by clicking on the Sandbox title and work out which apps are already sandboxed. Mail, Preview and Text Edit are now sandboxed and so is the new Reminders app, but as far as I can tell, no other Apple apps are. This causes two problems: firstly it is not fair to other developers if Apple is enforcing a standard which only they are allowed to break. Secondly, if Apple developers had to follow the same rules as everyone else, then maybe the system would evolve to become more usable for everyone.</p>\n\n<p>In the Apple developer documentation about sandboxing, there is a section headed “Determine Whether Your App Is Suitable for Sandboxing”. Here they list numerous reasons why any app might not work in the sandbox. But the Mac App Store now makes sandboxing compulsory, so what to do with apps that are not suitable?</p>\n\n<p>Some resources can be requested when building the app: access to various folders (Pictures, Music, Downloads etc), access to Address Book and Calendar data, printing facilities, networking etc. Beyond the specified list of entitlements that can be requested, developers can also apply for “temporary entitlements” which, if granted, will unlock access to other parts of the operating system. However these are subject to the whims of app reviewers and will be re-assessed with every update. Apple has also made it clear that they are intended as a transition feature and will not be available for ever.</p>\n\n<p>This has lead to a recent spate of popular apps leaving the App Store. <a href=\"http://www.marco.org/2012/07/26/mac-app-store-future\" target=\"_blank\">Marco Arment</a> has discussed this problem with an emphasis on the issue of lack of confidence in buying from the App Store. If you cannot be sure that an app you buy will remain in the App Store, then you are less likely to buy it there.</p>\n\n<p>I have run into direct issues with sandboxing already. With <a href=\"http://www.picapod.com/\" target=\"_blank\">Pic-a-POD</a>, I used to have links to the Desktop and Screen Saver panes in System Preferences. These used AppleScripts which required a temporary entitlement to send an AppleEvent. The app was rejected because of this, so I had to modify this feature – it now just takes you to the relevant section of System Prefs, but not directly to either Desktop or Screen Saver. However Pic-a-POD’s help, which runs in Apple’s Help Viewer app, contains exactly the same AppleScripts and so is allowed to access these preference panes directly. Try working out the logic of that one!</p>\n\n<p>I have more serious problems with <a title=\"Man Reader\" href=\"http://troz.net/manreader/\" target=\"_blank\">Man Reader</a>. Man Reader displays a list of the man pages on your system. Depending on the tools you have installed, these pages may be in a variety of locations. The shell command that detects them first reads a config file and then checks the folders listed in that config file. All it needs is read-only access. With the first sandboxed version, I asked for a temporary entitlement to give me read-only access to the startup disk. This was granted, but I have since been informed that all requested entitlements were granted before the App Store cut-off date. This may have been meant to be helpful, but it was not useful to allow access that would later be removed without any warning.</p>\n\n<p>The current version of Man Reader waiting for approval asks for read-only access to the config file directly and then to every folder listed in that config file. If approved, this should be able to access all the man pages on a system. I have no idea whether these entitlements will be granted, but if not, then I will have to remove Man Reader from the App Store. It would be wrong to continue to sell an app that only functioned in a limited manner, even though the App Store is far and away my best form of marketing.</p>\n\n<p>So what do I suggest Apple does? I think they need to allow apps that are not sand-boxed. However these apps could come with a warning before installation. In Mountain Lion, the new security feature called Gatekeeper allows you to specify the level of security you want when installing apps. Currently the options are to allow apps downloaded from:</p>\n\n<ul>\n  <li>Mac App Store</li>\n  <li>Mac App Store and identified developers</li>\n  <li>Anywhere</li>\n</ul>\n\n<p>They could split the first option in two and allow</p>\n\n<ul>\n  <li>Mac App Store sandboxed</li>\n  <li>Mac App Store any</li>\n</ul>\n\n<p>One further wrinkle is iCloud. Apple is encouraging users and developers towards iCloud data storage and sharing. But only apps in the App Store are allowed to use iCloud.</p>\n\n<p>So it will be interesting to see how this plays out. Obviously Apple is not going to care if a tiny developer like me leaves the App Store, but if enough high-profile developers leave, then there will surely be some consideration given to the problem.</p>\n",
            "url": "http://troz.net/sandboxing-and-the-mac-app-store/",
            "summary": "<p>As of June 2012, all apps submitted to the Mac App Store have to be sandboxed i.e. they have to be able to run in a limited environment where they cannot interfere with other apps or other parts of the system. While this is generally a good thing, there are problems when apps have legitimate reasons for requiring access to other resources.</p>\n",
            "date_published": "2012-07-28 00:00:00 +1000",
            "tags": ["mac", "man reader", "sand-box", "trouble-shooting"]
        },

        {
            "id": "/update-to-time-in-words-screen-saver",
            "title": "Update to Time In Words screen saver",
            "content_html": "<p><a href=\"http://troz.net/time-in-words-screen-saver-for-mac/\" title=\"Time In Words Screen Saver for Mac\">Time In Words screen saver</a> has just been updated to version 1.1 and is now fully compatible with Mountain Lion. It is free to use and can be <a href=\"http://troz.net/screensaver/TimeInWords-ScreenSaver.zip\">downloaded</a> here.</p>\n\n<p>The basic screen saver worked before, but searching for an alternative time zone would crash System Preferences. That is now fixed.</p>\n\n<p>The screen saver also shows a thumbnail image when in Mountain Lion and is code-signed with my developer ID for compatibility with Mountain Lion’s Gatekeeper.</p>\n\n<p>The current version is compatible with 10.8 and 10.7. It may work in 10.6 but I cannot be sure. If anyone tries it, please let me know.</p>\n\n",
            "url": "http://troz.net/update-to-time-in-words-screen-saver/",
            "summary": "<p><a href=\"http://troz.net/time-in-words-screen-saver-for-mac/\" title=\"Time In Words Screen Saver for Mac\">Time In Words screen saver</a> has just been updated to version 1.1 and is now fully compatible with Mountain Lion. It is free to use and can be <a href=\"http://troz.net/screensaver/TimeInWords-ScreenSaver.zip\">downloaded</a> here.</p>\n",
            "date_published": "2012-07-27 00:00:00 +1000",
            "tags": ["mac", "screen saver", "time in words"]
        },

        {
            "id": "/a-knights-move-released",
            "title": "A Knight’s Move Released",
            "content_html": "<p><strong>UPDATE:</strong> September 2016 - A Knight’s Move for iOS is no longer available.<br />\n<a href=\"http://troz.net/knightsmove/\">A Knight’s Move for Mac</a> is still supported.</p>\n\n<hr />\n\n<p>“A Knight’s Move” is a fun, addictive and simple puzzle game based on the movements of chess pieces. Your goal is to move your white knight across a board to a target square using the same movements as a knight in chess. Pawns may block your way, while enemy bishops, castles, knights and the queen may try to stop you.</p>\n\n<p>The game is available for iPad, iPhone and iPod Touch from the iTunes Store and requires iOS 5.0 or later. The Mac version is available from the Mac App Store and requires OS X 10.7 or later.</p>\n\n<p>Perfect for when you have a few minutes to relax, like on the train to work, during your lunch break or during a boring lecture or class (Kids: don’t take advice from randoms, but you can turn the sound FX off. Just sayin’), “A Knight’s Move” will keep you coming back for “Just One More Go”!</p>\n\n<p>Once you have played the tutorial pack, you can move on to the other puzzle packs. Each pack comes with 25 more puzzles and there are many different packs allowing you to select easy puzzles, challenging puzzles or variety packs, some with themes.</p>\n\n<p>See more about “A Knight’s Move” at the <a href=\"http://troz.net/knightsmove/\">Knight’s Move web page</a></p>\n\n<p>Get the game from the <a href=\"http://itunes.apple.com/app/a-knights-move/id533321133\" target=\"_blank\">Mac App Store</a>.</p>\n\n<p><img title=\"Tutorial puzzle on iPhone\" src=\"/images/Tutorial-500.png\" alt=\"Tutorial puzzle on iPhone\" /></p>\n\n<p>Tutorial puzzle on iPhone</p>\n\n<p><a href=\"http://troz.net/images/PeskyPawns.png\"><img title=\"Pesky Pawns - one of the more difficult puzzles on Mac.\" src=\"/images/PeskyPawns-600.png\" alt=\"Pesky Pawns - one of the more difficult puzzles on Mac.\" /></a></p>\n\n<p>Pesky Pawns - one of the more difficult puzzles on Mac.</p>\n\n",
            "url": "http://troz.net/a-knights-move-released/",
            "summary": "<p><strong>UPDATE:</strong> September 2016 - A Knight’s Move for iOS is no longer available.<br />\n<a href=\"http://troz.net/knightsmove/\">A Knight’s Move for Mac</a> is still supported.</p>\n",
            "date_published": "2012-07-09 00:00:00 +1000",
            "tags": ["chess", "knight's move", "mac"]
        },

        {
            "id": "/knightsmove",
            "title": "A Knight’s Move",
            "content_html": "<p>A Knight’s Move is a puzzle game where you have to move your knight across a board to a target square using the same movements as a knight in chess. Pawns may block your way, while enemy bishops, castles, knights and the queen may try to stop you.</p>\n\n<p><strong>UPDATE</strong>: <a href=\"http://itunes.apple.com/app/a-knights-move/id533321133\">Version 1.3 for Mac now available</a>.</p>\n\n<ul>\n  <li>Available from the <a href=\"http://itunes.apple.com/app/a-knights-move/id533321133\">Mac App Store</a> for OS X 10.7 or later</li>\n</ul>\n\n<p><img src=\"http://troz.net/images/KnightsMoveMac1.png\" alt=\"A Knight's Move for Mac\" /></p>\n\n<p>Get from the starting position to the target in the shortest possible number of moves. Score stars based on the moves taken. If you need help, take a one star penalty to show all possible moves. If you really get stuck, after several tries the Cheat button allows you to see a solution, although that will cost you all your stars.</p>\n\n<p><img src=\"http://troz.net/images/KnightsMoveMac2.png\" alt=\"A Knight's Move for Mac\" /></p>\n\n<p>Choose your preferred board and chess pieces.</p>\n\n<p><img src=\"http://troz.net/images/KM-Prefs.png\" alt=\"A Knight's Move Preferences\" /></p>\n\n<hr />\n<h2 id=\"faq\">FAQ:</h2>\n\n<p><strong>Q.</strong> Does the time I take to solve a puzzle count against me?<br />\n<strong>A. </strong>No - the number of stars you get depends solely on the number of moves taken.</p>\n\n<p><strong>Q.</strong> Are there any penalties for using Undo or Restart?<br />\n<strong>A. </strong>No - both Undo and Restart wind back the number of moves, so are not counted towards your final number of moves.</p>\n\n<p><strong>Q.</strong> What are the best techniques for solving a large puzzle?<br />\n<strong>A.</strong> Sometimes it is easier to work backwards. Work out which squares get you to the target safely and see if you can work out how to get to one of them. Another technique is to check all the possible moves and see how many can be eliminated because of danger or because they don’t lead anywhere except back to where you started. Just remember that trying and failing doesn’t count against you, so give it a go.</p>\n\n<p><strong>Q.</strong> What if I need help with a puzzle?<br />\n<strong>A.</strong> The first way to get help is to turn on “Show Moves”. This puts green circles on any square that your White Knight can reach next move. It does not indicate whether these squares are safe, but just shows you all legal moves. This option costs you a one star penalty but you can always do the puzzle again to try for three stars.</p>\n\n<p><strong>Q.</strong> What if I think a puzzle is completely impossible?<br />\n<strong>A.</strong> All the puzzles have at least one solution. If you have tried and tried, using Restart or being captured at least 5 times, the Cheat button will become available. Using the Cheat button will show you a possible solution but will mean that you can never get any stars for that puzzle.</p>\n\n<p><strong>Q.</strong> You’re kidding, right? No stars… ever… just because I cheated?<br />\n<strong>A.</strong> OK, I’m kidding, but the way out of this is deliberately hidden and inconvenient. If you go to Settings or Preferences, you can reset all the game scores which clears all records of stars won so far, allowing you to restart completely. If you reset the scores three times in a row, this will also clear all records of cheating.</p>\n\n<p><strong>Q.</strong> I think I solved a puzzle in fewer moves than the minimum moves shown.<br />\n<strong>A.</strong> Great! Please take a screen shot of the puzzle and annotate it to show your moves. Email it in to sarah@troz.net so that I can edit the puzzle for the next update.</p>\n\n",
            "url": "http://troz.net/knightsmove/",
            "summary": "<p>A Knight’s Move is a puzzle game where you have to move your knight across a board to a target square using the same movements as a knight in chess. Pawns may block your way, while enemy bishops, castles, knights and the queen may try to stop you.</p>\n",
            "date_published": "2012-07-08 00:00:00 +1000",
            "tags": ["chess", "knight's move", "mac"]
        },

        {
            "id": "/easy-access-to-the-library-folder",
            "title": "Easy access to the Library folder",
            "content_html": "<p>In Mac OS X 10.7 (Lion), Apple decided to make it more difficult to access your Library folder, presumably to stop people doing stuff that made apps crash. But as a developer, I need access to my Library folder a lot. I need to check that preferences are being saved correctly. If I have an app that uses the Application Support folder, then I need to be able to check it. And for sand-boxed apps, they keep all their data in the Containers folder inside the Library.</p>\n\n<p>You can easily get to the Library folder by holding down the Option key while choosing the Go menu in Finder. This adds Library to the menu and you can get to the folder that way. But this is not as convenient as single-click access from a Finder window, so here is my preferred method.</p>\n\n<p>Use the Option key and the Finder’s Go menu to get the Library folder open in a Finder window. Switch this window to column view, which will display the Library folder (slightly greyed out) in the first column. Drag this Library folder to the side bar of your Finder window. Now it is there all the time, in every Finder window that is showing the side bar.</p>\n\n<p>I have read about various Terminal tricks to get the Library to show up, but every system update seems to turn it off again. This technique doesn’t involve anything except the Finder’s side bar preferences and so far (I’m now up to 10.7.4), it hasn’t needed to be reset after any update.</p>\n",
            "url": "http://troz.net/easy-access-to-the-library-folder/",
            "summary": "<p>In Mac OS X 10.7 (Lion), Apple decided to make it more difficult to access your Library folder, presumably to stop people doing stuff that made apps crash. But as a developer, I need access to my Library folder a lot. I need to check that preferences are being saved correctly. If I have an app that uses the Application Support folder, then I need to be able to check it. And for sand-boxed apps, they keep all their data in the Containers folder inside the Library.</p>\n",
            "date_published": "2012-05-16 00:00:00 +1000",
            "tags": ["mac", "operating systems"]
        },

        {
            "id": "/pic-a-pod-2-0-4-for-mac",
            "title": "Pic-a-POD 2.0.4 for Mac",
            "content_html": "<p>The latest update for <a href=\"http://www.picapod.com/\">Pic-a-POD for Mac</a> is now available through the <a href=\"http://itunes.apple.com/app/pic-a-pod/id477909802?mt=12&amp;uo=4\" target=\"_blank\">Mac App Store</a>.</p>\n\n<h3 id=\"bug-fix\">Bug fix:</h3>\n\n<ul>\n  <li>selecting an iPhoto pic from the Recent Desktops menu now works correctly.</li>\n</ul>\n\n<h3 id=\"new-features\">New features:</h3>\n\n<ul>\n  <li>Better indication of downloads and when large pics are not yet available</li>\n  <li>Direct link to App Store in Help menu – please rate or review.</li>\n</ul>\n\n",
            "url": "http://troz.net/pic-a-pod-2-0-4-for-mac/",
            "summary": "<p>The latest update for <a href=\"http://www.picapod.com/\">Pic-a-POD for Mac</a> is now available through the <a href=\"http://itunes.apple.com/app/pic-a-pod/id477909802?mt=12&amp;uo=4\" target=\"_blank\">Mac App Store</a>.</p>\n",
            "date_published": "2012-05-11 00:00:00 +1000",
            "tags": ["mac", "pic-a-pod"]
        },

        {
            "id": "/man-reader-update-coming-soon",
            "title": "Man Reader update coming soon",
            "content_html": "<p>Man Reader launched on the Mac App Store a couple of days ago and yesterday I got an email from a purchaser who reported that Man Reader was not displaying the man pages for MacPorts, even though he had the paths set up correctly.</p>\n\n<p>I installed MacPorts to check this out and ran into the same problem. Running the command “man port” in Terminal worked fine, but “port” did not appear in  Man Reader’s list.</p>\n\n<p>Man Reader uses the “apropos” command to list all available man pages, so I tested it next. When I found that it was not listing “port” either, I thought I had discovered the problem. OS X offers two commands for searching for man pages: apropos &amp; whatis. The database files used by these commands are updated weekly by one of the periodic system commands. I manually ran this update command using:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">sudo /etc/periodic/weekly/320.whatis</code></pre></figure>\n\n<p>This did part of the job, as the apropos command when used in Terminal now contained the MacPorts man pages. However Man Reader still did not show these man pages.</p>\n\n<p>Reverting to the Console log, I found that this was a sand-boxing problem. The Mac OS X sand-box was preventing access to the man.conf file (which tells where to look for man pages), and the whatis database file containing the new data. I assume that without access to these files, the default locations for man pages were still searched, but no non-standard locations were being searched.</p>\n\n<p>I have just submitted an update to the App Store that still uses sand-boxing but requests temporary read-only access to the file system to read these files. If Apple rejects this, then I will release a version without sand-boxing.</p>\n\n<p>Either way, you can be assured that the matter is being dealt with and the next update, whether sand-boxed or not, will allow access to all man pages.</p>\n",
            "url": "http://troz.net/man-reader-update-coming-soon/",
            "summary": "<p>Man Reader launched on the Mac App Store a couple of days ago and yesterday I got an email from a purchaser who reported that Man Reader was not displaying the man pages for MacPorts, even though he had the paths set up correctly.</p>\n",
            "date_published": "2012-05-11 00:00:00 +1000",
            "tags": ["mac", "man reader", "trouble-shooting"]
        },

        {
            "id": "/making-a-mac-screen-saver",
            "title": "Making a Mac Screen Saver",
            "content_html": "<p>Having just completed the my first screen saver for Mac – the <a href=\"http://troz.net/time-in-words-screen-saver-for-mac/\" title=\"Time In Words Screen Saver for Mac\">Time In Words Screen Saver</a>, I thought I would share some of the experiences. I am using OS X Lion (10.7) and Xcode 4.3.2</p>\n\n<p>The first thing is to create a new project in Xcode using the Screen Saver template:</p>\n\n<p><a href=\"http://troz.net/images/ScreenSaverTemplate.png\"><img title=\"Xcode Screen Saver Template\" src=\"http://troz.net/images/ScreenSaverTemplate-441x300.png\" alt=\"Xcode Screen Saver Template\" /></a></p>\n\n<p>Xcode sets up a project for you with everything you need for a screen saver module. Start editing the ScreenSaverView.m file. The most important method here is animateOneFrame.</p>\n\n<p>This is called every time the animation time interval elapses. This interval is set in initWithFrame:isPreview:. I have seen some debate online as to whether the drawing should be done in the animateOneFrame method or in the drawRect method. I chose to use animateOneFrame because they are both called when the screen saver starts which can lead to an unpleasant flicker.</p>\n\n<p>Now it is up to you to decide what to show in the animateOneFrame method. For Time In Words, I assembled the data as a string, created a dictionary of text attributes, calculated the location where I wanted to show the text and used drawAtPoint:withAttributes: to display it.</p>\n\n<p>There are a couple of important tricks when working out locations: firstly, you will need to know the bounds of the screen saver area. This will vary depending on the monitor, screen size or whether the screen saver is appearing in the preview window in System Preferences. The screen saver view has a method that does this work for you.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-objc\" data-lang=\"objc\"><span class=\"n\">NSRect</span> <span class=\"n\">viewBounds</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">self</span> <span class=\"nf\">bounds</span><span class=\"p\">];</span></code></pre></figure>\n\n<p>The next trick is that you are most likely going to need some random numbers. Again, the screen saver framework supplies these to you in several forms. I used SSRandomFloatBetween but there are others. Check the documentation.</p>\n\n<p>I ran into an oddity in System Preferences that made testing a bit tedious. I built the screen saver module and double-clicked on it to install into System Preferences. That worked fine, but when I made some changes and repeated the process, the original screen saver was still in place. I found that I had to quit System Preferences each time. Deleting the old version of the screen saver was not necessary, but quitting the System Prefs app was essential.</p>\n\n<p>So that gives the basic screen saver module but with no options. Adding options is not difficult, but as always, there are a few things that are not obvious on first glance.</p>\n\n<p>Add a xib file to your project: I used a window template. Then change the window’s class to NSPanel and configure it as shown:</p>\n\n<p><img title=\"NSPanel Settings\" src=\"/images/PanelSettings.png\" alt=\"NSPanel Settings\" /></p>\n\n<p>Set the File’s Owner class to the class of your Screen Saver view. In your ScreenSaverView.h file, declare a property for this new panel. e.g.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-objc\" data-lang=\"objc\"><span class=\"k\">@property</span> <span class=\"p\">(</span><span class=\"n\">assign</span><span class=\"p\">)</span> <span class=\"n\">IBOutlet</span> <span class=\"n\">NSPanel</span> <span class=\"o\">*</span><span class=\"n\">optionsPanel</span><span class=\"p\">;</span></code></pre></figure>\n\n<p>@synthesize this in the ScreenSaverView.m file.\nIn the xib file, connect the panel to this outlet.</p>\n\n<p>Now go back to ScreenSaverView.m and add the following code:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-objc\" data-lang=\"objc\"><span class=\"k\">-</span> <span class=\"p\">(</span><span class=\"n\">BOOL</span><span class=\"p\">)</span><span class=\"n\">hasConfigureSheet</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nb\">YES</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">NSWindow</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">configureSheet</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">optionsPanel</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"p\">[</span><span class=\"n\">NSBundle</span> <span class=\"nf\">loadNibNamed</span><span class=\"p\">:</span><span class=\"s\">@\"Options\"</span> <span class=\"nf\">owner</span><span class=\"p\">:</span><span class=\"n\">self</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">optionsPanel</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">IBAction</span><span class=\"p\">)</span><span class=\"n\">closeConfig</span><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span><span class=\"n\">sender</span> <span class=\"p\">{</span>\n    <span class=\"p\">[[</span><span class=\"n\">NSApplication</span> <span class=\"nf\">sharedApplication</span><span class=\"p\">]</span> <span class=\"nf\">endSheet</span><span class=\"p\">:</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">optionsPanel</span><span class=\"p\">];</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<p>The hasConfigureSheet and configureSheet stubs are already there for you, but you can replace them with these versions.</p>\n\n<p>Go back to the xib file and drag in a button to close the options panel. Connect it to the closeConfig: action.</p>\n\n<p>Save everything, build, install in System Preferences and test. Firstly, the “Options…” button should be enabled. Clicking it should open your panel as a sheet, and when you click your button, the panel should close.</p>\n\n<p>If that doesn’t work, check the class assignments, the connections, the settings for the NSPanel and the code in that order.</p>\n\n<p>Once the panel is opening and closing as required, you need to add the ability to store and retrieve the settings. Instead of using NSUserDefaults as you would in a standard Mac app, there is a special class call ScreenSaverDefaults for screen savers. It needs a unique module name, so I used the bundle identifier. For my Time In Words screen saver, this is “net.troz.Time-In-Words-Screen-Saver”. I defined a constant to hold this as a string, so I could use it anywhere I needed.</p>\n\n<p>In the initWithFrame:isPreview: method, I got a reference to the screen saver defaults for my screen saver and registered the defaults. I am never very sure about the need to do this, but it is supposed to be a good practice.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-objc\" data-lang=\"objc\"><span class=\"n\">ScreenSaverDefaults</span> <span class=\"o\">*</span><span class=\"n\">defaults</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ScreenSaverDefaults</span> <span class=\"nf\">defaultsForModuleWithName</span><span class=\"p\">:</span><span class=\"n\">kModuleName</span><span class=\"p\">];</span>\n<span class=\"p\">[</span><span class=\"n\">defaults</span> <span class=\"nf\">registerDefaults</span><span class=\"p\">:[</span><span class=\"n\">NSDictionary</span> <span class=\"nf\">dictionaryWithObjectsAndKeys</span><span class=\"p\">:</span>\n    <span class=\"s\">@\"NO\"</span><span class=\"p\">,</span> <span class=\"s\">@\"UseAlternativeZone\"</span><span class=\"p\">,</span> <span class=\"s\">@\"\"</span><span class=\"p\">,</span> <span class=\"s\">@\"AlternativeZoneName\"</span><span class=\"p\">,</span> <span class=\"nb\">nil</span><span class=\"p\">]];</span>\n\n<span class=\"n\">Using</span> <span class=\"n\">them</span> <span class=\"n\">is</span> <span class=\"n\">exactly</span> <span class=\"n\">the</span> <span class=\"n\">same</span> <span class=\"n\">as</span> <span class=\"n\">using</span> <span class=\"n\">NSUserDefaults</span><span class=\"o\">:</span>\n\n<span class=\"c1\">// Reading\n</span><span class=\"n\">ScreenSaverDefaults</span> <span class=\"o\">*</span><span class=\"n\">defaults</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ScreenSaverDefaults</span> <span class=\"nf\">defaultsForModuleWithName</span><span class=\"p\">:</span><span class=\"n\">kModuleName</span><span class=\"p\">];</span>\n<span class=\"n\">BOOL</span> <span class=\"n\">useAlternativeZone</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">defaults</span> <span class=\"nf\">boolForKey</span><span class=\"p\">:</span><span class=\"s\">@\"UseAlternativeZone\"</span><span class=\"p\">];</span>\n<span class=\"n\">NSString</span> <span class=\"o\">*</span><span class=\"n\">alternativeZoneName</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">defaults</span> <span class=\"nf\">objectForKey</span><span class=\"p\">:</span><span class=\"s\">@\"AlternativeZoneName\"</span><span class=\"p\">];</span>\n\n<span class=\"p\">...</span>\n\n<span class=\"c1\">// Writing\n</span><span class=\"n\">ScreenSaverDefaults</span> <span class=\"o\">*</span><span class=\"n\">defaults</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ScreenSaverDefaults</span> <span class=\"nf\">defaultsForModuleWithName</span><span class=\"p\">:</span><span class=\"n\">kModuleName</span><span class=\"p\">];</span>\n<span class=\"p\">[</span><span class=\"n\">defaults</span> <span class=\"nf\">setBool</span><span class=\"p\">:</span><span class=\"n\">useAlternative</span> <span class=\"nf\">forKey</span><span class=\"p\">:</span><span class=\"s\">@\"UseAlternativeZone\"</span><span class=\"p\">];</span>\n<span class=\"p\">[</span><span class=\"n\">defaults</span> <span class=\"nf\">setObject</span><span class=\"p\">:</span><span class=\"n\">alternativeZoneName</span> <span class=\"nf\">forKey</span><span class=\"p\">:</span><span class=\"s\">@\"AlternativeZoneName\"</span><span class=\"p\">];</span>\n<span class=\"p\">[</span><span class=\"n\">defaults</span> <span class=\"nf\">synchronize</span><span class=\"p\">];</span></code></pre></figure>\n\n<p>One last thing: if you want to distribute the screen saver, you will want to create an archive, possibly code-signing with your Apple developer ID to allow for Mountain Lion’s up-coming Gatekeeper security system. I code-signed the project and built an archive, but when I clicked “Distribute” in the Organizer, the only appropriate options was “Save Built Products”. I selected this option and ended up with a series of folders inside folders, with the screen saver module in about the fifth folder down. I don’t know why the module gets distributed like this, but I pulled it out of the folders and it worked fine.</p>\n\n<p>And that’s about it. A lot of this stuff is online or in Apple’s documentation, but there are enough oddities to make it worthwhile gathering together all that I learnt while making this screen saver.</p>\n\n<p>Click this icon to download the screen saver:</p>\n\n<p><a href=\"http://troz.net/screensaver/TimeInWords-ScreenSaver.zip\"><img style=\"border-style: initial; border-color: initial; border-width: 0px;\" title=\"Click to download Time In Words Screen Saver\" src=\"http://troz.net/images/ScreenSaverIcon128.png\" alt=\"Time In Words Screen Saver Download\" width=\"128\" height=\"128\" /></a></p>\n\n",
            "url": "http://troz.net/making-a-mac-screen-saver/",
            "summary": "<p>Having just completed the my first screen saver for Mac – the <a href=\"http://troz.net/time-in-words-screen-saver-for-mac/\" title=\"Time In Words Screen Saver for Mac\">Time In Words Screen Saver</a>, I thought I would share some of the experiences. I am using OS X Lion (10.7) and Xcode 4.3.2</p>\n",
            "date_published": "2012-05-09 00:00:00 +1000",
            "tags": ["mac", "screen saver", "time in words"]
        },

        {
            "id": "/manreader",
            "title": "Man Reader",
            "content_html": "<p>Man Reader is a utility app for reading macOS’s man pages. Man Reader allows quick, convenient and easy access to the man pages on your system, useful for programmers, system administrators and tweakers.</p>\n\n<p><a href=\"http://troz.net/images/MR_Start.png\"><img src=\"http://troz.net/images/MR_Start_small.png\" alt=\"\" title=\"Man Reader\" /></a></p>\n\n<ul>\n  <li><a href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\">Buy Man Reader from the Mac App Store</a></li>\n</ul>\n\n<p>Man pages are available for the Unix commands used mostly in Terminal or when shell scripting. These man pages are normally displayed in Terminal using the “man” command e.g. “man man” gives you the man page for the man command.</p>\n\n<p>However there are problems with this: the man page is displayed to you in your Terminal window page by page and when you have got to the bottom, you have to know to press ‘q’ to get out of the man page display, at which point it disappears completely. Hope you have a good memory!</p>\n\n<p>There are various tricks to get around this: opening it in a separate window, piping it to Preview as a PDF, listing it as a single page etc, but none of these are really convenient, which is why I wrote Man Reader. Basically, I reckon that if I want a utility, then there must be other people who would want the same thing.</p>\n\n<p>Man Reader assembles a list of the commands with available man pages on your system – this will vary according to what developer tools you have installed. These commands are listed for you and you can click on any one to display the man page for that command.</p>\n\n<h3 id=\"man-reader-features\">Man Reader Features:</h3>\n\n<ul>\n  <li>List of all available man pages on your system.</li>\n  <li>Show only a section of the pages.</li>\n  <li>Search for a man page by name.</li>\n  <li>Display man page in text or HTML (different pages look best in different formats).</li>\n  <li>Step back &amp; forward through recently viewed man pages.</li>\n  <li>Live links to ‘See Also’ entries.</li>\n  <li>‘Sticky notes’ at the side to jump to sub-sections in a page.</li>\n  <li>Choose a font and size for the display.</li>\n  <li>Convenient buttons in the toolbar allow quick access to commonly used utilities.</li>\n  <li>Sand-boxed for OS X Lion &amp; later.</li>\n</ul>\n\n<hr />\n\n<h5 id=\"man-reader-version-18-changes-23-oct-2016\">Man Reader version 1.8 changes (23 Oct 2016):</h5>\n<ul>\n  <li>More complete search for man pages, including in third-party IDEs.</li>\n  <li>Fix for glitch when displaying previously selected page on launch.</li>\n</ul>\n\n<h5 id=\"man-reader-version-17-changes-10-oct-2016\">Man Reader version 1.7 changes (10 Oct 2016):</h5>\n<ul>\n  <li>Updated for macOS Sierra.</li>\n  <li>List of pages now uses alternating colors even if not using the defaults.</li>\n  <li>Minimum supported system version raised to 10.11.</li>\n  <li>Minor display glitches fixed.</li>\n</ul>\n\n<h5 id=\"man-reader-version-16-changes-13-jul-2016\">Man Reader version 1.6 changes (13 Jul 2016):</h5>\n<ul>\n  <li>Much improved searching for available man pages, including permissions fix for some pages.</li>\n  <li>Fixed error with new search term being over-written.</li>\n  <li>Sand-boxed version now works just as well as the non-sand-boxed so please switch back to this version.</li>\n</ul>\n\n<h5 id=\"man-reader-version-15-changes\">Man Reader version 1.5 changes:</h5>\n<ul>\n  <li>Much improved searching for available man pages.</li>\n  <li>Sand-boxed version now works just as well as the non-sand-boxed.</li>\n</ul>\n\n<h5 id=\"man-reader-version-14-changes\">Man Reader version 1.4 changes:</h5>\n\n<ul>\n  <li>Fix for plain text view not wrapping correctly for odd-sized fonts.</li>\n  <li>Fix for HTML text view over-riding font colors that may be invisible.</li>\n  <li>Search for missing entry (e.g. g++) no longer requires Enter or Return.</li>\n  <li>Better automatic selection of matching entries while searching.</li>\n  <li>Fix for animation warning message appearing in Console.</li>\n  <li>Status display shows when man page list is being updated.</li>\n  <li>Searching inside a page now allows a minimum of 2 characters (was 3), so flags e.g. ‘-b’ do not need to be escaped.</li>\n  <li>Fixed path for Network Utility in tool bar (moved in OS X 10.9).</li>\n  <li>More information available about the effects of sand-boxing for this app.</li>\n</ul>\n\n<h5 id=\"man-reader-version-13-changes\">Man Reader version 1.3 changes:</h5>\n\n<ul>\n  <li>Better formatting of plain text to allow for HTML entities.</li>\n  <li>Fix for font in some HTML pages getting bigger &amp; bigger.</li>\n  <li>Failed search for page will search for a matching man page anyway.</li>\n  <li>Editable apps in toolbar (see Preferences &amp; View menu).</li>\n  <li>Fixed bug when setting custom colors for marker tabs.</li>\n  <li>Changed shortcuts for Find (see Edit menu).</li>\n</ul>\n\n<h5 id=\"man-reader-version-12-changes\">Man Reader version 1.2 changes:</h5>\n\n<ul>\n  <li>Customizable colors for text, background, links, found text.</li>\n  <li>Searching for text within pages marks all matches.</li>\n  <li>Pages will adjust line width to suit window size, even in plain text mode.</li>\n  <li>If a search only results in a single page, press Return to display it.</li>\n  <li>More man pages should be located on your system.</li>\n  <li>Fix for bug where app did not always remember full screen setting.</li>\n  <li>Fix for bug where some pages were being added to the history list twice.</li>\n</ul>\n\n<h5 id=\"man-reader-version-11-changes\">Man Reader version 1.1 changes:</h5>\n\n<ul>\n  <li>Search for text within a man page.</li>\n  <li>Bookmark frequently visited pages.</li>\n  <li>Search man page list using “Starts with” or “Contains”.</li>\n  <li>Preferences for the marker tabs: choose a pre-made color set or design your own.</li>\n  <li>Full screen mode now supported.</li>\n  <li>Custom toolbar configurations now saved &amp; restored correctly.</li>\n</ul>\n\n<hr />\n\n<p>If you have any problems with Man Reader, any suggestions for future versions or encounter any bugs, please <a href=\"mailto:sarah@troz.net?subject=Man%20Reader\">contact me</a>.</p>\n\n",
            "url": "http://troz.net/manreader/",
            "summary": "<p>Man Reader is a utility app for reading macOS’s man pages. Man Reader allows quick, convenient and easy access to the man pages on your system, useful for programmers, system administrators and tweakers.</p>\n",
            "date_published": "2012-05-08 00:00:00 +1000",
            "tags": ["mac", "man reader"]
        },

        {
            "id": "/time-in-words-screen-saver-for-mac",
            "title": "Time In Words Screen Saver",
            "content_html": "<p>The latest member of the Time In Words suite of apps is a screen saver module for Macs.<br />\nVersion 1.2 updated January 2013: compatible with Lion (OS X 10.7), Mountain Lion (OS X 10.8), Mavericks (OS X 10.9) &amp; Yosemite (OS X 10.10).</p>\n\n<p><img src=\"http://troz.net/images/ScreenSaverIcon128.png\" alt=\"Time In Words Screen Saver Download\" /></p>\n\n<p><a href=\"http://troz.net/screensaver/TimeInWords-ScreenSaver.zip\">Download Time In Words Screen Saver</a></p>\n\n<p>Like <a href=\"http://troz.net/time-in-words/\" title=\"Time In Words\">Time In Words for iOS</a> and <a href=\"http://troz.net/time-in-words-for-mac/\" title=\"Worlds Time In Words for Mac\">World Time In Words for Mac</a>, it displays the time and date in plain words which are easy to read and comprehend. While it only shows a single time and date, this can be configured to show your local time &amp; date or any available time zone. Since the App Store does not have a section for screen savers, the <a href=\"http://troz.net/screensaver/TimeInWords-ScreenSaver.zip\">Time In Words screen saver</a> is available as a direct download from my site. Click the link or the icon above to download the screen saver as a zip file. If the zip file does not open automatically, double-click the file to unzip it. Then double-click the “Time In Words Screen Saver.saver” file to install the screen saver in your System Preferences. You will be asked whether you want to install it for the current user only or for all users. Selecting “All Users” will require you to enter your password, so I recommend just installing for the current user.</p>\n\n<p>Scroll to the “Other” section of the list of screen savers and click “Time In Words Screen Saver” to activate it. Sometimes the installation leaves the screen saver selected but not active. If this is the case, select another screen saver and then click back on Time In Words.</p>\n\n<p><a href=\"http://troz.net/images/ScreenSaver1.png\"><img src=\"http://troz.net/images/ScreenSaver1-small.png\" alt=\"Time In Words Screen Saver\" /></a></p>\n\n<p>By default, your local time &amp; date will be displayed. To select a different time zone, click the “Screen Saver Options…” button to display the following:</p>\n\n<p><a href=\"http://troz.net/images/ScreenSaver2.png\"><img src=\"http://troz.net/images/ScreenSaver2-small.png\" alt=\"Time In Words Screen Saver Options\" /></a></p>\n\n<p>Click the “Show Alternate Time” radio button to enable the time zone list. As with Time In Words for Mac, you can type part of a city name in the search field to find a zone quickly. Select the zone you want to use and click “OK”. The preview will switch to showing your newly selected time zone.</p>\n\n<p>For anyone interested in the source code, here is a download link: <a href=\"http://troz.net/screensaver/TimeInWordsScreenSaverXcode.zip\">Time In Words Screen Saver Xcode project</a>. This was written using Xcode 4.x so is rather out-dated by now, but may prove useful to others wishing to start writing their own screen savers.</p>\n\n",
            "url": "http://troz.net/time-in-words-screen-saver-for-mac/",
            "summary": "<p>The latest member of the Time In Words suite of apps is a screen saver module for Macs.<br />\nVersion 1.2 updated January 2013: compatible with Lion (OS X 10.7), Mountain Lion (OS X 10.8), Mavericks (OS X 10.9) &amp; Yosemite (OS X 10.10).</p>\n",
            "date_published": "2012-05-07 00:00:00 +1000",
            "tags": ["mac", "screen saver", "time in words"]
        },

        {
            "id": "/support-for-older-operating-systems",
            "title": "Support for older operating systems",
            "content_html": "<p>Working out what operating systems to support in your software is always a difficult decision. I only program for Mac &amp; iOS systems for starters. This is because they are the systems I use and understand. I am not interested in expending the time &amp; money needed to program and test my software for other systems.</p>\n\n<p>Within the Mac &amp; iOS ecosystems, there is still the decision of which versions to support. Partially, this is based on the usage statistics of each version. I found a site that segments the current Mac market: <a href=\"http://www.netmarketshare.com/operating-system-market-share.aspx?qprid=10&amp;qpcustomb=*2\" target=\"_blank\">Distribution of Mac OS X versions</a>. This tells me that OS 10.6 &amp; OS 10.7 between them have 83% which makes 10.6 a good cut-off point.</p>\n\n<p>Distribution of iOS versions is harder to discover, but I found a post that did a good job of analysing the statistics that are available:</p>\n\n<p><a href=\"http://pxldot.com/post/18754186750/ios-ebb-and-flow\"> pxldot (iOS Ebb and Flow)</a>. According to this post, by March 2012, iOS had about 75% with the remainder being almost exclusively iOS 4.</p>\n\n<p>So based on statistics alone, it makes sense to support Mac OS X 10.6 or later and iOS 4 and later. However this doesn’t cover all the relevant issues. Another important factor is new techniques and APIs introduced in Apple’s developer tools.</p>\n\n<p>In iOS 4, Apple gave us ARC – Automatic Reference Counting –  which basically removes the tedious job of memory management. This was especially painful in iOS apps where there is no garbage collection. <a href=\"http://longweekendmobile.com/2011/09/07/objc-automatic-reference-counting-in-xcode-explained/\">The Long Weekend Website</a> has an excellent summary of ARC – what it is and how to use it. Since this only excludes iOS 3 or earlier, there is no issue using this for all iOS projects.</p>\n\n<p>But now Apple has extended ARC to Mac apps as well, but only for apps built to run under 10.7 or later. Even though Mac apps could use garbage collection to remove some of the burden of memory management, this had its own inefficiencies and overheads. So in my case, I have decided that all future apps will require 10.7 to take advantage of ARC. Existing apps will stay as is – requiring 10.6 or later. With 10.8 not that far away, the usage statistics should follow this trend.</p>\n\n<p>Back to iOS, there is another new feature of Xcode that is really too attractive to ignore and that is story-boarding. This is a graphical way of laying out the navigation logic for your app and providing segues between different views. Ray Wenderlich has a good <a href=\"http://www.raywenderlich.com/5138/beginning-storyboards-in-ios-5-part-1\">introduction to storyboards</a>. So this means that my future iOS apps will all require 10.5 or later.</p>\n\n<p>One final factor is testing. You really need to have a device running each version of any supported operating system. I would rather concentrate on getting the best result for users of the latest versions that spend my time tweaking for older systems. With iOS, Apple makes it amazingly easy to update to the latest version. With Macs it costs money which is always a barrier, but technically, the App Store is making updates easier to apply.</p>\n\n",
            "url": "http://troz.net/support-for-older-operating-systems/",
            "summary": "<p>Working out what operating systems to support in your software is always a difficult decision. I only program for Mac &amp; iOS systems for starters. This is because they are the systems I use and understand. I am not interested in expending the time &amp; money needed to program and test my software for other systems.</p>\n",
            "date_published": "2012-05-02 00:00:00 +1000",
            "tags": ["operating systems"]
        },

        {
            "id": "/time-in-words-the-new-ipad",
            "title": "Time In Words &#038; the new iPad",
            "content_html": "<p>The new iPad has a Retina display, meaning that the pixel density is much greater. For some apps, this is a problem as their graphics are now scaled and look pixellated. However Time In Words is very simple. It uses standard fonts and interface widgets with no images or external graphics apart from the icon. The icon may not look perfect on a new iPad, but the display itself should look really great.</p>\n\n<p>I had a report from one user that Time In Words will not work at all on his new iPad. Unfortunately, the email address supplied did not work, so I was unable to contact this person directly. If you are reading this, please contact me again.</p>\n\n<p>The person having the problem did not specify exactly what the problem was, so I don’t know if the app will not start, or if it is not displaying correctly, or if it is showing the wrong times or what.</p>\n\n<p>However I suggested two things to try, and I will list them now in case anyone else is having issues:</p>\n\n<ol>\n  <li>Try deleting the app from your iPad and then re-installing from the App Store.</li>\n  <li>Do a complete reboot of your iPad in case it is running low on memory.</li>\n</ol>\n\n<p>Hopefully one or both of these ideas will solve any problems. They are both good general tricks to try with any problem app.</p>\n",
            "url": "http://troz.net/time-in-words-the-new-ipad/",
            "summary": "<p>The new iPad has a Retina display, meaning that the pixel density is much greater. For some apps, this is a problem as their graphics are now scaled and look pixellated. However Time In Words is very simple. It uses standard fonts and interface widgets with no images or external graphics apart from the icon. The icon may not look perfect on a new iPad, but the display itself should look really great.</p>\n",
            "date_published": "2012-04-10 00:00:00 +1000",
            "tags": ["ios", "time in words", "trouble-shooting"]
        },

        {
            "id": "/iphone-4-home-button",
            "title": "iPhone 4 Home Button",
            "content_html": "<p>My iPhone 4 is now 18 months old, and it’s Home button is starting to feel the strain. These buttons have been used much more than originally intended, with the new multitasking required double-presses, not to mention access to the camera etc. So basically , it is wearing out.</p>\n\n<p>The phone is out of warranty and there is no way I am going to pay for an expensive repair when my current phone contract will expire later this year, and hopefully the iPhone 5 will be ready for me then. And a cheap repair or DIY is too risky.</p>\n\n<p>I saw a post comparing the physical structure of the home buttons on iPhone 4 &amp; 4S. Unfortunately I cannot find the link now, but it showed that the actual hardware has been made a lot more robust since the iPhone 4 was released, so this should only be a short term issue.</p>\n\n<p>I read a article suggesting the use of WD-40 for a mis-behaving Home button. This is a TERRIBLE idea! Do not spray a penetrating oil into your expensive electronic device. For starters, it don’t believe it is a friction problem – I think the mechanism is just wearing out.</p>\n\n<p>Some people recommend recalibrating the Home button as shown in this post from <a href=\"http://www.idownloadblog.com/2011/12/22/recalibrate-home-button-responsive/\">idownloadblog.com</a>. I am a bit sceptical about this. I tried it, but I can’t see that it did anything. Maybe if your problem is software rather than hardware, then it will do some good. Anyway, unlike the WD-40 trick, it can’t do any harm.</p>\n\n<p>Finally, on to the workaround. If your iPhone button is really unreliable, but you are not ready to repair or upgrade, then you can use the Accessibility tools to get a software Home button on the screen.</p>\n\n<p>Go to Settings – General – Accessibility. Scroll down to “Physical &amp; Motor”. Turn on AssistiveTouch.</p>\n\n<p><a href=\"http://troz.net/images/HomeButton1.png\"><img title=\"AssistiveTouch settings\" src=\"http://troz.net/images/HomeButton1-small.png\" alt=\"AssistiveTouch settings\" width=\"200\" height=\"300\" /></a></p>\n\n<p>When you back out of Settings, you will see a white blob somewhere on your screen. This can be dragged to any location around the edge of the screen, so you can always move it out of the way in any app.</p>\n\n<p><a href=\"http://troz.net/images/HomeButton2.png\"><img title=\"The White Blob\" src=\"http://troz.net/images/HomeButton2-small.png\" alt=\"The White Blob\" width=\"200\" height=\"300\" /></a></p>\n\n<p>Tapping on the white blob gives you an overlay view with four options, one of which is Home. Tapping this is exactly the same as pressing the physical Home button. So with this and the power button, you can do everything, even if the Home button stops working completely.</p>\n\n<p><a href=\"http://troz.net/images/HomeButton3.png\"><img title=\"AssistiveTouch panel open\" src=\"http://troz.net/images/HomeButton3-small.png\" alt=\"AssistiveTouch panel open\" width=\"200\" height=\"300\" /></a></p>\n\n<p>Thanks to Tom at our local Apple Store (Robina, Queensland, Australia) for this tip.</p>\n\n",
            "url": "http://troz.net/iphone-4-home-button/",
            "summary": "<p>My iPhone 4 is now 18 months old, and it’s Home button is starting to feel the strain. These buttons have been used much more than originally intended, with the new multitasking required double-presses, not to mention access to the camera etc. So basically , it is wearing out.</p>\n",
            "date_published": "2012-03-28 00:00:00 +1000",
            "tags": ["iphone", "trouble-shooting", "ui"]
        },

        {
            "id": "/time-in-words-for-mac-now-available",
            "title": "Time In Words for Mac now available",
            "content_html": "<p>Time In Words for Mac has just been approved and is now available for free from the <a href=\"http://itunes.apple.com/au/app/time-in-words/id509085586?mt=12\" target=\"_blank\">Mac App Store</a>.</p>\n\n<p>For more details, check out the <a href=\"http://troz.net/time-in-words-for-mac/\">Time In Words for Mac</a> web page.</p>\n\n",
            "url": "http://troz.net/time-in-words-for-mac-now-available/",
            "summary": "<p>Time In Words for Mac has just been approved and is now available for free from the <a href=\"http://itunes.apple.com/au/app/time-in-words/id509085586?mt=12\" target=\"_blank\">Mac App Store</a>.</p>\n",
            "date_published": "2012-03-20 00:00:00 +1000",
            "tags": ["mac", "time in words"]
        },

        {
            "id": "/time-in-words-for-mac",
            "title": "World Time In Words for Mac",
            "content_html": "<p><a href=\"http://itunes.apple.com/au/app/time-in-words/id509085586?mt=8\" target=\"_blank\">World Time In Words for Mac</a> version 3.0 is now available through the Mac App Store. This update changes the name from “Time In Words” to “World Time In Words” as an acknowledgment that the major feature of this app is converting time between different time zones. This update adds the ability to show digital time if you need greater accuracy – just hold down Option as you open the menu. I have also added the ability to show 24-hour time in the menu bar.</p>\n\n<p>World Time In Words runs as a menu bar utility app that displays your current time and date in words. Optionally, it can be set to display a number of time zones, again in plain English so it is always clear which day is being referred to. It shows the time in words in your menu bar all the time if you like, and now offers a convenient way to work out what the time will be in other zones at a specified local time.</p>\n\n<p>The first time you run the World Time In Words app, it will appear in your menu bar and pop down a menu that looks like this:</p>\n\n<p><img src=\"http://troz.net/images/WTiW-web-1.png\" alt=\"World Time In Words starting menu\" width=\"257\" height=\"257\" /></p>\n\n<p>Selecting Preferences… will take you to a window like this<img src=\"http://troz.net/images/WTiW-web-2.png\" alt=\"World Time In Words Preferences\" width=\"562\" height=\"398\" /></p>\n\n<p><span style=\"text-align: center;\">Type in part of a city name in the search area to find that city and its time zone. Drag or double-click a line in the table on the right to move a time zone to the list on the left, which shows the time zones that will appear in the menu. Drag a line out of the list on the left to remove a zone, or double-click the unwanted line. Drag and drop to re-arrange the zones in the selected list.</span></p>\n\n<p>Mars geeks: scroll to the bottom of the time zone list or search for Mars, Curiosity or Opportunity to find the Mars Rovers. Adding them to your selected time zones will show how many Sols (Martian days) the rovers have been on Mars.</p>\n\n<p>Once you have selected some time zones, your menu may look like this:<img src=\"http://troz.net/images/WTiW-web-3.png\" alt=\"World Time In Words menu with added time zones\" width=\"280\" height=\"667\" /></p>\n\n<p><span style=\"text-align: center;\">Note that the menu will indicate which time zones are currently in daylight savings time.</span></p>\n\n<p>Version 3.0 adds the ability to see all the time digitally if you have a temporary need for greater accuracy. Hold down the Option key as you click in the menu title and the menu will appear like this:<br />\n<img src=\"http://troz.net/images/WTiW-web-6.png\" alt=\"World Time In Words digital option\" width=\"262\" height=\"521\" /></p>\n\n<p>To specify what will be displayed in the menu bar, you can toggle “Show time in words as menu title”. If this is checked, you have two other methods for adjusting what you will see. Select your preferred accuracy: “To closest 5 minutes” or “Precise”. Use the popup menu to select a time &amp; date format to show in the menu bar. You can also choose 24 hour time for the menu title if you prefer.<br />\n<img src=\"http://troz.net/images/WTiW-web-4.png\" alt=\"Menu bar time &amp; date formats\" width=\"561\" height=\"396\" /></p>\n\n<p>To see what time it will be in your selected time zones at various hours during your day, choose “What time will it be when…” from the menu. Move the slider to different hours in your local zone and read what the corresponding time will be in your preferred time zones.<br />\n<img src=\"http://troz.net/images/WTiW-web-5.png\" alt=\"What time will it be when...\" width=\"514\" height=\"435\" /></p>\n\n<p>If you want to make World Time In Words start automatically whenever you log in to your Mac, check the “Auto start…” checkbox. This uses Apple’s new methods of adding sandboxed items to the login startup list which has two consequences:</p>\n\n<ul>\n  <li>World Time In Words will not show up in your Login Items if you go to System Preferences</li>\n  <li>The auto-start will only work if the app is installed in your Applications folder.</li>\n</ul>\n\n<p>While I do not think the second item is a problem, since the App Store automatically installs into your Applications folder, I disagree with the policy enforced in the first item. It means that if you wish to un-install World Time In Words, you should ensure that you have turned off “Auto start…” first, as there is no easy way to do this from outside the app.</p>\n\n<p>However, World Time In Words is sandboxed, so it’s data and settings are kept in their own container and isolated from other apps for better security.</p>\n\n<p>If you are having any problems with World Time In Words, or you have any suggestions for future improvements, please <a href=\"mailto:sarah@troz.net?subject=World%20Time%20In%20Words%20-%20Mac\">email me</a>.</p>\n\n",
            "url": "http://troz.net/time-in-words-for-mac/",
            "summary": "<p><a href=\"http://itunes.apple.com/au/app/time-in-words/id509085586?mt=8\" target=\"_blank\">World Time In Words for Mac</a> version 3.0 is now available through the Mac App Store. This update changes the name from “Time In Words” to “World Time In Words” as an acknowledgment that the major feature of this app is converting time between different time zones. This update adds the ability to show digital time if you need greater accuracy – just hold down Option as you open the menu. I have also added the ability to show 24-hour time in the menu bar.</p>\n",
            "date_published": "2012-03-19 00:00:00 +1000",
            "tags": ["mac", "time in words", "world time"]
        },

        {
            "id": "/scroll-bars-in-mac-ox-10-6-and-10-7",
            "title": "Scroll bars in Mac OX 10.6 and 10.7",
            "content_html": "<p>With the introduction of OS X 10.7 (Lion), Apple removed the obvious scroll bars from windows and replaced them with a much more subtle scroll indicator, that only appears when you are actually scrolling. This was designed to match the iOS scrolling, as was the swap of scroll direction which makes much more sense if you use a trackpad.</p>\n\n<p>With the upcoming <a href=\"http://troz.net/time-in-words-for-mac/\">Time In Words for Mac</a>, I have a Preferences window to allow selection of time zones to display in the menu. The app will be compatible with 10.6 or later. Under 10.6, the scrollbars are always visible and this is what the Preferences display looks like:</p>\n\n<p><img title=\"Preferences 10.6\" src=\"/images/TiW-Prefs-10.6.png\" alt=\"Preferences 10.6\" width=\"550\" height=\"272\" /></p>\n\n<p>This may change, but the basic layout is there. As you can see, I have a 3-column table listing all the available time zones, with the final column right justified.</p>\n\n<p>Under 10.7, this doesn’t quite work:</p>\n\n<p><img title=\"Preferences 10.7\" src=\"/images/TiW-Prefs-10.7.png\" alt=\"Preferences 10.7\" width=\"550\" height=\"272\" /></p>\n\n<p>I had to grab this screen shot quickly after swiping the trackpad, but you can see the problem. When not scrolling, the scroll indicator is hidden and the right column is fully visible, but when dragging the scroll indicator appears on top of the right-justified entries in that column.</p>\n\n<p>So now I am not quite sure what to do. Here are the options I have considered:</p>\n\n<ul>\n  <li>Left or centre-justify the text in the final column.</li>\n  <li>Add some spacing at the end of each line so that the scroll indicator appears in blank space.</li>\n  <li>Put up with it.</li>\n</ul>\n\n<p>I will have to experiment with various options and see what I can do.</p>\n\n",
            "url": "http://troz.net/scroll-bars-in-mac-ox-10-6-and-10-7/",
            "summary": "<p>With the introduction of OS X 10.7 (Lion), Apple removed the obvious scroll bars from windows and replaced them with a much more subtle scroll indicator, that only appears when you are actually scrolling. This was designed to match the iOS scrolling, as was the swap of scroll direction which makes much more sense if you use a trackpad.</p>\n",
            "date_published": "2012-02-25 00:00:00 +1000",
            "tags": ["mac", "ui"]
        },

        {
            "id": "/interface-options-for-selecting-time-zones",
            "title": "Interface options for selecting time zones",
            "content_html": "<p>As part of the design for <a href=\"http://troz.net/time-in-words-for-mac/\">Time In Words for Mac</a>, I had to work out the interface for selecting time zones. With <a href=\"http://troz.net/time-in-words/\">Time In Word for iOS</a>, I used picker wheels which are excellent for selecting hierarchical data. On the Mac, there is no such thing as the iOS picker wheel and so I had to consider what to use instead.</p>\n\n<p>When you ask the system (Mac or iOS) for the available time zones, you get a list of names like this:</p>\n<blockquote>\n  <p>Africa/Abidjan<br />\nAfrica/Accra<br />\n…<br />\nAmerica/Cayman<br />\nAmerica/Chicago<br />\n…<br />\nEurope/Riga<br />\nEurope/Rome<br />\netc.</p>\n</blockquote>\n\n<p>This seems obviously designed for a hierarchical display with the major regions as a first selection, filtering down to the cities in that region, making selection a two-step process. With the picker wheel in iOS, that is what I did. The first wheel selects the region which then populates the second wheel with the relevant city names. It makes it quick and easy to select a zone.</p>\n\n<p>I always prefer to use standard user interface objects because people are familiar with them, they automatically update with the system, and there is much less chance of the App Store rejecting the app. So I scrolled through the available Mac options and came to NSBrowser. This is basically what Finder uses when in column mode.</p>\n\n<p>I created an NSBrowser object, worked out a way to populate it and tested. It was incredibly slow! The list of regions appeared when the window opened, and that was no problem. Then I clicked a region and the first set of city names appeared instantly. But subsequent selections took about 3 seconds to appear.</p>\n\n<p>I added some timing tests and my data gathering was taking about 20 milliseconds. The log thought the browser had updated within about 100 milliseconds, so I guess the rest of the time was some redraw issue.</p>\n\n<p>Apple provides a large number of sample projects so I downloaded one that used NSBrowser. It seemed fast and responsive, so I duplicated it’s different method of assembling the data and tried again. No luck – it was as slow as before.</p>\n\n<p>I am sure that if I kept at it, I would eventually work out what was causing the bottleneck and make NSBrowser work – after all, Finder is responsive enough, even if not great. But in the end, I decided that the advantages to using this form of interface didn’t justify the time spent, so I went with a simple table and a search field.</p>\n\n<p>It is fast to populate, responsive to searches and didn’t take long to set up. So I am happy, although still perplexed about NSBrowser. It is on my to-do list of things I want to work out one day.</p>\n\n",
            "url": "http://troz.net/interface-options-for-selecting-time-zones/",
            "summary": "<p>As part of the design for <a href=\"http://troz.net/time-in-words-for-mac/\">Time In Words for Mac</a>, I had to work out the interface for selecting time zones. With <a href=\"http://troz.net/time-in-words/\">Time In Word for iOS</a>, I used picker wheels which are excellent for selecting hierarchical data. On the Mac, there is no such thing as the iOS picker wheel and so I had to consider what to use instead.</p>\n",
            "date_published": "2012-02-25 00:00:00 +1000",
            "tags": ["mac", "time in words", "ui"]
        },

        {
            "id": "/time-in-words-available-in-the-app-store",
            "title": "Time In Words available in the App Store",
            "content_html": "<p>Time In Words is now available at the App Store.</p>\n\n<p>Time In Words is a clock and calendar app that takes you out of the digital era and back to when saying “quarter to seven” or “five past two” was accurate enough.</p>\n\n<p><a href=\"http://itunes.apple.com/app/time-in-words/id498403851\"><img title=\"App Store link\" src=\"https://linkmaker.itunes.apple.com/htmlResources/assets/en_us//images/web/linkmaker/badge_appstore-lrg.png\" alt=\"App Store link\" /></a></p>\n\n<p>Check out the <a href=\"http://troz.net/time-in-words/\">Time In Words web page</a> for more info and screen shots.</p>\n\n",
            "url": "http://troz.net/time-in-words-available-in-the-app-store/",
            "summary": "<p>Time In Words is now available at the App Store.</p>\n",
            "date_published": "2012-02-09 00:00:00 +1000",
            "tags": ["ios", "time in words"]
        },

        {
            "id": "/time-in-words",
            "title": "Time In Words for iOS",
            "content_html": "<p>Time In Words is a clock and calendar app that takes you out of the digital era and back to when saying “quarter to seven” or “five past two” was accurate enough. When people look at an analog watch, they tend to interpret the time to the closest five minutes which allows for inaccuracies in the watch as well as providing only a useful level of detail. This app goes back to that, showing date and/or time in multiple ways, but all in words.</p>\n\n<p><a href=\"http://itunes.apple.com/app/time-in-words/id498403851\" target=\"_blank\">Time In Words is available from the App Store.</a></p>\n\n<p>Does your job involve reading out the time from a clock? Perhaps over the radio or a public address system? Let Time In Words convert the time and date to words for you, so you can’t make a mistake.</p>\n\n<p>Swipe though the pages of the app to see a time display, date display, time and date in words and finally, a time zone converter that explains the time and the day in words, so no conversion is needed to work out whether calling a friend in Minsk right now would be a bad idea.</p>\n\n<p>Configure the colors for the text and backgrounds and adjust the brightness to suit your surroundings.</p>\n\n<p>If you set your device’s Auto-Lock to Never (Settings – General) and leave it connected to power, then you can use this as a clock.</p>\n\n<p>For any problems with this app, please use the Contact Me link in the sidebar.</p>\n\n<p>Screen shots are for iPhone or iPod Touch. iPad is similar but allows four time zone conversions.</p>\n\n<p><img title=\"Time\" src=\"http://troz.net/images/TiW-iOS-1.png\" alt=\"Time\" /> \n<img title=\"Date\" src=\"http://troz.net/images/TiW-iOS-2.png\" alt=\"Date\" />\n<img title=\"Time and Date\" src=\"http://troz.net/images/TiW-iOS-3.png\" alt=\"Time and Date\" /> \n<img title=\"Time zone conversion\" src=\"http://troz.net/images/TiW-iOS-4.png\" alt=\"Time zone conversion\" />\n<img title=\"Settings\" src=\"http://troz.net/images/TiW-iOS-5.png\" alt=\"Settings\" /></p>\n",
            "url": "http://troz.net/time-in-words/",
            "summary": "<p>Time In Words is a clock and calendar app that takes you out of the digital era and back to when saying “quarter to seven” or “five past two” was accurate enough. When people look at an analog watch, they tend to interpret the time to the closest five minutes which allows for inaccuracies in the watch as well as providing only a useful level of detail. This app goes back to that, showing date and/or time in multiple ways, but all in words.</p>\n",
            "date_published": "2012-02-08 00:00:00 +1000",
            "tags": ["ios", "time in words"]
        }

    ]
}
