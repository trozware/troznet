<rss version="2.0" 
  xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web on TrozWare</title>
    <link>https://troz.net/tags/web/</link>
    <description>Recent content in web on TrozWare</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Â© 2012 - 2019 Sarah Reichelt</copyright>
    <lastBuildDate>Sat, 06 Oct 2018 08:29:35 +1000</lastBuildDate>
    
        <atom:link href="https://troz.net/tags/web/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
<title>Moving to the Dark Side - Part 2</title>
<link>https://troz.net/post/2018/moving-to-the-dark-side-2/</link>
<pubDate>Sat, 06 Oct 2018 08:29:35 +1000</pubDate>
      
      <guid>https://troz.net/post/2018/moving-to-the-dark-side-2/</guid>
<description>&lt;style&gt;
  img {
    margin: 10px auto;
    border: 0.5rem #dfe7f0 solid;
    border-radius: 0.5rem;
     
  }

  .dark-theme img {
    margin: 10px auto;
    border: 0.5rem #4a4d50 solid;
    border-radius: 0.5rem;
     
  }

  .social_footer img {
    border: none;
    box-shadow: none;
  }
&lt;/style&gt;

&lt;p&gt;Now that most of my Mac apps have been updated to support macOS Mojave&amp;rsquo;s dark mode, it was time to turn my attention to this web site.&lt;/p&gt;

&lt;p&gt;I build this site using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; and up until recently I used a theme called &lt;a href=&#34;https://github.com/olOwOlo/hugo-theme-even&#34;&gt;Even&lt;/a&gt; which I had been able to modify to suit my requirements. The story of how I switched to Hugo, what I wanted in a theme and how I went about, is in a &lt;a href=&#34;https://troz.net/post/2017/moving-to-hugo/&#34;&gt;post from last year&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But Evan is a theme with a white background and dark text, which looked great in light mode, but rather glaring in dark mode. So it was time to head for the &lt;a href=&#34;https://themes.gohugo.io&#34;&gt;Hugo Themes page&lt;/a&gt; to look for an alternative.&lt;/p&gt;

&lt;p&gt;But which way to go? In my opinion, dark themes look better in Mojave&amp;rsquo;s light mode than light themes look in dark mode, so I decided to go with a dark theme. But to my delight, I found a theme that allowed users to switch between light and dark modes: &lt;a href=&#34;https://themes.gohugo.io/hugo-theme-hello-friend/&#34;&gt;Hello Friend&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/panr&#34;&gt;panr&lt;/a&gt;. Click the light bulb icon in the top right and the web site instantly toggles between modes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/Dark_Light_web.png&#34; alt=&#34;Dark and light versions of homepage&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With the spread of dark mode, I would expect more web sites and themes to implement this sort of switching in the future. Thanks to &lt;a href=&#34;https://twitter.com/panr&#34;&gt;panr&lt;/a&gt; for being an early adopter.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;As I said in my &lt;a href=&#34;https://troz.net/post/2018/moving-to-the-dark-side/&#34;&gt;previous post&lt;/a&gt;, I have already updated several of my macOS apps to support dark mode. But after reading some comments on Twitter, I have updated &lt;a href=&#34;https://itunes.apple.com/app/apple-store/id552293482&#34;&gt;Icon Builder&lt;/a&gt; and &lt;a href=&#34;https://itunes.apple.com/app/apple-store/id997688302&#34;&gt;Dice Pass&lt;/a&gt; to allow the user to decide which mode to use. Make your choice in the Window menu as to whether these apps use whatever mode is set for the system, or select your preferred mode.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/SelectMode.png&#34; alt=&#34;Select mode in Window menu&#34; /&gt;&lt;/p&gt;</description>
</item>
    
    <item>
<title>Moving to Hugo</title>
<link>https://troz.net/post/2017/moving-to-hugo/</link>
<pubDate>Wed, 29 Nov 2017 17:42:57 +1000</pubDate>
      
      <guid>https://troz.net/post/2017/moving-to-hugo/</guid>
<description>&lt;p&gt;Yesterday, I came to update my blog: I had a new post in draft form and I wanted
to update the Swift code to version 4. However installing High Sierra had
removed &lt;a href=&#34;https://jekyllrb.com&#34; title=&#34;Jekyll&#34;&gt;Jekyll&lt;/a&gt; which is the site generator that I had been using. I
re-installed Jekyll but found that it had been updated from version 2 to version
3.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;jekyll-problems&#34;&gt;Jekyll Problems&lt;/h2&gt;

&lt;p&gt;Then my problems started: missing dependencies due to the basic Jekyll install
no longer including certain features, and then syntax errors due to changes in
the way things are done, particularly to do with pagination.&lt;/p&gt;

&lt;p&gt;I tried to fix this myself, then thought that maybe the theme I was using had
already solved these issues so I tried re-installing that. It wanted to add
about 25 more gems and then failed to install - sigh - spend some time rolling
that back&amp;hellip;&lt;/p&gt;

&lt;p&gt;At this point I decided that if Jekyll was going to cause me a lot of trouble,
it might be worth looking at an alternative.&lt;/p&gt;

&lt;p&gt;My main criteria were the ability to import my Jekyll site and the ability to
host on &lt;a href=&#34;https://pages.github.com/&#34; title=&#34;GitHub Pages&#34;&gt;GitHub Pages&lt;/a&gt;. After checking out the options, I decided to have a
look at &lt;a href=&#34;https://gohugo.io&#34; title=&#34;Hugo&#34;&gt;Hugo&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;moving-to-hugo&#34;&gt;Moving to Hugo&lt;/h2&gt;

&lt;p&gt;One of the most lauded features of Hugo is speed. I had found with Jekyll that
when I saved an edited page, it took about 5 seconds before the edits could be
reloaded into the browser. Hugo is supposedly fast and does auto reloads.&lt;/p&gt;

&lt;p&gt;Following the &lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34; title=&#34;Hugo Quick Start&#34;&gt;Quick Start&lt;/a&gt; guide, I installed Hugo. Importing my Jekyll site
worked easily and so fast I wasn&amp;rsquo;t sure anything had happened, transferring my
posts to &lt;code&gt;contents/posts&lt;/code&gt; and my other files (status pages, images etc.) to
&lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then the main exercise appeared to be choosing a theme which would provide not
only the visuals but the capabilities of the site.&lt;/p&gt;

&lt;p&gt;So I drew up a list of demands for any theme I chose:&lt;/p&gt;

&lt;h3 id=&#34;must-have-features&#34;&gt;Must Have Features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Responsive&lt;/li&gt;
&lt;li&gt;Blog style:

&lt;ul&gt;
&lt;li&gt;front page with recent posts&lt;/li&gt;
&lt;li&gt;tags&lt;/li&gt;
&lt;li&gt;archive page&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Written using Markdown&lt;/li&gt;
&lt;li&gt;Static pages for apps listing, about, contact etc.&lt;/li&gt;
&lt;li&gt;Syntax highlighting&lt;/li&gt;
&lt;li&gt;Social links&lt;/li&gt;
&lt;li&gt;Google Analytics&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;would-be-nice-features&#34;&gt;Would Be Nice Features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Disqus commenting&lt;/li&gt;
&lt;li&gt;Twitter cards&lt;/li&gt;
&lt;li&gt;JSON Feed&lt;/li&gt;
&lt;li&gt;Searching within the site&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Hugo themes page &lt;a href=&#34;https://themes.gohugo.io&#34;&gt;https://themes.gohugo.io&lt;/a&gt; has themes listed by capabilities,
but no way that I could see to combine a selection of capabilities.&lt;/p&gt;

&lt;p&gt;Some of the features like Google Analytics or Disqus comments, I could probably
add myself using templates from theme that did include them, if the template I
chose did not.&lt;/p&gt;

&lt;p&gt;Conveniently, nearly all these seem to come with an exampleSite folder that
contains the configuration info.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;configuring-a-theme&#34;&gt;Configuring a Theme&lt;/h2&gt;

&lt;p&gt;After testing out several alternatives, I decided to go with &lt;a href=&#34;https://github.com/olOwOlo/hugo-theme-even&#34; title=&#34;Even&#34;&gt;Even&lt;/a&gt; - at
least to start with. I installed the theme and copied the contents of the
example &lt;code&gt;config.toml&lt;/code&gt; to my own &lt;code&gt;config.toml&lt;/code&gt; file and started configuring.&lt;/p&gt;

&lt;p&gt;I wasn&amp;rsquo;t happy with some of the fonts, but soon worked out how to change the CSS
in the theme and then re-build it to apply the changes. And I changed the theme
colour from the default red to &amp;ldquo;Cobalt Blue&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Most of the other changes were done using the &lt;code&gt;config.toml&lt;/code&gt; file. I was able to
set up menus, configure the social media links I wanted to show, set date
formats, set the number of items to show per page and so on.&lt;/p&gt;

&lt;p&gt;I had a couple of more static pages that I wanted to show, so I added their
Markdown files to the content folder.&lt;/p&gt;

&lt;p&gt;One nice feature which I had missed in Jekyll (or at least the way I had it set
up) was the ability to separate blog posts from more static web pages. Each of
my apps has an information/support page that does not accept comments and
doesn&amp;rsquo;t need to be listed in the Archives. By moving these Markdown files from
&lt;code&gt;contents/posts&lt;/code&gt; to &lt;code&gt;contents/pages&lt;/code&gt;, I was able to achieve this.&lt;/p&gt;

&lt;p&gt;Adding Google Analytics and Disqus commenting was as easy as entering my IDs in
the relevant places in the &lt;code&gt;config.toml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;I had to do some editing of my imported posts from Jekyll - mainly getting rid
of references to &lt;code&gt;{{ site.url }}&lt;/code&gt; so that images and internal links would work.
And sometimes I just needed to re-save a file to make Hugo re-evaluate it (there
is probably a command to force a complete re-build if I looked for it.)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;working-out-the-structure&#34;&gt;Working out the Structure&lt;/h2&gt;

&lt;p&gt;One thing that I was puzzled by was what templates the various pages are
generated from.&lt;/p&gt;

&lt;p&gt;The main page is easy enough as the theme folder has a layouts folder with an
&lt;code&gt;index.html&lt;/code&gt; file containing the templating. When a post is displayed, that
looks like it comes from &lt;code&gt;layouts/posts/single.html&lt;/code&gt; while
&lt;code&gt;layouts/posts/summary.html&lt;/code&gt; contains the templating for each entry in the index
page.&lt;/p&gt;

&lt;p&gt;But clicking on the Archives link in the me takes me to &lt;a href=&#34;https://troz.net/post/&#34;&gt;https://troz.net/post/&lt;/a&gt;
and there is no &lt;code&gt;post.html&lt;/code&gt; file in layouts. There is a &lt;code&gt;post&lt;/code&gt; folder, but it
contains the &lt;code&gt;single.html&lt;/code&gt; &amp;amp; &lt;code&gt;summary.html&lt;/code&gt; files described already.&lt;/p&gt;

&lt;p&gt;Delving ever deeper, &lt;code&gt;layouts/_default/section.html&lt;/code&gt; appears to contains the
Archives page template. But how does that relate to the &lt;a href=&#34;https://troz.net/post/&#34;&gt;https://troz.net/post/&lt;/a&gt;
link? And the Tags template is in &lt;code&gt;layouts/_default/terms.html&lt;/code&gt; but appears in
&lt;a href=&#34;https://troz.net/tags/&#34;&gt;https://troz.net/tags/&lt;/a&gt;. Checking the Hugo documentation for creating a theme, I
find the information I need. Hugo has a selection of file paths that it checks
for such templates, and these file paths match some of those. So now I know
where to go to customise further.&lt;/p&gt;

&lt;p&gt;One feature that I really like about the Even theme is the ability to have a
table of contents displayed beside each blog post if your page is wide enough.
It takes the headers in the post and uses them to make the table. I may need to
add or edit the headers in some posts, but I really like this feature.&lt;/p&gt;

&lt;p&gt;And if you want a laugh, test out the 404 page - here is a &lt;a href=&#34;https://troz.net/bad-link/&#34; title=&#34;404&#34;&gt;bad link&lt;/a&gt; - which
generates a random text emoji each time!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;publishing&#34;&gt;Publishing&lt;/h2&gt;

&lt;p&gt;I wanted to use my existing GitHub Pages setup, so I replaced the site files in
my local repository with the new Hugo site files. I generated the static site
files using &lt;code&gt;hugo&lt;/code&gt; in Terminal, then pushed the pages to GitHub. All I had to do
then was change the settings so that GitHub Pages knew my site was coming from
the &lt;code&gt;docs&lt;/code&gt; folder and I was live with the new site.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;So how am I going with my check list?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Responsive - ALMOST, not Hugo&amp;rsquo;s fault&lt;/li&gt;
&lt;li&gt;Blog style - YES&lt;/li&gt;
&lt;li&gt;Written using Markdown - YES&lt;/li&gt;
&lt;li&gt;Static pages for apps listing, about, contact etc. - YES&lt;/li&gt;
&lt;li&gt;Syntax highlighting - YES&lt;/li&gt;
&lt;li&gt;Social links - YES&lt;/li&gt;
&lt;li&gt;Google Analytics - YES&lt;/li&gt;
&lt;li&gt;Disqus commenting - YES&lt;/li&gt;
&lt;li&gt;Twitter cards - NO&lt;/li&gt;
&lt;li&gt;JSON Feed - NO&lt;/li&gt;
&lt;li&gt;Searching within the site - NO&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Hugo generated pages are all responsive and look great on my iPhone, but my
old static page for listing my apps does not look good, so I need to re-design
that.&lt;/p&gt;

&lt;p&gt;Twitter cards - I have found some articles on how to set that up, so it is
possible, but I haven&amp;rsquo;t done it yet.&lt;/p&gt;

&lt;p&gt;JSON Feed is not working. There are themes that apparently have this, but I
haven&amp;rsquo;t yet worked out how to implement it - hopefully later.&lt;/p&gt;

&lt;p&gt;In-site search - this was something I was able to get in my old WordPress site,
but not in Jekyll. There are Hugo themes listed that support search, but they
seem to just give a link to Google or DuckDuckGo. Maybe this can be edited to
restrict it to the site, but I dislike using such searches, so I will not add a
search unless it works internally. One theme I found uses &lt;a href=&#34;https://www.algolia.com&#34; title=&#34;Algolia&#34;&gt;Algolia&lt;/a&gt; to search
the site, so I will investigate that.&lt;/p&gt;

&lt;p&gt;Overall, I am impressed. The transition was relatively easy, especially
considering that I didn&amp;rsquo;t take the time to learn anything about Hugo first, but
just blundered in and tried to work it out on the fly.&lt;/p&gt;

&lt;p&gt;The speed of generating pages and the live reload while developing make Hugo a
pleasure to work with. Now all I have to do is write some interesting posts&amp;hellip;&lt;/p&gt;

&lt;p&gt;And I want to tidy up the URLs, headers and tags for the older pages as well as
investigating Twitter cards, search &amp;amp; JSON Feed.&lt;/p&gt;</description>
</item>
    
    <item>
<title>Testing automation</title>
<link>https://troz.net/post/2015/testing-automation/</link>
<pubDate>Thu, 12 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2015/testing-automation/</guid>
<description>&lt;p&gt;Today I am experimenting with automating post generation.&lt;/p&gt;

&lt;p&gt;Firstly, there is the structure of the post Markdown document, which really
boils down to the file name and the header.&lt;/p&gt;

&lt;p&gt;I have set up a macro in &lt;a href=&#34;http://www.ergonis.com/products/typinator/&#34;&gt;Typinator&lt;/a&gt; so that I just type the title of the
post in a text document. I copy that title to the clipboard and type the
shortcut. The header is then created with the title and the formatted permalink.&lt;/p&gt;

&lt;p&gt;To save the document, I use another Typinator snippet to convert the title
(still in the clipboard) to lower case and to replace the spaces in the title
with dashes.&lt;/p&gt;

&lt;p&gt;For starting the local Jekyll server, I have turned to an &lt;a href=&#34;http://www.alfredapp.com&#34;&gt;Alfred&lt;/a&gt; workflow.
I have two actions in the workflow. One opens Terminal, cd&amp;rsquo;s to my site folder
and runs the command to start the local Jekyll server. The second opens my
default browser to the local Jekyll test address.&lt;/p&gt;

&lt;p&gt;Both these actions happen simultaneously so the browser usually fails until
refreshed. The server is left running in Terminal so I can shut it down when
finished testing.&lt;/p&gt;

&lt;p&gt;After writing the post, the final stage is to publish, so I need to work out the
commands for doing a git commit and push. Then I should be able to automate
those tasks.&lt;/p&gt;

&lt;p&gt;Testing the git commands using Terminal, I have come up with the following
sequence:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add .
git commit -a -m &amp;quot;Commit message here&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The commit message could be the title of the post, so I need a way to construct
the command and then execute it. Typinator is good at text manipulation, so I
constructed another macro that takes the clipboard, uses it as the commit
message and performs the git commands. This gave a good commit message, but the
actual commit failed, so that was no use.&lt;/p&gt;

&lt;p&gt;So then I went back to Alfred and created a workflow there with a series of
Terminal commands to perform the actions above. This only allows a generic
commit message, but it works as expected.&lt;/p&gt;

&lt;p&gt;So there is still room for improvement, but with a set of macros, I can automate
a lot of the standard text entry, which is always good for reducing errors.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The sequence now is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the text editor and type the title of the post.&lt;/li&gt;
&lt;li&gt;Cut this into the clipboard.&lt;/li&gt;
&lt;li&gt;Run the Typinator macro to fill in the post header.&lt;/li&gt;
&lt;li&gt;Save the post file, using the Typinator macro to construct the file name.&lt;/li&gt;
&lt;li&gt;Write the post, then use an Alfred workflow to test it locally.&lt;/li&gt;
&lt;li&gt;When ready, use an Alfred workflow to publish.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
</description>
</item>
    
    <item>
<title>Workflow for writing a post</title>
<link>https://troz.net/post/2015/workflow-for-writing-a-post/</link>
<pubDate>Tue, 10 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2015/workflow-for-writing-a-post/</guid>
<description>&lt;p&gt;So here is where I need to get used to Jekyll and how things are done. I will
end up automating this when I am sure of the process, but for now, I am just
going to work my way through it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Start up the local Jekyll server:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I opened Terminal and used &lt;code&gt;cd&lt;/code&gt; to get to the folder containing my site.&lt;/li&gt;
&lt;li&gt;Next I started the Jekyll server locally using &lt;code&gt;jekyll serve&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This gave me the address of the local server - in my case
&lt;code&gt;http://127.0.0.1:4000/&lt;/code&gt; - so I went there in my browser to see the default
page.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;My goal is to write a new blog post (this one in fact).&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For advice on creating a new post, I went to the &lt;a href=&#34;http://jekyllrb.com/docs/posts/&#34;&gt;Jekyll docs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Jekyll needs the file name to be a specific format which includes the date
and title.&lt;/li&gt;
&lt;li&gt;Looking in the &lt;code&gt;_posts&lt;/code&gt; folder of the site folder, I see the previous post
file is titled &lt;code&gt;2015-03-08-new-site-for-trozware.md&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;As it is now 10th March 2015, I am saving this file as:
&lt;code&gt;2015-03-10-workflow-for-writing-a-post.md&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Saving at this point shows a Jekyll error in the Terminal, but the next
stage will fix that.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Front matter:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jekyll specifies that each file must have a &lt;a href=&#34;http://jekyllrb.com/docs/frontmatter/&#34;&gt;front matter block&lt;/a&gt; in a
certain format.&lt;/li&gt;
&lt;li&gt;The header has certain essential parameters and then more optional ones.&lt;/li&gt;
&lt;li&gt;My site was imported from WordPress, so the older posts contain several
header parameters that may not be necessary any more.&lt;/li&gt;
&lt;li&gt;Look at the screen shot below to see what I have in this post file:&lt;/li&gt;
&lt;li&gt;After saving, I see this entry in my Terminal:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Regenerating: 1 file(s) changed at 2015-03-10 13:50:40 ...done in 0.421789
seconds.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Now I can see the title and the start of the post on my first page and when
clicking on it, I can see all the text.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Adding an image:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is not really necessary for this post, but I wanted to document it as
part of the workflow.&lt;/li&gt;
&lt;li&gt;I wanted to show the front matter and start of this post, so I took a
screen shot of the top of my editor window.&lt;/li&gt;
&lt;li&gt;Then I renamed the image file and moved it into the &lt;code&gt;images&lt;/code&gt; folder of my
site.&lt;/li&gt;
&lt;li&gt;Now to embed the image using this Markdown: &lt;code&gt;![Post header][2]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;As you can see, I prefer to group all links (images &amp;amp; URLs) at the end of
the document and keep the body of the text as clean as possible.&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://troz.net/images/post_header.png&#34; alt=&#34;Post header&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Proofing:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now that I have the text of my post, I need to proof-read it from the local
Jekyll server.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;jekyll serve&lt;/code&gt; command running in Terminal keeps the pages up-to-date
as you edit, but you will need to refresh your page in the browser manually
to check your changes.&lt;/li&gt;
&lt;li&gt;And I have found that if you make a major change to the site e.g. a CSS
file or a config file, then it is best to stop the Jekyll server and start
it again to make it re-build all the files.&lt;/li&gt;
&lt;li&gt;To be completely sure, stop the server and run &lt;code&gt;jekyll build&lt;/code&gt; in Terminal
although this may only do what &lt;code&gt;jekyll serve&lt;/code&gt; does on startup anyway.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Publishing:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now it is time to publish.&lt;/li&gt;
&lt;li&gt;As I am using GitHub Pages to host, the site files are all part of a single
Git repository.&lt;/li&gt;
&lt;li&gt;And as I understand it, the data &lt;strong&gt;must&lt;/strong&gt; be in the &lt;code&gt;master&lt;/code&gt; branch.&lt;/li&gt;
&lt;li&gt;Opening up the GitHub client, I see that my repository has a bunch of
changes: - the file I am working on - the image I inserted - feed.xml -
index.html files for each page&lt;/li&gt;
&lt;li&gt;This is as expected, since all pages are pre-generated when using Jekyll,
so pages of posts must be re-rendered when a new post is added to the top.&lt;/li&gt;
&lt;li&gt;Note that several of the files appear twice: once from where they are
edited and once from the _site folder which serves them.&lt;/li&gt;
&lt;li&gt;Just two simple steps now, using the GitHub client: 1. Commit 2. Sync&lt;/li&gt;
&lt;li&gt;And that&amp;rsquo;s it. My new post is online and ready for reading.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This was my first post after the one I wrote when setting up, so the first
real post.&lt;/li&gt;
&lt;li&gt;While there appear to be a lot of steps, none of them are difficult.&lt;/li&gt;
&lt;li&gt;But I do have 4 apps running to do it: 1. TextWrangler for editing 1.
Terminal to run the local Jekyll server 1. Safari to check the finished
post 1. GitHub to commit and upload&lt;/li&gt;
&lt;li&gt;Automating this is an obvious next step, so stay tuned&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
</item>
    
    <item>
<title>New Site for TrozWare</title>
<link>https://troz.net/post/2015/new-site-for-trozware/</link>
<pubDate>Sun, 08 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2015/new-site-for-trozware/</guid>
<description>

&lt;h2 id=&#34;welcome-to-trozware-s-new-site&#34;&gt;Welcome to TrozWare&amp;rsquo;s new site.&lt;/h2&gt;

&lt;p&gt;It appears that I am not alone in deciding to move away from WordPress.
WordPress is great - easy to set up and with lots of cool themes to allow
customisation of your site. But it is slow, especially if (like me) you are
running on a low-cost shared server.&lt;/p&gt;

&lt;p&gt;I had been reading about &lt;a href=&#34;http://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt;, so I decide to give it a go and also host
my site on &lt;a href=&#34;https://pages.github.com&#34;&gt;GitHub&lt;/a&gt;, taking advantage of their faster servers.&lt;/p&gt;

&lt;p&gt;I followed the advice given by &lt;a href=&#34;http://www.girliemac.com/blog/2013/12/27/wordpress-to-jekyll/&#34;&gt;Girlie Mac&lt;/a&gt; and performed the migration from
my self-hosted WordPress site. I am using the &lt;a href=&#34;http://pixyll.com&#34;&gt;Pixyll&lt;/a&gt; theme by &lt;a href=&#34;http://johnotander.com&#34;&gt;John
Otander&lt;/a&gt; with a few tweaks of my own. The site is much faster to load, and I
am hoping that the easier editing will inspire me to write more posts.&lt;/p&gt;

&lt;p&gt;Of course it wasn&amp;rsquo;t all positive. WordPress did give me some features I liked,
but I think overall the result is better.&lt;/p&gt;

&lt;h3 id=&#34;wordpress&#34;&gt;WordPress&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;WordPress gave me a full LAMP stack, so I could run my own PHP scripts.&lt;/li&gt;
&lt;li&gt;WordPress gave me a search function.&lt;/li&gt;
&lt;li&gt;Commenting was built-in.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;jekyll&#34;&gt;Jekyll&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Jekyll builds the pages out as static HTML, so all pages are pre-generated for
fast loading.&lt;/li&gt;
&lt;li&gt;Writing for Jekyll is pure Markdown so it is easier to write and preview
locally.&lt;/li&gt;
&lt;li&gt;Some of the things I needed a plugin for in WordPress can be done natively in
Jekyll: - tables - syntax-highlighting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For comments, I have switched to &lt;a href=&#34;https://disqus.com&#34;&gt;Disqus&lt;/a&gt;, but I am not sure about it yet. I
will evaluate over the next few weeks. In WordPress, I used a plugin to handle
the spam that inevitably arrived. I am hoping that Disqus will protect me from
that, but I have to see how good a job it does and whether the few real comments
are worth it. A better option might be to turn off comments completely and just
have a contact form (which I have added using &lt;a href=&#34;http://formspree.io&#34;&gt;Formspree&lt;/a&gt;). Working in
Markdown is great. I love how I can have a really clean look in my editor and
still end up with well formatted HTML. I use Coda 2 on my Mac as my standard web
editor, so that is what I am writing in now. I will probably experiment with
other Markdown editors as I go. And for any Mac users out there working in
Markdown, I highly recommend &lt;a href=&#34;http://brettterpstra.com/projects/markdown-service-tools/&#34;&gt;Brett Terpstra&amp;rsquo;s Markdown Service Tools&lt;/a&gt;.&lt;/p&gt;
</description>
</item>
    
  </channel>
</rss>