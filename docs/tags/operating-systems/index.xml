<rss version="2.0" 
  xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>operating systems on TrozWare</title>
    <link>https://troz.net/tags/operating-systems/</link>
    <description>Recent content in operating systems on TrozWare</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Â© 2012 - 2019 Sarah Reichelt</copyright>
    <lastBuildDate>Mon, 24 Sep 2012 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://troz.net/tags/operating-systems/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
<title>Updating apps for iPhone 5</title>
<link>https://troz.net/post/2012/updating-apps-for-iphone-5/</link>
<pubDate>Mon, 24 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2012/updating-apps-for-iphone-5/</guid>
<description>&lt;p&gt;I have started work updating my iOS apps to fill the larger screen of an iPhone&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;My iPhone 5 is on order - I missed out on the first shipment, but hopefully
it won&amp;rsquo;t be too long. Meanwhile, I will just test in the iPhone Simulator and
hope this is OK.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But it was a puzzle to me how to get an app to fill the longer screen. I have
the latest Xcode and the latest Simulator which allows you to specify what
screen size iPhone to simulate. So I re-built an app and nothing changed - it
showing black strips top &amp;amp; bottom and left my app at the old size.&lt;/p&gt;

&lt;p&gt;After trying many different things and reading a lot of the new sections of the
Apple developer documentation, I finally found the answer online:&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px;&#34;&gt;
  &lt;strong&gt;If you want your app to fill the 4&#34; screen, you must provide&lt;/strong&gt;&lt;br /&gt; &lt;strong&gt; a new launch image file called &#34;Default-568h@2x.png&#34;.&lt;/strong&gt;&lt;br /&gt; &lt;strong&gt; This image must be exactly 640 x 1136 pixels.&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;Apparently the system uses the presence or absence of this file this to detect
whether your app supports the longer iPhone.&lt;/p&gt;

&lt;p&gt;I read that Xcode is supposed to warn you of the consequences if this file is
missing, but in my case, when I opened my project, Xcode helpfully used the old
launch image in its place. It showed a warning icon that the image was the wrong
size, but nothing else.&lt;/p&gt;

&lt;p&gt;The next problem was how to create this file. I use screen shots, but until the
app worked in the correct format, I wasn&amp;rsquo;t going to be able to get the screen
shot. So I made it a 2 step process: first I duplicated the original launch
image, renamed it and resized it. It looked wrong but this was irrelevant - it
was enough to get the app working in the correct format. Once I had the app
working, I was able to take a screen shot and create the final launch image.&lt;/p&gt;

&lt;p&gt;Once you have the app working in 2 sizes, you have to do more work with the
layout, either using springs &amp;amp; struts or using the modern auto-layout feature. I
find auto-layout confusing, but it is obviously more powerful and the way of the
future, so I am trying to work it out. I found a good tutorial at
&lt;a href=&#34;http://www.raywenderlich.com/20881/beginning-auto-layout-part-1-of-2&#34; target=&#34;_blank&#34;&gt;Ray
Wenderlich&amp;rsquo;s site&lt;/a&gt;. While directed at iOS 6, it also applies to Mac apps.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Easy access to the Library folder</title>
<link>https://troz.net/post/2012/easy-access-to-the-library-folder/</link>
<pubDate>Wed, 16 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2012/easy-access-to-the-library-folder/</guid>
<description>&lt;p&gt;In Mac OS X 10.7 (Lion), Apple decided to make it more difficult to access your
Library folder, presumably to stop people doing stuff that made apps crash. But
as a developer, I need access to my Library folder a lot. I need to check that
preferences are being saved correctly. If I have an app that uses the
Application Support folder, then I need to be able to check it. And for
sand-boxed apps, they keep all their data in the Containers folder inside the
Library.&lt;/p&gt;

&lt;p&gt;You can easily get to the Library folder by holding down the Option key while
choosing the Go menu in Finder. This adds Library to the menu and you can get to
the folder that way. But this is not as convenient as single-click access from a
Finder window, so here is my preferred method.&lt;/p&gt;

&lt;p&gt;Use the Option key and the Finder&amp;rsquo;s Go menu to get the Library folder open in a
Finder window. Switch this window to column view, which will display the Library
folder (slightly greyed out) in the first column. Drag this Library folder to
the side bar of your Finder window. Now it is there all the time, in every
Finder window that is showing the side bar.&lt;/p&gt;

&lt;p&gt;I have read about various Terminal tricks to get the Library to show up, but
every system update seems to turn it off again. This technique doesn&amp;rsquo;t involve
anything except the Finder&amp;rsquo;s side bar preferences and so far (I&amp;rsquo;m now up to
10.7.4), it hasn&amp;rsquo;t needed to be reset after any update.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Support for older operating systems</title>
<link>https://troz.net/post/2012/support-for-older-operating-systems/</link>
<pubDate>Wed, 02 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2012/support-for-older-operating-systems/</guid>
<description>&lt;p&gt;Working out what operating systems to support in your software is always a
difficult decision. I only program for Mac &amp;amp; iOS systems for starters. This is
because they are the systems I use and understand. I am not interested in
expending the time &amp;amp; money needed to program and test my software for other
systems.&lt;/p&gt;

&lt;p&gt;Within the Mac &amp;amp; iOS ecosystems, there is still the decision of which versions
to support. Partially, this is based on the usage statistics of each version. I
found a site that segments the current Mac market:
&lt;a href=&#34;http://www.netmarketshare.com/operating-system-market-share.aspx?qprid=10&amp;qpcustomb=*2&#34; target=&#34;_blank&#34;&gt;Distribution
of Mac OS X versions&lt;/a&gt;. This tells me that OS 10.6 &amp;amp; OS 10.7 between them have
83% which makes 10.6 a good cut-off point.&lt;/p&gt;

&lt;p&gt;Distribution of iOS versions is harder to discover, but I found a post that did
a good job of analysing the statistics that are available:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pxldot.com/post/18754186750/ios-ebb-and-flow&#34;&gt; pxldot (iOS Ebb and Flow)&lt;/a&gt;. According to this post, by March 2012, iOS had
about 75% with the remainder being almost exclusively iOS 4.&lt;/p&gt;

&lt;p&gt;So based on statistics alone, it makes sense to support Mac OS X 10.6 or later
and iOS 4 and later. However this doesn&amp;rsquo;t cover all the relevant issues. Another
important factor is new techniques and APIs introduced in Apple&amp;rsquo;s developer
tools.&lt;/p&gt;

&lt;p&gt;In iOS 4, Apple gave us ARC - Automatic Reference Counting - which basically
removes the tedious job of memory management. This was especially painful in iOS
apps where there is no garbage collection. &lt;a href=&#34;http://longweekendmobile.com/2011/09/07/objc-automatic-reference-counting-in-xcode-explained/&#34;&gt;The Long Weekend Website&lt;/a&gt; has an
excellent summary of ARC - what it is and how to use it. Since this only
excludes iOS 3 or earlier, there is no issue using this for all iOS projects.&lt;/p&gt;

&lt;p&gt;But now Apple has extended ARC to Mac apps as well, but only for apps built to
run under 10.7 or later. Even though Mac apps could use garbage collection to
remove some of the burden of memory management, this had its own inefficiencies
and overheads. So in my case, I have decided that all future apps will require
10.7 to take advantage of ARC. Existing apps will stay as is - requiring 10.6 or
later. With 10.8 not that far away, the usage statistics should follow this
trend.&lt;/p&gt;

&lt;p&gt;Back to iOS, there is another new feature of Xcode that is really too attractive
to ignore and that is story-boarding. This is a graphical way of laying out the
navigation logic for your app and providing segues between different views. Ray
Wenderlich has a good &lt;a href=&#34;http://www.raywenderlich.com/5138/beginning-storyboards-in-ios-5-part-1&#34;&gt;introduction to storyboards&lt;/a&gt;. So this means that my
future iOS apps will all require 10.5 or later.&lt;/p&gt;

&lt;p&gt;One final factor is testing. You really need to have a device running each
version of any supported operating system. I would rather concentrate on getting
the best result for users of the latest versions that spend my time tweaking for
older systems. With iOS, Apple makes it amazingly easy to update to the latest
version. With Macs it costs money which is always a barrier, but technically,
the App Store is making updates easier to apply.&lt;/p&gt;
</description>
</item>
    
  </channel>
</rss>