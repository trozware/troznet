<rss version="2.0" 
  xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>world time in words on TrozWare</title>
    <link>https://troz.net/tags/world-time-in-words/</link>
    <description>Recent content in world time in words on TrozWare</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Â© 2012 - 2019 Sarah Reichelt</copyright>
    <lastBuildDate>Thu, 14 Jun 2018 10:41:46 +1000</lastBuildDate>
    
        <atom:link href="https://troz.net/tags/world-time-in-words/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
<title>SwiftUI First Thoughts</title>
<link>https://troz.net/post/2019/swiftui_first-thoughts/</link>
<pubDate>Sun, 18 Aug 2019 15:00:05 +1000</pubDate>
      
      <guid>https://troz.net/post/2019/swiftui_first-thoughts/</guid>
<description>&lt;style&gt;
  img {
    margin: 10px auto;
  }
&lt;/style&gt;


&lt;p&gt;At WWDC 2019, Apple surprised us all by announcing a completely new declarative UI framework called &lt;a href=&#34;https://developer.apple.com/xcode/swiftui/&#34;&gt;SwiftUI&lt;/a&gt;. Quoting snippets from the Apple announcements, &amp;ldquo;SwiftUI is an innovative, exceptionally simple way to build user interfaces across all Apple platforms with the power of Swift&amp;rdquo; and &amp;ldquo;SwiftUI uses a declarative syntax so you can simply state what your user interface should do.&amp;rdquo; But what does this mean and should we all adopt it now?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://developer.apple.com/assets/elements/icons/swift/swift-96x96_2x.png&#34; alt=&#34;Swift&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;swift&#34;&gt;Swift&lt;/h2&gt;

&lt;p&gt;Before discussing whether to adopt SwiftUI, we need to consider Swift itself, since you cannot use SwiftUI without Swift.&lt;/p&gt;

&lt;p&gt;The announcement of Swift at WWDC 2014 was a complete bombshell. Here in Australia, I watch the keynote every year while half asleep since it starts at 3 am. That announcement had me wide awake and bouncing out of my seat with excitement. I was an early adopter and have never regretted that decision.&lt;/p&gt;

&lt;p&gt;Many well-respected developers have decided to ignore Swift and they have their various reasons, so let&amp;rsquo;s go through the ones I have heard:&lt;/p&gt;

&lt;h4 id=&#34;1-i-m-very-comfortable-and-productive-in-objective-c&#34;&gt;1. I&amp;rsquo;m very comfortable and productive in Objective-C&lt;/h4&gt;

&lt;p&gt;This is not a bad reason and for many people, their employer may insist on the language anyway, but this argument doesn&amp;rsquo;t work for me. Firstly, I think that there is never going to be the One Perfect Language (with apologies to &lt;a href=&#34;https://oleb.net/blog/2017/06/chris-lattner-wwdc-swift-panel/#in-which-fields-would-you-like-to-see-swift-in-the-future&#34;&gt;Chris Lattner&lt;/a&gt;) so I am always open to new ideas. And personally, I love learning new languages even if I am never going to use them in production. I feel that this makes me a better programmer overall. And there are vast benefits to Swift - it is a much safer language to write it, it is easier to read and more concise to write, it is just a much more modern language.&lt;/p&gt;

&lt;h4 id=&#34;2-swift-is-too-new-and-changes-too-much-between-versions&#34;&gt;2. Swift is too new and changes too much between versions&lt;/h4&gt;

&lt;p&gt;Swift was new. It is now 5 years old and we are into version 5.2. Undeniably, there have been a lot of changes since 1.0 and many of them have been breaking changes. Swift 3 was especially bad in this respect. But this came with advantages too. As early adopters, we were able to influence the direction of the language. And Xcode was always pretty good about providing a converter to the next version. But either way, since Swift 4, there are supposed to be no more breaking changes, so this is an argument whose time has passed.&lt;/p&gt;

&lt;h4 id=&#34;3-no-abi-stability&#34;&gt;3. No ABI stability&lt;/h4&gt;

&lt;p&gt;ABI stability was a crutch that many people clung to as an excuse to avoid Swift. But unless you were building frameworks for distribution, I don&amp;rsquo;t see that it was ever a complete deal-breaker. The &lt;a href=&#34;https://github.com/apple/swift/blob/master/docs/ABIStabilityManifesto.md#what-does-abi-stability-enable&#34;&gt;Swift ABI Stability Manifesto&lt;/a&gt; has a good review of what ABI stability is and what it will allow. As app developers, the main advantage is that the Swift libraries will no longer need to be bundled with each app. This will decrease app sizes dramatically. But either way, we now have ABI stability, so again, this argument is finished.&lt;/p&gt;

&lt;h4 id=&#34;4-apple-may-not-be-serious-about-swift-and-it-may-not-last&#34;&gt;4. Apple may not be serious about Swift and it may not last&lt;/h4&gt;

&lt;p&gt;I think there was a certain amount of wishful thinking here. The main data behind this theory seemed to be that very few of the Apple apps included any Swift. And in the beginning this was true. I expect Apple&amp;rsquo;s apps have a rather longer development time-frame than apps produced by independents. However over the last few years, more and more of Apple&amp;rsquo;s own apps have started to use Swift, either completely or partially. And any doubt about Apple&amp;rsquo;s commitment to Swift should have been permanently laid to rest by the announcement of SwiftUI.&lt;/p&gt;

&lt;h4 id=&#34;5-it-s-too-complicated&#34;&gt;5. It&amp;rsquo;s too complicated&lt;/h4&gt;

&lt;p&gt;OK, this one has some validity, but then again, if Swift is to rule the world, it needs to be able to do a lot of things. I love Swift, I love writing in it and I am very productive when using it. But then I see a chunk of code sprinkled with generics and unsafe pointers and I can&amp;rsquo;t make head nor tail of it. However, I think that if you are writing any standard, non-arcade-game app, you can write very good Swift using just the basics.&lt;/p&gt;

&lt;h2 id=&#34;why-did-apple-make-swiftui&#34;&gt;Why did Apple make SwiftUI?&lt;/h2&gt;

&lt;p&gt;Having demolished the arguments against using Swift, it&amp;rsquo;s time to move on to SwiftUI. Let&amp;rsquo;s start with the reasons why something like this had to happen.&lt;/p&gt;

&lt;p&gt;Apple now has 5 or possibly 6 user platforms: macOS, iOS, iPadOS, tvOS, watchOS and maybe CarPlay. (I&amp;rsquo;ve never considered any CarPlay development so I have no idea how it works.) The screen sizes range from 38mm for the smallest watch to over 75&amp;rdquo; to large screen TVs (apologies for mixing my units there, but it seems that TVs have not gone metric yet). As far as user interface frameworks go, we have had AppKit, UIKit and WatchKit. AppKit is the venerable old member of this team, descended from NextStep (which is why every element name has the NS prefix) and is used to make macOS apps. UIKit was built from scratch for the iPhone and so is a lot newer and neater than AppKit, but at the same time it is more limited. It has never had to deal with the vast variability and complexity of a Mac app&amp;rsquo;s interface. WatchKit is an even more slimmed down framework with a relatively small number of interface elements.&lt;/p&gt;

&lt;p&gt;Now imagine that you are trying to write a multi-platform app. You have to learn at least 3 different ways of doing everything. And there are differences that always catch me out. For example, in AppKit, to set the text in a text field, you set the field&amp;rsquo;s &lt;code&gt;stringValue&lt;/code&gt; but in iOS, you can set the field&amp;rsquo;s &lt;code&gt;text&lt;/code&gt; property. And in WatchKit, you call the &lt;code&gt;setText()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Want to change the background color of a view? UIView - no problem, set &lt;code&gt;backgroundColor&lt;/code&gt;. NSView - nope - do something weird with layers. I forget what, I have to look it up every time.&lt;/p&gt;

&lt;p&gt;These inconsistencies are annoying, time-consuming and a huge barrier to cross-platform development. It really annoys me when I read articles or tweets that assume Swift programming = iOS programming when it is so much more. But before SwiftUI, it was not easy to jump between the platforms.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/ipad-apps-for-mac/&#34;&gt;Catalyst&lt;/a&gt;, previously code-named Marzipan, was supposed to be the answer. And it is a partial answer. It allows iPad apps to be ported to the Mac and that&amp;rsquo;s great for iPad developers who want to expand their reach. But it isn&amp;rsquo;t the answer for everybody.&lt;/p&gt;

&lt;h3 id=&#34;interface-builder&#34;&gt;Interface Builder&lt;/h3&gt;

&lt;p&gt;Before I go further into what I think is so great about SwiftUI, I would like to take a moment to discuss Interface Builder. Xcode is a brilliant tool that gets better with every release, but its weak point has always been Interface Builder. I am old enough to remember when Interface Builder was a separate app (not that we called them &amp;ldquo;apps&amp;rdquo; in those days) and although it has been folded into Xcode for many years now, the connection between interface and code has always been clunky and un-intuitive. Control-dragging from interface to code and then remembering to switch between Action and Outlet so that you don&amp;rsquo;t end up naming your button &amp;ldquo;doneButtonWasTapped&amp;rdquo;. And if you get the modifier key wrong, who knows what weird stuff will happen.&lt;/p&gt;

&lt;p&gt;And then came Auto Layout&amp;hellip; It was vastly more flexible than the old school springs &amp;amp; struts and with the ever increasing number of iPhone &amp;amp; iPad models something had to be done, but if you have never ended up swearing at Auto Layout and reverting to a previous commit or mashing Undo repeatedly, then you can&amp;rsquo;t have used Auto Layout very much!&lt;/p&gt;

&lt;p&gt;WatchKit had an entirely different approach to layout and it was easy, intuitive and very refreshing. You drag in objects, they go one under another. You can group them horizontally or vertically, you can make them into table cells. WatchKit has a much more limited set of interface elements and a much more limited set of device sizes to deal with, but I think we can clearly see the origins of SwiftUI in the way it worked. Even if you still had to use Interface Builder to do it.&lt;/p&gt;

&lt;p&gt;Interface Builder&amp;rsquo;s quirks lead to a category of programmers who felt the need to write all their interface in code. To my way of thinking, this is a huge waste of time and you still had to wrestle with Auto Layout, but without the visual clues! But if it makes them happy&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/xcode/swiftui/&#34;&gt;&lt;img src=&#34;https://developer.apple.com/assets/elements/icons/swiftui/swiftui-96x96_2x.png&#34; alt=&#34;SwiftUI&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-is-swiftui&#34;&gt;What Is SwiftUI?&lt;/h2&gt;

&lt;p&gt;A &amp;ldquo;declarative UI framework&amp;rdquo; - what does that mean? Basically, declarative programming is a way of specifying what a program should do, rather than specifying how to do it. A common example is making a sandwich. If you want a sandwich, you say to the sandwich maker, &amp;ldquo;Please can I have a ham, cheese and tomato sandwich&amp;rdquo;. You don&amp;rsquo;t say &amp;ldquo;Get two pieces of bread, butter both of them, cut 3 slices of ham and 2 slices of cheese&amp;hellip;&amp;rdquo;. They know how to make a sandwich so you only have to ask for what you want.&lt;/p&gt;

&lt;p&gt;Back in the Apple UI world, what if you want a button? Is it for an iPhone app? Then you need an UIButton with a certain type. Set its title, size, location, layout constraints. What are the default sizes for an iPhone button? What is the default font? What color should the text be? Now make a button for a tvOS app? That has to be huge! And what other settings does it have? But the thing is, iOS, macOS, tvOS etc. already &lt;strong&gt;KNOW&lt;/strong&gt; what their buttons should look like. So why not just tell the system &amp;ldquo;I want a button&amp;rdquo;? Let the system work out the details and you can get on with the cool app ideas.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not going to turn this post into a SwiftUI tutorial, but I would like to thank and recommend the people that have really helped me get to grips with it, especially &lt;a href=&#34;https://www.hackingwithswift.com/articles/196/learn-swiftui-with-free-tutorials&#34;&gt;Paul Hudson of Hacking with Swift with his Learn SwiftUI tutorials&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/user/azamsharp/videos&#34;&gt;Mohammad Azam&amp;rsquo;s great YouTube series&lt;/a&gt;, and &lt;a href=&#34;https://designcode.io/swiftui-course&#34;&gt;Meng To&amp;rsquo;s SwiftUI course at Design+Code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The other great benefit of SwiftUI is that when used with the Combine framework, it gives you a reactive interface. There have been various third-party libraries for doing this: RxSwift, ReactiveSwift, ReactiveCocoa, Bond etc, but with Combine, Apple is baking this into the ecosystem, which makes it a lot easier to set up and means that it will stay up-to-date with the operating systems. A reactive interface is one where you can bind a UI element to a piece of data and then when the data changes, the user interface updates automatically. You can even bind both ways so that the user interface updates the data without you having to do a thing. Imagine how much boiler-plate code that can eliminate?&lt;/p&gt;

&lt;h2 id=&#34;the-good-the-bad-and-the-ugly&#34;&gt;The Good, The Bad and The Ugly&lt;/h2&gt;

&lt;h3 id=&#34;1-the-good&#34;&gt;1. The Good&lt;/h3&gt;

&lt;p&gt;You get a lot of interface for very little code. Making tables is a joy without the masses of boilerplate code needed to set up data sources and delegates. The instant preview in the canvas makes iteration much easier. Being able to create something like a Picker and having SwiftUI render it in one of multiple different styles depending on the platform is magical.&lt;/p&gt;

&lt;h3 id=&#34;2-the-bad&#34;&gt;2. The Bad&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s early days yet and SwiftUI has some quirks and bugs. Sometimes the canvas just stops responding, switching into live mode in the canvas can take a while and of course it is still in beta, so there will be breaking changes to come.&lt;/p&gt;

&lt;h3 id=&#34;3-the-ugly&#34;&gt;3. The Ugly&lt;/h3&gt;

&lt;p&gt;It is very easy to build up the Pyramid of Doom where you have multiple levels of nesting leading to the end of your code being a seemingly endless stream of closing curly braces. In SwiftUI, one tends to build from the inside out: make a Text view, embed it in a VStack so you can add another one, embed that stack in an HStack so you can add an Image and so on&amp;hellip; But there is an answer: Command-click on one of your outer layers and select &amp;ldquo;Extract Subview&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;coding-the-layout&#34;&gt;Coding the Layout&lt;/h2&gt;

&lt;p&gt;Earlier in the article, I spoke about programmers ignoring Interface Builder and laying out the interface in code. I don&amp;rsquo;t think this is a good approach, so how is SwiftUI different? Firstly, you get immediate feedback of the UI you are coding, so you are not losing that visual benefit of using Interface Builder. Secondly, SwiftUI does much of the layout for you, so you are not hand-coding auto layouts or every last detail of every UI element. So as far as SwiftUI is concerned, I am a convert to programmatic layouts. But if not using SwiftUI, I would still stick to Interface Builder.&lt;/p&gt;

&lt;p&gt;Another point to consider here is that developers have long argued that if Apple wants the iPad to be seen as a &amp;ldquo;Pro&amp;rdquo; device, there should be a version of Xcode for iPad. One of the problems with this was Interface Builder - it is difficult to see how it could be made to work with a touch interface. But with SwiftUI and iPadOS, is it possible that Apple can make an iPad version of Xcode?&lt;/p&gt;

&lt;h2 id=&#34;should-you-use-swiftui&#34;&gt;Should you use SwiftUI?&lt;/h2&gt;

&lt;p&gt;I hope that from my previous paragraphs, you have come away with a good feeling for why Apple made SwiftUI and why it is good for us as developers. Personally, I find it a joy to use even in these early beta stages, but some of the arguments against using Swift, can now be applied again to SwiftUI.&lt;/p&gt;

&lt;p&gt;That SwiftUI is very new cannot be debated. It is extremely new and even in the handful of betas released since WWDC, we have seen some breaking changes. It feels quite buggy still but as I am running it in a beta operating system with a beta version of Xcode, it would be unfair to blame all the instability on SwiftUI.&lt;/p&gt;

&lt;p&gt;SwiftUI is not yet a complete replacement for UIKit/AppKit/WatchKit etc. There are SwiftUI equivalents for many of the interface elements and I recommend the &lt;a href=&#34;https://goshdarnswiftui.com&#34;&gt;Gosh Darn SwiftUI site&lt;/a&gt; which maintains a list of UIKit equivalents as well as really useful snippets of SwiftUI code. But even when SwiftUI does not have the UI element you want, there are two easy options: use UIKit/AppKit or build your own. Apple has made sure that there is no problem about mixing and matching UIKIt/AppKit code with SwiftUI. And maybe the SwiftUI tools would allow you to build your own version of the missing element. I needed a progress bar and I built one myself with not much code and ended up with what I think is a better look than the standard one.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/trozware/swiftui_progressbar&#34;&gt;&lt;img src=&#34;https://troz.net/images/SwiftUi_progressbar.png&#34; alt=&#34;Progress Bar&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Click the image for a link to the GitHub repository.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For years, Apple has been telling us to use standard interface elements in our apps and if we did this, when system updates changed the look and feel, we mostly got that change for free. Now they are giving us even more for free by saying effectively, tell us what UI element you want and we will do all the work of configuring it for the platform and for the user&amp;rsquo;s settings.&lt;/p&gt;

&lt;p&gt;But with this, Apple has given us a lot of modifiers we can apply to elements as well as a great animation suite, so I expect to see a lot of more interesting design choices being made in apps, while they are still adhering to all the standard human interface guidelines for the various platforms.&lt;/p&gt;

&lt;p&gt;Apple does not promote SwiftUI as &amp;ldquo;write once, run everywhere&amp;rdquo; but as &amp;ldquo;learn once, apply everywhere&amp;rdquo; and that is an important distinction. It seems at first glance that we can write once but only on a basic level. You are still going to need to design the appropriate UI for a platform, but it will be able to re-use components from the other versions of the same app.&lt;/p&gt;

&lt;p&gt;Do I intend to use SwiftUI in my next app - YES. If I was writing code for NASA, I wouldn&amp;rsquo;t, but my apps are rarely mission-critical, so I can indulge myself and learn as I go. It will be frustrating when there are breaking changes, but at the same time, my bug reports are going to make it better.&lt;/p&gt;

&lt;p&gt;One caveat is that SwiftUI apps will require the latest operating systems, iOS 13 and macOS 10.15 so if your app has to support older versions of the systems, you will have to wait until next year. But there is nothing to stop you building some test components and starting the learning process.&lt;/p&gt;</description>
</item>
    
    <item>
<title>Learning Swift  - Tuples</title>
<link>https://troz.net/post/2019/learning-swift-tuples/</link>
<pubDate>Sun, 03 Feb 2019 19:48:51 +1000</pubDate>
      
      <guid>https://troz.net/post/2019/learning-swift-tuples/</guid>
<description>&lt;style&gt;
  img {
    margin: 10px auto;
    border: 0.5rem #dfe7f0 solid;
    border-radius: 0.5rem;
     
  }

  .dark-theme img {
    margin: 10px auto;
    border: 0.5rem #4a4d50 solid;
    border-radius: 0.5rem;
     
  }

  .social_footer img {
    border: none;
    box-shadow: none;
  }
&lt;/style&gt;

&lt;p&gt;I sometimes like to focus on aspects of the Swift language that get less publicity, but that I think are really useful without adding a lot of complexity. This time I am looking at tuples.&lt;/p&gt;

&lt;p&gt;There are many different ways of collecting data together in Swift, but for small amounts of transitory data, I find tuples to be an extremely convenient data structure.&lt;/p&gt;

&lt;h2 id=&#34;what-is-a-tuple&#34;&gt;What is a Tuple?&lt;/h2&gt;

&lt;p&gt;A tuple is basically an array with a pre-determined length and unlike normal Swift arrays, it can hold a mix of data types.&lt;/p&gt;

&lt;p&gt;Here are some examples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let pair = (&amp;quot;Jessie&amp;quot;, &amp;quot;Woody&amp;quot;)
let coords = (0, 4, -6)
let pet = (type: &amp;quot;cat&amp;quot;, trained: false, age: 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To define a tuple, you enclose the data elements in parentheses - normal brackets, not curly or square. Optionally, the elements can have a label attached as shown in the &lt;code&gt;pet&lt;/code&gt; example.&lt;/p&gt;

&lt;p&gt;Tuples can have any number of components, but if they get too long, a struct might be a better option. &lt;a href=&#34;https://github.com/realm/SwiftLint&#34;&gt;SwiftLint&lt;/a&gt; will complain if you use tuples with more than 3 elements and usually I go along with that.&lt;/p&gt;

&lt;p&gt;There are various ways to access the parts of a tuple. The first way is using index numbers which works but isn&amp;rsquo;t very intuitive and could be hard to decipher when you come back to a project after some time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;print(pair.0)
print(pair.1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next way is if the tuple has used labels for the elements as in the &lt;code&gt;pet&lt;/code&gt; example above:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;print(pet.type)
print(pet.trained)
print(pet.age)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But the way I prefer to use them is by deconstructing the parts into separate variables in a single statement:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let (x, y, z) = coords
print(x, y, z)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The elements of a tuple can be of different types but once a tuple has been defined, that type of each element is fixed, so you still get all the benefits of Swift&amp;rsquo;s type safety.&lt;/p&gt;

&lt;p&gt;Option-clicking on the variable name shows the inferred type of the tuple:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/Tuple_type.png&#34; alt=&#34;The type of a tuple.&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Trying to re-assign the tuple or any elements of the tuple will only work if the new assignments match the initial types for each element:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/Tuple_errors.png&#34; alt=&#34;Errors when mutating a tuple.&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;where-could-you-use-a-tuple-and-why&#34;&gt;Where could you use a tuple and why?&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s imagine you have a function that checks a database or web service and comes back with the title of a movie and its rating.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func getMovieInfo() {
  var movieTitle: String
  var rating: Int

  // get the data from somewhere
  // now return both movieTitle and rating
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having got the data, this function needs to return two pieces of data: &lt;code&gt;movieTitle&lt;/code&gt; and &lt;code&gt;rating&lt;/code&gt; - one &lt;code&gt;String&lt;/code&gt; and one &lt;code&gt;Int&lt;/code&gt;. How could this be done?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Array&lt;/strong&gt;: since there are 2 different data types, the array would have to be of type &lt;code&gt;[Any]&lt;/code&gt; or the &lt;code&gt;Int&lt;/code&gt; could be converted to a &lt;code&gt;String&lt;/code&gt; before returning. Neither of these are good options. Using &lt;code&gt;Any&lt;/code&gt; removes the protection of Swift&amp;rsquo;s type safety and converting the &lt;code&gt;Int&lt;/code&gt; to and from a &lt;code&gt;String&lt;/code&gt; may fail, so then you have to deal with optionals.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Dictionary&lt;/strong&gt;: the same arguments hold true. The dictionary would have to be of type &lt;code&gt;[String: Any]&lt;/code&gt; or the rating would have to be converted to a &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Struct or Class&lt;/strong&gt;: either of these would be fine but unless this is a data structure that is going to be re-used, it seems like overkill.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tuple&lt;/strong&gt;: this would get my vote, so let&amp;rsquo;s see how that would work.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func getMovieInfo() -&amp;gt; (String, Int) {
var movieTitle: String
var rating: Int

// get the data from somewhere

return (movieTitle, rating)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Two main things to notice here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The return type of the function lists the data types of both the elements being returned, enclosed in parentheses.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The returning tuple is created by wrapping the elements inside parentheses, just like in the examples above.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And then in the calling function, you can access the parts of the returned data like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let (returnedMovieTitle, returnedRating) = getMovieInfo()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The tuple is being returned and immediately deconstructed to give 2 new variables so accessing the parts of the tuple is easy and type-safe.&lt;/p&gt;

&lt;p&gt;A function returning a tuple can also be configured to use named elements by specifying the names in the return type declaration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func getMovieInfo() -&amp;gt; (name: String, score: Int) {
    var movieTitle: String
    var rating: Int

    // get the data from somewhere

    return (movieTitle, rating)
}

let result = getMovieInfo()
let returnedMovieTitle = result.name
let returnedRating = result.score
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My feeling is that once a tuple is complex enough to need names, you should really consider using a class or a struct, but for returning 2 or 3 chunks of data from a function, this is a very useful technique, espeicialy if the data types are different.&lt;/p&gt;

&lt;h2 id=&#34;looping-through-tuples&#34;&gt;Looping through tuples&lt;/h2&gt;

&lt;p&gt;If you have an array of tuples, looping through the tuples is made very convenient if you use the deconstruction method of accessing the parts.&lt;/p&gt;

&lt;p&gt;As an example, suppose you are dealing with some 3D coordinate system and you want to perform an operation on each location.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let coords_array = [
    (0, 0, 0),
    (0, 1, -3),
    (1, 4, 2),
    (-2, 0, 5),
    (5, 2, 4)
]

for (x, y, z) in coords_array {
    let distanceFromOrigin = abs(x) + abs(y) + abs(z)
    print(distanceForOrigin)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can deconstruct the tuple each time through the loop, assigning temporary variables so you can act on them.&lt;/p&gt;

&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;So those are the basics of tuples: how to create them, how to use them and where they might be useful. My main use is as a light-weight alternative to a struct for returning multi-part data from a function. But hopefully after reading this article, they have become another tool in your Swift tool belt that you can consider using in certain circumstances.&lt;/p&gt;

&lt;h3 id=&#34;that-leaves-only-one-important-question-how-do-you-pronounce-tuple&#34;&gt;That leaves only one important question: how do you pronounce &amp;lsquo;tuple&amp;rsquo;?&lt;/h3&gt;

&lt;p&gt;I have heard two variations: &amp;lsquo;toople&amp;rsquo; using a long U as in universe or &amp;lsquo;tupple&amp;rsquo; using a short U as in cup. There does not appear to be any strict geographical differentiation, so take your pick. I prefer &amp;lsquo;toople&amp;rsquo; myself, but if somebody says &amp;lsquo;tupple&amp;rsquo;, I know what they mean.&lt;/p&gt;</description>
</item>
    
    <item>
<title>Thanks</title>
<link>https://troz.net/thanks/</link>
<pubDate>Wed, 16 Jan 2019 10:59:13 +1000</pubDate>
      
      <guid>https://troz.net/thanks/</guid>
<description></description>
</item>
    
    <item>
<title>The End of Pic-a-POD</title>
<link>https://troz.net/post/2018/the-end-of-picapod/</link>
<pubDate>Sat, 06 Oct 2018 09:38:20 +1000</pubDate>
      
      <guid>https://troz.net/post/2018/the-end-of-picapod/</guid>
<description>&lt;p&gt;I think I wrote the first version of &lt;a href=&#34;https://picapod.com&#34;&gt;Pic-a-POD&lt;/a&gt; in 2003 and have been updating and maintaining it ever since, but the time has come to shut it down.&lt;/p&gt;

&lt;p&gt;I haven&amp;rsquo;t been able to find a picture of the original version, but here is one from 2005:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/POD2005.png&#34; alt=&#34;Pic-a-POD 2005&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And here it is today:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/POD2018.png&#34; alt=&#34;Pic-a-POD 2018&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It was written originally as a convenient way to download the daily picture-of-the-day from &lt;a href=&#34;https://www.nationalgeographic.com/photography/photo-of-the-day/&#34;&gt;National Geographic&lt;/a&gt; and use it to set the Mac&amp;rsquo;s Desktop Picture automatically. From there is just grew with more sites added (9 at the moment although I think there have been up to 12 at certain times).&lt;/p&gt;

&lt;p&gt;The main issue was keeping up with the site changes of the various sources. Early versions had each copy of the app interrogate the sites directly which meant that any change to the site broke the app until an update could be released. And without the App Store making updates easy to distribute, this was a problem. Later I switched to having PHP scripts on my server do the data retrieval and store the results in a database. The app then just had to request the data from my server. That way if there was a change, I could react quickly and a fix to the server-side scripts allowed all users to get the new data.&lt;/p&gt;

&lt;p&gt;As my first Objective-C app and my first app on the Mac App Store, Pic-a-POD has always held a place in my affections, and until last week, it was the one app that was always running on my Mac. So what changed? macOS Mojave&amp;rsquo;s dynamic desktops! I turned off Pic-a-POD, and set the Desktop picture to change dynamically through the day and I loved it.&lt;/p&gt;

&lt;p&gt;On the server, I have kept Pic-a-POD updated regularly, adding and removing sites, fixing the scripts to accommodate changes and so on. But the desktop app has languished and has needed an update for many years now. It&amp;rsquo;s networking is primitive and I know so much more about programming for the Mac now that looking at the code is positiviely embarrassing! But it has never been a big seller so a re-write is definitely not economically viable, it would only be for my satisfaction. And if even I am not using it any more, what is the point?&lt;/p&gt;

&lt;p&gt;So I have made the sad decision to shut it down. But what does this mean for users of Pic-a-POD right now?&lt;/p&gt;

&lt;p&gt;Firstly, it is not going away immediately. I will remove it from the App Store, but existing copies are still going to work. If any of the source sites change their data structure, I will not be monitoring this and I will not update the server-side scripts - just turn off that source and carry on with whatever still works. And finally, when the picapod.com domain name expires in 2021, I will not renew it and the app will cease to operate.&lt;/p&gt;

&lt;p&gt;What can you use instead? The default dynamic desktops in Mojave are great although there are only two of them, but I have bought myself an app called &lt;a href=&#34;https://itunes.apple.com/au/app/24-hour-wallpaper/id1226087575?mt=12&#34;&gt;24 Hour Wallpaper&lt;/a&gt; which includes a great range of dynamic desktop pictures.&lt;/p&gt;

&lt;p&gt;So thank you to everyone who has used Pic-a-POD over the years and especially those of you who took the time and trouble to contact me. It has been a fun journey, but there are other apps in my future now.&lt;/p&gt;</description>
</item>
    
    <item>
<title>Moving to the Dark Side - Part 2</title>
<link>https://troz.net/post/2018/moving-to-the-dark-side-2/</link>
<pubDate>Sat, 06 Oct 2018 08:29:35 +1000</pubDate>
      
      <guid>https://troz.net/post/2018/moving-to-the-dark-side-2/</guid>
<description>&lt;style&gt;
  img {
    margin: 10px auto;
    border: 0.5rem #dfe7f0 solid;
    border-radius: 0.5rem;
     
  }

  .dark-theme img {
    margin: 10px auto;
    border: 0.5rem #4a4d50 solid;
    border-radius: 0.5rem;
     
  }

  .social_footer img {
    border: none;
    box-shadow: none;
  }
&lt;/style&gt;

&lt;p&gt;Now that most of my Mac apps have been updated to support macOS Mojave&amp;rsquo;s dark mode, it was time to turn my attention to this web site.&lt;/p&gt;

&lt;p&gt;I build this site using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; and up until recently I used a theme called &lt;a href=&#34;https://github.com/olOwOlo/hugo-theme-even&#34;&gt;Even&lt;/a&gt; which I had been able to modify to suit my requirements. The story of how I switched to Hugo, what I wanted in a theme and how I went about, is in a &lt;a href=&#34;https://troz.net/post/2017/moving-to-hugo/&#34;&gt;post from last year&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But Evan is a theme with a white background and dark text, which looked great in light mode, but rather glaring in dark mode. So it was time to head for the &lt;a href=&#34;https://themes.gohugo.io&#34;&gt;Hugo Themes page&lt;/a&gt; to look for an alternative.&lt;/p&gt;

&lt;p&gt;But which way to go? In my opinion, dark themes look better in Mojave&amp;rsquo;s light mode than light themes look in dark mode, so I decided to go with a dark theme. But to my delight, I found a theme that allowed users to switch between light and dark modes: &lt;a href=&#34;https://themes.gohugo.io/hugo-theme-hello-friend/&#34;&gt;Hello Friend&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/panr&#34;&gt;panr&lt;/a&gt;. Click the light bulb icon in the top right and the web site instantly toggles between modes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/Dark_Light_web.png&#34; alt=&#34;Dark and light versions of homepage&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With the spread of dark mode, I would expect more web sites and themes to implement this sort of switching in the future. Thanks to &lt;a href=&#34;https://twitter.com/panr&#34;&gt;panr&lt;/a&gt; for being an early adopter.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;As I said in my &lt;a href=&#34;https://troz.net/post/2018/moving-to-the-dark-side/&#34;&gt;previous post&lt;/a&gt;, I have already updated several of my macOS apps to support dark mode. But after reading some comments on Twitter, I have updated &lt;a href=&#34;https://itunes.apple.com/app/apple-store/id552293482&#34;&gt;Icon Builder&lt;/a&gt; and &lt;a href=&#34;https://itunes.apple.com/app/apple-store/id997688302&#34;&gt;Dice Pass&lt;/a&gt; to allow the user to decide which mode to use. Make your choice in the Window menu as to whether these apps use whatever mode is set for the system, or select your preferred mode.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/SelectMode.png&#34; alt=&#34;Select mode in Window menu&#34; /&gt;&lt;/p&gt;</description>
</item>
    
    <item>
<title>Moving to the Dark Side</title>
<link>https://troz.net/post/2018/moving-to-the-dark-side/</link>
<pubDate>Wed, 26 Sep 2018 16:49:43 +1000</pubDate>
      
      <guid>https://troz.net/post/2018/moving-to-the-dark-side/</guid>
<description>&lt;style&gt;
  img {
    margin: 10px auto;
    border: 0.5rem #dfe7f0 solid;
    border-radius: 0.5rem;
     
  }

  .dark-theme img {
    margin: 10px auto;
    border: 0.5rem #4a4d50 solid;
    border-radius: 0.5rem;
     
  }

  .social_footer img {
    border: none;
    box-shadow: none;
  }
&lt;/style&gt;

&lt;p&gt;With the release of macOS Mojave on 24th September 2018, I have started updating my Mac apps, mainly to enable support for dark mode if appropriate.&lt;/p&gt;

&lt;p&gt;And now I have updated this site too. Click the light bulb icon at the top right of the page to toggle between light and dark modes for this site.&lt;/p&gt;

&lt;p&gt;And with my apps, so far (1 st October 2018), I have updated &lt;a href=&#34;https://itunes.apple.com/app/apple-store/id552293482&#34;&gt;Icon Builder&lt;/a&gt;, &lt;a href=&#34;https://itunes.apple.com/app/apple-store/id509085586&#34;&gt;World Time in Words&lt;/a&gt;, &lt;a href=&#34;https://itunes.apple.com/app/apple-store/id997688302&#34;&gt;Dice Pass&lt;/a&gt; and &lt;a href=&#34;https://itunes.apple.com/app/apple-store/id533321133&#34;&gt;A Knight&amp;rsquo;s Move&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/icon-builder/&#34;&gt;&lt;img src=&#34;https://troz.net/images/IconBuilder5.1.png&#34; alt=&#34;Icon Builder 5.1&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/time-in-words-for-mac/&#34;&gt;&lt;img src=&#34;https://troz.net/images/WTiW_dark.png&#34; alt=&#34;World Time in Words 3.2&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/dicepass/&#34;&gt;&lt;img src=&#34;https://troz.net/images/DicePass1.5.png&#34; alt=&#34;Dice Pass 3.2&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/knightsmove/&#34;&gt;&lt;img src=&#34;https://troz.net/images/KnightsMoveMac1.png&#34; alt=&#34;Knights Move 1.6&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For A Knight&amp;rsquo;s Move, I wanted to make sure the wood-look background didn&amp;rsquo;t change, so I actually disabled dark mode.
For any developers looking for the way to do that, I added the following chunk to the &lt;code&gt;applicationDidFinishLaunching(_:)&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;    if #available(OSX 10.14, *) {
        NSApp.appearance = NSAppearance(named: .aqua)
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similar code could presumably be used to change the appearance of a running app. I may add the ability to switch to my apps later.&lt;/p&gt;</description>
</item>
    
    <item>
<title>Swift Strings Helper</title>
<link>https://troz.net/post/2018/swift-strings-helper/</link>
<pubDate>Thu, 21 Jun 2018 14:45:59 +1000</pubDate>
      
      <guid>https://troz.net/post/2018/swift-strings-helper/</guid>
<description>&lt;p&gt;Hands up everyone who can remember how to work with Swift strings, especially when it comes to substrings and ranges? &amp;hellip;.&lt;/p&gt;

&lt;p&gt;Nobody?&lt;/p&gt;

&lt;p&gt;Me neither. So I decided that I would work it out once and create myself a library to make it easy for myself in the future. And then I thought that other people might like it too. So I have created my first open sourced project.&lt;/p&gt;

&lt;h2 id=&#34;strings-in-swift&#34;&gt;Strings in Swift&lt;/h2&gt;

&lt;p&gt;Swift&amp;rsquo;s string handling is amazing. It is truly Unicode-compliant, so a Swift &lt;code&gt;String&lt;/code&gt; doesn&amp;rsquo;t care whether your string is made up of basic alphanumerics, accented characters, or emojis that might be composed of several different emojis joined together.&lt;/p&gt;

&lt;p&gt;But this power comes at a price, and every version of Swift has changed the way we interact with strings, seemingly making it more and more confusing for the poor programmers trying to stay current. I have got to the stage where each year I read up on the new String features and then promptly forget them. For every use, I have to go back and search how to do what should be simple.&lt;/p&gt;

&lt;h2 id=&#34;the-problems&#34;&gt;The Problems&lt;/h2&gt;

&lt;p&gt;To my mind, there are two main problems: indexes and substrings.&lt;/p&gt;

&lt;p&gt;In most languages, you can get the n-th character of a string, but not in Swift. In Swift, you have to ask the string for its startIndex (or endIndex), then use an offset to adjust that index by a certain number to give you a &lt;code&gt;String.Index&lt;/code&gt;. Do much the same to get a second index and then you can grab the string between those two indices.&lt;/p&gt;

&lt;p&gt;To get a sub-string from the 7th up to the 11th character of a string, this is what you have to do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let str = &amp;quot;Hello, playground&amp;quot;

let subStart = str.index(str.startIndex, offsetBy: 7)
let subEnd = str.index(str.startIndex, offsetBy: 11)

let subStr = str[subStart ..&amp;lt; subEnd]       // &amp;quot;play&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Splitting the lines up like that at least helps to show what is happening, but then you see abominations like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sub = str[str.index(str.startIndex, offsetBy: 7)..&amp;lt;str.index(str.startIndex, offsetBy: 11)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And how anyone is supposed to read that, I really do not know.&lt;/p&gt;

&lt;p&gt;And now here is the kicker: the results (&lt;code&gt;subStr&lt;/code&gt; and &lt;code&gt;sub&lt;/code&gt; in the examples above) are not of type &lt;code&gt;String&lt;/code&gt;! They are of type &lt;code&gt;Substring&lt;/code&gt; so when you go to use them, they don&amp;rsquo;t work as expected.&lt;/p&gt;

&lt;p&gt;I guess there are cases for using &lt;code&gt;Substring&lt;/code&gt; but I always just end up casting to &lt;code&gt;String&lt;/code&gt; to solve this, but only after the compiler has choked on what I thought was a &lt;code&gt;String&lt;/code&gt; all along.&lt;/p&gt;

&lt;h2 id=&#34;the-solution&#34;&gt;The Solution&lt;/h2&gt;

&lt;p&gt;To make my life easier, I worked out all the ways that I wanted to be able to split up strings. Basically just two ways: by character number or by substring. Swift already has a &lt;code&gt;substring&lt;/code&gt; method but it uses &lt;code&gt;String.Index&lt;/code&gt; as shown above. To avoid confusion, I named my functions all &lt;code&gt;sub&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But now I can do the following to split strings by character number:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let subStr = startingString.sub(from: 9)
let subStr = startingString.sub(from: -3)

let subStr = startingString.sub(upTo: 4)
let subStr = startingString.sub(upTo: -3)

let subStr = startingString.sub(from: 3, upTo: 7)
let subStr = startingString.sub(from: 3, upTo: -5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Negative numbers count back from the end of the string. And they all return &lt;code&gt;String&lt;/code&gt; objects!&lt;/p&gt;

&lt;p&gt;Or to split strings by their own sub-strings, I can do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let subStr = startingString.sub(from: &amp;quot;abc&amp;quot;)

let subStr = startingString.sub(upTo: &amp;quot;xyz&amp;quot;)

let subStr = startingString.sub(from: &amp;quot;abc&amp;quot;, upTo: &amp;quot;xyz&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;extras&#34;&gt;Extras&lt;/h2&gt;

&lt;p&gt;Once I had created a string helper library, I started thinking about all the other string utilities that would be useful. So I started adding all sorts of facilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Computed properties:

&lt;ul&gt;
&lt;li&gt;length (why should the length of a string be called count - that makes no sense)&lt;/li&gt;
&lt;li&gt;words&lt;/li&gt;
&lt;li&gt;lines&lt;/li&gt;
&lt;li&gt;word count&lt;/li&gt;
&lt;li&gt;line count&lt;/li&gt;
&lt;li&gt;title case&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Encoding:

&lt;ul&gt;
&lt;li&gt;URL encoding &amp;amp; decoding for queries or forms&lt;/li&gt;
&lt;li&gt;base64 encoding &amp;amp; decoding&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Trim:

&lt;ul&gt;
&lt;li&gt;trim&lt;/li&gt;
&lt;li&gt;trim left&lt;/li&gt;
&lt;li&gt;trim right&lt;/li&gt;
&lt;li&gt;trim using extra characters&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Pad:

&lt;ul&gt;
&lt;li&gt;pad left&lt;/li&gt;
&lt;li&gt;pad right&lt;/li&gt;
&lt;li&gt;with default space or specified other character&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;rsquo;s as far as I have got so far, but I am hoping for some community involvement that will expand or edit this library to make it more broadly applicable.&lt;/p&gt;

&lt;h2 id=&#34;open-source&#34;&gt;Open Source&lt;/h2&gt;

&lt;p&gt;I have never created an open source project before and I have rarely contributed to open source. But I have now published this library on GitHub under an MIT license. Please check it out at &lt;a href=&#34;https://github.com/trozware/swift-strings-helper&#34;&gt;https://github.com/trozware/swift-strings-helper&lt;/a&gt;. The GitHub repo contains an Xcode project with all the source files, plus the targets to build frameworks for macOS or iOS, and a playground as documentation and to test it all out.&lt;/p&gt;

&lt;p&gt;I would love to get as many stars as possible and it would be fantastic if anyone wanted to log an issue or contribute directly. As someone who finds the whole open source world rather intimidating, I would like to assure everyone that there will be no flaming and no shooting down of ANY ideas. I look forward to hearing from you.&lt;/p&gt;

&lt;p&gt;I am sure there are other Swift libraries out there dedicated to solving the same problems, but I hope that mine can prove useful to some. And if you just want to use it without contributing, feel free. The usage instructions are all in the ReadMe on the GitHub page.&lt;/p&gt;</description>
</item>
    
    <item>
<title>Functional Programming in Swift</title>
<link>https://troz.net/post/2018/functional-programming/</link>
<pubDate>Thu, 14 Jun 2018 14:18:53 +1000</pubDate>
      
      <guid>https://troz.net/post/2018/functional-programming/</guid>
<description>&lt;p&gt;What is Functional Programming and how can we use it in Swift?&lt;/p&gt;

&lt;p&gt;Search online for any definition of functional programming and you will find many different definitions, few of which are practically helpful. I have no claim to be an expert, but as a Swift enthusiast, this is what I have distilled out of the morass.&lt;/p&gt;

&lt;h2 id=&#34;what-is-functional-programming&#34;&gt;What is Functional Programming?&lt;/h2&gt;

&lt;p&gt;Without providing a concrete definition, here are what I see as the 3 main goals of functional programming:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use pure functions where possible&lt;/li&gt;
&lt;li&gt;avoid mutability where possible&lt;/li&gt;
&lt;li&gt;use functions as the basic building blocks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let&amp;rsquo;s go through those one by one and see how they fit into the Swift language.&lt;/p&gt;

&lt;h2 id=&#34;functional-programming-in-swift&#34;&gt;Functional Programming in Swift&lt;/h2&gt;

&lt;p&gt;You can &lt;a href=&#34;https://github.com/trozware/functional-programming&#34;&gt;download a playground containing all these examples from GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;pure-functions&#34;&gt;Pure functions&lt;/h3&gt;

&lt;p&gt;A function is considered pure if it will always produce the same result for the same input, regardless of where it is and what calls it.&lt;/p&gt;

&lt;p&gt;Imagine you are writing a role-playing game and for a given fight, you need to be able to calculate the damage per second caused by a character.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class DamageDealer {

    var damageDone: Int = 0
    var timeTaken: TimeInterval = 0

    func damagePerSecond() -&amp;gt; Double {
        if timeTaken == 0 {
            return 0
        }
        let dps = Double(damageDone) / timeTaken
        if dps &amp;lt; 0 {
            return 0
        }
        return dps
    }

}

let mage = DamageDealer()
mage.damageDone = 32
mage.timeTaken = 10

mage.damagePerSecond()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;damagePerSecond&lt;/code&gt; function takes no parameters but uses the properties of its containing object. This works in this class, but there are 3 big problems:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The function is not transportable - you cannot copy it into another class as it is totally dependent on the structure of the properties in the containing class.&lt;/li&gt;
&lt;li&gt;When calling the function, it is not clear what data it is going to use.&lt;/li&gt;
&lt;li&gt;This function is difficult to test as calling the function with the same parameters (none) will produce different results depending on the setup.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So for a version that uses a pure function, we could replace &lt;code&gt;damagePerSecond()&lt;/code&gt; with this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func damagePerSecondPure(damage: Int, time: TimeInterval) -&amp;gt; Double {
    if time == 0 {
        return 0
    }
    let dps = Double(damage) / time
    if dps &amp;lt; 0 {
        return 0
    }
    return dps
}

mage.damagePerSecondPure(damage: mage.damageDone, time: mage.timeTaken)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Calling the function is now more verbose, but reading the call gives you much more information about what is going to happen. Testing is easy, and the function is completely self-contained so can be copied into any class or struct.&lt;/p&gt;

&lt;h3 id=&#34;avoid-mutability&#34;&gt;Avoid mutability&lt;/h3&gt;

&lt;p&gt;This one has become the poster child of Swift Functional Programming as Swift provides some very convenient ways to avoid mutability.&lt;/p&gt;

&lt;p&gt;The first is &lt;code&gt;let&lt;/code&gt; versus &lt;code&gt;var&lt;/code&gt;. My rule is always to start defining any variable/constant with &lt;code&gt;let&lt;/code&gt; and only changing to &lt;code&gt;var&lt;/code&gt; if the compiler raises an error. In the current versions of Xcode, it will give a warning if you use &lt;code&gt;var&lt;/code&gt; unnecessarily which is great, but I still stick to using &lt;code&gt;let&lt;/code&gt; first.&lt;/p&gt;

&lt;p&gt;The most powerful way Swift lets us avoid mutability with Functional Programming is with &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;reduce&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;filter&#34;&gt;Filter&lt;/h4&gt;

&lt;p&gt;Consider this function that checks possible player names:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func checkPlayerNames(names: [String]) -&amp;gt; [String] {
    var validNames: [String] = []

    for name in names {
        if name.count &amp;gt; 3 &amp;amp;&amp;amp; !name.contains(&amp;quot; &amp;quot;) {
            validNames.append(name)
        }
    }

    return validNames
}

let allNames = [ &amp;quot;Woody&amp;quot;, &amp;quot;Rex&amp;quot;, &amp;quot;Slinky&amp;quot;, &amp;quot;Buzz Lightyear&amp;quot;, &amp;quot;Hamm&amp;quot; ]
let checkedNames = checkPlayerNames(names: allNames)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Only names with more than 3 characters and no spaces are considered valid. So this function creates an empty array and then loops through each member of the supplied array and appends any valid names to the new array before returning it.&lt;/p&gt;

&lt;p&gt;This function is a pure function and it works as expected. But the &lt;code&gt;validNames&lt;/code&gt; array is mutable and there is no need for it to be.&lt;/p&gt;

&lt;p&gt;Converting this to avoid mutability, we get:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func checkPlayerNamesUsingFilter(names: [String]) -&amp;gt; [String] {
    let validNames = names.filter { name in
        name.count &amp;gt; 3 &amp;amp;&amp;amp; !name.contains(&amp;quot; &amp;quot;)
    }
    return validNames
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside the &lt;code&gt;filter&lt;/code&gt; closure delimited by the curly braces after the word &lt;code&gt;filter&lt;/code&gt;, (more about closures below), the element in the array being evaluated is stored in the &lt;code&gt;name&lt;/code&gt; constant. The checks are done and this implicitly returns a &lt;code&gt;Bool&lt;/code&gt; - true if the checks pass, false if they do not. If the closure returns true, the name is valid and will be part of the validNames array.&lt;/p&gt;

&lt;p&gt;And if you really want to be concise:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func checkPlayerNamesUsingFilterShort(names: [String]) -&amp;gt; [String] {
    return names.filter { $0.count &amp;gt; 3 &amp;amp;&amp;amp; !$0.contains(&amp;quot; &amp;quot;) }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I recommend the first method even if it is a bit more verbose. Storing the result in a constant before returning it makes debugging much easier. Using $0 instead of using a named parameter is convenient, but I prefer not to do this unless the closure is very simple.&lt;/p&gt;

&lt;h4 id=&#34;map&#34;&gt;Map&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;filter&lt;/code&gt; takes an array of objects and returns a sub-array containing every element which returned true for the checks inside the filter body.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;map&lt;/code&gt; changes the elements in an array and can return an array of the same type or an array of different types.&lt;/p&gt;

&lt;p&gt;Here is a function to square every integer in an array in the old style, using a mutable array to accumulate the result:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func squareNumbers(_ numbers: [Int]) -&amp;gt; [Int] {
    var squares: [Int] = []

    for number in numbers {
        squares.append(number * number)
    }

    return squares
}

let numbers = [ 1, 2, 3, 4, 5, 6 ]
squareNumbers(numbers)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And doing the same thing using &lt;code&gt;map&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func squareNumbersUsingMap(_ numbers: [Int]) -&amp;gt; [Int] {
    let squares = numbers.map { $0 * $0 }
    return squares
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, the type of the data did not change: integers went in, integers came out.
But &lt;code&gt;map&lt;/code&gt; can change the type as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func squareRoots(_ numbers: [Int]) -&amp;gt; [Double] {
    let roots = numbers.map { number in
        sqrt(Double(number))
    }
    return roots
}

squareRoots(numbers)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And there is a final twist to &lt;code&gt;map&lt;/code&gt; that used to be called &lt;code&gt;flatMap&lt;/code&gt; but is now called &lt;code&gt;compactMap&lt;/code&gt; and that allows us to get rid of optionals as we map through an array.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func convertStringsToInts(_ strings: [String]) -&amp;gt; [Int] {
    let ints = strings.compactMap { return Int($0) }
    return ints
}

let strings = [ &amp;quot;1&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;0.34&amp;quot;, &amp;quot;65&amp;quot;, &amp;quot;-93&amp;quot;, &amp;quot;4e8&amp;quot; ]
convertStringsToInts(strings)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The conversion of &lt;code&gt;String&lt;/code&gt; to &lt;code&gt;Int&lt;/code&gt; may fail and so returns an optional. If this function had used &lt;code&gt;map&lt;/code&gt; instead of &lt;code&gt;compactMap&lt;/code&gt;, the result would have been an array of optional Ints: &lt;code&gt;[Int?]&lt;/code&gt;. By using &lt;code&gt;compactMap&lt;/code&gt;, every &lt;code&gt;nil&lt;/code&gt; value was dropped and only valid integers are included.&lt;/p&gt;

&lt;h4 id=&#34;reduce&#34;&gt;Reduce&lt;/h4&gt;

&lt;p&gt;The final tool in the immutability toolbox is &lt;code&gt;reduce&lt;/code&gt; and this is one that took me a while to wrap my head around.&lt;/p&gt;

&lt;p&gt;Imagine that you wanted to add up all the integers in an array. Here is a way to do it using a mutable variable and a loop:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func sumNumbers(_ numbers: [Int]) -&amp;gt; Int {
    var total = 0

    for num in numbers {
        total += num
    }

    return total
}

let numbers = [ 1, 2, 3, 4, 5, 6 ]
sumNumbers(numbers)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can&amp;rsquo;t use &lt;code&gt;filter&lt;/code&gt; or &lt;code&gt;map&lt;/code&gt; here because I want to end up with a single value after applying some logic to every item in the array. So here is where I use &lt;code&gt;reduce&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func sumNumbersUsingReduce(_ numbers: [Int]) -&amp;gt; Int {

    let total = numbers.reduce(0) { (cumulativeTotal, nextValue) in
        return cumulativeTotal + nextValue
    }
    return total
}

sumNumbersUsingReduce(numbers)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;reduce&lt;/code&gt; function takes 2 parameters. The first is the starting value - in this case it is zero. The second paramter is a function (I am using a closure) this in turn takes 2 parameters and here is where it gets complicated. Inside the closure function, the 2 parameters are the current result and the next value from the loop. And what you return from this closure is going to be the new cumulative value which will either be fed back into the loop, or returned as the final result. The first time through the loop, the first parameter will be the initial value as set in the reduce function call.&lt;/p&gt;

&lt;p&gt;To see how this happens, here is a version sprinkled with &lt;code&gt;print&lt;/code&gt; statements showing what happens each time through the loop:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func sumNumbersReduceDebug(_ numbers: [Int]) -&amp;gt; Int {
    let total = numbers.reduce(0) { (cumulativeTotal, nextValue) in
        print(&amp;quot;cumulativeTotal = \(cumulativeTotal)&amp;quot;)
        print(&amp;quot;nextValue = \(nextValue)&amp;quot;)
        print(&amp;quot;about to return \(cumulativeTotal) + \(nextValue) = \(cumulativeTotal + nextValue) which will become the next culmulative or the final value&amp;quot;)

        return cumulativeTotal + nextValue
    }
    print(&amp;quot;final result = \(total)&amp;quot;)
    return total
}

let shortNumbers = [ 5, 3, 8 ]

sumNumbersReduceDebug(shortNumbers)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This produces a log showing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;cumulativeTotal = 0
nextValue = 5
about to return 0 + 5 = 5 which will become the next culmulative or the final value
cumulativeTotal = 5
nextValue = 3
about to return 5 + 3 = 8 which will become the next culmulative or the final value
cumulativeTotal = 8
nextValue = 8
about to return 8 + 8 = 16 which will become the next culmulative or the final value
final result = 16
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;using-functions-as-building-blocks&#34;&gt;Using functions as building blocks&lt;/h3&gt;

&lt;p&gt;This one is more a matter of style than of any particular programming technique. Basically, keep each function small and break your code into small chunks with obvious naming. This makes your code easier to read, test and debug and it beomes vastly more reusable.&lt;/p&gt;

&lt;p&gt;Consider this totally made-up function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func configureDisplay(for userId: String?) {
    guard let userId = userId else {
        showLoginScreen()
        return
    }

    displayUserData(for: userId)
    let userType = getPermissions(for: userId)

    populateMenus(for: userType)
    loadInitialData(for: userId)

    playSound(.welcome)
}

configureDisplay(for: &amp;quot;abc123&amp;quot;)
configureDisplay(for: nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Is it easy to read?
Can you work out what it does? Now imagine all that functionality in a single huge function - would that be as good to use?&lt;/p&gt;

&lt;p&gt;As a way of encouraging shorter functions, which leads inevitably to this sort of structured code, I strongly recommend using SwiftLint to check your code. I wrote a &lt;a href=&#34;https://troz.net/post/2018/swiftlint/&#34;&gt;post about this&lt;/a&gt; a while ago which you might find useful.&lt;/p&gt;

&lt;h4 id=&#34;naming&#34;&gt;Naming&lt;/h4&gt;

&lt;p&gt;The other key thing to mention and it is a point that Apple makes very strongly, is to name your functions and their parameters so as to make them as readable as possible from the calling site. You write a function once, but you most likely call it multiple times, so it is the calling site that needs to be really easy to read.&lt;/p&gt;

&lt;p&gt;Returning to the game example, here is a dummy function to show damage caused to a target:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func displayDamage(damage: Int, target: String) {}

displayDamage(damage: 31, target: &amp;quot;Ogre&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is nothing really wrong with the function, but calling it is a bit clunky and doesn&amp;rsquo;t read well with the repeated use of the word &amp;lsquo;damage&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;What about this version?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func display(damage: Int, doneTo target: String) {}

display(damage: 42, doneTo: &amp;quot;Wolf&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are no repeated words in the caller and by using two labels for the second parameter, the calling site can read almost like a sentence, but inside the function, &lt;code&gt;target&lt;/code&gt; is still a more logical name.&lt;/p&gt;

&lt;p&gt;A third alternative is to use an un-named parameter if the naming logic is implicit in the function name itself:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func displayDamage(_ damage: Int, doneTo target: String) {}

displayDamage(12, doneTo: &amp;quot;Orc&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;closures&#34;&gt;Closures&lt;/h2&gt;

&lt;p&gt;As promised above, a very quick explanation of closures, which really deserve their own post&amp;hellip;&lt;/p&gt;

&lt;p&gt;In Swift, as in many languages, functions can be passed as parameters to other functions. As an example, I have set up 2 functions to perform a simple calculation on a given integer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func cube(_ number: Int) -&amp;gt; Int {
    return number * number * number
}
cube(3)

func square(_ number: Int) -&amp;gt; Int {
    return number * number
}
square(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now imagine that you wanted to create a more general function that could call either one of these functions with any number:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func doCalculation(_ number: Int, calculation: (Int) -&amp;gt; Int) -&amp;gt; Int {
    return calculation(number)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;doCalculation&lt;/code&gt; takes 2 parameters. The first one is easy - it is just an integer. The second one is weird! For every parameter of a function, you have to supply the type of that parameter. Usually this is quite straight-forward: Int, String, MyCustomClass etc. But what is the &lt;code&gt;type&lt;/code&gt; of a function? Option-clicking on the word &lt;code&gt;cube&lt;/code&gt; in my function definition, I see this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/FunctionType.png&#34; alt=&#34;Function type&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And ignoring the parameter labels, this basically provides the function type: Int inside parentheses for the input, then the arrow, then Int again for the return type. So the type definition for the &lt;code&gt;cube&lt;/code&gt; function is &lt;code&gt;(Int) -&amp;gt; Int&lt;/code&gt;. And when I define the type for the calculation parameter in the &lt;code&gt;doCalculation&lt;/code&gt; function, this is exactly what I put. The last part of the function definition is specifiying the overall return type as an Int.&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;cube&lt;/code&gt; and &lt;code&gt;square&lt;/code&gt; functions inside &lt;code&gt;doCalculation&lt;/code&gt; works like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;doCalculation(7, calculation: square)
doCalculation(4, calculation: cube)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what if I didn&amp;rsquo;t want to define all the functions I might call in advance? Then I can send the function body to the &lt;code&gt;doCalculation&lt;/code&gt; function instead of using a pre-built function. This way of using a function inside another function is referred to as a closure.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;doCalculation(6, calculation: { number in
    return number * 12
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;doCalculation&lt;/code&gt; function in unchanged, but instead of passing it a reference to a function, I am directly passing it the instructions it should use to get the result. As with any function, the instructions are contained within a set of curly braces. The input to this function is listed after the opening curly brace followed by the keyword &lt;code&gt;in&lt;/code&gt;. Then the function body does whatever it needs to and returns the result.&lt;/p&gt;

&lt;p&gt;You may have heard the term &lt;code&gt;trailing closure&lt;/code&gt;. This refers to a function where the last parameter is a function. If that function is called using a closure, there is a short-hand way of writing this, omitting the closure&amp;rsquo;s parameter name and moving the closing parenthesis to before the opening curly brace.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;doCalculation(16) { number in
    return number % 3
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;reduce&lt;/code&gt; functions I showed above, this is the way their logic was supplied but here is how the filter example would look without using a closure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func checkName(_ name: String) -&amp;gt; Bool {
    return name.count &amp;gt; 3 &amp;amp;&amp;amp; !name.contains(&amp;quot; &amp;quot;)
}

func checkPlayerNamesUsingFunction(names: [String]) -&amp;gt; [String] {
    let validNames = names.filter(checkName)
    return validNames
}

let allNames = [ &amp;quot;Woody&amp;quot;, &amp;quot;Rex&amp;quot;, &amp;quot;Slinky&amp;quot;, &amp;quot;Buzz Lightyear&amp;quot;, &amp;quot;Hamm&amp;quot; ]
let checkedNames = checkPlayerNamesUsingFunction(names: allNames)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which methods you use are up to you - they all work. If you have a function that will be called in many different places, maybe it makes more sense to define it once and pass around a reference to that function. If not, a closure has the advantage that it keeps everything together. There is more to closures, particularly to do with variable scope, but I think this post has gone on long enough already&amp;hellip;. maybe next time.&lt;/p&gt;</description>
</item>
    
    <item>
<title>World Time in Words iOS Update</title>
<link>https://troz.net/post/2018/world-time-in-words-ios-update/</link>
<pubDate>Thu, 14 Jun 2018 10:41:46 +1000</pubDate>
      
      <guid>https://troz.net/post/2018/world-time-in-words-ios-update/</guid>
<description>&lt;p&gt;Its been a long time since the last update to Time In Words for iOS but after prompting by Apple (&lt;em&gt;update or we will remove it from the App Store&lt;/em&gt;), I finally did it. I was never really happy with the last design of Time in Words for iOS, particularly for the iPad, so this was a good opportunity to do a complete re-design, bringing the app more into alignment with its Mac counterpart. And it got a new name to match its new direction and is now called World Time in Words.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://itunes.apple.com/app/time-in-words/id498403851&#34;&gt;World Time in Words v 5.0&lt;/a&gt; is available from the App Store.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In 2015, I released &lt;a href=&#34;https://troz.net/post/2015/time-in-words-4.0/&#34;&gt;Time In Words v 4.0&lt;/a&gt; for iOS. This was a big change as I had dropped the original QlockTwo concept and switched the emphasis to world time conversions that would be easy to read and understand. This bit worked out well, but the paging interface was not a great success - it made it too tedious to find the zone you were interested in.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://troz.net/time-in-words-for-mac/&#34;&gt;Mac version&lt;/a&gt; is a menu bar app that shows the selected time zones as separate menu items. iOS apps don&amp;rsquo;t have menus, but the closest thing to this is a table, so that is what I went with.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/WTiW-iOS.jpg&#34; alt=&#34;Basic display&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As before, you can add, remove or re-order the time zones and the top three zones can be shown in your Today widgets.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/WTiW-iOS-1.jpg&#34; alt=&#34;Edit zones&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/WTiW-iOS-4.jpg&#34; alt=&#34;Today widget&#34; /&gt;&lt;/p&gt;

&lt;p&gt;But the feature that I use most in the Mac app is &amp;ldquo;What time will it be when&amp;hellip;&amp;rdquo;. In the iOS app, for reasons of space, the button is labelled &amp;ldquo;What time will it be?&amp;rdquo; but the functionality is the same: drag the slider to adjust the hour in your local time zone and see what that hour will be in your selected world zones. This is incredibly useful when you have family, friends and colleagues all over the world and really don&amp;rsquo;t want to call them at the wrong time of day.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/WTiW-iOS-2.jpg&#34; alt=&#34;What time will it be&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The iPad version of the app is identical at this stage, but I am thinking of adjusting the interface so as to take advantage of the increased real estate. If other work doesn&amp;rsquo;t get in the way, this may happen&amp;hellip;&lt;/p&gt;</description>
</item>
    
    <item>
<title>Privacy Policy</title>
<link>https://troz.net/post/2018/privacy-policy/</link>
<pubDate>Sat, 26 May 2018 09:51:56 +1000</pubDate>
      
      <guid>https://troz.net/post/2018/privacy-policy/</guid>
<description>&lt;p&gt;TL;DR: I don&amp;rsquo;t track you either on my web site or through my apps. If you want to contact me, please do so but I will not initiate any contacts.&lt;/p&gt;

&lt;p&gt;As anyone who gets email would realise by now, the EU has introduced a &lt;a href=&#34;https://www.eugdpr.org&#34;&gt;General Data Protection Regulation&lt;/a&gt; designed to enhance online privacy. You will have been getting lots of emails announcing new privacy policies or asking you to opt-in to existing arrangements.&lt;/p&gt;

&lt;p&gt;So here is my version of those emails (which you will not get by email because I do not store any user data):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;None of my apps store data off your device.&lt;/li&gt;
&lt;li&gt;I do not have any user data except for data specifically sent to me via web forms, direct email or in-app email.&lt;/li&gt;
&lt;li&gt;If you have signed up to beta test one of my apps, you did give me your email address. No tests are currently on-going, but please contact me if you would rather I removed you from any future beta tests.&lt;/li&gt;
&lt;li&gt;My web sites are now totally free of trackers and analytics software.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of my apps have a &amp;ldquo;Contact the Developer&amp;rdquo; button that creates an email that I will answer. If you do not want me to have your name and email address, do not use these buttons.&lt;/p&gt;

&lt;p&gt;My web site has a &lt;a href=&#34;http://localhost:1313/contact/&#34;&gt;contact page&lt;/a&gt; - if you use it, I will see your name and email address and I will respond. Again, if you do not want me to have this data, do not use this page.&lt;/p&gt;

&lt;p&gt;Since I no longer have any analytics, I would really appreciate hearing if you find any of my posts useful or interesting.&lt;/p&gt;</description>
</item>
    
    <item>
<title>App Updates</title>
<link>https://troz.net/post/2018/app-updates/</link>
<pubDate>Sat, 26 May 2018 09:22:57 +1000</pubDate>
      
      <guid>https://troz.net/post/2018/app-updates/</guid>
<description>&lt;p&gt;Just a quick post to let you know about some recent app updates&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;man-reader&#34;&gt;Man Reader&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://itunes.apple.com/app/man-reader/id522583774?mt=12&#34;&gt;Man Reader v 1.10&lt;/a&gt; was released on 11 May 2018.&lt;/p&gt;

&lt;p&gt;I had to update &lt;a href=&#34;https://troz.net/manreader/&#34;&gt;Man Reader&lt;/a&gt; in November 2017 because of a really strange &amp;ldquo;feature&amp;rdquo; that arrived with macOS High Sierra. Man Reader displays the man pages as HTML which allows the tabs and internal links to work using anchor tags. These had worked for years, but under High Sierra, they just stopped working.&lt;/p&gt;

&lt;p&gt;I eventually discovered that it was because I was loading the text directly into the WebView using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;[self.web.mainFrame loadHTMLString:manText baseURL:nil];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With no baseURL, the anchor links were all defaulting to &lt;code&gt;about:blank&lt;/code&gt; and going nowhere. The solution was to save the text to a temporary file and then load using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;NSURLRequest *request = [NSURLRequest requestWithURL: tempFile];
[self.web.mainFrame loadRequest: request];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Needless to say, this took me ages to work out, including a lengthy excursion into using &lt;code&gt;WKWebView&lt;/code&gt; to see if the more modern web view would solve the problem.&lt;/p&gt;

&lt;p&gt;The second update (May 2018) was in response to a crash report from a user. I had great difficulty tracking this one down and even now, I cannot see how it can have happened, but it was in relation to the utility apps that are displayed in the toolbar.&lt;/p&gt;

&lt;p&gt;For each app, Man Reader checks to see if the app bundle exists, then it checks for a bundle identifier. It appears that this can come back as nil which I had not realised. And trying to insert an item with a identifier of &lt;code&gt;nil&lt;/code&gt; into the toolbar caused a crash.&lt;/p&gt;

&lt;p&gt;As you can see from the code, ManReader is written in Objective-C. Going back to Objective-C from Swift is painful! And I know that this crash could not have happened if the app had been written in Swift as the identifier would have been an optional and I would have been forced to check that it was not nil before using.&lt;/p&gt;

&lt;p&gt;On the plus side, Objective-C apps are tiny in comparison to Swift apps. And the Mac App Store review process set a new record for me. I submitted the app at 10:58 am and it was on sale at 12:03 pm the same day - 66 minutes from start to finish.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;sequenza-vii&#34;&gt;Sequenza VII&lt;/h2&gt;

&lt;p&gt;The other app that I updated recently is &lt;a href=&#34;https://itunes.apple.com/us/app/sequenza-vii/id730234638?mt=8&amp;amp;uo=4&#34;&gt;Sequenza VII&lt;/a&gt;. Version 1.2 was released on 23 April 2018.&lt;/p&gt;

&lt;p&gt;This is an app with a very limited audience - specifically oboe players who want to learn to play Berio&amp;rsquo;s weird music. However Apple sent me a notice saying that as it hadn&amp;rsquo;t been updated for ages, it would be removed from the store within 30 days unless I did something.&lt;/p&gt;

&lt;p&gt;Updating it to use the iPhone X display was surprisingly difficult. I set the minimum system version to 11.0 and changed the storyboards to use the latest Xcode but the horns on either side of the notch were still being left blank. In the end, the trick I found was to create a new Launch storyboard - that seemed to fool the system into re-considering all the layouts.&lt;/p&gt;</description>
</item>
    
    <item>
<title>Wow Stats</title>
<link>https://troz.net/wow-stats/</link>
<pubDate>Sat, 31 Mar 2018 11:43:03 +1000</pubDate>
      
      <guid>https://troz.net/wow-stats/</guid>
<description>

&lt;h1 id=&#34;wow-stats&#34;&gt;WoW Stats&lt;/h1&gt;

&lt;h3 id=&#34;do-you-play-world-of-warcraft-4&#34;&gt;Do you play &lt;a href=&#34;https://worldofwarcraft.com/&#34;&gt;World of Warcraft&lt;/a&gt;?&lt;/h3&gt;

&lt;p&gt;Have you ever agonised over a new piece of gear - are those stats better or worse for my class and specialization?&lt;/p&gt;

&lt;p&gt;Is your computer festooned with sticky notes reminding you that your prot pally needs haste over mastery but the enhancement shaman needs agility?&lt;/p&gt;

&lt;p&gt;Get rid of the notes and use the &lt;a href=&#34;https://itunes.apple.com/app/wow-stats/id1364247768&#34;&gt;WoW Stats&lt;/a&gt; app instead.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/app/wow-stats/id1364247768&#34;&gt;&lt;img src=&#34;https://troz.net/icons/wow-stats128.png&#34; alt=&#34;WoW Stats in the App Store&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Data comes from &lt;a href=&#34;http://www.noxxic.com/wow/&#34;&gt;Noxxic&lt;/a&gt; and is updated automatically with each new patch.&lt;/p&gt;

&lt;p&gt;And you can follow the direct links to the pages for your class and spec on &lt;a href=&#34;http://www.noxxic.com/wow/&#34;&gt;Noxxic&lt;/a&gt; or &lt;a href=&#34;https://www.icy-veins.com/wow/&#34;&gt;Icy Veins&lt;/a&gt; for more info from within the app.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/images/wow-stats.png&#34;&gt;&lt;img src=&#34;https://troz.net/images/wow-stats-small.png&#34; alt=&#34;WoW Stats&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click for a larger image&amp;hellip;&lt;/p&gt;

&lt;p&gt;Yes, my main is a Beast Master Hunter - Axelady on Khaz&amp;rsquo;goroth if anyone wants to say hello. And if you have to ask why a hunter is called Axelady, you haven&amp;rsquo;t been a hunter for as long as I have!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/Axe.png&#34; alt=&#34;Axelady&#34; /&gt;&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Consistent Swift Style</title>
<link>https://troz.net/post/2018/swiftlint/</link>
<pubDate>Sat, 31 Mar 2018 09:35:21 +1000</pubDate>
      
      <guid>https://troz.net/post/2018/swiftlint/</guid>
<description>&lt;ul&gt;
&lt;li&gt;Why is important to style your code?&lt;/li&gt;
&lt;li&gt;How do you decide on a style?&lt;/li&gt;
&lt;li&gt;Is there a way to enforce this style automatically?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-is-style-in-swift&#34;&gt;What is style in Swift?&lt;/h2&gt;

&lt;p&gt;Style applies to writing in any programming language and refers to the way you structure your code.&lt;/p&gt;

&lt;p&gt;For example, how to you arrange braces?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if theValue &amp;lt; 10 {
    // do one thing
} else {
    // do the other thing
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if theValue &amp;lt; 10
{
    // do one thing
}
else
{
    // do the other thing
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or anything in between?&lt;/p&gt;

&lt;p&gt;Do you use camelCase or snake_case?&lt;/p&gt;

&lt;p&gt;Do you always start class names with an uppercase letter?&lt;/p&gt;

&lt;p&gt;And of course there is the Great Debate: tabs or spaces? And how many?&lt;/p&gt;

&lt;h2 id=&#34;why-is-important-to-style-your-code&#34;&gt;Why is important to style your code?&lt;/h2&gt;

&lt;p&gt;You only write code once, but you &amp;amp; others will read it many times.&lt;/p&gt;

&lt;p&gt;As I tell students, in six months time some poor sucker is going to have to read this code, and worse still, that poor sucker might be you, so make it readable.&lt;/p&gt;

&lt;p&gt;There is a cognitive load involved in reading code but you can lighten that load by using consistent patterns that your brain can recognise quickly without having to re-analyse them each time.&lt;/p&gt;

&lt;h2 id=&#34;how-do-you-decide-on-a-style&#34;&gt;How do you decide on a style?&lt;/h2&gt;

&lt;p&gt;Do a search online for &lt;a href=&#34;https://encrypted.google.com/search?hl=en&amp;amp;q=Swift%20style%20guide&#34;&gt;Swift style guide&lt;/a&gt; and you will get numerous results, although you do have to dodge the sites dedicated to Taylor Swift&amp;rsquo;s dress sense! I like the &lt;a href=&#34;https://github.com/raywenderlich/swift-style-guide&#34;&gt;Ray Wenderlich guide&lt;/a&gt; although its emphasis is on styles that read well in print and in web pages. The &lt;a href=&#34;https://github.com/linkedin/swift-style-guide&#34;&gt;LinkedIn guide&lt;/a&gt; is also good. &lt;a href=&#34;https://github.com/github/swift-style-guide&#34;&gt;GitHub&lt;/a&gt; also has a style guide but it hasn&amp;rsquo;t been updated recently. However it contains some good general advice.&lt;/p&gt;

&lt;p&gt;But in the end, you have to decide your own style. The important thing then is to be consistent. I don&amp;rsquo;t care whether you use camelCase or snake_case, tabs or spaces, but if you use a mixture your code will be harder to read, so pick a style and stick to it.&lt;/p&gt;

&lt;h2 id=&#34;is-there-a-way-to-enforce-this-style-automatically&#34;&gt;Is there a way to enforce this style automatically?&lt;/h2&gt;

&lt;p&gt;This is where &lt;a href=&#34;https://github.com/realm/SwiftLint&#34;&gt;SwiftLint&lt;/a&gt; comes into the picture. SwiftLint is a tool that can check your code and look for style violations. While it comes with a default set of rules, you can configure these rules to suit your own style.&lt;/p&gt;

&lt;h3 id=&#34;installing-and-running-swiftlint&#34;&gt;Installing and Running SwiftLint&lt;/h3&gt;

&lt;p&gt;To install SwiftLint, I recommend using &lt;a href=&#34;https://brew.sh&#34;&gt;HomeBrew&lt;/a&gt;. Once you have HomeBrew installed, open Terminal and type &lt;code&gt;brew install swiftlint&lt;/code&gt;. You can update it any time using &lt;code&gt;brew upgrade swiftlint&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can run SwiftLint directly from the Terminal. &lt;code&gt;cd&lt;/code&gt; to the folder containing your Xcode project and type &lt;code&gt;swiftlint&lt;/code&gt;. For a brand new iOS project, you will probably get a result similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Linting Swift files in current working directory
Linting &#39;ViewController.swift&#39; (1/2)
Linting &#39;AppDelegate.swift&#39; (2/2)
ViewController.swift:23: warning: Vertical Whitespace Violation: Limit vertical whitespace to a single empty line. Currently 2. (vertical_whitespace)
ViewController.swift:25: warning: Trailing Newline Violation: Files should have a single trailing newline. (trailing_newline)
AppDelegate.swift:16: warning: Vertical Whitespace Violation: Limit vertical whitespace to a single empty line. Currently 2. (vertical_whitespace)
AppDelegate.swift:44: warning: Vertical Whitespace Violation: Limit vertical whitespace to a single empty line. Currently 2. (vertical_whitespace)
AppDelegate.swift:46: warning: Trailing Newline Violation: Files should have a single trailing newline. (trailing_newline)
AppDelegate.swift:17: warning: Line Length Violation: Line should be 120 characters or less: currently 144 characters (line_length)
AppDelegate.swift:23: error: Line Length Violation: Line should be 120 characters or less: currently 285 characters (line_length)
AppDelegate.swift:24: warning: Line Length Violation: Line should be 120 characters or less: currently 159 characters (line_length)
AppDelegate.swift:28: error: Line Length Violation: Line should be 120 characters or less: currently 218 characters (line_length)
AppDelegate.swift:29: warning: Line Length Violation: Line should be 120 characters or less: currently 141 characters (line_length)
AppDelegate.swift:33: warning: Line Length Violation: Line should be 120 characters or less: currently 155 characters (line_length)
AppDelegate.swift:37: warning: Line Length Violation: Line should be 120 characters or less: currently 194 characters (line_length)
AppDelegate.swift:41: warning: Line Length Violation: Line should be 120 characters or less: currently 128 characters (line_length)
Done linting! Found 13 violations, 2 serious in 2 files.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;I have removed the full path that will be listed for each file just to make this fit better.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;These reports show the file and line number, whether this is an error or a warning, a description of the error and the name of the SwiftLint rule that caused the warning or error.&lt;/p&gt;

&lt;p&gt;You could now go through and fix each of these but there are 2 solutions to make things easier:
Try entering this in the Terminal window: &lt;code&gt;swiftlint autocorrect&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Correcting Swift files in current working directory
Correcting &#39;ViewController.swift&#39; (1/2)
Correcting &#39;AppDelegate.swift&#39; (2/2)
ViewController.swift:22:1 Corrected Vertical Whitespace
ViewController.swift:23 Corrected Trailing Newline
AppDelegate.swift:15:1 Corrected Vertical Whitespace
AppDelegate.swift:43:1 Corrected Vertical Whitespace
AppDelegate.swift:43 Corrected Trailing Newline
Done correcting 2 files!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now if you run &lt;code&gt;swiftlint&lt;/code&gt; again you will only get &lt;code&gt;Done linting! Found 8 violations, 2 serious in 2 files.&lt;/code&gt; and all the remaining issues are for &lt;code&gt;Line Length Violation&lt;/code&gt; This shows that autocorrect cannot fix everything and while it is good on spacing, it has trouble with more complex issues. But it is still worth doing as it can do a lot of the tedious fixes that creep into Xcode projects.&lt;/p&gt;

&lt;h3 id=&#34;incorporating-swiftlint-into-xcode&#34;&gt;Incorporating SwiftLint into Xcode&lt;/h3&gt;

&lt;p&gt;The next thing to do to make your life easier is to add SwiftLint to your Xcode project so that it can run automatically whenever you do a build.&lt;/p&gt;

&lt;p&gt;Open your project in Xcode and select the project itself at the top of the Navigator on the left. Select the target for the main app and click the Build Phases tab along the top. Click the + button at the top left of the existing build phases and choose &amp;lsquo;New Run Script Phase&amp;rsquo;. Expand the newly added phase and paste in the following script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if which swiftlint &amp;gt;/dev/null; then
  swiftlint autocorrect
  swiftlint
else
  echo &amp;quot;warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your Xcode window should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/images/SwiftLineRunScript.png&#34;&gt;&lt;img src=&#34;https://troz.net/images/SwiftLineRunScript.png&#34; alt=&#34;SwiftLint Run Script phase&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you think this looks like it is running SwiftLint twice, you are correct. The first time through it corrects what it can and the second pass reports all remaining issues. This is still faster than manually correcting the easy stuff. So now you will see any violations in the Xcode issue navigator when you do a build and you can click the entry to go directly to the code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/IssuesNavigator.png&#34; alt=&#34;SwiftLint errors &amp;amp; warnings in Xcode issues navigator&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;configuring-swiftlint&#34;&gt;Configuring SwiftLint&lt;/h3&gt;

&lt;p&gt;Now you are all set to SwiftLint all your code, but how do you decide what styles SwiftLint should enforce? Go back to Terminal, make the Terminal window as wide as possible and run &lt;code&gt;swiftlint rules&lt;/code&gt; which will return a table like this (click to see full-sized image):&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/images/swiftlint_rules.png&#34;&gt;&lt;img src=&#34;https://troz.net/images/swiftlint_rules.png&#34; alt=&#34;SwiftLint Rules&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For details on what each rule does, check out the entries in &lt;a href=&#34;https://github.com/realm/SwiftLint/blob/master/Rules.md&#34;&gt;Rules.md&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As an example, look at the rules for line_length:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+------------------------------------------+--------+-------------+------------------------+-------------+---------------------+
| identifier                               | opt-in | correctable | enabled in your config | kind        | configuration       |
+------------------------------------------+--------+-------------+------------------------+-------------+---------------------+
| line_length                              | no     | no          | yes                    | metrics     | warning: 120, er... |
+------------------------------------------+--------+-------------+------------------------+-------------+---------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And by making my Terminal window full width, I can see the configuration column contains &lt;code&gt;warning: 120, error: 200, ignores urls: false, ignores function declarations: false, ignores comments: false&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The rule name (identifier) is line_length - this is what appears in the issue navigator or Terminal.&lt;/li&gt;
&lt;li&gt;It is not an opt-in rule, meaning that it is enabled by default.&lt;/li&gt;
&lt;li&gt;It is not correctable by autocorrect.&lt;/li&gt;
&lt;li&gt;It is enabled in this configuration.&lt;/li&gt;
&lt;li&gt;And then comes the configuration:

&lt;ul&gt;
&lt;li&gt;a line of more than 120 characters will generate a warning&lt;/li&gt;
&lt;li&gt;a line with more than 200 characters will generate an error and stop the build&lt;/li&gt;
&lt;li&gt;this rule will not ignore URLs, function declarations or comments&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To set your own configurations, you need to create a &lt;code&gt;.swiftlint.yml&lt;/code&gt; file in the same folder as your Xcode project. The leading period makes the file invisible, so you will need to create and edit it using Terminal.&lt;/p&gt;

&lt;p&gt;In the Terminal, &lt;code&gt;cd&lt;/code&gt; to the folder containing your Xcode project file and run &lt;code&gt;touch .swiftlint.yml&lt;/code&gt; to create the invisible file. You can edit the file in Terminal using &lt;code&gt;nano&lt;/code&gt;, &lt;code&gt;vim&lt;/code&gt; or whatever you prefer, but you can also open it in any text editor. I prefer to use Atom so I open the file by running this command: &lt;code&gt;atom .swiftlint.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The SwiftLint ReadMe has a section about &lt;a href=&#34;https://github.com/realm/SwiftLint#configuration&#34;&gt;configuration&lt;/a&gt; which shows the format and the various general headings you can use, as well as how to configure an individual rule.&lt;/p&gt;

&lt;p&gt;Here is my .swiftlint.yml file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;disabled_rules: # rule identifiers to exclude from running
included: # paths to include during linting. `--path` is ignored if present. takes precendence over `excluded`.
excluded: # paths to ignore during linting. overridden by `included`.
  - Carthage
  - Pods
opt_in_rules:
  - closure_end_indentation
  - closure_spacing
  - contains_over_first_not_nil
  - empty_count
  - explicit_init
  - fatal_error_message
  - force_unwrapping
  - literal_expression_end_indentation
  - multiline_arguments
  - multiline_parameters
  - operator_usage_whitespace
  - overridden_super_call
  - private_outlet
  - prohibited_super_call
  - trailing_closure
  - unneeded_parentheses_in_closure_argument
function_body_length:
  - 60 # warning
  - 100 # error
line_length:
  - 150 # warning
  - 200 # error
cyclomatic_complexity:
  ignores_case_statements: true
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;No rules are disabled by default.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;included&lt;/code&gt; is blank which means it checks every folder&amp;hellip;&lt;/li&gt;
&lt;li&gt;&amp;hellip; except for the ones listed in the &lt;code&gt;excluded&lt;/code&gt; section.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opt-in-rules&lt;/code&gt;: I went through the list of rules with &lt;code&gt;opt-in&lt;/code&gt; equal to &lt;code&gt;yes&lt;/code&gt; and enabled all I thought useful.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function_body_length&lt;/code&gt; - the default warning length is 40 but I allow myself 60 as that fits on my screen so I can always see the entire function without scrolling.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;line_length&lt;/code&gt; - with a bigger screen, I lengthen both the warning and error lengths.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cyclomatic_complexity&lt;/code&gt; checks for functions that are getting so complex that the compiler might run into trouble. I have this on with the default warning &amp;amp; error limits, but I set it to ignore &lt;code&gt;case&lt;/code&gt; statements as they can often trigger this without really being too complex.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that my .swiftlint.yml file is edited, doing a build uses those settings and for a new iOS project, I am now down to 2 errors and 3 warnings, all due to long lines in AppDelegate.swift.&lt;/p&gt;

&lt;p&gt;The other main way to configure SwiftLint is by disabling specific rules in my code.&lt;/p&gt;

&lt;p&gt;As an example, I have an &lt;code&gt;enum&lt;/code&gt; for direction:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum Direction {
  case up, down, left, right
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I build this, SwiftLint gives a warning:
&lt;code&gt;Identifier Name Violation: Enum element name should be between 3 and 40 characters long: &#39;up&#39; (identifier_name)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This tells me that &lt;code&gt;up&lt;/code&gt; is too short a word to use as an identifier according to the &lt;code&gt;identifier_name&lt;/code&gt; rule. In this case, &lt;code&gt;up&lt;/code&gt; is the obvious identifier to use, so I want SwiftLint to let it pass. But I don&amp;rsquo;t want to check my configuration file, because I want it to catch other short identifier names.&lt;/p&gt;

&lt;p&gt;The solution is to add this comment to my code, before the &lt;code&gt;case&lt;/code&gt; line:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;// swiftlint:disable next identifier_name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This tells SwiftLint to ignore the next &lt;code&gt;identifier_name&lt;/code&gt; warning or error it sees and now my code builds without error.&lt;/p&gt;

&lt;p&gt;Rules can also be disabled or enabled by file. Check out the &lt;a href=&#34;https://github.com/realm/SwiftLint#disable-rules-in-code&#34;&gt;Disable rules in code&lt;/a&gt; section of the SwiftLint ReadMe for more details.&lt;/p&gt;

&lt;h2 id=&#34;what-are-the-benefits&#34;&gt;What are the benefits?&lt;/h2&gt;

&lt;p&gt;For me, SwiftLint enforces a number of good habits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Files are kept relatively short.&lt;/li&gt;
&lt;li&gt;Functions are always small enough to fit on a single screen.&lt;/li&gt;
&lt;li&gt;Variable names &amp;amp; function names cannot be too short and non-descriptive.&lt;/li&gt;
&lt;li&gt;Braces, indentation and white-space are always consistent.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And sometimes the warnings make me think of a better way to do things.&lt;/p&gt;</description>
</item>
    
    <item>
<title>Icon Builder 5</title>
<link>https://troz.net/post/2018/icon-builder-5/</link>
<pubDate>Sun, 18 Feb 2018 10:19:18 +1000</pubDate>
      
      <guid>https://troz.net/post/2018/icon-builder-5/</guid>
<description>&lt;p&gt;&lt;a href=&#34;https://troz.net/icon-builder/&#34;&gt;Icon Builder 5.0&lt;/a&gt; is now available from the &lt;a href=&#34;http://itunes.apple.com/app/icon-builder/id552293482&#34;&gt;Mac App Store&lt;/a&gt;. This is a complete re-write for better compatibility with Apple&amp;rsquo;s latest icon requirements. Read on to see what I have fixed and how&amp;hellip;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;problems&#34;&gt;Problems&lt;/h2&gt;

&lt;p&gt;When I came to create a new iOS app recently, I found out that Icon Builder had fallen behind Apple&amp;rsquo;s requirements in three ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The 1024 x 1024 marketing icon is now supposed to be inside the app&amp;rsquo;s icon set.&lt;/li&gt;
&lt;li&gt;Icon files must have their color profile set to sRGB (P3 is also valid for iOS apps).&lt;/li&gt;
&lt;li&gt;iOS icon files must have no transparent pixels and the alpha channel must be removed from the files.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When I set to work fixing these problems I soon ran into issues with the existing version of Icon Builder which was created 6 years ago.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It was written in Objective-C which I am increasingly finding difficult and un-safe to write.&lt;/li&gt;
&lt;li&gt;The app was written when I was very much a beginner in Mac apps and this is obvious from the code&amp;hellip;&lt;/li&gt;
&lt;li&gt;There was a lot of legacy code left over from previous changes and extensions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I decided that the most interesting thing to do would be to start almost from scratch and re-write the app in Swift using better techniques.&lt;/p&gt;

&lt;h2 id=&#34;the-re-write&#34;&gt;The Re-write&lt;/h2&gt;

&lt;p&gt;Now instead of the Massive View Controller, I have a larger set of small files, each with their own responsibility. Enums and structs dictate the various requirements for the different devices or app types. Other structs deal with creating the images, the folder management and writing out the files. An NSImage extension handles the resizing and reformatting of the images. This is now an app that I would not be ashamed to show anyone, except perhaps for the need to add more unit tests.&lt;/p&gt;

&lt;h2 id=&#34;adding-a-color-profile&#34;&gt;Adding a color profile&lt;/h2&gt;

&lt;p&gt;But then we get to the new features needed. Adding the 1024x1024 icon to the app icon set was easy, especially after the re-factoring. But what about the color profile?&lt;/p&gt;

&lt;p&gt;This was not as easy as I expected - there is no built in command to apply a profile but here is the solution that I finally found:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension NSImage {

  func convertImageTo_sRGB() throws -&amp;gt; Data {
      guard let colorSpace = CGColorSpace(name: CGColorSpace.sRGB),
          let cgi = self.cgImage(forProposedRect: nil,
                                 context: nil,
                                 hints: nil) else {
                                  throw ImageError.cantMakeCgImage
      }

      let ci = CIImage(cgImage: cgi)

      guard let pngData = CIContext().pngRepresentation(of: ci,
                                                        format: kCIFormatRGBA8,
                                                        colorSpace: colorSpace) else {
          throw ImageError.cantConvertToPng
      }
      return pngData
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;This takes the NSImage and converts it to a CGImage, first checking that the appropriate color space exists.&lt;/li&gt;
&lt;li&gt;Then it uses the Core Graphics CGImage to create a Core Image CIImage.&lt;/li&gt;
&lt;li&gt;There is a new API in macOS 10.13 to extract the png data from a CIImage while assigning a color profile.&lt;/li&gt;
&lt;li&gt;This Data can then be written directly to a file and there you have a PNG with an attached color profile.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;transparency&#34;&gt;Transparency&lt;/h2&gt;

&lt;p&gt;Now problems 1 &amp;amp; 2 have been solved. Problem 3 was the most difficult. It turned out to be a two-part problem because an image file can have no transparent pixels but still have an alpha channel in the file data.&lt;/p&gt;

&lt;p&gt;At first, I thought maybe I could just circumvent the whole problem by converting the images to JPEGs which have no transparency or alpha channel. Using the code above, I just changed it to getting the &lt;code&gt;jpegRepresentation&lt;/code&gt; instead and saving with a .jpg file extension.&lt;/p&gt;

&lt;p&gt;While this solved the alpha channel problem, the transparent parts of the icon just went black which was a not a good look.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/Transparent-Jpeg.png&#34; alt=&#34;Transparent image converted to JPEG&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For anyone horrified at my use of force-unwrapping, I never do this in a production app but in a playground, it makes the code shorter and it doesn&amp;rsquo;t really matter if I get a crash there.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;converting-transparent-pixels-to-white&#34;&gt;Converting transparent pixels to white&lt;/h3&gt;

&lt;p&gt;So the first step must be to set the transparent parts of the image to another color. Searching for solutions online, most of the ones I came up with were very slow (processing each pixel) or so complicated that I didn&amp;rsquo;t understand them, and I hate just copy-pasting code that I don&amp;rsquo;t understand at all.&lt;/p&gt;

&lt;p&gt;But eventually I found something that I morphed into this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension NSImage {

    func makeAlphaWhite() -&amp;gt; NSImage {
        guard let imageData = self.tiffRepresentation,
            let imageRep = NSBitmapImageRep(data: imageData),
            let jpegData = imageRep.representation(using: .jpeg, properties: [
                NSBitmapImageRep.PropertyKey.compressionFactor: NSNumber(value: 1.0)
                ]),
            let jpegImage = NSImage(data: jpegData) else {
                return image
        }
        return jpegImage
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It used basically the same trick of converting the image into a JPEG but doing it this way via &lt;code&gt;NSBitmapImageRep&lt;/code&gt; turned the transparent pixels white instead of black. And as you can see, this gave a much better looking image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/MakeAlphaWhite.png&#34; alt=&#34;Transparent portions converted to white&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now I was able to continue with my plans to have JPEGs rule the world! This worked really well in my early tests but then I came to try a Stickers app and the icons didnât work. I couldn&amp;rsquo;t even drag them in manually! Back to the Apple docs and I see that icons must be PNGs.&lt;/p&gt;

&lt;p&gt;When I changed the transparent pixels to white, added the color space and then saved the PNG data, I got an image that looked correct but the file still contained an alpha channel. So I had to come up with a method that re-wrote the PNG data in such a way that it never contained any alpha data at all.&lt;/p&gt;

&lt;h3 id=&#34;removing-the-alpha-channel&#34;&gt;Removing the alpha channel&lt;/h3&gt;

&lt;p&gt;Graphics experts are probably groaning aloud by now, but I did eventually arrive at a solution, however hacky:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension NSImage {

    func convertImageTo_sRGB_noAlpha() throws -&amp;gt; Data {
        guard let colorSpace = CGColorSpace(name: CGColorSpace.sRGB),
            let cgi = self.cgImage(forProposedRect: nil,
                                   context: nil,
                                   hints: nil) else {
                                    throw ImageError.cantMakeCgImage
        }

        let ci = CIImage(cgImage: cgi)
        guard let jpgData = CIContext().jpegRepresentation(of: ci,
                                                           colorSpace: colorSpace) else {
            throw ImageError.cantConvertToJpg
        }
        guard let jpegImage = NSImage(data: jpgData) else {
            throw ImageError.cantConvertToJpgImage
        }
        let pngData = try jpegImage.convertImageTo_sRGB()
        return pngData
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Take the image &lt;strong&gt;after&lt;/strong&gt; changing the transparent pixels to white.&lt;/li&gt;
&lt;li&gt;Convert it to JPEG data with the required color space.&lt;/li&gt;
&lt;li&gt;Convert the JPEG data back to an image - this will contain &lt;strong&gt;NO&lt;/strong&gt; alpha data.&lt;/li&gt;
&lt;li&gt;Use the original routine to convert this JPEG into PNG data with the correct color space.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Running this in the playground looks like this:
&lt;img src=&#34;https://troz.net/images/TransparentPng.png&#34; alt=&#34;Creating non-transparent PNG in playground&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And as you can see from the file info, it results in a file with the correctly assigned color profile and no alpha channel:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/FileInfo.png&#34; alt=&#34;Final result file info&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The double shuffle sounds time-consuming and in-efficient but it really doesn&amp;rsquo;t take long. In my tests, by far the longest part of creating an icon set is opening the file dialog.&lt;/p&gt;

&lt;h2 id=&#34;future-plans&#34;&gt;Future plans&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Add more unit tests.&lt;/li&gt;
&lt;li&gt;Work out how to replace the transparent pixels with a selected color.&lt;/li&gt;
&lt;li&gt;Offer better cropping and image positioning options.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;p&gt;For resizing and cropping images, I use &lt;a href=&#34;https://mattgemmell.com/imagecrop-source-code/&#34;&gt;Matt Gemmell&amp;rsquo;s NSImage+MGCropExtensions&lt;/a&gt; and for further reading, I recommend Apple&amp;rsquo;s Human Interface Guidelines concerning app icons for &lt;a href=&#34;https://developer.apple.com/ios/human-interface-guidelines/icons-and-images/app-icon/&#34;&gt;iOS&lt;/a&gt; and &lt;a href=&#34;https://developer.apple.com/macos/human-interface-guidelines/icons-and-images/app-icon/&#34;&gt;macOS&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: here is Australia we use the spelling &lt;strong&gt;colour&lt;/strong&gt; but for consistency with the code samples, I have used &lt;strong&gt;color&lt;/strong&gt; throughout the text.&lt;/p&gt;
&lt;/blockquote&gt;</description>
</item>
    
    <item>
<title>NCSS 2018</title>
<link>https://troz.net/ncss2018/</link>
<pubDate>Fri, 05 Jan 2018 11:33:35 +1000</pubDate>
      
      <guid>https://troz.net/ncss2018/</guid>
<description>&lt;p&gt;I gave a Masterclass on Swift at the NCSS Summer School 2018 in the University of Sydney on 9th January 2018. This post contains useful links for use in relation to the material covered during my class.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;online-sandboxes&#34;&gt;Online Sandboxes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://eval.weheartswift.com/eval/playground/swift-sandbox&#34;&gt;We â¤ï¸ Swift Sandbox&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://swiftlang.ng.bluemix.net/#/repl&#34;&gt;IBM Swift Sandbox&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/trozware/bc582b9a49feb7bbd3adce8ea049c9d3&#34;&gt;Gist of Code Samples&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/trozware/ncss2018/blob/master/Presentation.pdf&#34;&gt;Slides from Presentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;contact-details&#34;&gt;Contact Details&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Email: &lt;a href=&#34;mailto:sarah@troz.net?subject=NCSS%202018&#34;&gt;sarah@troz.net&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/trozware&#34;&gt;@trozware&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;useful-links&#34;&gt;Useful Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/au/book/swift-programming-language/id881256329?mt=11&#34;&gt;The Swift Programming Language&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://swift.org&#34;&gt;Swift.org&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.raywenderlich.com/132258/top-5-ios-swift-newsletters&#34;&gt;Newsletters&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.raywenderlich.com/category/swift&#34;&gt;Tutorials&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
</item>
    
    <item>
<title>Apps</title>
<link>https://troz.net/apps/</link>
<pubDate>Fri, 22 Dec 2017 17:05:58 +1000</pubDate>
      
      <guid>https://troz.net/apps/</guid>
<description></description>
</item>
    
    <item>
<title>Mark Time</title>
<link>https://troz.net/post/2017/marktime/</link>
<pubDate>Tue, 12 Dec 2017 09:14:07 +1000</pubDate>
      
      <guid>https://troz.net/post/2017/marktime/</guid>
<description>&lt;style&gt;img {width: 300px; } &lt;/style&gt;

&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/us/app/mark-time/id1305580742?mt=8&#34;&gt;Mark Time&lt;/a&gt; is an application for Celestial Navigation that solves the
problem of how to take an accurate time reading to go with each sextant
sighting. Here is how it was developed&amp;hellip;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A day in the life of a software developer - &amp;ldquo;it would be great if there was an
app that did&amp;hellip;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;One of the family is learning celestial navigation and was struggling with the
problem that you either need a partner or more than 2 hands. The key factor is
that you need to record the exact time at the moment when you take your
sighting. And this time has to be in UTC to make your subsequent calculations
work.&lt;/p&gt;

&lt;p&gt;Since this is a very simple app, I decided it would be fun to describe the
development process from first specifications to release in the App Store.&lt;/p&gt;

&lt;h3 id=&#34;the-basic-specs&#34;&gt;The Basic Specs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;tap anywhere on the screen to record the time&lt;/li&gt;
&lt;li&gt;convert the time to Universal Time (UT)&lt;/li&gt;
&lt;li&gt;display that time in a specific format: DD:HH:MM:SS&lt;/li&gt;
&lt;li&gt;store the last 5 tap times&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A &lt;code&gt;UITapGestureRecognizer&lt;/code&gt; over the entire view solved the first requirement.
The native &lt;code&gt;Date&lt;/code&gt; object handles time zone conversions perfectly, and then it
was a matter of configuring a &lt;code&gt;DateFormatter&lt;/code&gt; with a custom format string to
provide the required date display.&lt;/p&gt;

&lt;p&gt;The last 5 times are stored in &lt;code&gt;UserDefaults&lt;/code&gt; and displayed in reverse order so
the most recent is always at the top.&lt;/p&gt;

&lt;h3 id=&#34;ui-considerations&#34;&gt;UI considerations&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;colour scheme must work in bright sunlight&lt;/li&gt;
&lt;li&gt;text should use dynamic sizing so it works if people adjust the text size on
their iPhones&lt;/li&gt;
&lt;li&gt;the UI elements must be out of the way of the new iPhone X system gestures.&lt;/li&gt;
&lt;li&gt;while it will most likely be used on iPhones, allow for iPads as well&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I had done extensive tests of colour schemes when developing my golf scoring app
&lt;a href=&#34;https://troz.net/19th-hole/&#34;&gt;19th Hole&lt;/a&gt;, so I already had the answer to the colours question: dark grey
background with white text.&lt;/p&gt;

&lt;p&gt;Allowing for dynamic type should have been easy - choose a font style e.g. body,
headline, title 1 and set it to adjust automatically. But with a display that is
mainly numeric, the display looked terrible because the numbers in the default
San Francisco are non-proportional. So I switched to Helvetica Neue and watched
for dynamic font size changes manually.&lt;/p&gt;

&lt;p&gt;The iPhone X should be fine since I used the new safe area layout guides.&lt;/p&gt;

&lt;p&gt;For iPad, I didn&amp;rsquo;t make a lot of UI changes since I don&amp;rsquo;t expect it to be used
much, but the display is bigger and probably easier to read.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/MarkTime1.png&#34; alt=&#34;Mark Time&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;refinements&#34;&gt;Refinements&lt;/h3&gt;

&lt;p&gt;As always, once the first few iterations have been through the testing process,
there were a few things that needed changing and then feature creep set in&amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;change the date format to be more readable&lt;/li&gt;
&lt;li&gt;change the basic tap gesture so that it triggers on tap down, not tap up&lt;/li&gt;
&lt;li&gt;add a button to clear all the stored data&lt;/li&gt;
&lt;li&gt;display the current time in UTC and in the same format&lt;/li&gt;
&lt;li&gt;cheat mode - record latitude and longitude for each time so the calculations
can be checked&lt;/li&gt;
&lt;li&gt;change the format for showing the latitude and longitude&lt;/li&gt;
&lt;li&gt;sound &amp;amp; haptics to provide feedback&lt;/li&gt;
&lt;li&gt;settings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The date format was DD:HH:MM:SS so for 12th December at 1:01:46 pm, this would
show 12:13:01:46 which we decided was a bit confusing. One tended to assume the
first section was actually the hours. Under the new scheme, that same date
displays as 12d 13h 01m 46.654s. The extra precision on the seconds was to show
that the time really was changing if you tapped multiple times quickly.&lt;/p&gt;

&lt;p&gt;To make the time record immediately, I removed the &lt;code&gt;UITapGestureRecognizer&lt;/code&gt; and
placed &lt;code&gt;UIButtons&lt;/code&gt; covering all the relevant active areas. They respond on Touch
Down for a much faster reaction.&lt;/p&gt;

&lt;p&gt;Usually, I make a separate View Controller for preferences. This time, because
the app needed access to the standard Settings app for Location services, I
decided to add the app&amp;rsquo;s preferences to the app&amp;rsquo;s page in the Settings app. This
worked really well, and made the app itself smaller and simpler.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/MarkTime3.png&#34; alt=&#34;Mark Time&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In cheat mode, the location is recorded at every tap and then the info button
beside each time shows the details. This needed to handle the permissions
required for accessing the user&amp;rsquo;s location. The latitude and longitude are shown
in decimal format and at first, I also showed them in DMS (degrees, minutes,
seconds) format. I found out that for navigation calculations, they prefer to
see degrees and decimal minutes, no seconds. And rather oddly, this is displayed
something like this: 153Â° 22&amp;rsquo;.84 E&lt;/p&gt;

&lt;p&gt;Sounds and haptics were added, configurable through Settings. The sound was a
nice loud double-beep designed to be clearly audible to tell you when you had
recorded a time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/MarkTime2.png&#34; alt=&#34;Mark Time&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;release&#34;&gt;Release&lt;/h3&gt;

&lt;p&gt;After numerous rounds of TestFlight, I was ready to release. The app was
submitted to iTunes Connect and ready for review on Dec 9, 2017 at 7:36 PM. It
moved into review on Dec 11, 2017 at 8:07 AM and was ready for sale on Dec 11,
2017 at 10:19 AM. So less than 39 hours from start to finish of the review
process for a new app - things have certainly changed!&lt;/p&gt;

&lt;p&gt;The app is free - you can get it from the &lt;a href=&#34;https://itunes.apple.com/us/app/mark-time/id1305580742?mt=8&#34;&gt;iTunes App Store&lt;/a&gt;.&lt;/p&gt;</description>
</item>
    
    <item>
<title>Moving to Hugo</title>
<link>https://troz.net/post/2017/moving-to-hugo/</link>
<pubDate>Wed, 29 Nov 2017 17:42:57 +1000</pubDate>
      
      <guid>https://troz.net/post/2017/moving-to-hugo/</guid>
<description>&lt;p&gt;Yesterday, I came to update my blog: I had a new post in draft form and I wanted
to update the Swift code to version 4. However installing High Sierra had
removed &lt;a href=&#34;https://jekyllrb.com&#34; title=&#34;Jekyll&#34;&gt;Jekyll&lt;/a&gt; which is the site generator that I had been using. I
re-installed Jekyll but found that it had been updated from version 2 to version
3.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;jekyll-problems&#34;&gt;Jekyll Problems&lt;/h2&gt;

&lt;p&gt;Then my problems started: missing dependencies due to the basic Jekyll install
no longer including certain features, and then syntax errors due to changes in
the way things are done, particularly to do with pagination.&lt;/p&gt;

&lt;p&gt;I tried to fix this myself, then thought that maybe the theme I was using had
already solved these issues so I tried re-installing that. It wanted to add
about 25 more gems and then failed to install - sigh - spend some time rolling
that back&amp;hellip;&lt;/p&gt;

&lt;p&gt;At this point I decided that if Jekyll was going to cause me a lot of trouble,
it might be worth looking at an alternative.&lt;/p&gt;

&lt;p&gt;My main criteria were the ability to import my Jekyll site and the ability to
host on &lt;a href=&#34;https://pages.github.com/&#34; title=&#34;GitHub Pages&#34;&gt;GitHub Pages&lt;/a&gt;. After checking out the options, I decided to have a
look at &lt;a href=&#34;https://gohugo.io&#34; title=&#34;Hugo&#34;&gt;Hugo&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;moving-to-hugo&#34;&gt;Moving to Hugo&lt;/h2&gt;

&lt;p&gt;One of the most lauded features of Hugo is speed. I had found with Jekyll that
when I saved an edited page, it took about 5 seconds before the edits could be
reloaded into the browser. Hugo is supposedly fast and does auto reloads.&lt;/p&gt;

&lt;p&gt;Following the &lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34; title=&#34;Hugo Quick Start&#34;&gt;Quick Start&lt;/a&gt; guide, I installed Hugo. Importing my Jekyll site
worked easily and so fast I wasn&amp;rsquo;t sure anything had happened, transferring my
posts to &lt;code&gt;contents/posts&lt;/code&gt; and my other files (status pages, images etc.) to
&lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then the main exercise appeared to be choosing a theme which would provide not
only the visuals but the capabilities of the site.&lt;/p&gt;

&lt;p&gt;So I drew up a list of demands for any theme I chose:&lt;/p&gt;

&lt;h3 id=&#34;must-have-features&#34;&gt;Must Have Features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Responsive&lt;/li&gt;
&lt;li&gt;Blog style:

&lt;ul&gt;
&lt;li&gt;front page with recent posts&lt;/li&gt;
&lt;li&gt;tags&lt;/li&gt;
&lt;li&gt;archive page&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Written using Markdown&lt;/li&gt;
&lt;li&gt;Static pages for apps listing, about, contact etc.&lt;/li&gt;
&lt;li&gt;Syntax highlighting&lt;/li&gt;
&lt;li&gt;Social links&lt;/li&gt;
&lt;li&gt;Google Analytics&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;would-be-nice-features&#34;&gt;Would Be Nice Features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Disqus commenting&lt;/li&gt;
&lt;li&gt;Twitter cards&lt;/li&gt;
&lt;li&gt;JSON Feed&lt;/li&gt;
&lt;li&gt;Searching within the site&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Hugo themes page &lt;a href=&#34;https://themes.gohugo.io&#34;&gt;https://themes.gohugo.io&lt;/a&gt; has themes listed by capabilities,
but no way that I could see to combine a selection of capabilities.&lt;/p&gt;

&lt;p&gt;Some of the features like Google Analytics or Disqus comments, I could probably
add myself using templates from theme that did include them, if the template I
chose did not.&lt;/p&gt;

&lt;p&gt;Conveniently, nearly all these seem to come with an exampleSite folder that
contains the configuration info.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;configuring-a-theme&#34;&gt;Configuring a Theme&lt;/h2&gt;

&lt;p&gt;After testing out several alternatives, I decided to go with &lt;a href=&#34;https://github.com/olOwOlo/hugo-theme-even&#34; title=&#34;Even&#34;&gt;Even&lt;/a&gt; - at
least to start with. I installed the theme and copied the contents of the
example &lt;code&gt;config.toml&lt;/code&gt; to my own &lt;code&gt;config.toml&lt;/code&gt; file and started configuring.&lt;/p&gt;

&lt;p&gt;I wasn&amp;rsquo;t happy with some of the fonts, but soon worked out how to change the CSS
in the theme and then re-build it to apply the changes. And I changed the theme
colour from the default red to &amp;ldquo;Cobalt Blue&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Most of the other changes were done using the &lt;code&gt;config.toml&lt;/code&gt; file. I was able to
set up menus, configure the social media links I wanted to show, set date
formats, set the number of items to show per page and so on.&lt;/p&gt;

&lt;p&gt;I had a couple of more static pages that I wanted to show, so I added their
Markdown files to the content folder.&lt;/p&gt;

&lt;p&gt;One nice feature which I had missed in Jekyll (or at least the way I had it set
up) was the ability to separate blog posts from more static web pages. Each of
my apps has an information/support page that does not accept comments and
doesn&amp;rsquo;t need to be listed in the Archives. By moving these Markdown files from
&lt;code&gt;contents/posts&lt;/code&gt; to &lt;code&gt;contents/pages&lt;/code&gt;, I was able to achieve this.&lt;/p&gt;

&lt;p&gt;Adding Google Analytics and Disqus commenting was as easy as entering my IDs in
the relevant places in the &lt;code&gt;config.toml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;I had to do some editing of my imported posts from Jekyll - mainly getting rid
of references to &lt;code&gt;{{ site.url }}&lt;/code&gt; so that images and internal links would work.
And sometimes I just needed to re-save a file to make Hugo re-evaluate it (there
is probably a command to force a complete re-build if I looked for it.)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;working-out-the-structure&#34;&gt;Working out the Structure&lt;/h2&gt;

&lt;p&gt;One thing that I was puzzled by was what templates the various pages are
generated from.&lt;/p&gt;

&lt;p&gt;The main page is easy enough as the theme folder has a layouts folder with an
&lt;code&gt;index.html&lt;/code&gt; file containing the templating. When a post is displayed, that
looks like it comes from &lt;code&gt;layouts/posts/single.html&lt;/code&gt; while
&lt;code&gt;layouts/posts/summary.html&lt;/code&gt; contains the templating for each entry in the index
page.&lt;/p&gt;

&lt;p&gt;But clicking on the Archives link in the me takes me to &lt;a href=&#34;https://troz.net/post/&#34;&gt;https://troz.net/post/&lt;/a&gt;
and there is no &lt;code&gt;post.html&lt;/code&gt; file in layouts. There is a &lt;code&gt;post&lt;/code&gt; folder, but it
contains the &lt;code&gt;single.html&lt;/code&gt; &amp;amp; &lt;code&gt;summary.html&lt;/code&gt; files described already.&lt;/p&gt;

&lt;p&gt;Delving ever deeper, &lt;code&gt;layouts/_default/section.html&lt;/code&gt; appears to contains the
Archives page template. But how does that relate to the &lt;a href=&#34;https://troz.net/post/&#34;&gt;https://troz.net/post/&lt;/a&gt;
link? And the Tags template is in &lt;code&gt;layouts/_default/terms.html&lt;/code&gt; but appears in
&lt;a href=&#34;https://troz.net/tags/&#34;&gt;https://troz.net/tags/&lt;/a&gt;. Checking the Hugo documentation for creating a theme, I
find the information I need. Hugo has a selection of file paths that it checks
for such templates, and these file paths match some of those. So now I know
where to go to customise further.&lt;/p&gt;

&lt;p&gt;One feature that I really like about the Even theme is the ability to have a
table of contents displayed beside each blog post if your page is wide enough.
It takes the headers in the post and uses them to make the table. I may need to
add or edit the headers in some posts, but I really like this feature.&lt;/p&gt;

&lt;p&gt;And if you want a laugh, test out the 404 page - here is a &lt;a href=&#34;https://troz.net/bad-link/&#34; title=&#34;404&#34;&gt;bad link&lt;/a&gt; - which
generates a random text emoji each time!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;publishing&#34;&gt;Publishing&lt;/h2&gt;

&lt;p&gt;I wanted to use my existing GitHub Pages setup, so I replaced the site files in
my local repository with the new Hugo site files. I generated the static site
files using &lt;code&gt;hugo&lt;/code&gt; in Terminal, then pushed the pages to GitHub. All I had to do
then was change the settings so that GitHub Pages knew my site was coming from
the &lt;code&gt;docs&lt;/code&gt; folder and I was live with the new site.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;So how am I going with my check list?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Responsive - ALMOST, not Hugo&amp;rsquo;s fault&lt;/li&gt;
&lt;li&gt;Blog style - YES&lt;/li&gt;
&lt;li&gt;Written using Markdown - YES&lt;/li&gt;
&lt;li&gt;Static pages for apps listing, about, contact etc. - YES&lt;/li&gt;
&lt;li&gt;Syntax highlighting - YES&lt;/li&gt;
&lt;li&gt;Social links - YES&lt;/li&gt;
&lt;li&gt;Google Analytics - YES&lt;/li&gt;
&lt;li&gt;Disqus commenting - YES&lt;/li&gt;
&lt;li&gt;Twitter cards - NO&lt;/li&gt;
&lt;li&gt;JSON Feed - NO&lt;/li&gt;
&lt;li&gt;Searching within the site - NO&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Hugo generated pages are all responsive and look great on my iPhone, but my
old static page for listing my apps does not look good, so I need to re-design
that.&lt;/p&gt;

&lt;p&gt;Twitter cards - I have found some articles on how to set that up, so it is
possible, but I haven&amp;rsquo;t done it yet.&lt;/p&gt;

&lt;p&gt;JSON Feed is not working. There are themes that apparently have this, but I
haven&amp;rsquo;t yet worked out how to implement it - hopefully later.&lt;/p&gt;

&lt;p&gt;In-site search - this was something I was able to get in my old WordPress site,
but not in Jekyll. There are Hugo themes listed that support search, but they
seem to just give a link to Google or DuckDuckGo. Maybe this can be edited to
restrict it to the site, but I dislike using such searches, so I will not add a
search unless it works internally. One theme I found uses &lt;a href=&#34;https://www.algolia.com&#34; title=&#34;Algolia&#34;&gt;Algolia&lt;/a&gt; to search
the site, so I will investigate that.&lt;/p&gt;

&lt;p&gt;Overall, I am impressed. The transition was relatively easy, especially
considering that I didn&amp;rsquo;t take the time to learn anything about Hugo first, but
just blundered in and tried to work it out on the fly.&lt;/p&gt;

&lt;p&gt;The speed of generating pages and the live reload while developing make Hugo a
pleasure to work with. Now all I have to do is write some interesting posts&amp;hellip;&lt;/p&gt;

&lt;p&gt;And I want to tidy up the URLs, headers and tags for the older pages as well as
investigating Twitter cards, search &amp;amp; JSON Feed.&lt;/p&gt;</description>
</item>
    
    <item>
<title>Marktime</title>
<link>https://troz.net/marktime/</link>
<pubDate>Sun, 26 Nov 2017 14:48:53 +1000</pubDate>
      
      <guid>https://troz.net/marktime/</guid>
<description>&lt;style&gt;img {width: 300px; } &lt;/style&gt;

&lt;p&gt;Mark Time is now available now from the &lt;a href=&#34;https://itunes.apple.com/us/app/mark-time/id1305580742?mt=8&#34;&gt;iTunes App Store&lt;/a&gt; for iPhone and
iPad as an assistant for celestial navigators.&lt;/p&gt;

&lt;p&gt;Mark Time is an application for Celestial Navigation that solves the problem of
how to take an accurate time reading to go with each sextant sighting.&lt;/p&gt;

&lt;p&gt;By simply tapping the screen you can record the exact time UTC as you take your
sight, so you have no chance of making an error with the conversion, and this
time is stored in one of five registers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/MarkTime1.png&#34; alt=&#34;Mark Time&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Very useful when you have an assistant, and ideal for taking readings when you
are on your own.&lt;/p&gt;

&lt;p&gt;As you record a time you hear a confirmation sound and feel a vibration, so
there is no need even to look at the screen. In addition the actual latitude and
longitude at each time can be accessed later to verify your calculations. These
options are all configurable in Settings to suit your own preferences.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/MarkTime2.png&#34; alt=&#34;Mark Time&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Location permissions:&lt;/strong&gt; On startup, the app will request permission to access
your location. This is how the latitude and longitude data is gathered to
provide this data if you wish.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Support:&lt;/strong&gt; If you have any questions about this app, please use the Contact
link above to get in touch.&lt;/p&gt;</description>
</item>
    
    <item>
<title>Contact</title>
<link>https://troz.net/contact/</link>
<pubDate>Sun, 26 Nov 2017 11:22:18 +1000</pubDate>
      
      <guid>https://troz.net/contact/</guid>
<description></description>
</item>
    
    <item>
<title>JSON Parsing in Swift 4</title>
<link>https://troz.net/post/2017/json-parsing-in-swift-4/</link>
<pubDate>Sun, 18 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2017/json-parsing-in-swift-4/</guid>
<description>&lt;p&gt;&lt;strong&gt;Updated:&lt;/strong&gt; 3rd September 2017.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Checked syntax using Xcode 9.0 beta 6.&lt;/li&gt;
&lt;li&gt;Added section on &lt;a href=&#34;#nulls&#34;&gt;allowing for nulls&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Since &lt;strong&gt;JSON&lt;/strong&gt; has become the de facto standard for data transfers around the
internet, there has always been a lot of interest in Swift libraries to parse
JSON into Swift classes or structs. Searching for &amp;ldquo;swift json library&amp;rdquo; on
&lt;a href=&#34;https://github.com/search?q=swift+json+library&#34;&gt;GitHub&lt;/a&gt; discovers &lt;s&gt;77&lt;/s&gt; 86 repositories. So why are there so many? And
what has Swift 4 done to &lt;em&gt;sherlock&lt;/em&gt; them all?&lt;/p&gt;

&lt;p&gt;The problem has always been converting loosely typed JSON to strictly typed
Swift which involves a lot of type casting, checking, optionals etc. Swift has
always provided access to the Objective-C methods for converting JSON to and
from NSData, NSDictionary and NSArray. (These are now called Data, Dictionary
and Array, but those labels are so universal, that I sometimes feel a more
specific nomenclature would be useful. Have you tried doing a search for
&amp;lsquo;Data&amp;rsquo;?)&lt;/p&gt;

&lt;p&gt;For sample data, I am using &lt;a href=&#34;https://jsonplaceholder.typicode.com/users&#34;&gt;https://jsonplaceholder.typicode.com/users&lt;/a&gt; which
returns 10 user objects in this format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;id&amp;quot;: 1,
  &amp;quot;name&amp;quot;: &amp;quot;Leanne Graham&amp;quot;,
  &amp;quot;username&amp;quot;: &amp;quot;Bret&amp;quot;,
  &amp;quot;email&amp;quot;: &amp;quot;Sincere@april.biz&amp;quot;,
  &amp;quot;address&amp;quot;: {
    &amp;quot;street&amp;quot;: &amp;quot;Kulas Light&amp;quot;,
    &amp;quot;suite&amp;quot;: &amp;quot;Apt. 556&amp;quot;,
    &amp;quot;city&amp;quot;: &amp;quot;Gwenborough&amp;quot;,
    &amp;quot;zipcode&amp;quot;: &amp;quot;92998-3874&amp;quot;,
    &amp;quot;geo&amp;quot;: {
      &amp;quot;lat&amp;quot;: &amp;quot;-37.3159&amp;quot;,
      &amp;quot;lng&amp;quot;: &amp;quot;81.1496&amp;quot;
    }
  },
  &amp;quot;phone&amp;quot;: &amp;quot;1-770-736-8031 x56442&amp;quot;,
  &amp;quot;website&amp;quot;: &amp;quot;hildegard.org&amp;quot;,
  &amp;quot;company&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;Romaguera-Crona&amp;quot;,
    &amp;quot;catchPhrase&amp;quot;: &amp;quot;Multi-layered client-server neural-net&amp;quot;,
    &amp;quot;bs&amp;quot;: &amp;quot;harness real-time e-markets&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The goal will be to convert this to an instance of this matching Swift struct:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct User {
    let id: Int
    let name: String
    let username: String
    let email: String
    let phone: String
    let website: String
    let address: Address
    let company: Company

    struct Address {
        let street: String
        let suite: String
        let city: String
        let zipcode: String
        let geo: Coordinates

        struct Coordinates {
            let lat: Double
            let lng: Double
        }
    }

    struct Company {
        let name: String
        let catchPhrase: String
        let bs: String
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first thing to note is that the Swift struct (and its embedded structs) use
multiple different types: Int, String, Double, Address, Coordinates, Company.
The JSON data only has strings and numbers and even then, some of the numbers
are really strings - look at the lat &amp;amp; lng entries. So converting from JSON to a
struct and back again has always been problematic, but let&amp;rsquo;s give it a go using
built-in Swift 3 processing with no external libraries.&lt;/p&gt;

&lt;h2 id=&#34;decoding-in-swift-3&#34;&gt;Decoding in Swift 3&lt;/h2&gt;

&lt;p&gt;You can insert this into a playground or &lt;a href=&#34;https://github.com/trozware/json&#34;&gt;download my playground&lt;/a&gt; and check
out the Swift 3 JSON page:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Foundation

let sampleDataAddress = &amp;quot;https://jsonplaceholder.typicode.com/users&amp;quot;
let url = URL(string: sampleDataAddress)!
let jsonData = try! Data(contentsOf: url)

struct User {
    let id: Int
    let name: String
    let username: String
    let email: String
    let phone: String
    let website: String
    let address: Address
    let company: Company

    init?(dict: [String: Any]) {
        guard
            let id = dict[&amp;quot;id&amp;quot;] as? Int,
            let name = dict[&amp;quot;name&amp;quot;] as? String,
            let username = dict[&amp;quot;username&amp;quot;] as? String,
            let email = dict[&amp;quot;email&amp;quot;] as? String,
            let phone = dict[&amp;quot;phone&amp;quot;] as? String,
            let website = dict[&amp;quot;website&amp;quot;] as? String,
            let addressDict = dict[&amp;quot;address&amp;quot;] as? [String: Any],
            let address = Address(dict: addressDict),
            let companyDict = dict[&amp;quot;company&amp;quot;] as? [String: Any],
            let company = Company(dict: companyDict)
            else {
                return nil
        }

        self.id = id
        self.name = name
        self.username = username
        self.email = email
        self.phone = phone
        self.website = website
        self.address = address
        self.company = company
    }

    struct Address {
        let street: String
        let suite: String
        let city: String
        let zipcode: String
        let geo: Coordinates

        init?(dict: [String: Any]) {
            guard
                let street = dict[&amp;quot;street&amp;quot;] as? String,
                let suite = dict[&amp;quot;suite&amp;quot;] as? String,
                let city = dict[&amp;quot;city&amp;quot;] as? String,
                let zipcode = dict[&amp;quot;zipcode&amp;quot;] as? String,
                let geoDict = dict[&amp;quot;geo&amp;quot;] as? [String: Any],
                let geo = Coordinates(dict: geoDict) else {
                    return nil
            }

            self.street = street
            self.suite = suite
            self.city = city
            self.zipcode = zipcode
            self.geo = geo
        }

        struct Coordinates {
            let lat: Double
            let lng: Double

            init?(dict: [String: Any]) {
                guard
                    let latString = dict[&amp;quot;lat&amp;quot;] as? String,
                    let lat = Double(latString),
                    let lngString = dict[&amp;quot;lng&amp;quot;] as? String,
                    let lng = Double(lngString) else {
                        return nil
                }
                self.lat = lat
                self.lng = lng
            }
        }
    }

    struct Company {
        let name: String
        let catchPhrase: String
        let bs: String

        init?(dict: [String: Any]) {
            guard
                let name = dict[&amp;quot;name&amp;quot;] as? String,
                let catchPhrase = dict[&amp;quot;catchPhrase&amp;quot;] as? String,
                let bs = dict[&amp;quot;bs&amp;quot;] as? String else {
                    return nil
            }

            self.name = name
            self.catchPhrase = catchPhrase
            self.bs = bs
        }
    }
}

if let json = try? JSONSerialization.jsonObject(with: jsonData, options: []) {
    if let jsonArray = json as? [[String: Any]] {
        let users = jsonArray.flatMap {
            User(dict: $0)
        }
        users.count
        dump(users.first)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I don&amp;rsquo;t actually expect you to go through all this code in detail, but I
included it here to make it obvious how verbose this method is.&lt;/p&gt;

&lt;p&gt;The first 3 lines get the data, and I have force-unwrapped the URL and the Data
which I would not do in a production app but which is OK while testing in a
playground. Then there is a declaration of the Users struct with all its sub
structs. Each one has a failable init that tries to parse the JSON dictionary
and returns nil if the data doesn&amp;rsquo;t match, by way of a lengthy set of guard
statements. The basic layout of each struct is the same but it is very verbose.
And as an extra step, the lat and lng properties need to be converted from
Strings to Doubles.&lt;/p&gt;

&lt;p&gt;I have to confess that it took quite come time to get this right &amp;hellip; lots of
guard statements to check that the data can be converted to the required types
which meant that any typos produced an empty array. The sub-structs have to be
extracted from the JSON as Dictionaries and then initialised by themselves.&lt;/p&gt;

&lt;h2 id=&#34;decoding-in-swift-4&#34;&gt;Decoding in Swift 4&lt;/h2&gt;

&lt;p&gt;So this works, and I get an array of Users objects. But it isn&amp;rsquo;t pretty and it
takes a lot of code to do the processing. So now I am going to move on to doing
this in Swift 4. I am using Xcode 9.0 beta 6 (9M214v) so if you have a later
version, you may need to adapt to any changes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct User: Codable {
    let id: Int
    let name: String
    let username: String
    let email: String
    let phone: String
    let website: String
    let address: Address
    let company: Company

    struct Address: Codable {
        let street: String
        let suite: String
        let city: String
        let zipcode: String
        let geo: Coordinates

        struct Coordinates: Codable {
            let lat: String
            let lng: String
        }
    }

    struct Company: Codable {
        let name: String
        let catchPhrase: String
        let bs: String
    }
}

let jsonDecoder = JSONDecoder()
let users = try? jsonDecoder.decode(Array&amp;lt;User&amp;gt;.self,
                                    from: jsonData)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ignoring the complexities of converting latitude and longitude to Doubles, I get
vastly simpler code. I declare all the structs as conforming to the &lt;code&gt;Codable&lt;/code&gt;
protocol and then I can remove all the init methods and just let &lt;code&gt;JSONDecoder&lt;/code&gt;
do its magic. I just have to tell it what data type to expect - in this case an
Array of Users. I don&amp;rsquo;t have to worry about the initial conversion of the JSON
data to a Dictionary or looping through the elements using flatMap.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In the playground, I used a do&amp;hellip;catch structure to check the result of the
decode function, but I have used try? here to keep the code short.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;changing-data-types&#34;&gt;Changing data types&lt;/h2&gt;

&lt;p&gt;The lat &amp;amp; lng coordinates are stored in the JSON as Strings, but need to be
converted to Doubles for the Swift struct.&lt;/p&gt;

&lt;p&gt;This requires a custom init method for the Coordinates struct to do the
conversion from String to Double.&lt;/p&gt;

&lt;p&gt;So here is the complete code for Swift 4 - again, if you don&amp;rsquo;t want to create
your own playground, you can &lt;a href=&#34;https://github.com/trozware/json&#34;&gt;use mine&lt;/a&gt;, this time looking at the Swift 4
JSON page:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Foundation

let sampleDataAddress = &amp;quot;https://jsonplaceholder.typicode.com/users&amp;quot;
let url = URL(string: sampleDataAddress)!
let jsonData = try! Data(contentsOf: url)

struct User: Codable {
    let id: Int
    let name: String
    let username: String
    let email: String
    let phone: String
    let website: String
    let address: Address
    let company: Company

    struct Address: Codable {
        let street: String
        let suite: String
        let city: String
        let zipcode: String
        let geo: Coordinates

        struct Coordinates: Codable {
            let lat: Double
            let lng: Double

            init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                let latString = try values.decode(String.self, forKey: .lat)
                let lngString = try values.decode(String.self, forKey: .lng)
                lat = Double(latString) ?? 0
                lng = Double(lngString) ?? 0
            }
        }
    }

    struct Company: Codable {
        let name: String
        let catchPhrase: String
        let bs: String
    }
}

let jsonDecoder = JSONDecoder()
let users = try? jsonDecoder.decode(Array&amp;lt;User&amp;gt;.self, from: jsonData)

users?.count
dump(users?.first)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For comparative purposes, I counted the lines of code in each, removing the
common boiler plate of the top of each and the two lines for displaying the
results in the playground. I also removed the blank lines which I always use a
lot in my code for readability but which are not relevant when comparing code
efficiency:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Lines&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Lines if lat &amp;amp; lng are Strings&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Swift 3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;95&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;93&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Swift 4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;35&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;encoding&#34;&gt;Encoding&lt;/h2&gt;

&lt;p&gt;Encoding back to JSON is very similar. In the Swift 3 version, I would have
written a method for each struct that created a Dictionary and then used
JSONSerialization to convert the Dictionary back to JSON. This is very verbose
and tedious to write so I am not going to bother to demonstrate it here.&lt;/p&gt;

&lt;p&gt;But in Swift 4, this is even easier than decoding. Add this code to the end of
your Swift 4 JSON playground or playground page:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if let users = users {
    let jsonEncoder = JSONEncoder()
    jsonEncoder.outputFormatting = .prettyPrinted

    if let backToJson = try? jsonEncoder.encode(users) {
        if let jsonString = String(data: backToJson, encoding: .utf8) {
            print(jsonString)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;JSONEncoder&lt;/code&gt; returns Data and I have converted that to a String for
checking. I set JSONEncoder&amp;rsquo;s outputFormatting property to .prettyPrinted get a
more readable String.&lt;/p&gt;

&lt;p&gt;Notice how the encoded data is not quite the same as I received because the lat
&amp;amp; lng properties are now Doubles. In a production app, if I needed to be able to
convert back to JSON, I probably would have left them as Strings so as to enable
data transfer in both directions. I would add computed properties to the struct
to convert these Strings to Doubles as I needed them.&lt;/p&gt;

&lt;h2 id=&#34;advanced-decoding&#34;&gt;Advanced Decoding&lt;/h2&gt;

&lt;p&gt;Now that we have the basics, I want to look at three more features: changing
property names, date handling and allowing for nulls.&lt;/p&gt;

&lt;h2 id=&#34;changing-property-names&#34;&gt;Changing Property Names&lt;/h2&gt;

&lt;p&gt;In these examples I used exactly the same names for the properties as were used
in the JSON. In the Swift 3 version, it would have been easy to change the
property names, since the data for each property was being extracted manually.
In Swift 4, if you want the decoder to change names, you have to tell it what
you want.&lt;/p&gt;

&lt;p&gt;Make a new playground or playground page and replace the contents with this - or
go to the Swift 4 Extras page on &lt;a href=&#34;https://github.com/trozware/json&#34;&gt;my playground&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Foundation

let jsonString = &amp;quot;&amp;quot;&amp;quot;
{
&amp;quot;name1&amp;quot;: &amp;quot;Jane&amp;quot;,
&amp;quot;name2&amp;quot;: &amp;quot;Smith&amp;quot;
}
&amp;quot;&amp;quot;&amp;quot;
let jsonData = jsonString.data(using: .utf8)!

struct Person: Codable {
    let firstName: String
    let lastName: String
}

let jsonDecoder = JSONDecoder()
let person = try? jsonDecoder.decode(Person.self, from: jsonData)
dump(person)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This uses the new multi-line literals in Swift 4 to assemble the JSON string
which is amazingly useful as it allows quotes to be embedded in the string
without having to escape them. As you can see, the JSON property names are not
very helpful, so I want to change them in my Person struct. At the moment,
&lt;code&gt;person&lt;/code&gt; is nil because I have not given the decoder any clues to help it
translate the names. To do that, I have to add a CodingKeys enum to the Person
struct and it tells the decoder what names in the JSON match up to what
properties in the struct.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Person: Codable {
    let firstName: String
    let lastName: String

    enum CodingKeys: String, CodingKey {
        case firstName = &amp;quot;name1&amp;quot;
        case lastName = &amp;quot;name2&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s all I have to do. Now the JSON is correctly converted to a Person. As
an exercise, use JSONEncoder to get back to JSON from the Person. You will see
that the JSON correctly names the elements using &amp;ldquo;name1&amp;rdquo; and &amp;ldquo;name2&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;date-handling&#34;&gt;Date Handling&lt;/h2&gt;

&lt;p&gt;Next let&amp;rsquo;s look at dates - add this code to the playground:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let jsonString2 = &amp;quot;&amp;quot;&amp;quot;
{
&amp;quot;name&amp;quot;: &amp;quot;My New Project&amp;quot;,
&amp;quot;created&amp;quot;: &amp;quot;2017-06-18T06:28:25Z&amp;quot;
}
&amp;quot;&amp;quot;&amp;quot;
let jsonData2 = jsonString2.data(using: .utf8)!

struct Project: Codable {
    let name: String
    let created: Date
}

let jsonDecoder2 = JSONDecoder()
let project = try? jsonDecoder2.decode(Project.self, from: jsonData2)

dump(project)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When this runs, &lt;code&gt;project&lt;/code&gt; is nil because the decoder has no idea how to get from
the String &amp;ldquo;2017-06-18T06:28:25Z&amp;rdquo; to a Date object. Add this line after creating
&lt;code&gt;jsonDecoder2&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;jsonDecoder2.dateDecodingStrategy = .iso8601
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the date can be converted and an instance of the Project struct will be
created.&lt;/p&gt;

&lt;p&gt;And to get back to the JSON, converting the Date back to ISO8601 format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let jsonEncoder = JSONEncoder()
jsonEncoder.dateEncodingStrategy = .iso8601

if let backToJson = try? jsonEncoder.encode(project) {
    if let jsonString = String(data: backToJson, encoding: .utf8) {
        print(jsonString)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name =&#34;nulls&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;allowing-for-nulls&#34;&gt;Allowing For Nulls&lt;/h2&gt;

&lt;p&gt;JSON data will often include &lt;strong&gt;null&lt;/strong&gt; where there is no value for a particular
property name. When using JSONDecoder or JSONEncoder, this can be allowed for by
using Optionals. If you are not clear about Optionals, have a look at my
previous article: &lt;a href=&#34;https://troz.net/post/2016-02-12-learning-swift-optionals/&#34;&gt;Learning Swift - Optionals&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The crucial step is to declare the properties of the Swift object as optionals
if you think they could get a null value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Role: Codable {
    let firstName: String
    let lastName: String
    let nickName: String?
}

let jsonStringWithNulls = &amp;quot;&amp;quot;&amp;quot;
[
    {
        &amp;quot;firstName&amp;quot;: &amp;quot;Sally&amp;quot;,
        &amp;quot;lastName&amp;quot;: &amp;quot;Sparrow&amp;quot;,
        &amp;quot;nickName&amp;quot;: null
    },
    {
        &amp;quot;firstName&amp;quot;: &amp;quot;Doctor&amp;quot;,
        &amp;quot;lastName&amp;quot;: &amp;quot;Who&amp;quot;,
        &amp;quot;nickName&amp;quot;: &amp;quot;The Doctor&amp;quot;
    }
]
&amp;quot;&amp;quot;&amp;quot;
let jsonDataWithNulls = jsonStringWithNulls.data(using: .utf8)!

let jsonDecoder3 = JSONDecoder()
let roles = try? jsonDecoder3.decode(Array&amp;lt;Role&amp;gt;.self, from: jsonDataWithNulls)
dump(roles)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example (which you can find in the Swift 4 Extras page on &lt;a href=&#34;https://github.com/trozware/json&#34;&gt;my
playground&lt;/a&gt;), I have declared a struct called Role with 3 String properties.
The 3rd String - nickName - is an Optional so it may be a String or it may be
nil.&lt;/p&gt;

&lt;p&gt;The JSON contains 2 elements - one has a nickName value and the other has it as
null. Because the matching property in the Swift struct is an optional, this
works as expected and the nickName property for Sally Sparrow is decoded as nil.
If you remove the question mark to make nickName non-optional, the decoding will
fail.&lt;/p&gt;

&lt;p&gt;Going back to JSON from a Swift object with optionals works much the same except
that it does not specifically mark items as null, it just leaves them out.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let jsonEncoder2 = JSONEncoder()
jsonEncoder2.outputFormatting = .prettyPrinted

if let backToJsonWithNulls = try? jsonEncoder2.encode(roles) {
    if let jsonString = String(data: backToJsonWithNulls, encoding: .utf8) {
        print(jsonString)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;property-lists&#34;&gt;Property Lists&lt;/h2&gt;

&lt;p&gt;As well as JSONDecoder and JSONEncoder, Swift 4 has introduced
PropertyListDecoder and PropertyListEncoder, so let&amp;rsquo;s take a quick look at that.&lt;/p&gt;

&lt;p&gt;Add this to the bottom of the last playground as it uses the Project struct and
data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let plistEncoder = PropertyListEncoder()
plistEncoder.outputFormat = .xml
if let plist = try? plistEncoder.encode(project) {
    if let plistString = String(data: plist, encoding: .utf8) {
        print(plistString)
    }

    let plistDecoder = PropertyListDecoder()
    let project2 = try? plistDecoder.decode(Project.self, from: plist)

    dump(project2)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I don&amp;rsquo;t see this is being quite as useful as the JSON Encoding &amp;amp; Decoding, but I
mention it here for completeness.&lt;/p&gt;

&lt;h2 id=&#34;codable&#34;&gt;Codable&lt;/h2&gt;

&lt;p&gt;In all the Swift 4 examples above, I set the structs to conform to &lt;code&gt;Codable&lt;/code&gt;.
Reading Apple&amp;rsquo;s docs, I see that &lt;code&gt;Codable&lt;/code&gt; is actually a typealias referring to
2 separate protocols:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Swift&#34;&gt;typealias Codable = Decodable &amp;amp; Encodable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you only need to convert data one way, it will be more efficient to set your
struct or class as confirming to only one of these protocols. For example, if
you download JSON data from an API but never need to send it back, just conform
to Decodable to transform the JSON data into your data structure.&lt;/p&gt;

&lt;p&gt;Much more information can be found in the &lt;a href=&#34;https://developer.apple.com/documentation/swift/encoding_decoding_and_serialization&#34;&gt;Apple documentation&lt;/a&gt;.&lt;/p&gt;</description>
</item>
    
    <item>
<title>Posting from my new iPad</title>
<link>https://troz.net/post/2017/posting-from-my-new-ipad/</link>
<pubDate>Sat, 17 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2017/posting-from-my-new-ipad/</guid>
<description>

&lt;p&gt;Last week I got a 10.5â iPad Pro. I have had an iPad ever since the original
release, but I have to confess to mainly using it for content consumption rather
than creation. Since I am usually close to a Mac anyway, there didnât seem a lot
of point. But now that iOS 11 is really addressing the issue of making the iPad
a &amp;ldquo;pro&amp;rdquo; device, I decided to give it a try.&lt;/p&gt;

&lt;p&gt;So here I am, sitting in an armchair with my iPad on my lap, writing this post
and working out the details as I go. Any typos are due to the cat trying to
compete with the iPad for space on my lap!&lt;/p&gt;

&lt;h2 id=&#34;ipad&#34;&gt;iPad&lt;/h2&gt;

&lt;p&gt;As already mentioned, I have a new iPad Pro. I also have an Apple Pencil which I
use for taking notes. I do not have a keyboard, so I am using the on-screen
keyboard right now.&lt;/p&gt;

&lt;p&gt;I donât usually install beta versions of operating systems, but iOS 11 is a huge
part of making the iPad more professional, so I have installed it. As you would
expect, there are a few issues (apps quitting, layout issues especially when
rotating) but so far I am loving it.&lt;/p&gt;

&lt;h2 id=&#34;writing&#34;&gt;Writing&lt;/h2&gt;

&lt;p&gt;My site is published on &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; using &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; with all the posts
and pages written in Markdown. One key feature is that every post or page
requires a chunk of &amp;ldquo;front matter&amp;rdquo; that must be formatted correctly for the
Jekyll parser to interpret it and create the static content. After a bit of
research, it looked like &lt;a href=&#34;http://omz-software.com/editorial/&#34;&gt;Editorial&lt;/a&gt; was going to be the best option for an
editor app. I moved my site files to Dropbox, linked my Dropbox account to
Editorial and I was ready to start writing.&lt;/p&gt;

&lt;p&gt;I didnât want to create the front matter manually for each post. On my Mac I
have a text expander snippet that handles that but copying from &lt;a href=&#34;http://mattgemmell.com/using-the-ipad-for-blogging-with-jekyll/&#34;&gt;Matt Gemellâs
post&lt;/a&gt; on the topic, I created an Editorial workflow to create a new post. As
a side-note, Matt has a series of posts on using an iPad which I have found very
useful and inspirational.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/Workflow.jpeg&#34; alt=&#34;Editorial workflow&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Text entry and editing is a task that I have always felt was too difficult in
iOS, particularly when it came to selecting text and moving the cursor. However
there are now several improvements. As with iOS 10, a two-fingered press on the
keyboard transforms it into a trackpad for moving the cursor. If you already
have text selected, this moves the selection handles. The new iOS 11 keyboard
has a really nice feature for entering non-alphabetic characters. The keys now
show a small grey character above the main character. Drag down on the key to
move the small character into the main key and type it. For example, drag down
on the h key to type (.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/keyboard-drag.png&#34; alt=&#34;Keyboard drag&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Editorial has its own editing helpers. There is an additional toolbar above the
keyboard with a tab key as well as frequently used Markdown modifiers. And
swiping across this toolbar moves the cursor. This is a much slower move than
when using the keyboard as a trackpad so might be better for more precise
movements.&lt;/p&gt;

&lt;h3 id=&#34;adding-links&#34;&gt;Adding Links:&lt;/h3&gt;

&lt;p&gt;I have referenced a few sites now, so I guess it is time to work out how to link
to them. I always use Markdownâs referenced link method, with the links
collected at the foot of the document, so that is what I plan to do here. To set
text as a link, I selected it and used the Editorial toolbar to type an opening
square bracket which surrounded the selection in square brackets. Then I moved
the cursor to after the closing bracket and typed another opening square
bracket. This auto-closed and I was able to type a number which will be the
reference.&lt;/p&gt;

&lt;p&gt;Next step is to find the relevant URLs - drag &amp;amp; drop with multi-tasking to the
rescue! Swipe up from the bottom of the screen to see the new Dock. This also
makes the keyboard disappear. Hold down on the Safari icon until you grab it,
then drag it up into the Editorial window. Now it is open as an overlay.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/safari-overlay.png&#34; alt=&#34;Safari as overlay&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, I have several options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Swiping from the left or right of the overlay window lets me position it to
the right or left of the screen, still as an overlay.&lt;/li&gt;
&lt;li&gt;Dragging from the bar at the top of the overlap allows me to convert to split
screen mode, and I can then drag the divider to adjust the ratios.&lt;/li&gt;
&lt;li&gt;Swiping all the way to the right disappears the overlay, but swiping back from
the right edge returns it. Since I want to copy and paste some links, this
looks like the best option right now.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This swiping conflicts slightly with Editorial&amp;rsquo;s swiping from the side to see a
preview. Swipe from off the edge for the overlap and from well inside the edge
for preview.&lt;/p&gt;

&lt;p&gt;And here my plans come crashing down. I can drag from Safari&amp;rsquo;s address bar into
the Editorial document, but the drop doesnât take. I guess I need an update to
Editorial for this to work. But I can still use the old style copy and paste to
get the links.&lt;/p&gt;

&lt;h3 id=&#34;images&#34;&gt;Images&lt;/h3&gt;

&lt;p&gt;So now I have my links, but I want to insert a few images. I used iOS 11âs new
screen shot abilities. Press the usual home button &amp;amp; power button combination to
take a screen shot and it appears as a small picture in the bottom left of the
screen. Tap it to start editing: markup, crop etc. Then I used the sharing
button to save the picture to Dropbox, putting it inside the images folder in my
web site folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/screenshot.jpeg&#34; alt=&#34;Editing a screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I want to insert an image link but I have just worked out that I saved this
Markdown file in the root folder instead of the _posts folder. I canât see a way
to move it from inside Editorial, so I will swap to the Dropbox app to move the
file - be right back&amp;hellip; (I see now how I could have done this in Editorial.)&lt;/p&gt;

&lt;p&gt;Ok, this file is in the right place and the images are in the right folder, so
how to add an image link? Checking back at previous posts, I see that the format
I use for inserting an image is: &lt;code&gt;![Alt text][#]&lt;/code&gt; and the reference at the foot
of the page is like&lt;code&gt;[#]: /images/image_name.jpg&lt;/code&gt; but I donât want to have to
remember that every time, so I think it is time for some snippets. Tapping the
lightning icon on the Editorial keyboard lets me edit and create snippets, so I
have made one for the image link and one for the image reference. Time to scroll
back up the page and try them out.&lt;/p&gt;

&lt;p&gt;I opened the Dropbox app in an overlay so that I could find the file names for
the images I just saved, then I created the links. The images donât appear in
the preview but that is expected because Jekyll has not parsed the addresses.
Looking at the information about the images in Dropbox, I see that they are far
too big. I need a way to resize them. The screen shot editor doesnât have a way
to resize apart from cropping, at least not in this beta.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://workflow.is/&#34;&gt;Workflow&lt;/a&gt; is another Pro level app that I have never really used, but it
seems that it might do the job. I tried a few workflows to edit the size of an
image from a Dropbox file and save it back, but they although they appeared to
complete, the image file remained the same size. So then I went to the Workflow
Gallery and found a workflow called Quick Resize Screenshot. When editing a
screen shot, I can use the sharing button to run the workflow and then I can
save the smaller images to Dropbox for use in the page. For the large images
that I have already saved, I will resize them on my Mac before publishing.&lt;/p&gt;

&lt;h2 id=&#34;publishing&#34;&gt;Publishing&lt;/h2&gt;

&lt;p&gt;This brings me to the final step - publishing the changes to GitHub Pages.
Jekyll is a system that creates static web pages from the Markdown and other
files. on my Mac, I run the &lt;code&gt;jekyll build&lt;/code&gt; command in Terminal and the pages are
created or re-generated as required. Then I use &lt;code&gt;git&lt;/code&gt; to commit my changes and
push them to GitHub which serves them.&lt;/p&gt;

&lt;p&gt;There appear to be Editorial workflows written in Python that use the GitHub
APIs to upload files, but this wouldnât work well for me. Because of the
structure of my site, many different pages need to be re-generated when I
publish a new post, so I will keep the publishing phase on my Mac. However there
is no need to make it any more difficult than necessary, so I have written a
shell script to do the work.&lt;/p&gt;

&lt;p&gt;The script takes an optional commit message parameter, builds the site, commits
changes and pushes then to GitHub. I have only tested this when no files had
changed, so this post will be the first real test. Shell scripting is outside my
comfort zone, so we will have to see how that works.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;So now I have a workflow on my iPad that uses Editorial, Dropbox and Workflow.
This allows me to do 100% of the writing task. Then I have a single shell script
on my Mac that does the publishing part. I can edit and create posts anywhere. I
can easily use split screen or screen overlays to add links. iOS 11 makes
creating and annotating screen shots very easy.&lt;/p&gt;

&lt;p&gt;I am hoping for an update to Editorial that will allow it to accept drag &amp;amp; drop.
The ability to resize screen shots before saving them would also be really
useful.&lt;/p&gt;

&lt;p&gt;Sometimes my posts are more code-based and need access to Xcode and in those
cases, I will stick to my Mac, especially considering Xcodeâs new ability to
connect directly to GitHub which will make it great for publishing Swift
playgrounds. But for more narrative-style posts like this one, I will use my
iPad and see how I can improve my workflow and expand my tool set.&lt;/p&gt;

&lt;p&gt;It feels good to be using the iPad as a content creation device at last.&lt;/p&gt;

&lt;h2 id=&#34;extra-notes-from-a-mac&#34;&gt;Extra Notes from a Mac:&lt;/h2&gt;

&lt;p&gt;Since this was my first time writing a blog post using an iPad and this
workflow, I decided that I should test the results before publishing, so I
switched back to the Mac and in Terminal, ran &lt;code&gt;jekyll serve&lt;/code&gt; so that I could see
the results. There were a few issues mainly to do with the formatting of the
front matter. The three dashes at the top &amp;amp; bottom of the front matter had
become munged into an emdash plus a dash, so that didnât work. Jekyll is also
fussy about the spaces in the tag &amp;amp; summary lines and it doesn&amp;rsquo;t handle
non-alphanumerics in the summary text.&lt;/p&gt;

&lt;p&gt;I also used the Mac to shrink some of the images that I had saved before working
out how to reduce the size of screen shots.&lt;/p&gt;

&lt;p&gt;So I need to check the structure of the front matter workflow before next time,
but this post is ready to go with only minor editing on the Mac side. Now to
test my shell script&amp;hellip;&lt;/p&gt;
</description>
</item>
    
    <item>
<title>JSON Feed for TrozWare</title>
<link>https://troz.net/post/2017/json-feed-for-trozware/</link>
<pubDate>Sat, 20 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2017/json-feed-for-trozware/</guid>
<description>&lt;p&gt;&lt;a href=&#34;https://jsonfeed.org/2017/05/17/announcing_json_feed&#34;&gt;jsonfeed.org&lt;/a&gt; has announced a new format for web site feeds, designed as an
alternative to RSS. TrozWare has had an XML RSS feed for years, but I don&amp;rsquo;t
think anyone ever uses it (I certainly don&amp;rsquo;t), so today I have replaced it with
a JSON feed, which you can access through the
&lt;a class=&#34;fa fa-rss&#34; href=&#34;https://troz.net/feed.json&#34;&gt;&lt;/a&gt; button at the top of every page.&lt;/p&gt;

&lt;p&gt;I am sure many JSON Feed viewers will appear soon, but the only one I know about
so far is at &lt;a href=&#34;http://json-feed-viewer.herokuapp.com&#34;&gt;http://json-feed-viewer.herokuapp.com&lt;/a&gt;. As soon as this update
to my site goes live, I will apply to have TrozWare added to the list of sites
on this page. Meanwhile, you can paste in the URL: &lt;code&gt;https://troz.net/feed.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This site is constructed using Jekyll, so I am very grateful to Niclas Darville
for his very easy to follow &lt;a href=&#34;https://ndarville.com/blog/2017/05/19/json-feed-for-jekyll/&#34;&gt;guide&lt;/a&gt;. However it is still well worth reading
through the &lt;a href=&#34;https://jsonfeed.org/version/1&#34;&gt;official specs&lt;/a&gt; to see what else you want to add, or if you want
to remove anything. I had to tweak a few settings to make it work for my
configuration, and I added some more objects, but Niclas got me off to a flying
start.&lt;/p&gt;

&lt;p&gt;Two things to watch out for:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make sure your feed is producing valid JSON (I had an extra comma that was
breaking it&amp;hellip;).&lt;/li&gt;
&lt;li&gt;As third-party apps &amp;amp; sites may be displaying your content, you need to make
sure that you are not using relative URLs for images and internal links. I
was using relative image URLs like &lt;code&gt;/images/WorkHelp1.png&lt;/code&gt; but that showed a
broken link in the feed viewer, so I have changed all such links to
&lt;code&gt;/images/WorkHelp1.png&lt;/code&gt;. Hopefully that will work correctly on my local test
server as well as when published. &lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://jsonfeed.org/graphics/icon.png&#34; alt=&#34;JSON Feed icon&#34; /&gt;&lt;/p&gt;

&lt;p&gt;JSON Feed offers a nice icon which I would have liked to use, but I could not
work out a way to make it play nicely with the existing icons on my pages which
all use &lt;a href=&#34;http://fontawesome.io&#34;&gt;Font Awesome&lt;/a&gt; icons. So I ended up just using the existing Feed
icon. Hopefully Font Awesome will soon add a JSON Feed icon to their already
impressive list.&lt;/p&gt;

&lt;p&gt;If anyone still wants to use the &lt;a href=&#34;https://troz.net/index.xml&#34;&gt;RSS feed&lt;/a&gt;, it is no longer linked to the
buttons at the top of the pages, but you can access it manually.&lt;/p&gt;</description>
</item>
    
    <item>
<title>Blackmail Marketing</title>
<link>https://troz.net/post/2017/blackmail-marketing/</link>
<pubDate>Wed, 08 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2017/blackmail-marketing/</guid>
<description>&lt;p&gt;I use my iPad to play games as a form of relaxation. Nearly all the games I play
are puzzle apps with levels that can be played in a few minutes. Nearly all of
them are free to install. So how do they make money?&lt;/p&gt;

&lt;p&gt;Now I would be the last person you should consult about marketing but it has
always seemed to me that the best way to market your product is to convince
people that it offers something they want so that they are prepared to pay for
it.&lt;/p&gt;

&lt;p&gt;This is not the currently favored approach for mobile apps - at least certainly
not for games. No, the theory at the moment is to cause so much frustration and
annoyance that people give you money to make it stop. Blackmail marketing.&lt;/p&gt;

&lt;p&gt;A frequently used method is showing ads, sometimes just banner ads but more
often full screen video ads that run for up to 30 seconds. If you interrupt the
ad, you don&amp;rsquo;t get the reward.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Every goal reached triggers an ad.&lt;/li&gt;
&lt;li&gt;Quitting and resuming the app triggers an ad.&lt;/li&gt;
&lt;li&gt;Wanting to play another level triggers an ad.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The theory is that you get so annoyed with this that you pay money to disable
the ads.&lt;/p&gt;

&lt;p&gt;The other common tactic is the delay. A tower defence game needs you to build a
tower? OK, that will take 12 hours real time and you can&amp;rsquo;t proceed until it&amp;rsquo;s
finished. Or you can spend 12 gems which are sold as an in-app purchase. Maybe
you can only play 3 levels and then you need to recharge: again, pay up or wait.
You keep dying on that level? You&amp;rsquo;re out of lives. Pay up or wait until
tomorrow. These delays are completely artificial. They have nothing to do with
game play but are solely designed to infuriate you enough to get you to pay.&lt;/p&gt;

&lt;p&gt;So when, and perhaps more importantly why, did mobile app marketing become so
negative? What happened to making your customers happy? Do unhappy customers
spend more?&lt;/p&gt;

&lt;p&gt;Financially, it appears that irritating your users is a successful strategy.
Nearly all the top grossing games in the App Store are &amp;ldquo;free to play&amp;rdquo; in that
the initial download costs nothing. But these big studios are raking in enormous
sums of money, so many people are persuaded to spend significant money by these
infuriating schemes.&lt;/p&gt;

&lt;p&gt;A large part of this must be due to the various App Stores driving prices to the
bottom. Gone are the days when the price of a mobile app was other than risible.
So app developers have four choices:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Do it as a hobby or learning exercise.&lt;/li&gt;
&lt;li&gt;Distribute apps as a form of selfâpromotion for other work.&lt;/li&gt;
&lt;li&gt;Work for someone who pays you a real wage to develop apps.&lt;/li&gt;
&lt;li&gt;Join the blackmailers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So how does this relate to indy developers like me? I care about my users and
want them to be happy.&lt;/p&gt;

&lt;p&gt;I have tried several different approaches to app distribution:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Totally free gets by far the most downloads but is economically ridiculous
unless the app adds value to your business in some other way.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A tip jar gets you nothing.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In-app purchases (in my limited experience) make less than selling the app
up-front for a small price.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Banner ads with no method of forcing people to watch them generate almost no
revenue.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So that leaves me with where I am today - selling apps for a few dollars and
nothing more. Happily, I have found that Mac users are more prepared to pay a
few dollars for an app, so I have shut down many of my iOS apps and am
concentrating on the Mac app market.&lt;/p&gt;

&lt;p&gt;Am I letting my principles stand in the way of mobile app profits? Should I just
join the gang and start blackmailing my customers? If so, what form should this
take?&lt;/p&gt;

&lt;p&gt;At the moment, I am considering banner ads on the screen with an in-app purchase
to disable them entirely. I read a suggestion for a less invasive method of
doing this by creating your own ads for your other apps. This might be what I
end up doing.&lt;/p&gt;

&lt;p&gt;I would welcome any suggestions, advice or comments. Please join the discussion
below or contact me using one of the links at the top of the page.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>NCSS 2017</title>
<link>https://troz.net/ncss2017/</link>
<pubDate>Fri, 06 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/ncss2017/</guid>
<description>&lt;p&gt;I gave a Masterclass on Swift at the NCSS Summer School 2017 in Sydney on 8th
January 2017. This post contains useful links for use during and after my class.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://swiftlang.ng.bluemix.net/#/repl&#34;&gt;IBM Swift Sandbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;sandbox-code-samples&#34;&gt;Sandbox Code Samples&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://swiftlang.ng.bluemix.net/#/repl/58670662da20a814737c3562&#34;&gt;Strings&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://swiftlang.ng.bluemix.net/#/repl/5868463fb5619f13e0a940af&#34;&gt;Optionals&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://swiftlang.ng.bluemix.net/#/repl/5868954cb5619f13e0a940bd&#34;&gt;Functions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://swiftlang.ng.bluemix.net/#/repl/5866f31fda20a814737c353b&#34;&gt;Closures&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://swiftlang.ng.bluemix.net/#/repl/5866f48bda20a814737c353c&#34;&gt;Objects&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://swiftlang.ng.bluemix.net/#/repl/5866ed80da20a814737c3538&#34;&gt;Protocols&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://swiftlang.ng.bluemix.net/#/repl/5866fc4dda20a814737c3557&#34;&gt;Generics&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;contact-details&#34;&gt;Contact Details:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Email: &lt;a href=&#34;mailto:sarah@troz.net?subject=NCSS%202017&#34;&gt;sarah@troz.net&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/trozware&#34;&gt;@trozware&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Slides:
&lt;a href=&#34;https://www.dropbox.com/s/09r19my3d6jk5jt/NCSS%202017%20Swift%20MC.pdf?dl=0&#34;&gt;NCSS 2017 Swift MC.pdf&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;useful-links&#34;&gt;Useful Links:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/au/book/swift-programming-language/id881256329?mt=11&#34;&gt;The Swift Programming Language&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://swift.org&#34;&gt;Swift.org&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.raywenderlich.com/132258/top-5-ios-swift-newsletters&#34;&gt;Newsletters&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.raywenderlich.com&#34;&gt;Tutorials&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
</item>
    
    <item>
<title>Looking for beta testers</title>
<link>https://troz.net/post/2016/looking-for-beta-testers/</link>
<pubDate>Thu, 17 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/looking-for-beta-testers/</guid>
<description>&lt;p&gt;I am looking for beta testers for my latest Mac app: &lt;strong&gt;&lt;a href=&#34;https://troz.net/work/&#34;&gt;Work&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Work&lt;/strong&gt; is a project organizer app for developers, designers, students or any
professional who works with multiple projects involving files &amp;amp; folders, web
pages, email addresses and lists of tasks. Click the link above for more
information and help for getting started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Work&lt;/strong&gt; requires macOS 10.12 or OS X 10.11.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you would like to test this app, please &lt;a href=&#34;mailto:work@troz.net?subject=Work%20beta%20test&#34;&gt;contact me&lt;/a&gt;, giving details of
your Mac and operating system. The easiest way to do this is to select &lt;strong&gt;About
This Mac&lt;/strong&gt; in the Apple menu and send me a screen shot of the window that
appears.&lt;/p&gt;

&lt;p&gt;All beta testers will receive a free license to Work when it is released. If you
report a legitimate bug or provide valuable feed-back, you will also receive a
free license to your choice of one of my &lt;a href=&#34;https://troz.net/apps/&#34;&gt;other apps&lt;/a&gt;.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Work</title>
<link>https://troz.net/work/</link>
<pubDate>Wed, 16 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/work/</guid>
<description>&lt;p&gt;&lt;strong&gt;Work&lt;/strong&gt; is a project organizer app for developers, designers, students or any
professional who works with multiple projects involving files &amp;amp; folders, web
pages, email addresses and lists of tasks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Work&lt;/strong&gt; requires macOS 10.12 or OS X 10.11 and will be available from the Mac
App Store soon.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;We all know what it is like to be in the middle of a project or rushing to
complete an assignment&amp;hellip;&lt;/p&gt;

&lt;p&gt;We have files scattered all over the place, email addresses of team members or
clients, web pages with specifications or useful information, tasks scribbled on
sticky notes or scraps of paper.&lt;/p&gt;

&lt;p&gt;Wouldn&amp;rsquo;t it be better if there was one place where you could have quick and easy
access to all these items, but without having to change the way you work? With
the &lt;strong&gt;Work&lt;/strong&gt; app, you can regain control - the app helps you get to what you
want so you save time.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Here is the project document you will see when you select &lt;strong&gt;Work Help&lt;/strong&gt; from the
&lt;strong&gt;Help&lt;/strong&gt; menu:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/WorkHelp1.png&#34; alt=&#34;Work&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It gathers together some useful links to information about &lt;strong&gt;Work&lt;/strong&gt; and my other
apps or to allow you to contact me. In &lt;strong&gt;Work&lt;/strong&gt; documents for my apps, I
assemble the project files I need to open, images, web page addresses etc. My
most frequently used links are starred so I can focus on them whenever I want a
shorter list.&lt;/p&gt;

&lt;p&gt;Drag files or folders into the window to link them to your &lt;strong&gt;Work&lt;/strong&gt; document.
Copy a web address or email address and use &lt;strong&gt;Add Web/Email&lt;/strong&gt; to quickly create
a new link entry with the copied address.&lt;/p&gt;

&lt;p&gt;Switching to &lt;strong&gt;Tasks&lt;/strong&gt; mode allows you to focus on your tasks list. Tasks can be
grouped, re-ordered and marked as complete. Use the &lt;strong&gt;View&lt;/strong&gt; menu to hide
completed tasks if you want a more compact list. Use the &lt;strong&gt;Edit&lt;/strong&gt; menu or the
toolbar buttons to edit groups - this allows you to create your own custom
groupings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/WorkHelp2.png&#34; alt=&#34;Work - Tasks&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Work&lt;/strong&gt; doesn&amp;rsquo;t move or rename any of your files - it merely links all these
things together for fast, convenient and searchable access. It even tracks files
or folders if you move them later.&lt;/p&gt;

&lt;p&gt;Make a &lt;strong&gt;Work&lt;/strong&gt; document for every project, drag in the relevant files or
folders, add web page addresses and email addresses, make your own task lists.&lt;/p&gt;

&lt;p&gt;Create groups to gather items together, adjust the display to view only the
entries you want, use quick look to get a fast glimpse of files or web pages.&lt;/p&gt;

&lt;p&gt;Work also supports the Touch Bar on the new MacBook Pros:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/Work_TB.png&#34; alt=&#34;Work - TouchBar&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Select &lt;strong&gt;Work Help&lt;/strong&gt; from the &lt;strong&gt;Help&lt;/strong&gt; menu to see the special &lt;strong&gt;Work&lt;/strong&gt; document
pictured above. Use the links to keep in touch and step through the sequence of
tasks to learn the basics of using the app.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Another Man Reader Update...</title>
<link>https://troz.net/post/2016/another-man-reader-update/</link>
<pubDate>Sat, 05 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/another-man-reader-update/</guid>
<description>&lt;p&gt;A quick update to &lt;a href=&#34;https://troz.net/manreader/&#34;&gt;Man Reader&lt;/a&gt; to version 1.8 is now available through the
&lt;a href=&#34;http://itunes.apple.com/app/man-reader/id522583774?mt=12&#34;&gt;Mac App Store&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main reason for this version was that Man Reader was not previously
detecting man pages installed by third-party IDEs in the Applications folder.
There was also an issue with Man Reader failing to display the text of the
previously selected man page on app launch.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;More complete search for man pages, including in third-party IDEs.&lt;/li&gt;
&lt;li&gt;Fix for glitch when displaying previously selected page on launch.&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>
    
    <item>
<title>Man Reader Update</title>
<link>https://troz.net/post/2016/man-reader-update/</link>
<pubDate>Wed, 12 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/man-reader-update/</guid>
<description>&lt;p&gt;&lt;a href=&#34;https://troz.net/manreader/&#34;&gt;Man Reader&lt;/a&gt; has just been updated to version 1.7 and is available through
the &lt;a href=&#34;http://itunes.apple.com/app/man-reader/id522583774?mt=12&#34;&gt;Mac App Store&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main reason for this update was to make the app work well with macOS Sierra,
as I found that version 1.6 was sometimes crashing on launch. While doing this,
the update was rejected by the App Store reviewers because it crashed on OS X
10.10. Since I no longer have a Mac running 10.10, I decided to set the minimum
supported system version to OS X 10.11. If you need support for older versions,
you should still be able to download version 1.6 which will work back to 10.7.&lt;/p&gt;

&lt;p&gt;I also took the opportunity to fix some graphical issues, dealing with different
color schemes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The man page list now shows alternating colors even when not using the default
scheme.&lt;/li&gt;
&lt;li&gt;When scrolling the man pages past the top or the bottom with a non-white
background, you should no longer see white blocks top &amp;amp; bottom.&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>
    
    <item>
<title>Podcasting</title>
<link>https://troz.net/post/2016/podcasting/</link>
<pubDate>Tue, 11 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/podcasting/</guid>
<description>&lt;p&gt;I have recently started what I hope will be a weekly podcast with my friend and
colleague, &lt;a href=&#34;https://twitter.com/jerrydaniels&#34;&gt;Jerry Daniels&lt;/a&gt;. Each podcast will be about 30 minutes in length.&lt;/p&gt;

&lt;p&gt;We will discuss Macs, iPhones, iPads, macOS, iOS, programming and anything
tech-related that we find interesting. I hope you will find it entertaining and
informative, so please join us.&lt;/p&gt;

&lt;p&gt;We are using &lt;a href=&#34;https://zcast.co/zcasts&#34;&gt;ZCast&lt;/a&gt; which has an iPhone app that makes it super easy to get
together and record our chats. It doesn&amp;rsquo;t allow any post-processing, but really
lowers the barrier to entry into the world of podcasting.&lt;/p&gt;

&lt;p&gt;If you get the &lt;a href=&#34;https://itunes.apple.com/app/zcast-podcast-from-your-phone!/id1041586670&#34;&gt;ZCast app for iPhone&lt;/a&gt;, go to the ZCasters tab and search for
&amp;ldquo;Trozware&amp;rdquo; or &amp;ldquo;Jerry Daniels&amp;rdquo; to find all our podcasts. Or use these links to
listen in your browser.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zcast.co/j/ZyB8yK4z86&#34;&gt;The new macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zcast.co/j/ewQe6x6E4d&#34;&gt;Hands-on with iPhone 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zcast.co/j/A9zvLAAEa3&#34;&gt;Hands on iOS 10&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since the first one was recorded using my name instead of my &lt;a href=&#34;https://twitter.com/trozware&#34;&gt;@trozware&lt;/a&gt;
Twitter account, I will embed it here as it will not show up if you search for
&amp;ldquo;Trozware&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;IFRAME src=&#39;https://zcast.co/embedded/ZyB8yK4z86&#39; width=&#39;350&#39; height=&#39;500&#39; STYLE=&#39;width: 350; height: 500; border: none;&#39; scrolling=&#39;auto&#39;&gt;&lt;/IFRAME&gt;&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Dice Pass Updated</title>
<link>https://troz.net/post/2016/dice-pass-updated/</link>
<pubDate>Sat, 17 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/dice-pass-updated/</guid>
<description>

&lt;p&gt;&lt;a href=&#34;https://troz.net/dicepass/&#34;&gt;Dice Pass 1.1&lt;/a&gt; is now available from the &lt;a href=&#34;https://itunes.apple.com/app/dice-pass/id997688302&#34;&gt;Mac App Store&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-does-dice-pass-do&#34;&gt;What does Dice Pass do?&lt;/h2&gt;

&lt;p&gt;Dice Pass is a utility to app to generate random passphrases based on the
&lt;a href=&#34;http://world.std.com/~reinhold/diceware.html&#34;&gt;Diceware&lt;/a&gt; system. Diceware uses a table of pre-defined words, each assigned
a 5 digit code number containing the digits 1 to 6. The official way to generate
a phrase is to roll 5 dice for each word you want in your passphrase and then
consult the words table to find the matching word.&lt;/p&gt;

&lt;p&gt;The resulting phrase uses real words or common abbreviations so it is easier to
remember than a random collection of characters. At the same time, the random
selection of words makes the generated passphrase much more secure as it avoids
the human tendency to pick words with personal meaning.&lt;/p&gt;

&lt;p&gt;Dice Pass allows you to select the number of words in your passphrase,
re-generate the entire passphrase any time, re-roll a single word in your
passphrase or set the dice rolls manually for maximum security and randomness.&lt;/p&gt;

&lt;h2 id=&#34;what-s-new-in-version-1-1&#34;&gt;What&amp;rsquo;s New in Version 1.1:&lt;/h2&gt;

&lt;p&gt;You can now select from three word lists in the Word Lists menu:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;original Diceware list&lt;/li&gt;
&lt;li&gt;Beale list (fewer Americanisms and obscure words)&lt;/li&gt;
&lt;li&gt;Diceware 8k list (a list of words that is a whole power of two in length)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also import your own word list if you prefer.&lt;/p&gt;

&lt;p&gt;Dice Pass 1.1 is compatible with macOS Sierra.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>How much work does Icon Builder save you?</title>
<link>https://troz.net/post/2016/how-much-work-does-icon-builder-save-you/</link>
<pubDate>Sat, 17 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/how-much-work-does-icon-builder-save-you/</guid>
<description>

&lt;p&gt;&lt;a href=&#34;https://troz.net/icon-builder/&#34;&gt;Icon Builder&lt;/a&gt; is a Mac app that takes a single image file and creates all
the different image sizes that you need to make a set of icons for your app:
Mac, iPhone, iPad, iOS Universal or Apple Watch.&lt;/p&gt;

&lt;p&gt;Version 4, released 16 September 2016 is available through the &lt;a href=&#34;https://itunes.apple.com/app/icon-builder/id552293482&#34;&gt;Mac App
Store&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-s-new-in-version-4&#34;&gt;What&amp;rsquo;s New in Version 4:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Added support for iMessage apps and Sticker Pack apps.&lt;/li&gt;
&lt;li&gt;Added support for creating Mac .icns files.&lt;/li&gt;
&lt;li&gt;Better removal of alpha channel for Apple Watch icons.&lt;/li&gt;
&lt;li&gt;Clearer usage instructions in ReadMe files.&lt;/li&gt;
&lt;li&gt;iTunes Artwork folders will no longer be over-written with the latest image
files.&lt;/li&gt;
&lt;li&gt;Supports macOS Sierra and Xcode 8&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/IconBuilder.png&#34; alt=&#34;Icon Builder&#34; /&gt;&lt;/p&gt;

&lt;p&gt;While working on version 4 and accommodating all these new icon sets (and
wishing I had the time to re-write the app in Swift&amp;hellip;), I counted up all the
icon files that Icon Builder makes for each app type:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;App Type&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Number of Icons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Mac&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;iPhone&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;iPhone supporting pre iOS 7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;iPad&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;iPad supporting pre iOS 7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;iOS Universal&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;iOS Universal supporting pre iOS 7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Apple Watch (also requires iOS app icons)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Sticker Pack app&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;iMessages app&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;iMessages app Messages extension&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So as you can see, Icon Builder is doing a lot of work for you. It also names
all the icon files using the expected format, stores them in an concept folder,
creates the JSON file that identifies them all to Xcode and optionally installs
them in your Xcode project automatically. Thatâs a lot of value for dragging in
an icon and clicking a button!&lt;/p&gt;

&lt;p&gt;So next time your designer sends you the twentieth tweaked icon for the day,
don&amp;rsquo;t get mad. Just drop it into Icon Builder and sit back while it does all the
work. (No need to tell the designer that&amp;hellip;)&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Retiring old apps</title>
<link>https://troz.net/post/2016/retiring-old-apps/</link>
<pubDate>Thu, 15 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/retiring-old-apps/</guid>
<description>&lt;p&gt;With the release of iOS 10 and the need to update iOS apps to suit, I have
decided it is time to retire some of my lesser-performing apps as it is not
worth the effort required to maintain them.&lt;/p&gt;

&lt;p&gt;At the moment, the following iOS apps are no longer available:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Knight&amp;rsquo;s Move&lt;/li&gt;
&lt;li&gt;Dice Pass&lt;/li&gt;
&lt;li&gt;Pic-a-POD&lt;/li&gt;
&lt;li&gt;Quick Score - Tennis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the first three listed there, the Mac versions are still available:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/app/a-knights-move/id533321133&#34;&gt;A Knight&amp;rsquo;s Move for Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/app/dice-pass/id997688302&#34;&gt;Dice Pass for Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/app/pic-a-pod/id477909802&#34;&gt;Pic-a-POD for Mac&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you bought any of these apps and would like a promo code for the Mac version,
send me a screen shot of the app running on your iPhone or iPad and I will send
you a code.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Man Reader updated to 1.6</title>
<link>https://troz.net/post/2016/man-reader-updated-to-1.6/</link>
<pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/man-reader-updated-to-1.6/</guid>
<description>

&lt;p&gt;Man Reader has been updated to version 1.6 with the permissions needed for
finding all available man pages and a fix for search terms being over-written
after a background update.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/manreader/&#34;&gt;Man Reader 1.6&lt;/a&gt; is now available through the &lt;a href=&#34;http://itunes.apple.com/app/man-reader/id522583774?mt=12&#34;&gt;Mac App Store&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;change-log&#34;&gt;Change Log:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Permissions fix when searching for available man pages.&lt;/li&gt;
&lt;li&gt;Fixed error with new search term being over-written.&lt;/li&gt;
&lt;li&gt;Sand-boxed version now works just as well as the non-sand-boxed so please
switch back to this version.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This version fixes a problem with sand-boxing permissions potentially not
allowing access to all the installed man pages on your system. This should now
be fixed but if you discover any man pages that are available through Terminal
but not through Man Read, please &lt;a href=&#34;mailto:sarah@troz.net?subject=Man%20Reader%20not%20detecting%20some%20man%20pages&#34;&gt;email me the details&lt;/a&gt; and help me make Man
Reader better.&lt;/p&gt;

&lt;p&gt;There was also an issue with a previous search being restored after a background
update, even if a new search term had been entered. This has been fixed.&lt;/p&gt;

&lt;p&gt;If you previously had downloaded the Man Reader (no SB) version of the app from
this site, please revert to the App Store version which you would have needed to
have bought in order to use the downloaded app. If you bought the app from
Paddle, &lt;a href=&#34;mailto:sarah@troz.net?subject=Man%20Reader%20transfer%20to%20App%20Store&#34;&gt;contact me&lt;/a&gt; and I will transfer you to the App Store version.
Neither of these other versions will be supported or updated any more.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Dice Pass Mac Update</title>
<link>https://troz.net/post/2016/dice-pass-mac-update/</link>
<pubDate>Sun, 03 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/dice-pass-mac-update/</guid>
<description>&lt;p&gt;I recently got an email from someone who had purchased &lt;a href=&#34;https://troz.net/dicepass/&#34;&gt;Dice Pass&lt;/a&gt; for Mac
from the &lt;a href=&#34;https://itunes.apple.com/app/dice-pass/id997688302&#34;&gt;Mac App Store&lt;/a&gt; but had been unable to get it to run. This person
was using OS X 10.9.3.&lt;/p&gt;

&lt;p&gt;I checked the App Store specifications and it showed that 10.9 was the minimum
system requirement, so it should have worked. But going back to my Xcode
project, I found that it was set to a minimum of OS X 10.10.&lt;/p&gt;

&lt;p&gt;I tried to re-compile for OS X 10.9 but this failed as the app uses several
features that are not available prior to 10.10.&lt;/p&gt;

&lt;p&gt;The minimum system version as displayed in the App Store is supposedly deduced
automatically by the App Store servers from the app&amp;rsquo;s binary. Somehow this was
incorrect in the App Store, so some people may have bought that app and found
that it did not work despite them having what was listed as a compatible system.&lt;/p&gt;

&lt;p&gt;If you bought Dice Pass for OS X 10.9 and are unable to run it, I have two
possible solutions for you:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Upgrade your operating system to at least 10.10.&lt;/li&gt;
&lt;li&gt;Ask Apple for a refund since it was their error that caused you to buy an app
that you cannot run.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I have updated the app in the App Store changing nothing but the version number
and it is now showing the correct minimum system requirement. My apologies if
you have been inconvenienced by this error.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Learning Swift - Sets</title>
<link>https://troz.net/post/2016/learning-swift-sets/</link>
<pubDate>Sat, 28 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/learning-swift-sets/</guid>
<description>

&lt;p&gt;Sets are the forgotten collection type in many languages, including Swift. I
think most developers use Arrays without really considering the advantages of
using a Set but they have some amazingly useful features that should make them a
part of any progammer&amp;rsquo;s toolkit.&lt;/p&gt;

&lt;p&gt;If you want to follow along with a playground, you can download it &lt;a href=&#34;https://github.com/trozware/sets&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-is-a-set&#34;&gt;What is a Set?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;A Set is an un-ordered collection of unique items.&lt;/strong&gt; That&amp;rsquo;s it - nothing more
than that. So it is very similar to an Array, but it is not indexed like an
Array and it cannot contain more than one of each entry.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-set&#34;&gt;Creating a Set&lt;/h2&gt;

&lt;p&gt;Creating a Set is as easy as creating an Array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var myArray = [&amp;quot;dog&amp;quot;, &amp;quot;cat&amp;quot;, &amp;quot;hamster&amp;quot;, &amp;quot;dog&amp;quot;]
var mySet: Set = [&amp;quot;dog&amp;quot;, &amp;quot;cat&amp;quot;, &amp;quot;hamster&amp;quot;, &amp;quot;dog&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are running these commands in a playground, notice that the differences
between the 2 results:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;[&amp;quot;dog&amp;quot;, &amp;quot;cat&amp;quot;, &amp;quot;hamster&amp;quot;, &amp;quot;dog&amp;quot;]    // myArray
{&amp;quot;hamster&amp;quot;, &amp;quot;cat&amp;quot;, &amp;quot;dog&amp;quot;}           // mySet
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;The Array is shown wrapped in square brackets, the Set is shown wrapped in
curly braces. This is just a visual clue and doesn&amp;rsquo;t really mean anything.
You cannot initialize a set using curly braces.&lt;/li&gt;
&lt;li&gt;All the supplied elements of the Array are listed, but the Set has removed
the duplicate &amp;ldquo;dog&amp;rdquo; element. This did not cause an error or warning, it just
happened quietly.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When initializing a Set, you must add &lt;code&gt;: Set&lt;/code&gt; to distinguish it from an array
initialization. In the example above, I did not specify the data type of the
elements in the Set as the Swift compiler was able to infer this from the
contents. But if initializing an empty array, the data type must be specified.
To check how to do this, I option-clicked on &lt;code&gt;mySet&lt;/code&gt; to see what the Swift
compiler thought it was.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/set_types.png&#34; alt=&#34;Sets&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So mySet is actually &lt;code&gt;Set&amp;lt;String&amp;gt;&lt;/code&gt;. This means that to create an empty Set, you
need to use something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var emptySetOfStrings: Set&amp;lt;String&amp;gt; = [] var
emptySetOfInts: Set&amp;lt;Int&amp;gt; = []
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;adding-and-removing-elements&#34;&gt;Adding and removing elements&lt;/h2&gt;

&lt;p&gt;If you have been using an Array to store unique values, then you have probably
written code like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;if !myArray.contains(&amp;quot;cat&amp;quot;) {
  myArray.append(&amp;quot;cat&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With Sets, you don&amp;rsquo;t have to care. Just use &lt;code&gt;insert()&lt;/code&gt; and let the Set work out
whether to add the item or not.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;mySet.insert(&amp;quot;goldfish&amp;quot;)
// goldfish added: {&amp;quot;hamster&amp;quot;, &amp;quot;cat&amp;quot;, &amp;quot;dog&amp;quot;, &amp;quot;goldfish&amp;quot;}
mySet.insert(&amp;quot;dog&amp;quot;)
// dog already there: {&amp;quot;hamster&amp;quot;, &amp;quot;cat&amp;quot;, &amp;quot;dog&amp;quot;, &amp;quot;goldfish&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Removing elements is also easier than in Arrays. For an Array, you first have to
find the index of the element and remove it by index:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;// myArray.remove(&amp;quot;hamster&amp;quot;) // will not compile
if let index = myArray.index(of: &amp;quot;hamster&amp;quot;) {
  myArray.remove(at: index)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But in a Set, you can remove any element easily and trying to remove an element
that doesn&amp;rsquo;t exist will fail without an error.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;mySet.remove(&amp;quot;hamster&amp;quot;)   // returns &amp;quot;hamster&amp;quot;
mySet.remove(&amp;quot;canary&amp;quot;)    // returns nil
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;converting-between-sets-and-arrays&#34;&gt;Converting between Sets and Arrays&lt;/h2&gt;

&lt;p&gt;Sometimes you need to be able to switch between the two. My most recent example
was when I wanted to store data from a Set in a plist. Sets are not property
list types but Arrays are, so I converted the Set to an Array before storing it
in the plist. When reading the data in from the plist, I converted it back to a
Set.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let myArrayAsSet = Set(myArray)
let mySetAsArray = Array(mySet)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One useful side-effect of these easy conversions is the ability to &amp;lsquo;unique&amp;rsquo; an
Array in a single line. This may be inefficient for large arrays, but works very
well for small ones. Just be careful if the order of the elements is important
as you cannot guarantee the order of elements in a Set.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let myArrayUniqued = Array(Set(myArray))
// [&amp;quot;cat&amp;quot;, &amp;quot;dog&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;iterating-over-elements-in-a-set&#34;&gt;Iterating over elements in a Set&lt;/h2&gt;

&lt;p&gt;As with an Array, you can use a &lt;code&gt;for element in set&lt;/code&gt; structure, or you can use
&lt;code&gt;enumerated()&lt;/code&gt;. But you cannot subscript a Set.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;for animal in mySet {
  print(animal)
}

for (index, animal) in mySet.enumerated() {
  print(&amp;quot;\(index) = \(animal)&amp;quot;)
}

// will not compile
// for index in 0 ..&amp;lt; mySet.count {
//   print(&amp;quot;\(index) = \(mySet[index])&amp;quot;)
// }
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;where-sets-get-really-interesting&#34;&gt;Where Sets get really interesting&lt;/h2&gt;

&lt;p&gt;Remember in school when you learnt about Venn diagrams with pretty interlocking
circles? Sets can do the same things, although you will have to do your own
pretty drawings :-)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let set1: Set = [&amp;quot;dog&amp;quot;, &amp;quot;cat&amp;quot;, &amp;quot;pig&amp;quot;]
let set2: Set = [&amp;quot;cow&amp;quot;, &amp;quot;horse&amp;quot;, &amp;quot;pig&amp;quot;]

let intersect = set1.intersection(set2)
// {&amp;quot;pig&amp;quot;}

let subtract = set1.subtracting(set2)
// {&amp;quot;cat&amp;quot;, &amp;quot;dog&amp;quot;}

let union = set1.union(set2)
// {&amp;quot;pig&amp;quot;, &amp;quot;cat&amp;quot;, &amp;quot;dog&amp;quot;, &amp;quot;cow&amp;quot; &amp;quot;horse&amp;quot;}

let xor = set1.symmetricDifference(set2)
// {&amp;quot;cat&amp;quot;, &amp;quot;dog&amp;quot;, &amp;quot;cow&amp;quot;, &amp;quot;horse&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code example above, we have two Sets of animals, with one animal in
common.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;intersection()&lt;/code&gt; lists the elements in common.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subtracting()&lt;/code&gt; lists the elements in one Set after removing all elements that
are in the other.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;union()&lt;/code&gt; joins all the elements without duplicates.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;symmetricDifference()&lt;/code&gt; lists the elements that are in one or other of the
Sets but not in both. (Swift 3 renamed this function from &lt;code&gt;exclusiveOr()&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is my best attempt at a pretty drawing to show how these go together:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/sets_1.png&#34; alt=&#34;Sets&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The next fun trick is working out sub-sets, super-sets and disjoint sets.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let set1: Set = [&amp;quot;dog&amp;quot;, &amp;quot;cat&amp;quot;, &amp;quot;pig&amp;quot;]
let set2: Set = [&amp;quot;cow&amp;quot;, &amp;quot;horse&amp;quot;, &amp;quot;pig&amp;quot;]

let smallSet: Set = [&amp;quot;pig&amp;quot;, &amp;quot;cow&amp;quot;]

smallSet.isSubset(of: set1)   // false
smallSet.isSubset(of: set2)   // true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;smallSet&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; a subset of &lt;code&gt;set1&lt;/code&gt; because it contains an element that is
not in &lt;code&gt;set1&lt;/code&gt;. &lt;code&gt;smallSet&lt;/code&gt; &lt;strong&gt;is&lt;/strong&gt; a subset of &lt;code&gt;set2&lt;/code&gt; because every element in
&lt;code&gt;smallSet&lt;/code&gt; is also in &lt;code&gt;set2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/sets_2.png&#34; alt=&#34;Sets&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to get technical, a Set should not be considered a subset of an
identical Set. The default &lt;code&gt;isSubset(of:)&lt;/code&gt; allows this, but you can use
&lt;code&gt;isStrictSubset(of:)&lt;/code&gt; if you prefer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;set1.isSubset(of: set1)         // true
set1.isStrictSubset(of: set1)   // false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Superset works just the same but in reverse so the diagram above explains it
too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let set1: Set = [&amp;quot;dog&amp;quot;, &amp;quot;cat&amp;quot;, &amp;quot;pig&amp;quot;]
let set2: Set = [&amp;quot;cow&amp;quot;, &amp;quot;horse&amp;quot;, &amp;quot;pig&amp;quot;]

let smallSet: Set = [&amp;quot;pig&amp;quot;, &amp;quot;cow&amp;quot;]

set1.isSuperset(of: smallSet)       // false
set2.isSuperset(of: smallSet)       // true

set1.isSuperset(of: set1)           // true
set1.isStrictSuperset(of: set1)     // false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;set1&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; a superset of &lt;code&gt;smallSet&lt;/code&gt; because it does not contain every
element in &lt;code&gt;smallSet&lt;/code&gt;. &lt;code&gt;set2&lt;/code&gt; &lt;strong&gt;is&lt;/strong&gt; a superset of &lt;code&gt;smallSet&lt;/code&gt; because every
element in &lt;code&gt;smallSet&lt;/code&gt; is also in &lt;code&gt;set2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;isSuperset(of:)&lt;/code&gt; and &lt;code&gt;isStrictSuperset(of:)&lt;/code&gt; functions allow or reject
identical sets.&lt;/p&gt;

&lt;p&gt;The final comparison tool that might be useful is &lt;code&gt;isDisjoint(with:)&lt;/code&gt; which
returns true only if the two Sets have no elements in common i.e. if there is no
overlap in the circles.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let set1: Set = [&amp;quot;dog&amp;quot;, &amp;quot;cat&amp;quot;, &amp;quot;pig&amp;quot;]
let set2: Set = [&amp;quot;cow&amp;quot;, &amp;quot;horse&amp;quot;, &amp;quot;pig&amp;quot;]

let otherSet: Set = [&amp;quot;duck&amp;quot;, &amp;quot;chicken&amp;quot;]

set1.isDisjoint(with: set2)       // false
set1.isDisjoint(with: otherSet)   // true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;ldquo;pig&amp;rdquo; occurs in both &lt;code&gt;set1&lt;/code&gt; and &lt;code&gt;set2&lt;/code&gt; so they are &lt;strong&gt;not&lt;/strong&gt; disjoint. &lt;code&gt;otherSet&lt;/code&gt;
and &lt;code&gt;set1&lt;/code&gt; have no matching entries so they &lt;strong&gt;are&lt;/strong&gt; disjoint.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;when-should-you-use-a-set&#34;&gt;When should you use a Set?&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;If you want the elements to be unique.&lt;/li&gt;
&lt;li&gt;If you want easy methods of comparing the contents of different collections.&lt;/li&gt;
&lt;li&gt;If you want to be able to remove elements easily.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;when-should-you-not-use-a-set&#34;&gt;When should you not use a Set?&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;If you need the collection to be able to hold multiples of an element.&lt;/li&gt;
&lt;li&gt;If the order of the collection is important.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;For more details on Sets, check out &lt;a href=&#34;http://swiftdoc.org/v2.2/type/Set/&#34;&gt;SwiftDoc.org&lt;/a&gt;.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>19th Hole Golf Scorer 3.1</title>
<link>https://troz.net/post/2016/19th-hole-golf-scorer-3.1/</link>
<pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/19th-hole-golf-scorer-3.1/</guid>
<description>&lt;p&gt;One of the problems with using 19th Hole on the Apple Watch is making the app
show every time you raise your wrist. My solution to this was to go into
Settings (either on my iPhone through the Watch app, or directly on the watch)
and change it to &amp;ldquo;Resume Last Activity&amp;rdquo; on wrist raise. This worked fine but as
I usually prefer the watch face to show on wrist raise, I had to keep setting
and re-setting this which was a pain.&lt;/p&gt;

&lt;p&gt;But last week I noticed the fine print when changing this setting. In this
screen shot from the Watch app on my iPhone, you can see that &amp;ldquo;session-based
apps&amp;rdquo; and &amp;ldquo;some third-party workout apps&amp;rdquo; will over-ride the &amp;ldquo;Show Watch Face&amp;rdquo;
setting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/WakeScreen.jpg&#34; alt=&#34;Wrist raise settings&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I started to research this and found that if an app starts a &amp;ldquo;workout session&amp;rdquo;,
then it will become the active app until the session is ended or some other app
starts a session. So I got to work and added a workout session to the 19th
Hole&amp;rsquo;s Apple Watch app.&lt;/p&gt;

&lt;p&gt;When you start scoring a round on the Apple Watch, you will see this dialog
asking if you would like to start a workout:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/Watch-workout.png&#34; alt=&#34;Start workout dialog&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The workout will be stopped automatically when you have scored the last hole.
You can also use a force-press on the scoring screen to turn the workout off or
on at any time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/Watch_end_workout.png&#34; alt=&#34;Stop workout&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This should make the app much more usable as an Apple Watch app, so happy
golfing :-)&lt;/p&gt;
</description>
</item>
    
    <item>
<title>My Year With Apple Watch</title>
<link>https://troz.net/post/2016/my-year-with-apple-watch/</link>
<pubDate>Thu, 28 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/my-year-with-apple-watch/</guid>
<description>

&lt;p&gt;As the Apple Watch hits its first birthday, there seems to be in increasing
number of bloggers complaining about it. One (which I refuse to link to) titled
&amp;ldquo;My Year of Hell With the Apple Watch&amp;rdquo;. I think the article has since been
re-published with a slightly less inflammatory title, but really! Did somebody
rivet the watch to his wrist? If it was so awful, why not just stop using it?&lt;/p&gt;

&lt;p&gt;I am a watch nerd and have always loved watches and having one on me. I liked
watches with features and even had a calculator watch at one point although as a
woman with skinny wrists, I found it constantly annoying that watch makers put
all the gadgets into man-sized watches so I was left with the choice of no
features or a watch that looked stupidly large on my wrist.&lt;/p&gt;

&lt;p&gt;A few years ago I stopped wearing a watch. I can&amp;rsquo;t remember now why I did it -
maybe my watch strap broke and it wasn&amp;rsquo;t important enough to get a new one. I
always had my iPhone to give me the time.&lt;/p&gt;

&lt;p&gt;But I ordered three Apple Watches as soon as they were available and myself,
husband and eldest son have been using them ever since.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;here-are-what-i-consider-to-be-the-best-features-of-the-apple-watch&#34;&gt;Here are what I consider to be the best features of the Apple Watch:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Accuracy&lt;/strong&gt;: It is a fantastically accurate time-piece. Not enough people
give this credit, but we have always been used to clocks and watches that were
inherently inaccurate. Having a device on my wrist that I &lt;strong&gt;know&lt;/strong&gt; to be
perfectly accurate is an amazing thing.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Notifications&lt;/strong&gt;: this takes a bit of work to get right and with every new
app, you need to assess whether to have its notifications appear on your
wrist. But the wonderful thing is knowing that you haven&amp;rsquo;t missed anything and
being able to glance at your wrist when a notification arrives and tell -
unobtrusively - whether this is something that needs immediate attention. And
the ability to respond instantly to messages and emails with just a couple of
taps is amazingly useful.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Customisable watch faces&lt;/strong&gt;: depending on what I am doing, I need quick
access to different pieces of information. When travelling, I can set up a
watch face with multiple time zones. When working, I need a timer. When on
holiday, I prefer one of the more relaxing but less detailed watch faces.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Activity&lt;/strong&gt;: I am not the world&amp;rsquo;s most active person so I find the three
rings to be a really good motivator. In fact I just had to stop typing and run
up &amp;amp; down the stairs to get another notch to the blue ring. The goals are not
out of my reach, so I like trying to fill in the rings every day.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Voice commands&lt;/strong&gt;: being able to send a text message completely by voice when
driving or when my hands are busy is fantastic. Starting a timer, doing unit
conversions and navigating are things I do frequently by voice.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Excellent battery life&lt;/strong&gt;: I started off having the battery life complication
always visible, but it very quickly became apparent that this was unnecessary.
Right now I have been wearing the watch for about 11 hours and the battery is
at 74%. And charging is so fast that if I did run it down, a 30 minute charge
would get me through most of a day.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;The Milanese Loop&lt;/strong&gt;: best watch band ever.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are other good features, but I think those are my favourites.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;so-what-don-t-i-like&#34;&gt;So what don&amp;rsquo;t I like?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Third-party apps are still a problem&lt;/strong&gt;. I know. I have published three
myself and sometimes they just doesn&amp;rsquo;t happen. However this appears to vary a
lot. Some people say they can never get apps to run, even Apple&amp;rsquo;s apps. Others
say they work but with a long delay. My watch seems to be better than the
average but it is still an issue.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Sketches don&amp;rsquo;t always get through or can take ages&lt;/strong&gt;. We thought it would be
a lot of fun to send each other little sketches and so it is, despite our
total lack of any artistic skills. But it loses a bit of impact when you have
to send a message 20 minutes later asking if the sketch has arrived.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;The exercise tracking seems to be a bit erratic&lt;/strong&gt;. If my husband and I go
for a walk together, he comes back with 25 minutes of exercise and I only have
7 minutes. Am I not going fast enough? Are my arms not swinging enough? If it
is very hot and my wrist gets sweaty, I seem to get better numbers - is this
because my heart is beating faster or the capillaries closer to the surface
have expanded? Or is the watch picking up a better signal that way? Either
way, I still like the activity circles, but the green ring frustrates me a
bit.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;and-what-would-i-like-to-see-in-watch-2-watchos-3&#34;&gt;And what would I like to see in Watch 2 / watchOS 3?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Some sort of always-on display of the time.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A speaker to allow Siri to talk back to me and to play audio.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;FaceTime audio calls.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Better support for third-party apps - perhaps open up some private APIs?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Allow developers to create watch faces or apps that told the time.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Allow developers to say that an app should stay as the frontmost app once
opened.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;will-i-buy-watch-2&#34;&gt;Will I buy Watch 2?&lt;/h2&gt;

&lt;p&gt;At this stage I would say no. We bought the bottom-of-the-line Sport models
because with version 1.0 of anything, you don&amp;rsquo;t want to spend so much that
upgrading is ruled out. However these watches are still going great and a lot of
the improvements I am looking for will be in software not hardware.&lt;/p&gt;

&lt;p&gt;But 14 months ago, I was waiting for Apple to announce the iWatch as we all
thought it would be called, and saying that I didn&amp;rsquo;t think I would get one. The
feature list convinced me and I have been delighted with it. So if Watch 2 comes
up with some killer feature that matters to me, then I might have to
re-consider&amp;hellip;&lt;/p&gt;
</description>
</item>
    
    <item>
<title>How To Confuse TestFlight</title>
<link>https://troz.net/post/2016/how-to-confuse-testflight/</link>
<pubDate>Sun, 24 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/how-to-confuse-testflight/</guid>
<description>&lt;p&gt;I ran into an unusual problem when testing my latest app: &amp;ldquo;&lt;a href=&#34;https://troz.net/what-is-my-speed/&#34;&gt;What Is My
Speed?&lt;/a&gt;&amp;rdquo;. It is now available from the &lt;a href=&#34;https://itunes.apple.com/app/what-is-my-speed/id1091394524&#34;&gt;iTunes App Store&lt;/a&gt;, but getting
there was a struggle.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#tldr&#34;&gt;TL;DR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Xcode is terrible at renaming projects, so it is a really good idea to have
worked out your app&amp;rsquo;s name before starting. I would even recommend creating an
app ID in your Apple Developer account and registering the app name in iTunes
Connect. Only once you get to iTunes Connect will the name be checked for
uniqueness. Searching the App Stores is not enough as it does not cover
un-released apps or apps that are not available in your country.&lt;/p&gt;

&lt;p&gt;So I set up my app. I was hoping for &amp;ldquo;What&amp;rsquo;s My Speed?&amp;rdquo; but was happy with &amp;ldquo;What
Is My Speed?&amp;ldquo;.&lt;/p&gt;

&lt;p&gt;Next step was to create the project in Xcode which I did using the app name and
manually entering the bundle identifier that I had registered at Apple
Developer. Xcode accepted the name without any warnings and created the default
targets using that name.&lt;/p&gt;

&lt;p&gt;In the default unit testing file, the module was defined like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt; @testable &lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;What&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Is_My_Speed&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which made me think that Xcode was quite happy to have parsed the app name as
required to replace any unwanted characters to suit.&lt;/p&gt;

&lt;p&gt;The app was built, passed all unit tests, profiled, analyzed, tested on real
devices as well as the simulators and uploaded to TestFlight.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BARRRPPPP!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/TestFlight_error.png&#34; alt=&#34;This app cannot be installed&#34; /&gt;&lt;/p&gt;

&lt;p&gt;What?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(I forgot to take a screenshot but found a similar one online. Thanks &lt;a href=&#34;https://www.simpletechs.net/apps/easy-fix-for-testflight-problem-after-restoring-from-backup/&#34;&gt;Simple
Techs&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I have had experience with TestFlight&amp;rsquo;s oddities in the past, so I incremented
the build number and tried again, thinking that maybe there had been a
processing issue. Same result.&lt;/p&gt;

&lt;p&gt;This started a very frustrating 24 hours as I ran through all the possibilities
I could think of or find suggested on the net. Due to disastrous Australian
internet speeds, especially uploads, each attempt took from 40 - 120 minutes.
About 5 minutes to implement the next idea, 25 minutes upload time, then the
rest waiting for Apple to process the app so I could try again.&lt;/p&gt;

&lt;p&gt;Here is what I tried:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Uploaded a fresh build.&lt;/li&gt;
&lt;li&gt;Removed Bitcode.&lt;/li&gt;
&lt;li&gt;Fixed the code signing identity which was set to iOS Developer for some
reason.&lt;/li&gt;
&lt;li&gt;Manually specified the provisioning profiles for all three components (iPhone
app, WatchKit app, WatchKit Extension).&lt;/li&gt;
&lt;li&gt;Manually selected the code signing identity for the provisioning profiles.&lt;/li&gt;
&lt;li&gt;Uploaded using Application Loader instead of Xcode.&lt;/li&gt;
&lt;li&gt;Removed third-party framework.&lt;/li&gt;
&lt;li&gt;Removed WatchKit app.&lt;/li&gt;
&lt;li&gt;Revoked my distribution profile, re-created it and updated all provisioning
profiles.&lt;/li&gt;
&lt;li&gt;Created a completely blank project with same app name and bundle identifier.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can see from this list, I thought it was a code signing or profile error.
Using &lt;a href=&#34;https://itunes.apple.com/app/apple-configurator-2/id1037126344&#34;&gt;Apple Configurator 2&lt;/a&gt; (the modern version of iPhone Configuration
Utility), I was able to get the logs from my iPhone and entries like the
following seemed to confirm this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-Error&#34;&gt;installd.staging/temp.2LWJ2h/extracted/Payload/What Is My Speed?.app : 0xe8008017 (A signed resource has been added, modified, or deleted.)}```
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;But when I got to the stage of a completely blank app still failing, I suddenly
thought of the question mark. With the benefit of my preamble to this post, you
all probably got there long before I did, but I got there in the end.&lt;/p&gt;

&lt;p&gt;The solution was to remove the question mark from the names of the targets in
Xcode. I had to fix up the module names in my unit testing files, but apart from
that, there were no changes. After this I was able to upload the complete app to
TestFlight and install it on my iPhone.&lt;/p&gt;

&lt;p&gt;It is possible that it was the Product Names that were the issue, rather than
the target name as in Build Settings, Product Name is set to be &lt;code&gt;$(TARGET_NAME)&lt;/code&gt;
by default but I didn&amp;rsquo;t test that. Maybe next time&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;tldr&#34;&gt;TL;DR&lt;/a&gt; Do not put any unusual characters in your target names.
Alphanumerics and spaces are OK, but I am not sure about anything else.&lt;/p&gt;</description>
</item>
    
    <item>
<title>What Is My Speed?</title>
<link>https://troz.net/what-is-my-speed/</link>
<pubDate>Sun, 17 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/what-is-my-speed/</guid>
<description>&lt;style&gt;
img {
    display: block;
    margin-left: auto;
    margin-right: auto }
&lt;/style&gt;

&lt;p&gt;&amp;ldquo;What Is My Speed?&amp;rdquo; is available now from the &lt;a href=&#34;https://itunes.apple.com/app/what-is-my-speed/id1091394524&#34;&gt;iTunes App Store&lt;/a&gt; for iPhone
and Apple Watch.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/speed_1.png&#34; alt=&#34;What Is My Speed? - iPhone&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you read my recent blog post on &lt;a href=&#34;https://troz.net/post/2016-04-07-road-trip-apps/&#34;&gt;Road Trip Apps&lt;/a&gt; you will have realised
that I was working on an app to fill a gap that I discovered in our road trip
app arsenal. So here it is: &amp;ldquo;What Is My Speed?&amp;rdquo; for iPhone &amp;amp; Apple Watch.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Track your speed on your iPhone or Apple Watch while driving, bicycling, running
or walking. See your course and altitude at all times.&lt;/p&gt;

&lt;p&gt;Optionally set a speed limit and get audible warnings on your iPhone when you
exceed it. Reduce the speed limit to zero or extend it over the maximum to turn
off speed limit warnings.&lt;/p&gt;

&lt;p&gt;Designed for easy viewing in all light conditions and with very accessible
swiping to change the speed limit quickly and easily.&lt;/p&gt;

&lt;p&gt;If you want more detailed information, tap the info button to see a complete
list of available data about your current location. &lt;em&gt;Altitude and floor data may
not always be available but will be displayed whenever possible.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/speed_2.png&#34; alt=&#34;What Is My Speed? details - iPhone&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Your current iPhone settings are used to set the default units for speed and
altitude, but these are easily changed after tapping the info button.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;To monitor your speed on your Apple Watch, you need to start the app on your
iPhone, but then it does not have to remain in the foreground. However speed
limit warnings will only be given when the iPhone app is active.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/speed_watch_1.png&#34; alt=&#34;What Is My Speed? Apple Watch&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To adjust the speed limit, swipe from side to side. The speed limit indicator
will expand for easier viewing and the speed limit will increase or decrease.
Tap again to shrink the speed limit indicator or leave it for a few seconds and
it will shrink automatically. You can also swipe up or down with two fingers to
adjust the screen brightness for maximum visibility.&lt;/p&gt;

&lt;p&gt;Tap the &amp;ldquo;?&amp;rdquo; button on the main screen to be reminded of the available swipes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/speed_3.png&#34; alt=&#34;What Is My Speed? adjust speed limit - iPhone&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Location permissions:&lt;/strong&gt; On startup, the app will request permission to access
your location. This is how the speed, course and altitude data is gathered so is
essential for the app to operate. If you have an Apple Watch with the app
installed, the app will continue to track your speed while in the background so
that the data can be sent to your watch. If you do not have an Apple Watch or
the app is not installed on the watch, your speed will only ever be tracked when
the app is the current foreground app.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Road Trip Apps</title>
<link>https://troz.net/post/2016/road-trip-apps/</link>
<pubDate>Thu, 07 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/road-trip-apps/</guid>
<description>

&lt;p&gt;Over the past few months, we have done two long road trips: one approximately
4,000 km and the other about 1,800 km. These gave us the chance to try out
various apps for navigation and travel information. We live in Queensland,
Australia and some of these comments may be country-specific.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;navigation&#34;&gt;Navigation&lt;/h2&gt;

&lt;p&gt;The basic navigation came down to three apps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.apple.com/ios/maps/&#34;&gt;Apple Maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/app/google-maps-real-time-navigation/id585027354&#34;&gt;Google Maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/au/app/metroview-gps-navigation/id370753892&#34;&gt;Metroview&lt;/a&gt; (Australia and New Zealand only)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each has their strengths and weaknesses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Apple Maps is by far the most beautiful and easy to read. It integrates
perfectly with Contacts (as you would expect). Turn-by-turn directions were
mostly excellent. The biggest downside is that it does not allow you to
specify a route avoiding tolls.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Google Maps allows you to plot a route avoiding tolls&amp;hellip; if you can find the
setting. Its traffic reporting is by far the best and it would offer suggested
changes of routes during the trip to get around traffic. The interface is
confusing at times. Turn-by-turn directions were good, although I would have
preferred an Australian voice option.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Metroview has all the maps downloaded which saves on data connection costs and
handles bad connectivity areas better. Its best feature is notification of
speed limits and alerts if you go over the limit, although it gets confused
when on over or under-passes. Another very useful feature is the display of
lanes when approaching highway exits, so you could tell which lane to be in.
Apparently the voice guidance is now more natural but we didn&amp;rsquo;t try this. The
display is messy and cluttered compared to the others.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We ended up with the following sequence:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Apple Maps for the bulk of the trip.&lt;/li&gt;
&lt;li&gt;Google Maps &amp;amp; Metroview (on 2 separate iPhones) in the metropolitan areas and
when about to take a highway exit.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Even then it was amusing to see the apps panic when you took a new road and the
apps assumed you had left the road and were heading through the bush! And at one
point there was a large and official sign saying &amp;ldquo;Ignore GPS - do not take this
turn&amp;rdquo; and sure enough, both Apple Maps and Google Maps wanted us to turn down a
little country lane instead of keeping to the highway.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;speed-display&#34;&gt;Speed Display:&lt;/h2&gt;

&lt;p&gt;Apart from the basic navigation apps, we tried a couple of speed display apps.
There are a lot of HUD speed apps out there that project the data on the the
windscreen but they had two problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They only worked when it was dark. As soon as the sun got up, they became
invisible.&lt;/li&gt;
&lt;li&gt;They required you to place your iPhone flat on the dashboard so even if they
had worked during the day, the iPhone would have got far too hot and
shut-down. (We have a mount that holds our iPhones in front of the air vents
to avoid this over-heating problem. Any mount that sticks to the windscreen
itself leaves the iPhone too exposed to the sun.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One we stuck with (in non-HUD mode) was &lt;a href=&#34;https://itunes.apple.com/app/speedometer-+-hud-digital/id375318117&#34;&gt;Speedometer + HUD&lt;/a&gt;. This had a clear
display with a few flaws:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When moving from 99 kph to 100 kph, the display was not re-arranged for 3
digits. Moving from 101 down to 100 fixed it, but as 100 kph is the standard
speed limit, this was a frequent annoyance.&lt;/li&gt;
&lt;li&gt;Adjusting the speed limit was too fiddly and difficult even for the passenger.
It would have been impossible for the driver.&lt;/li&gt;
&lt;li&gt;It only works in landscape mode which does not always suit the car mounts - we
ended up perching the 2nd iPhone on the unused ashtray.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also tried &lt;a href=&#34;https://itunes.apple.com/app/talking-hud-voice-prompt-speedometer/id873194479&#34;&gt;Talking HUD&lt;/a&gt; but didn&amp;rsquo;t like it. It worked solely in HUD mode,
so was only useful at night or very early morning. It had voice prompts to tell
you when to change gear but in an automatic car, they were just a distraction
and it was not obvious how to turn them off.&lt;/p&gt;

&lt;p&gt;But overall, we found having a speed display app as well as a navigation app to
be the best combination. The audible alerts when you went over speed were very
useful when over-taking or getting up to speed as you could get the information
without having to take your eyes off the road.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;future-app-plans&#34;&gt;Future App Plans:&lt;/h2&gt;

&lt;p&gt;Having determined that a speed display app is really useful, but not finding one
that suited us perfectly, the obvious next step was to design my own. I wanted
it to have the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;clean display, visible in all light conditions&lt;/li&gt;
&lt;li&gt;easily settable speed limit&lt;/li&gt;
&lt;li&gt;audible and visual over-speed warnings&lt;/li&gt;
&lt;li&gt;no HUD mode&lt;/li&gt;
&lt;li&gt;Apple Watch component for when you only had a single iPhone and it was
navigating but you still wanted a speed display&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So watch this space for further news of my up-coming app&amp;hellip;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;update&#34;&gt;Update&lt;/h2&gt;

&lt;p&gt;&amp;ldquo;&lt;a href=&#34;https://troz.net/what-is-my-speed/&#34;&gt;What Is My Speed?&lt;/a&gt;&amp;rdquo; is available now from the &lt;a href=&#34;https://itunes.apple.com/app/what-is-my-speed/id1091394524&#34;&gt;iTunes App Store&lt;/a&gt; for
iPhone and Apple Watch.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Structs vs Classes</title>
<link>https://troz.net/post/2016/structs-vs-classes/</link>
<pubDate>Wed, 30 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/structs-vs-classes/</guid>
<description>

&lt;p&gt;One of the big debates among Swift developers is when to use &lt;code&gt;structs&lt;/code&gt; and when
to use &lt;code&gt;classes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Classes are the building blocks of object-oriented programming
but structs as provided by Swift are newly powerful. Structs have been around in
C-based languages for a long time, but Swift has made them more powerful and
given them more features so that they are almost indistinguishable from classes.
So what are the differences and which one should you use?&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;where-they-are-the-same&#34;&gt;Where they are the same?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;both can define initializers&lt;/li&gt;
&lt;li&gt;both can define properties&lt;/li&gt;
&lt;li&gt;both can define methods&lt;/li&gt;
&lt;li&gt;both can conform to protocols&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;where-they-are-different&#34;&gt;Where they are different?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;classes can inherit from other classes&lt;/li&gt;
&lt;li&gt;structs cannot inherit from other structs&lt;/li&gt;
&lt;li&gt;classes are reference types&lt;/li&gt;
&lt;li&gt;structs are value types&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;The reference type vs value type difference is where things really get
interesting. Have a look at this example of a class with a single property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class PersonClass {
    var name: String

    init(name: String) {
        self.name = name
    }
}

var personA = PersonClass(name: &amp;quot;Woody&amp;quot;)
personA.name // Woody

var personB = personA
personB.name = &amp;quot;Buzz&amp;quot;
personB.name // Buzz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That looks like standard stuff, but what do you think &lt;code&gt;personA&lt;/code&gt;&amp;rsquo;s name is now?
If you guessed &amp;ldquo;Buzz&amp;rdquo; then you win a prize! &lt;em&gt;(No, not a real prize - pat
yourself on the back.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is because when we created the &lt;code&gt;personB&lt;/code&gt; variable and assigned &lt;code&gt;personA&lt;/code&gt; to
it, we did not assign the &lt;strong&gt;VALUE&lt;/strong&gt; of &lt;code&gt;personA&lt;/code&gt;, we assigned a &lt;strong&gt;REFERENCE&lt;/strong&gt; to
&lt;code&gt;personA&lt;/code&gt; - actually the address in memory of &lt;code&gt;personA&lt;/code&gt; rather than the data
inside.&lt;/p&gt;

&lt;p&gt;So now we have two objects and they are both looking at the same spot in memory
for their data. This means that changing the name of &lt;code&gt;personB&lt;/code&gt; changed the name
of &lt;code&gt;personA&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s try the same thing with a struct:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct PersonStruct {
  var name: String
}

var personC = PersonStruct(name: &amp;quot;Rex&amp;quot;)
personC.name // Rex

var personD = personC
personD.name = &amp;quot;Hamm&amp;quot;
personD.name // Hamm

personC.name // Rex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time, because we are using a struct, when we assign &lt;code&gt;personC&lt;/code&gt; to the new
&lt;code&gt;personD&lt;/code&gt; variable, we are actually making a copy of &lt;code&gt;personC&lt;/code&gt; and setting the
values of &lt;code&gt;personD&lt;/code&gt; to this new copy. So now we can change &lt;code&gt;personD&lt;/code&gt; without
messing with &lt;code&gt;personC&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that I did not have a define an &lt;code&gt;init&lt;/code&gt; for the struct because it creates
one automatically. You can still add one yourself if you want to do anything
different, but you do not have to.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;At first glance, you may think that you should now use structs all the time to
avoid these unintended consequences, but it isn&amp;rsquo;t quite as simple as that.
Sometimes a class is still the best thing to use.&lt;/p&gt;

&lt;p&gt;The inheritance capabilities of classes can make your decision simple: if you
need to create a button and want to start by sub-classing UIButton or NSButton,
then your button must be a class, not a struct. This will apply to most user
interface objects.&lt;/p&gt;

&lt;p&gt;Apple really wants us to use structs and in the Swift standard libraries, a very
high percentage of the objects are structs. But structs are especially well
suited to a certain subset of objects.&lt;/p&gt;

&lt;p&gt;The best explanation that I have found of when to use a struct is the &lt;a href=&#34;http://faq.sealedabstract.com/structs_or_classes/#an-alternative-hypothesis&#34;&gt;Jeff Trick&lt;/a&gt;. Reduced down, the rule is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you can overload == to compare two instances of your object, use a struct.
&lt;br&gt; If this doesn&amp;rsquo;t make sense, use a class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So use structs for your things: Person, Shape, Brick, Cat. &lt;br&gt; Use classes for
everything else.&lt;/p&gt;

&lt;p&gt;I would add one caveat: don&amp;rsquo;t fight the compiler. If using a struct is giving
lots of errors and warnings, change to a class.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A logical consequence of this is that all structs should conform to the
&lt;a href=&#34;http://swiftdoc.org/v2.2/protocol/Equatable/&#34;&gt;Equatable&lt;/a&gt; protocol.&lt;/p&gt;

&lt;p&gt;Extending &lt;code&gt;PersonStruct&lt;/code&gt; to make it conform just requires a single function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension PersonStruct: Equatable {
  static func == (lhs: PersonStruct, rhs: PersonStruct) -&amp;gt; Bool {
    return lhs.name == rhs.name
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since this struct only has one property, we can say that two instances of this
struct are equal if the names are equal.&lt;/p&gt;

&lt;p&gt;Testing this, we can see:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var personC = PersonStruct(name: &amp;quot;Rex&amp;quot;)
var personD = personC
personD.name = &amp;quot;Hamm&amp;quot;

personC == personD // false

let personE = PersonStruct(name: &amp;quot;Rex&amp;quot;)
personC == personE // true
personC != personE // false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Conveniently, providing an &lt;code&gt;==&lt;/code&gt; function effectively gives us a &lt;code&gt;!=&lt;/code&gt; function
for free as you can see from the last example.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;There is one final point I would like to make about struct and that concerns
mutating functions. Look at what happens if we include a function that changes
the &lt;code&gt;name&lt;/code&gt; property in the struct:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/mutating.png&#34; alt=&#34;Mutating error&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Fix-it is very helpfully pointing out that the method needs to be marked as
&lt;code&gt;mutating&lt;/code&gt; for this to work and is showing where this should go. Accepting the
suggestion will get rid of the error and then the name can be changed using this
method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct PersonStruct: Equatable {
    var name: String

    mutating func changeName(to newName: String) {
        if !newName.isEmpty {
            name = newName
        }
    }
}

var personC = PersonStruct(name: &amp;quot;Woody&amp;quot;)
personC.name // Woody

personC.changeName(to: &amp;quot;Sid&amp;quot;)
personC.name // Sid
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is no problem about using &lt;code&gt;mutating&lt;/code&gt; and it will not have the unintended
consequences of using classes. Despite the scary name, a mutating function
actually returns a new copy of the struct.&lt;/p&gt;

&lt;p&gt;The problem arises if you have many nested structs and the mutating has to
spread through the list. So don&amp;rsquo;t nest your structs - at least not more than two
deep!&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Learning Swift - Optionals</title>
<link>https://troz.net/post/2016/learning-swift-optionals/</link>
<pubDate>Sat, 12 Mar 2016 14:24:00 +1000</pubDate>
      
      <guid>https://troz.net/post/2016/learning-swift-optionals/</guid>
<description>&lt;p&gt;Today I plan to discuss optionals since they were a feature of Swift that I
found difficult to grasp at first.&lt;/p&gt;

&lt;h2 id=&#34;what-is-an-optional-in-swift&#34;&gt;What is an optional in Swift?&lt;/h2&gt;

&lt;p&gt;An optional is a variable of a specified type that can also be nil.&lt;/p&gt;

&lt;h2 id=&#34;why-does-this-matter&#34;&gt;Why does this matter?&lt;/h2&gt;

&lt;p&gt;In Objective-C, any object type could be nil. If you declared a variable like
this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;NSString *myString;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then &lt;code&gt;myString&lt;/code&gt; was set to nil by default.&lt;/p&gt;

&lt;p&gt;But this could cause issues, especially as Objective-C does not complain if you
send a message to nil. This could lead to bugs that were very difficult to track
down.&lt;/p&gt;

&lt;p&gt;The other big use for nil is when returning from a function which has found no
appropriate data to return. The classic example is when looking for the index of
an element in an array. What should be returned if the element is not found in
the array?&lt;/p&gt;

&lt;p&gt;Some languages return -1, Objective-C uses &lt;code&gt;NSNotFound&lt;/code&gt;, but you have to know
what each language is going to do. The more logical answer is nil. However if
your function is expected to return an integer, then it cannot return nil
because nil is not an integer.&lt;/p&gt;

&lt;p&gt;This is where optionals come in: if the function is expected to return an
optional integer, it can return with an integer with the index of the matching
element, or it can return nil if the element was not found. This is much clearer
and less prone to error.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;how-does-swift-handle-optionals&#34;&gt;How does Swift handle optionals?&lt;/h2&gt;

&lt;p&gt;One of the first things that struck me about Swift was how clean the code
looked, without so many non-alphanumeric characters scattered around. Gone were
all the:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;* ; [ ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But instead, Swift code sprouted:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;! ?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What were these?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The key to understanding optionals is to realise that when you declare an
optional variable of a certain type, you are actually declaring a box that can
hold a variable of that type or can hold nil.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once you grasp that concept, it all becomes much more obvious.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var optionalInteger: Int?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The ? indicates that this is an optional variable. It does not have to be
initialised as it is already set to nil which is valid for an optional variable.
Without the ? this would require initialisation as it would not be valid for it
to be nil.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;setting-an-optional&#34;&gt;Setting an optional&lt;/h2&gt;

&lt;p&gt;Setting the value of an optional variable is just the same as any other
variable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;optionalInteger = 3
optionalInteger = 42
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;getting-an-optional&#34;&gt;Getting an optional&lt;/h2&gt;

&lt;p&gt;The difference arises when you need to get the data out of the optional variable
in order to use it. This process is called un-wrapping and it means to get the
variable value out of the &amp;lsquo;box&amp;rsquo; it is stored it.&lt;/p&gt;

&lt;h3 id=&#34;the-most-obvious-way-is-to-use&#34;&gt;The most obvious way is to use !&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let newInteger = optionalInteger!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;DO NOT DO THIS!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is called forced-unwrapping and assumes that the optional variable is not
nil. If the optional is nil, this will crash. In Xcode, when you connect
interface elements from your storyboard to a Swift file, Xcode will use ! like
this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@IBOutlet weak var startButton: UIButton!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have to assume Xcode knows what it is doing and the button will be available
when needed, but you should not use ! - it is un-safe. By using it, you are
vowing to the compiler that when it gets to that point, the optional value will
not be nil. There are much better and safer ways of doing that.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;use-if-let&#34;&gt;Use &amp;lsquo;if let&amp;rsquo;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func doubleNumber(_ optionalInteger: Int?) -&amp;gt; Int? {
    if let integerValue = optionalInteger {
        // integerValue is not an optional
        // and is guaranteed to contain an Int
        return integerValue * 2
    }

    // no integer found in the optional,
    // so return nil to indicate failure
    return nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;use-guard&#34;&gt;Use guard&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func doubleNumber(_ optionalInteger: Int?) -&amp;gt; Int? {
    guard let integerValue = optionalInteger else {
        // get out quickly,
        // returning nil to indicate failure
        return nil
    }

    // integerValue is not an optional
    // and is guaranteed to contain an Int
    return integerValue * 2
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These two alternatives (&lt;code&gt;if let&lt;/code&gt; &amp;amp; &lt;code&gt;guard&lt;/code&gt;) do the same job but in opposite
ways. In both cases, they perform a conditional un-wrapping that may or may not
give a valid result. &lt;code&gt;if let&lt;/code&gt; checks if it is OK to proceed. &lt;code&gt;guard&lt;/code&gt; checks to
see if it is NOT OK to proceed. Which you use is really a matter of personal
preference and working out what is more logical in each case.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;guard&lt;/code&gt; statement is really good for checking data early in a process and
making a quick exit it something is wrong. The &lt;code&gt;if let&lt;/code&gt; construct encloses your
success code inside a block and can sometimes leave the failure code a long way
from the check which can make it less obvious. The other potential issue with
&lt;code&gt;if let&lt;/code&gt; is the &amp;ldquo;pyramid of doom&amp;rdquo; common in early Swift code as demonstrated in
this rather contrived example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func isValidAddressBookEntry(firstName: String?,
                             lastName: String?,
                             emailAddress: String?,
                             phoneNumber: String?) -&amp;gt; Bool {
        if let validFirstName = firstName {
            if let validLastName = lastName {
                if let validEmail = emailAddress {
                    if let validPhone = phoneNumber {
                        return true
                    }
                }
            }
        }
        return false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thankfully, Swift now allows us to chain both &lt;code&gt;if let&lt;/code&gt; and &lt;code&gt;guard&lt;/code&gt; statements.
Here is the previous example re-factored to use &lt;code&gt;if let&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func isValidAddressBookEntrySwift2(firstName: String?,
                                   lastName: String?,
                                   emailAddress: String?,
                                   phoneNumber: String?) -&amp;gt; Bool {
      if let validFirstName = firstName,
          let validLastName = lastName,
          let validEmail = emailAddress,
          let validPhone = phoneNumber {
          return true
      }
      return false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is the same function but using &lt;code&gt;guard&lt;/code&gt; which allows the inputs to be checked immediately and the function exited if the u=inputs are not valid. For a short function like this, the change is not really significant, but if the function does a lot of processing of the input data, checking first and getting out as soon as possible is more efficient.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func isValidAddressBookEntryUsingGuard(firstName: String?,
                                       lastName: String?,
                                       emailAddress: String?,
                                       phoneNumber: String?) -&amp;gt; Bool {
    guard
        let validFirstName = firstName,
        let validLastName = lastName,
        let validEmail = emailAddress,
        let validPhone = phoneNumber else {
            return false
    }

    return true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;use-optional-chaining&#34;&gt;Use optional chaining&lt;/h3&gt;

&lt;p&gt;The final way to deal with optionals safely is to use optional chaining:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct SocialMediaAccounts {
    var facebook: Person?
    var twitter: Person?
}

struct Person {
    var firstName: String?
    var lastName: String?
    var handle: String?
}

var socialMedia: SocialMediaAccounts?
socialMedia = SocialMediaAccounts()
var twitterAccount = Person()

socialMedia?.twitter = twitterAccount
let twitterHandle = socialMedia?.twitter?.handle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, we have defined a &lt;code&gt;SocialMediaAccounts&lt;/code&gt; struct that holds
optional &lt;code&gt;Person&lt;/code&gt; structs for the various social media outlets. The
&lt;code&gt;socialMedia&lt;/code&gt; variable is defined as an optional and then created. A
&lt;code&gt;twitterAccount&lt;/code&gt; variable of type &lt;code&gt;Person&lt;/code&gt; is also created but contains no data
at the moment.&lt;/p&gt;

&lt;p&gt;When assigning the &lt;code&gt;twitterAccount&lt;/code&gt; to the &lt;code&gt;socialMedia.twitter&lt;/code&gt; property, a ?
is inserted which checks to see that &lt;code&gt;socialMedia&lt;/code&gt; is not nil. If it is nil,
then execution of that line stops at the ? and nothing bad will happen.&lt;/p&gt;

&lt;p&gt;In the same way, when trying to read back the twitter handle, we chained
together 2 optionals with ?&amp;rsquo;s. If either &lt;code&gt;socialMedia&lt;/code&gt; or &lt;code&gt;socialMedia.twitter&lt;/code&gt;
is nil, that line will not complete. Again this is perfectly safe and the app
will not crash.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;All the examples in this article are available in a &lt;a href=&#34;https://github.com/trozware/optionals&#34;&gt;Swift playground&lt;/a&gt; which
has been updated to Swift 4 syntax.&lt;/p&gt;</description>
</item>
    
    <item>
<title>Learning Swift - For-Loops</title>
<link>https://troz.net/post/2016/learning-swift-for-loops/</link>
<pubDate>Sat, 12 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/learning-swift-for-loops/</guid>
<description>&lt;p&gt;Loops are a fundamental building block of any program. Doing repetitive tasks
fast and accurately is what computers are really good at and what we humans get
very bored doing. Swift offers several different ways to perform loops, but
today we are going to concentrate on for-loops.&lt;/p&gt;

&lt;p&gt;The most basic form of loop is the &lt;code&gt;for-in&lt;/code&gt; loop. There are two ways this can be
used: looping over the numbers in a range or looping over the elements in an
array or dictionary.&lt;/p&gt;

&lt;p&gt;Firstly, the range:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;for x in 0 ..&amp;lt; 5 { printWithSpace(x) }
// prints: 0 1 2 3 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;I am using a custom print function that allows me to print the results on a
single line for convenience.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;for-in&lt;/code&gt; loop uses a half-open range and it is effectively saying:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;start with x at 0
print x with a space
add 1 to x
is x still less than 5?
    yes - go back to the print stage
    no - stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we wanted to go all the way to 5 instead of stopping before 5, we would use a
closed range by replacing &lt;code&gt;..&amp;lt;&lt;/code&gt; with &lt;code&gt;...&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;for x in 0 ... 5 { printWithSpace(x) }
// prints: 0 1 2 3 4 5
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;These methods work fine if we want to loop through a range of numbers one at a
time but what if we want a different increment? There are several ways to vary
the step.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stride(from:to:by:)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stride(from:through:by:)&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;where&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;for x in stride(from: 0, to: 10, by: 2) {
printWithSpace(x)
}
// prints: 0 2 4 6 8
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;for x in stride(from: 0, through: 10, by: 2) {
printWithSpace(x)
}
// prints: 0 2 4 6 8 10
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The 2 variations of &lt;code&gt;stride&lt;/code&gt; are analogous to the 2 ways of expressing the range
in the the &lt;code&gt;for-in&lt;/code&gt; loop.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;stride(from:to:by:)&lt;/code&gt; starts with the number in the &lt;code&gt;from&lt;/code&gt; parameter and each
time through the loop, increments that number by the amount of the &lt;code&gt;by&lt;/code&gt;
parameter. If the incremented number is less than the &lt;code&gt;to&lt;/code&gt; parameter, the loop
continues.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;stride(from:through:by:)&lt;/code&gt; works the same way but continues until the
incremented number is greater than or equal to the &lt;code&gt;through&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;Using a negative value for &lt;code&gt;by&lt;/code&gt; allows counting backwards:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;for x in stride(from: 10, through: 0, by: -2) {
  printWithSpace(x)
}
// prints: 10 8 6 4 2 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Stride can also be used for floating point loops although the result may contain
some unexpected changes in precision e.g 0.7000000000000001 instead of the
expected 0.7&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let startingNumber = 0.1
for x in stride(from: startingNumber, through: 1.0, by: 0.2) {
  printWithSpace(x)
}
// prints: 0.1 0.3 0.5 0.7000000000000001 0.9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the result does not contain the &lt;code&gt;through&lt;/code&gt; parameter as the next
iteration would have produced 1.1 which is greater than it. And also
&lt;code&gt;startingNumber&lt;/code&gt; did not have to be a variable as it is never actually changed.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;where&lt;/code&gt; makes it possible to step through a loop while conforming to some
conditional:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;for x in 0 ... 10 where x % 3 == 0 {
  printWithSpace(x)
}
// prints: 0 3 6 9
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;The other main use for &lt;code&gt;for-in&lt;/code&gt; loops is for iterating through the elements of
an array or dictionary:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let arrayOfInts = [ 1, 2, 3, 4, 5, 6 ]
for x in arrayOfInts {
  printWithSpace(x * 2)
}
// prints: 2 4 6 8 10 12
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let myDict = [ 1: &amp;quot;one&amp;quot;, 2: &amp;quot;two&amp;quot;, 3: &amp;quot;three&amp;quot; ]
for (key, value) in myDict {
  print(&amp;quot;\(key) = \(value)&amp;quot;)
}
// prints:
// 2 = two
// 3 = three
// 1 = one
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a dictionary is un-sorted, the order of the items may vary.&lt;/p&gt;

&lt;p&gt;If you want to loop through an array while also monitoring the index of each
element, you can use &lt;code&gt;enumerated()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let arrayOfNames = [ &amp;quot;Andy&amp;quot;, &amp;quot;Buzz&amp;quot;, &amp;quot;Woody&amp;quot; ]
for (index, element) in arrayOfNames.enumerated() {
  print(&amp;quot;The name at index \(index) is \(element)&amp;quot;)
}
// prints:
// The name at index 0 is Andy
// The name at index 1 is Buzz
// The name at index 2 is Woody
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your array contains optionals, you can use &lt;code&gt;for case let&lt;/code&gt; to test each value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let arrayWithOptionals: [String?] = [ &amp;quot;Woody&amp;quot;, nil, &amp;quot;Buzz&amp;quot;, nil, &amp;quot;Rex&amp;quot; ]
for case let name? in arrayWithOptionals {
  printWithSpace(name)
}
// prints: Woody Buzz Rex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; variable is un-wrapped each time through the loop so can be used
safely.&lt;/p&gt;

&lt;p&gt;Any of these loop styles can be combined with &lt;code&gt;where&lt;/code&gt; to perform checks on each
iteration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let arrayWithOptionals: [String?] = [ &amp;quot;Woody&amp;quot;, nil, &amp;quot;Buzz&amp;quot;, nil, &amp;quot;Rex&amp;quot; ]
for case let name? in arrayWithOptionals where name.count &amp;lt; 5 {
  printWithSpace(name)
}
// prints: Buzz Rex
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Some of you may be wondering what happened to the old C-style loops like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;for var x = 0; x &amp;lt; 5; x++ { print(x, terminator: &amp;quot; &amp;quot;) }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This does not work in Swift 3+: the &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt; operators and this style of
loop declaration have been removed from the language. For further details, check
out the relevant proposals at Swift Evolution:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md&#34;&gt;Remove C-style for-loops with conditions and incrementers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md&#34;&gt;Remove the ++ and &amp;ndash; operators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;All the examples in this article are available in a &lt;a href=&#34;https://github.com/trozware/for-loops&#34;&gt;Swift playground&lt;/a&gt; now
updated to Swift 4 syntax.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Learning Swift - Generics</title>
<link>https://troz.net/post/2016/learning-swift-generics/</link>
<pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/learning-swift-generics/</guid>
<description>&lt;p&gt;One of the nice things about Swift is how clean your code looks. A lot of the
weird characters that pepper the code of other languages has been eliminated: No
more semi-colons, asterisks etc.&lt;/p&gt;

&lt;p&gt;But then you are reading somebody else&amp;rsquo;s code and you find these angle brackets
all over the place and they don&amp;rsquo;t seem to make sense.&lt;/p&gt;

&lt;p&gt;What does this mean?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func mid&amp;lt;T: Comparable&amp;gt;(array: [T]) -&amp;gt; T
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It looks like it is a function to find the middle element in an array, but what
is &lt;code&gt;&amp;lt;T: Comparable&amp;gt;&lt;/code&gt; or &lt;code&gt;[T]&lt;/code&gt; or even just &lt;code&gt;T&lt;/code&gt;? They are describing Generic data
types.&lt;/p&gt;

&lt;p&gt;Using the dictionary, I find the following definition for &lt;code&gt;generic&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;characteristic of or relating to a class or group of things; not specific.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And that really provides quite a good definition for Swift&amp;rsquo;s generics too. They
allow you to assign a non-specific data type to a function so that function can
be used for many different data types.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;But enough of the theory: by far the best way to understand generics is to
encounter the problem they are meant to solve and then to solve it.&lt;/p&gt;

&lt;p&gt;The other day I was processing data to feed to a charting library. I ended up
with an array of CGFloats, but there were too many of them, so I wrote a
function to give me the last x elements of an array of CGFloats:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func endOf(array: [CGFloat], numberOfElementsToInclude: Int) -&amp;gt; [CGFloat] {
  if numberOfElementsToInclude &amp;gt; array.count { return array }

  let startingElement = array.count - numberOfElementsToInclude
  let endOfArray = Array(array[startingElement ..&amp;lt; array.count])
  return endOfArray
}

let largeArray: [CGFloat] = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]
let smallArray = endOf(array: largeArray, numberOfElementsToInclude: 3)
//smallArray now equals [8.0, 9.0, 10.0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK, so &lt;code&gt;largeArray&lt;/code&gt; isn&amp;rsquo;t actually the largest array you have ever seen, but it
works for demo purposes. In my code, I had over 20,000 entries in the large
array and only wanted the last 5,000.&lt;/p&gt;

&lt;p&gt;I was completely happy with that until I found another data source where the
data was an array of Ints. Still perfectly chartable using my charting library,
but I could not get the end of the array using my nice function. First thought
was to replicate the function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func endOf(array: [Int], numberOfElementsToInclude: Int) -&amp;gt; [Int] {
  if numberOfElementsToInclude &amp;gt; array.count { return array }

  let startingElement = array.count - numberOfElementsToInclude
  let endOfArray = Array(array[startingElement ..&amp;lt; array.count])
  return endOfArray
}

let largeArrayInt = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] // type inferred to be Int
let smallArrayInt = endOf(array: largeArrayInt, numberOfElementsToInclude: 7)
// smallArrayInt now equals [4, 5, 6, 7, 8, 9, 10]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A quick glance will reveal that the declaration line was the only thing that
changed. I didn&amp;rsquo;t have to give the function a new name because the compiler
worked out which of the two functions to use based on the types supplied. So all
I was doing was replacing &lt;code&gt;CGFloat&lt;/code&gt; with &lt;code&gt;Int&lt;/code&gt; in two places (the
&lt;code&gt;numberOfElementsToInclude&lt;/code&gt; parameter remains an &lt;code&gt;Int&lt;/code&gt; in both cases).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As soon as you find yourself replicating code and only changing the types of
the data, that is a sign that you need to use generics.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For my first attempt at creating a generic function, all I did was replace the
word &lt;code&gt;CGFloat&lt;/code&gt; with &lt;code&gt;T&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; indicates some type that will be specified
when the function is called. The convention is to use single letters for generic
types: &lt;code&gt;T&lt;/code&gt; for Type, &lt;code&gt;A&lt;/code&gt; for AnyObject, &lt;code&gt;Z&lt;/code&gt; because you feel like it. The choice
is up to you.&lt;/p&gt;

&lt;p&gt;That produced this error:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/Generics_error.png&#34; alt=&#34;Generics error&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Use of undeclared type &#39;T&#39;&lt;/code&gt;. Well that seems fair enough&amp;hellip; how is the compiler
supposed to know what a &lt;code&gt;T&lt;/code&gt; is?&lt;/p&gt;

&lt;p&gt;It turns out that this is where the angle brackets come into play. You have to
warn the compiler that this function is going to get a generic type and that the
&lt;code&gt;T&lt;/code&gt; is only a placeholder, not a real type. So this version compiles and works -
notice the &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; between the function name and the opening bracket:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func endOf&amp;lt;T&amp;gt;(array: [T], numberOfElementsToInclude: Int) -&amp;gt; [T] {
  if numberOfElementsToInclude &amp;gt; array.count { return array }

  let startingElement = array.count - numberOfElementsToInclude
  let endOfArray = Array(array[startingElement ..&amp;lt; array.count])
  return endOfArray
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I have no code duplication and if I ever get another data set that uses a
different object type, my function will still work.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now we know to use generics instead of replicating code that operates in the
same way on different data types.&lt;/p&gt;

&lt;p&gt;And we know how to construct a generic function.&lt;/p&gt;

&lt;p&gt;Using it is identical to using the two functions I had before:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let largeArray: [CGFloat] = [ 1.0, 2.0, 3.0, 4.0, 5.0,6.0, 7.0, 8.0, 9.0, 10.0 ]
let smallArray = endOf(array: largeArray, numberOfElementsToInclude: 3)

let largeArrayInt = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] // type inferred to be Int
let smallArrayInt = endOf(array: largeArrayInt, numberOfElementsToInclude: 7)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You do not have to specify what &lt;code&gt;T&lt;/code&gt; is when calling the function, that will be
inferred from the supplied data.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Moving on into more advanced use cases, we have two things to consider:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Functions where the generic parameters must conform to a protocol.&lt;/li&gt;
&lt;li&gt;Functions that take generic parameters of different types.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The example function I started with (not mine but I forget where I got it&amp;hellip; If
it is yours, thanks you very much) used:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func mid &amp;lt;T: Comparable&amp;gt; (array: [T]) -&amp;gt; T
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of specifying the type as completely generic, it specified that it must
conform to the Comparable protocol. This is because the function body used a
&lt;code&gt;sort()&lt;/code&gt; function so the generic function needed to be sure that the elements in
the array could be compared. This technique can also be used to restrict the
parameter types to sub-classes of a certain class.&lt;/p&gt;

&lt;p&gt;For a function with more than one generic data type, you need to use more than
one placeholder letter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func genericWithTwoDifferentTypes&amp;lt;T, U&amp;gt;(param1: T, param2: U) -&amp;gt; Bool {
  // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in exactly the same way, both &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; can be set to conform to a
protocol or be members of a certain super-class.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hopefully this has taken some of the mystery out of generics, but if you have
any questions, please get in touch using the &lt;a href=&#34;https://troz.net/contact/&#34;&gt;Contact page&lt;/a&gt;, comment below or
contact me via Twitter: &lt;a href=&#34;https://twitter.com/trozware&#34;&gt;@trozware&lt;/a&gt;.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Singleton to Protocol</title>
<link>https://troz.net/post/2016/singleton-to-protocol/</link>
<pubDate>Fri, 26 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/singleton-to-protocol/</guid>
<description>

&lt;p&gt;I was driving through the town of &lt;a href=&#34;https://en.wikipedia.org/wiki/Singleton,_New_South_Wales&#34;&gt;Singleton&lt;/a&gt; the other day and of course, it
got me thinking about using singletons in my apps. Singletons were a commonly
used pattern in Objective-C programming and appear in many of Apple&amp;rsquo;s own APIs,
but seem to be increasingly frowned upon in the Swift world.&lt;/p&gt;

&lt;h2 id=&#34;so-what-is-a-singleton&#34;&gt;So what is a singleton?&lt;/h2&gt;

&lt;p&gt;A singleton is a class that only expects to have a single instance. Think of it
as a global instance of a class. In some cases this makes perfect sense if there
can only ever be one instance of a particular class or if there is a default
variant that suits most cases e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;UIApplication.shared
UserDefaults.standard
NotificationCenter.default
FileManager.default
URLSession.shared
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are using an object with a property name of &amp;ldquo;shared&amp;rdquo;, &amp;ldquo;standard&amp;rdquo; or
&amp;ldquo;default&amp;rdquo; you can be pretty sure it is an singleton.&lt;/p&gt;

&lt;h2 id=&#34;and-what-s-the-problem-with-singletons&#34;&gt;And what&amp;rsquo;s the problem with singletons?&lt;/h2&gt;

&lt;p&gt;There are probably many different opinions here but I have two thoughts about
this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;They are effectively global variables and global variables can make your code
messy and un-predictable.&lt;/li&gt;
&lt;li&gt;If they can be accessed by multiple other objects, possibly at the same time,
then you can get conflicts. These can be handled by clever use of background
queues, but it isn&amp;rsquo;t easy.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;what-to-use-instead&#34;&gt;What to use instead?&lt;/h2&gt;

&lt;p&gt;As I drove, I mused on a singleton that I had implemented recently. It was a
logging utility that allowed any object in my app (mostly view controllers) to
save a new entry to a log file. The basic structure of the Logger class was
this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Logger {
    static let sharedLogger = Logger()

    func addToLog(event: String) {
      // use private functions to find log file URL
      // append event text with time stamp
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any object in my app could use the Logger like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Logger.sharedLogger.addToLog(event: newLogEvent)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I got to think about how I was using this, I realised that instead of a
Logger &lt;em&gt;object&lt;/em&gt; that everything could use, what I really needed was a Loggable
&lt;em&gt;behaviour&lt;/em&gt; that I could apply &amp;amp; restrict to the few classes that actually
needed to log events. For me, this was the break-through:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Create a behaviour, not an object.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As soon as I started thinking about this as a behaviour, a protocol became the
obvious solution, so this is what I created:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol Loggable {
  // not declaring functions here
  // as they should NOT be over-written
}

extension Loggable {

    func addToLog(event: String) {
      // use private functions to find log file URL
      // append event text with time stamp
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We run immediately into one of the peculiarities of Swift protocol extensions
which has been very well explained by &lt;a href=&#34;https://cjwirth.com/tech/swift-protocol-extension-weirdness&#34;&gt;Caesar Wirth&lt;/a&gt;. If I had declared
&lt;code&gt;addToLog(_:)&lt;/code&gt; in the protocol, then any class or struct conforming to this
protocol would have been free to over-write this function and provide its own
version. This is not what I wanted here - I wanted every object to use the same
version. So I left the function declaration out of the protocol definition and
only included it in the protocol extension.&lt;/p&gt;

&lt;p&gt;To use this behaviour, a class or struct just has to be declared as conforming
to the Loggable protocol:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class MyClass: Loggable {
  func doSomething() {
    addToLog(event: &amp;quot;I did something!&amp;quot;)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For my app, I knew that I would want all my NSViewControllers to be able to add
log events, so instead of setting them all individually as conforming to the
protocol, I used this shortcut which extends all NSViewControllers to conform to
the protocol.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension NSViewController: Loggable {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I added this line to the Loggable.swift file where I declared the protocol and
its extension, but outside both of them.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Protocol-oriented programming is a new technique to me, so it really helps when
I can find a practical example of where it solves a problem.&lt;/p&gt;

&lt;p&gt;If you are new to POP, I highly recommend the &lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2015/408/&#34;&gt;Crusty talk&lt;/a&gt; from WWDC 2015.
And this article by &lt;a href=&#34;http://matthijshollemans.com/2015/07/22/mixins-and-traits-in-swift-2/&#34;&gt;Matthijs Hollemans&lt;/a&gt; was invaluable to me in
demonstrating the problems with object inheritance that are solved by protocols.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Three Rules for Writing Better Swift</title>
<link>https://troz.net/post/2016/three-rules-for-writing-better-swift/</link>
<pubDate>Wed, 24 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/three-rules-for-writing-better-swift/</guid>
<description>&lt;ol&gt;
&lt;li&gt;Do not use !.&lt;/li&gt;
&lt;li&gt;Use let, not var.&lt;/li&gt;
&lt;li&gt;Allow the compiler to infer types.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Read on for more details&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;1-do-not-use&#34;&gt;1. Do not use !&lt;/h2&gt;

&lt;p&gt;Swift uses optionals for values that can be nil. To use an optional value, you
need to &amp;ldquo;un-wrap&amp;rdquo; it first, which means getting the actual value out, assuming
that the value exists and the optional is not actually nil.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/post/2016-02-12-learning-swift-optionals/&#34;&gt;Optionals&lt;/a&gt; are the subject of a complete post by themselves, but for now, I
will just say this: When you use ! you are &lt;strong&gt;promising&lt;/strong&gt; the compiler that you
will make sure there is a real value in that optional by the time it is needed.&lt;/p&gt;

&lt;p&gt;If this is not the case, your app will crash as shown in this playground:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/Playground2.png&#34; alt=&#34;Playground crash&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Instead of using ! you should use optional chaining with ? or check the value
with &lt;code&gt;guard&lt;/code&gt; or &lt;code&gt;if let&lt;/code&gt; before use.&lt;/p&gt;

&lt;p&gt;One trap to beware of is with Xcode&amp;rsquo;s attempts to be helpful and suggest fixes
to problems. If you use an optional where it cannot work, Xcode will warn you
that it is incorrect, but the suggested fix will be to insert !&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/optional_fix.png&#34; alt=&#34;Optional fix&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When you see this, do not accept the suggested fix, but use it as a warning to
show that you need to fix the problem properly.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;2-use-let-not-var&#34;&gt;2. Use let, not var&lt;/h2&gt;

&lt;p&gt;Using constants in C-based languages is a pain. I could never remember the
Objective-C syntax for declaring a static constant, so used to fall back to
using &lt;code&gt;#define&lt;/code&gt; for global constants. Inside my objects, all instance properties
were variables, not constants. Inside functions, it was the same.&lt;/p&gt;

&lt;p&gt;It doesn&amp;rsquo;t take much imagination to work out that your apps will perform better
and more securely if values that do not need to change are allocated as
constants instead of variables.&lt;/p&gt;

&lt;p&gt;With Swift, this is easy as you just declare a constant using the &lt;code&gt;let&lt;/code&gt; keyword
and declare variables using &lt;code&gt;var&lt;/code&gt;. The Swift compiler will now warn you if you
have used &lt;code&gt;var&lt;/code&gt; where &lt;code&gt;let&lt;/code&gt; would do, but I prefer to declare everything using
&lt;code&gt;let&lt;/code&gt; and only change to &lt;code&gt;var&lt;/code&gt; when this causes an error as shown in this
playground example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/Playground3.png&#34; alt=&#34;Playground let error&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;3-allow-the-compiler-to-infer-types&#34;&gt;3. Allow the compiler to infer types&lt;/h2&gt;

&lt;p&gt;With Objective-C and many other languages, you have to tell the compiler exactly
what each variable is going to be: a string, an integer, an object of a certain
type.&lt;/p&gt;

&lt;p&gt;With Swift, the compiler is clever enough to work this out for you, which can
make your code much cleaner looking and easy to read.&lt;/p&gt;

&lt;p&gt;There are a few exceptions to this rule which are shown in the playground below:&lt;/p&gt;

&lt;p&gt;Lines 3 - 6 are allowing the Swift compiler to decide what the type is and it is
choosing valid types: Int, Double, String and UIView.&lt;/p&gt;

&lt;p&gt;Line 8 is a case where we do not want the default type, which would be Double so
we need to tell the compiler that this one really should be a CGFloat.&lt;/p&gt;

&lt;p&gt;Lines 10 &amp;amp; 11 both deal with an array of Ints. In line 10, the values are
supplied so the type of the array can be inferred. In the second case, the array
is initially empty, so the type needs to be specified in the declaration.&lt;/p&gt;

&lt;p&gt;Lines 13 and 14 are the same but with dictionaries instead of arrays.&lt;/p&gt;

&lt;p&gt;In each case, it would have been valid Swift to specify the type but why bother?
The more text you enter , the more change of mistake and it leaves your code
looking cluttered.&lt;/p&gt;

&lt;p&gt;If you ever need to check what type has been assigned to a constant or variable,
Option-click on it in Xcode and you willl get a popup telling you what it is.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/Playground4.png&#34; alt=&#34;Playground types&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This was going to be five rules, but then I got a bit too verbose so will add
more rules in a separate post.&lt;/p&gt;</description>
</item>
    
    <item>
<title>Configuring Xcode</title>
<link>https://troz.net/post/2016/configuring-xcode/</link>
<pubDate>Wed, 17 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/configuring-xcode/</guid>
<description>

&lt;p&gt;While not strictly a part of my Learning Swift series, today I thought I would
discuss some of the ways to configure and use Xcode to be a more productive and
comfortable programmer.&lt;/p&gt;

&lt;h2 id=&#34;1-editor-color-themes-and-fonts&#34;&gt;1. Editor color themes and fonts:&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/XcodeFontPrefs.png&#34; alt=&#34;Editor&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Step through the supplied themes and find the best one for you. Then click the
&amp;lsquo;+&amp;rsquo; button at the bottom of the list and duplicate the selected theme. Now you
can tweak it to suit you. Each text category can have its own font and size, but
you can make multiple selections in order to do a bulk change. don&amp;rsquo;t forget to
check out the Console section too - I dislike the default bold text for many of
the console reports, so always change that.&lt;/p&gt;

&lt;p&gt;An editing font should be mono-spaced i.e. every character should take up
exactly the same width on the screen. This makes your code look neater and
neater code is easier to read when you come back to it. I also much prefer a
sans-serif font, but that is a matter of preference.&lt;/p&gt;

&lt;p&gt;Menlo is the font used by Xcode as a default, but there are many other options
either in the default installation of OS X or as free downloads. I change every
now and then just to keep things interesting, but my current selection is &lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;Fira
Code&lt;/a&gt;. I love the way it merges two character symbols into a single
character for faster comprehension.&lt;/p&gt;

&lt;p&gt;My other favourites are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/adobe-fonts/source-code-pro&#34;&gt;Source Code Pro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chrissimpkins/hack&#34;&gt;Hack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mozilla/Fira&#34;&gt;Fira&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fontsquirrel.com/fonts/Inconsolata&#34;&gt;Inconsolata&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Look for a font that makes it easy to distinguish the digit &amp;lsquo;1&amp;rsquo; from a lowercase
&amp;lsquo;l&amp;rsquo; and where the digit &amp;lsquo;0&amp;rsquo; is different to the &amp;lsquo;O&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;To install and use a new font, download the files and then double-click a TTF or
OTF font file to install it in FontBook. Once the font is installed, you may
need to restart Xcode in order to make it available.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;2-add-ons&#34;&gt;2. Add-ons:&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Xcode 8 has removed the ability to run any plugins or to use
Alcatraz, so this sectrion is no longer valid. Instead Apple is offering offical
support for Xcode Source Editor Extensions, so they are the way of the future.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;3-documentation&#34;&gt;3. Documentation:&lt;/h2&gt;

&lt;p&gt;Xcode has excellent documentation, but unless you specifically download it, this
will all be accessed online. If you have a bad or non-existent connection, this
can be annoying. Go to Xcode&amp;rsquo;s Preferences -&amp;gt; Downloads and download all the
document sets you are interested in. They are quite large, but having them local
will be a big bonus.&lt;/p&gt;

&lt;p&gt;The other tool I use for documentation is &lt;a href=&#34;https://kapeli.com/dash&#34;&gt;Dash&lt;/a&gt;. It supports many languages
and is not just for use in Xcode. I found the Xcode integration plugin was not
very useful as it conflicted with other useful behaviours. So I set up a global
shortcut in System Preferences to search Dash for the selected text. This is
much faster than Xcode&amp;rsquo;s built-in documentation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/Dash.png&#34; alt=&#34;Dash&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;4-other-preferences&#34;&gt;4. Other preferences:&lt;/h2&gt;

&lt;p&gt;Go through the preference panes in Xcode&amp;rsquo;s preferences and tweak to suit your
style or your group&amp;rsquo;s preferred style.&lt;/p&gt;

&lt;p&gt;General and Text Editing are important. Text Editing has a second tab for
Indentation which is easy to miss. Indentation styles seem to cause a lot of
heated debate, so make sure you check this out.&lt;/p&gt;

&lt;p&gt;Accounts is vital if you are publishing to the App Stores and also makes it easy
to transfer all your develop information from one computer to another.&lt;/p&gt;

&lt;p&gt;Fonts &amp;amp; Colors and Downloads are discussed above.&lt;/p&gt;

&lt;p&gt;I tend to leave the others set to the defaults.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>How do I start to learn Swift?</title>
<link>https://troz.net/post/2016/how-do-i-start-to-learn-swift/</link>
<pubDate>Tue, 16 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/how-do-i-start-to-learn-swift/</guid>
<description>&lt;p&gt;The first thing to do is to download the latest version of Apple&amp;rsquo;s &lt;a href=&#34;https://itunes.apple.com/book/swift-programming-language/id881256329&#34;&gt;Swift
Programming Language book&lt;/a&gt; from the iBooks Store.&lt;/p&gt;

&lt;p&gt;You can just read this book, especially the first section: &amp;ldquo;A Swift Tour&amp;rdquo;, but
you will get more out of it if you follow along with the playground. There is a
link to download the playground from the book which you can use directly if you
are reading using iBooks on the Mac. If you are not, here is the &lt;a href=&#34;https://developer.apple.com/go/?id=swift-tour&#34;&gt;download
link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will also need to install &lt;a href=&#34;https://itunes.apple.com/app/xcode/id497799835&#34;&gt;Xcode&lt;/a&gt; from the Mac App Store. Xcode is
Apple&amp;rsquo;s IDE and is used for programming Mac, iPhones, iPads, Apple Watches and
Apple TVs.&lt;/p&gt;

&lt;p&gt;Swift introduced the playground to Xcode. A playground is a fantastic way to
learn and experiment. You do not need to create a project, build, run a separate
app, install on a device. Code typed into a playground is run immediately and
you can see the results instantly, line by line.&lt;/p&gt;

&lt;p&gt;Here is an example of a playground showing the code on the left and the result
of each line appearing on the right.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/Playground1.png&#34; alt=&#34;Playground&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Once you have gone through the Swift Tour, Apple&amp;rsquo;s book becomes more of a
reference guide to return to whenever you get stuck. The other way I use it is
to check up on changes made when a new version of Swift is released. As the
language is still rapidly evolving, these can be quite extensive. Once I have
the latest version of the book, I go to the Revision History at the back and
click the links to read about the features that have been added or changed.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Apart from Apple&amp;rsquo;s documentation, there are a lot of great web sites, blogs and
Twitter accounts out there. There are also useful newsletters that give a weekly
summary of exciting developments.&lt;/p&gt;

&lt;p&gt;Here are some of my favourites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.natashatherobot.com&#34;&gt;Natasha the Robot&lt;/a&gt; - my favourite Swift blogger - sign up for her
newsletter and follow her on Twitter.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/swift/blog/&#34;&gt;Apple&amp;rsquo;s Swift Blog&lt;/a&gt; - not many posts, but good for learning about new
features.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ericasadun.com&#34;&gt;Erica Sadun&lt;/a&gt; - sometimes a bit too technical for me, but often contains
some really useful snippets. Erica has the distinction of being the first
person outside Apple to have had a Swift language proposal accepted as part of
the open source development process.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://andybargh.com&#34;&gt;Andy Bargh&lt;/a&gt; - detailed articles on various aspects of Swift, plus a
weekly newsletter.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.raywenderlich.com&#34;&gt;Ray Wenderlich tutorials&lt;/a&gt; - search for Swift and find heaps of tutorials
covering many different aspects.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://swiftsandbox.io&#34;&gt;Swift Sandbox&lt;/a&gt; - weekly newsletter filled with interesting articles.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://swiftmonthly.com&#34;&gt;SwiftMonthly&lt;/a&gt; - useful newsletter with links to tutorials, videos and
projects.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://swiftdoc.org&#34;&gt;SwiftDoc.org&lt;/a&gt; - the documentation in Xcode is still heavily skewed
towards Objective-C programmers and it can be difficult to find Swift-specific
entries. This site makes it easy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And I hope you will keep coming back to this site to see what new Swift-related
articles are available.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Icon Builder 3.2 Released</title>
<link>https://troz.net/post/2016/icon-builder-32-released/</link>
<pubDate>Wed, 10 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/icon-builder-32-released/</guid>
<description>&lt;p&gt;&lt;a href=&#34;http://itunes.apple.com/app/icon-builder/id552293482&#34;&gt;Icon Builder 3.2&lt;/a&gt; is now available from the Mac App Store.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Icons for Apple Watch apps now have their alpha channel removed.&lt;/li&gt;
&lt;li&gt;Tidier folder structure for related files (iTunes Artwork files and Read Me).&lt;/li&gt;
&lt;li&gt;Updated to work with Xcode 7&amp;rsquo;s Assets.xcassets folders.&lt;/li&gt;
&lt;li&gt;Creates iPad Pro icons for Xcode 7.2 or later.&lt;/li&gt;
&lt;li&gt;Fix for Retina Macs creating double-sized images.&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>
    
    <item>
<title>Why is Swift so great?</title>
<link>https://troz.net/post/2016/why-is-swift-so-great/</link>
<pubDate>Wed, 10 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/why-is-swift-so-great/</guid>
<description>

&lt;p&gt;Firstly, I can give you the technical answer, as published by Apple:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Swift is a new programming language for iOS, OS X, watchOS, and tvOS apps that
builds on the best of C and Objective-C, without the constraints of C
compatibility. Swift adopts safe programming patterns and adds modern features
to make programming easier, more flexible, and more fun. Swiftâs clean slate,
backed by the mature and much-loved Cocoa and Cocoa Touch frameworks, is an
opportunity to reimagine how software development works.&lt;br&gt;&lt;br&gt; Swift has
been years in the making. Apple laid the foundation for Swift by advancing our
existing compiler, debugger, and framework infrastructure. We simplified
memory management with Automatic Reference Counting (ARC). Our framework
stack, built on the solid base of Foundation and Cocoa, has been modernized
and standardized throughout. Objective-C itself has evolved to support blocks,
collection literals, and modules, enabling framework adoption of modern
language technologies without disruption. Thanks to this groundwork, we can
now introduce a new language for the future of Apple software development.â&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Excerpt From: Apple Inc. â&lt;a href=&#34;https://itunes.apple.com/book/swift-programming-language/id881256329&#34;&gt;The Swift Programming Language (Swift 2.1)&lt;/a&gt;.â&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;now-i-can-give-you-my-opinion&#34;&gt;Now I can give you my opinion:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Swift makes for code that is easier &amp;amp; faster to write.&lt;/li&gt;
&lt;li&gt;Swift makes for code that is easier &amp;amp; cleaner to read (much more important
than ease of writing).&lt;/li&gt;
&lt;li&gt;Swift code is safer code.&lt;/li&gt;
&lt;li&gt;Swift breaks free from the out-dated conventions of C-based languages.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;When Apple announced Swift at WWDC 2105, I was astounded. That such a major
event could have been kept completely secret was amazing. Then I watched every
video from WWDC 2015 that discussed Swift. Some were beyond me and others I
absorbed. Looking back, I can see that the development of Objective-C over the
past few years was all aimed at getting to this point, especially with the
introduction of ARC and blocks.&lt;/p&gt;

&lt;p&gt;At that time, I was deeply involved in an existing Objective-C project and not
able to do much in Swift. But I went through the introduction at the start of
the &lt;a href=&#34;https://itunes.apple.com/book/swift-programming-language/id881256329&#34;&gt;Swift Programming Language&lt;/a&gt; book in iBooks and was able to get some
ideas about how the language worked.&lt;/p&gt;

&lt;p&gt;Some months later, I was able to spend time on Swift. As a learning exercise, I
converted an existing Objective-C iOS app to Swift. As might be expected, I
really just wrote Objective-C code using Swift syntax. It took a lot more
learning before I was able to write Swift-y code instead of just translated
Objective-C. In future posts of this series, I hope to enable others to cross
that divide faster than I did.&lt;/p&gt;

&lt;p&gt;Now when I go back to an Objective-C app, I feel like I am walking a tight-rope.
When I use an NSArray, NSSet or NSDictionary, I think &amp;ldquo;How can I tell what sort
of objects are in that array?&amp;ldquo;. When I use an object, I think &amp;ldquo;What if that
object is nil?&amp;ldquo;. All of a sudden, code that appeared stable now feels random.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;One of the big things that people have latched onto with Swift is that it allows
functional programming. I plan several detailed posts on functional programming
in this series. But for now I would just recommend that you not worry about the
distinction between procedural &amp;amp; functional programming. Both have their
advocates and their detractors. Both have their advantages and disadvantages.
Just do what ever works for you and we can worry about this later.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Learning Swift - An Introduction</title>
<link>https://troz.net/post/2016/learning-swift-an-introduction/</link>
<pubDate>Tue, 09 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/learning-swift-an-introduction/</guid>
<description>

&lt;h2 id=&#34;welcome-to-learning-swift&#34;&gt;Welcome to Learning Swift.&lt;/h2&gt;

&lt;p&gt;This is the first post in what I hope will be an extensive series dealing with
the Swift language. Here are some of the questions I hope to answer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Should I learn Swift? Why?&lt;/li&gt;
&lt;li&gt;Why is Swift so great?&lt;/li&gt;
&lt;li&gt;How should I start learning Swift?&lt;/li&gt;
&lt;li&gt;I already know Objective-C - how do I convert?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After that, I am planning a series of posts discussing the major differences of
Swift from the view point of an Objective-C programmer and the aspects of Swift
that I found difficult to grasp. Topics covered will include such things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;optionals&lt;/li&gt;
&lt;li&gt;closures&lt;/li&gt;
&lt;li&gt;functional programming&lt;/li&gt;
&lt;li&gt;protocols&lt;/li&gt;
&lt;li&gt;generics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am coming from a background of Objective-C, so many of my posts will be
dealing with aspects of Swift that are not familiar to Objective-C programmers.
I will not assume any Objective-C programming experience, but some features of
Swift that are new to me, will be familiar to people accustomed to other
languages.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So let&amp;rsquo;s start by answering the first question:&lt;/p&gt;

&lt;h2 id=&#34;should-i-learn-swift&#34;&gt;Should I learn Swift?&lt;/h2&gt;

&lt;p&gt;If you are writing or planning apps for any Apple platform - YES.&lt;br&gt; If not,
wait until Swift is available for the platforms you need to support.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;why&#34;&gt;Why?&lt;/h2&gt;

&lt;h3 id=&#34;if-you-are-already-an-ios-or-mac-developer-yes&#34;&gt;If you are already an iOS or Mac developer: YES&lt;/h3&gt;

&lt;p&gt;This is the new language and Apple is very committed to it. Objective-C is not
going away any time soon, but Swift is where it is going to end up, so why not
make the jump now while the language is still in development? You have to accept
that fact that every release of Xcode is going to break your code, but the
automatic re-factoring works very well. And by moving to Swift now, you get the
chance to influence the direction of a new language. How often does that happen?&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;if-you-are-starting-to-learn-ios-or-mac-development-yes&#34;&gt;If you are starting to learn iOS or Mac development: YES&lt;/h3&gt;

&lt;p&gt;If you have no history with Objective-C, then do not waste your time learning
it. There is still a lot of sample code out there in Objective-C, but increasing
numbers of tutorial sites are using Swift and converting their existing
tutorials to Swift. It will help if you know just enough Objective-C to read it,
but you do not need to know enough to write it.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;if-you-do-not-program-for-mac-or-ios-not-yet&#34;&gt;If you do NOT program for Mac or iOS: NOT YET&lt;/h3&gt;

&lt;p&gt;Swift went open source in late 2015. This is a big deal and Apple&amp;rsquo;s plans for
Swift are quite clear. They want Swift to be such a main-stream language that it
is used instead of Java for basic computer science courses in universities. This
was never going to happen unless the language was open-source and
cross-platform. It is now open-source and available for &lt;a href=&#34;https://swift.org/download/#latest-development-snapshots&#34;&gt;Linux as well as
Mac/iOS&lt;/a&gt;. While Apple has not yet released any further ports, I think there
are more on the way for Raspberry Pi, Arduino and other embedded systems as well
as server-side Swift libraries like &lt;a href=&#34;http://perfect.org&#34;&gt;Perfect&lt;/a&gt;. I expect that a version for
Windows will not be far behind.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>New Twitter account</title>
<link>https://troz.net/post/2016/new-twitter-account/</link>
<pubDate>Tue, 09 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/new-twitter-account/</guid>
<description>&lt;p&gt;I have started a new Twitter account so that I can provide rapid support to
users of my apps. Please contact me &lt;a href=&#34;https://twitter.com/trozware&#34;&gt;@trozware&lt;/a&gt; if you have any questions,
suggestions, bug reports or would just like to chat.&lt;/p&gt;

&lt;p&gt;I will also be using this account to promote my new &lt;a href=&#34;https://troz.net/post/2016-02-09-learning-swift-an-introduction/&#34;&gt;Learning Swift&lt;/a&gt; series.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Possible issues with Icon Builder &amp; Watch icons</title>
<link>https://troz.net/post/2016/possible-issues-with-iconbuilder/</link>
<pubDate>Sat, 06 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/possible-issues-with-iconbuilder/</guid>
<description>&lt;p&gt;It has come to my attention that there are two possible issues with Icon Builder
3.0.1 when using icons created for an Apple Watch app. Once of them is something
I can fix and the other appears to be a bug in Xcode 7.2&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Version 3.2 of Icon Builder is now available in the &lt;a href=&#34;http://itunes.apple.com/app/icon-builder/id552293482&#34;&gt;Mac App
Store&lt;/a&gt;. This removes the alpha channel from icons for a watch app.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The first problem is that iTines Connect now requires that the icons for an
Apple Watch app include no alpha channel. This is becoming an increasing trend
with it first having applied to the large icon file you upload directly to
iTunes Connect, then to screen shots. I expect it to extend to iOS app icons
soon, but hopefully Mac app icons can continue to include transparency.&lt;/p&gt;

&lt;p&gt;With Apple Watch icons, you are supposed to create a set of square icons and
watchOS or iTunesConnect applies the rounding mask. Presumably this is more
complicated if the icon contains an alpha channel even if there are no
transparent pixels. If your Watch app icons contain an alpha channel, you will
see errors like this after uploading your app to iTunes Connect:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Invalid Icon - The watch application &amp;lsquo;AppName.app/Watch/AppName WatchKit
App.app&amp;rsquo; contains an icon file &amp;lsquo;AppName.app/Watch/AppName WatchKit
App.app/AppIcon-Watch24x24@2x.png&amp;rsquo; with an alpha channel. Icons should not
have an alpha channel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will probably get this error message for every icon size in the Watch app (8
in total). Until I release a new version of Icon Builder that allows for this
this, I suggest you use this &lt;a href=&#34;https://www.cocoacontrols.com/controls/alpha-channel-remover&#34;&gt;Alpha Channel Remover app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In your Xcode project, go to WatchKit App Assets.xcassets, select the AppIcon
set, right-click and choose &amp;ldquo;Show in Finder&amp;rdquo;. A folder will open containing
eight .png files and one .json file. Drag &amp;amp; drop the .png files into the Alpha
Channel Remover window and click the &amp;ldquo;Remove Alpha Channel&amp;rdquo; button. This will
replace all those image files with new versions without alpha channels. To
confirm this, select any of the images and press Command-I to get info. In the
More Info section, you will see &amp;ldquo;Alpha channel: No&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;You can now submit your app again, but that only solves one of the issues.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The other problem is that you will get a warning about the 44x44@2x.png icon
file.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Invalid Icon Name - The watch application &amp;lsquo;AppName.app/Watch/AppName WatchKit
App.app&amp;rsquo; contains an invalid icon file name &amp;lsquo;AppName.app/Watch/AppName
WatchKit App.app/AppIcon-Watch44x44@2x.png&amp;rsquo;. Make sure that icon file names
follow the pattern&lt;br&gt; &amp;ldquo;&lt;code&gt;*&amp;lt;dimension&amp;gt;@&amp;lt;scale&amp;gt;x.png&lt;/code&gt;&amp;rdquo; and they match the
required dimensions. Please visit &lt;a href=&#34;https://developer.apple.com/watchkit/&#34;&gt;https://developer.apple.com/watchkit/&lt;/a&gt; for
more information.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see in the error message, the icon name (which is set by Xcode) does
conform to the required pattern, and the image is the correct size. This appears
to be a &lt;a href=&#34;http://www.openradar.me/23801324&#34;&gt;bug in Xcode 7.2&lt;/a&gt; but does not stop you from submitting your app as
it is only a warning and not an error. Presumably this will be fixed in later
version of Xcode. I am running Xcode 7.2.1 and still see this warning.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Man Reader 1.5</title>
<link>https://troz.net/post/2016/man-reader-1.5/</link>
<pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/man-reader-1.5/</guid>
<description>

&lt;p&gt;Man Reader has been updated to version 1.5 with a major improvement in the way
it looks for available man pages.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/manreader/&#34;&gt;Man Reader 1.5&lt;/a&gt; is now available through the &lt;a href=&#34;http://itunes.apple.com/app/man-reader/id522583774?mt=12&#34;&gt;Mac App Store&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;change-log&#34;&gt;Change Log:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Much improved searching for available man pages.&lt;/li&gt;
&lt;li&gt;Sand-boxed version now works just as well as the non-sand-boxed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main feature of this version is that it solves the previous problems with
the App Store version and sand-boxing. This was restricting the number of man
pages listed in Man Reader so I had to release a non-sand-boxed version of the
app to allow for full functionality.&lt;/p&gt;

&lt;p&gt;However I discovered that although this gave better results, it was still
missing a lot of man pages. Version 1.5 now queries the man page files in a
completely different way which is listing many more man pages.&lt;/p&gt;

&lt;p&gt;If you previously had downloaded the Man Reader (no SB) version of the app from
this site, please revert to the App Store version which you would have needed to
have bought in order to use the downloaded app. If you bought the app from
Paddle, &lt;a href=&#34;mailto:sarah@troz.net?subject=Man%20Reader%20transfer%20to%20App%20Store&#34;&gt;contact me&lt;/a&gt; and I will transfer you to the App Store version.
Neither of these other versions will be supported or updated any more.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Using 19th Hole on the Apple Watch</title>
<link>https://troz.net/post/2015/using-19th-hole-on-the-apple-watch/</link>
<pubDate>Sat, 12 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2015/using-19th-hole-on-the-apple-watch/</guid>
<description>&lt;p&gt;19th Hole for iPhone and Apple Watch version 3 is now available through the
&lt;a href=&#34;https://itunes.apple.com/us/app/the-19th-hole/id871686159?mt=8&amp;amp;uo=4&#34;&gt;iTunes App Store&lt;/a&gt;. This version is a complete re-write to accommodate the
changes in iOS 9 and watchOS2.&lt;/p&gt;

&lt;p&gt;The major changes are to do with the way the iPhone and the Watch communicate.
In watchOS1, all the brains of the app had to live in the iPhone, meaning that
every single interaction on the Watch had to be referred back to the iPhone for
processing and the result sent back to the Watch for display. This lead to
communications delays and breakdowns which caused third-party apps to work
sluggishly or not at all. In watchOS2, the brains of the watch part of the app
can now operate inside the watch, greatly reducing the number of communications
needed. As well as that, Apple has now provided us with multiple ways of getting
data to and from the Watch which again improves performance and reliability.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;With the 19th Hole, I made the decision to change the method of inputting
scores. The previous version used a slider with plus and minus buttons to adjust
scores. The problems with this were the small target area of the plus &amp;amp; minus
buttons as well as the fact that a slider with more than about 3 divisions was
not useful as a visual indicator.&lt;/p&gt;

&lt;p&gt;When watchOS2 allowed developers access to the digital crown, I decided to
switch to using that instead. Now you tap the score box of the player you wish
to adjust and use the digital crown to select a number. I think this will be
easier to use while wearing a glove and hope that it is still easy to read out
doors.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The other suggestion is not to do with watchOS2 but is a general tip for using
apps of this kind. By default, the Apple Watch will always show the watch face
when you raise your wrist. Normally this is the most useful thing, but when
scoring a round of golf, it would be easier if The 19th Hole app stayed at the
front. To make this happen, you need to set to watch to show the last used app
instead of the watch face. This can be set using the Apple Watch app on the
phone or on the watch itself.&lt;/p&gt;

&lt;p&gt;On the phone:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open the Apple Watch app.&lt;/li&gt;
&lt;li&gt;Select My Watch from the tabs at the bottom.&lt;/li&gt;
&lt;li&gt;Tap &amp;ldquo;General&amp;rdquo; and then scroll down to tap &amp;ldquo;Wake Screen&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Make sure &amp;ldquo;Resume Last Activity&amp;rdquo; is checked.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the watch:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Press the digital crown to see the app icons.&lt;/li&gt;
&lt;li&gt;Find and tap the Settings icon.&lt;/li&gt;
&lt;li&gt;Scroll down and tap &amp;ldquo;General&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Tap &amp;ldquo;Wake Screen&amp;rdquo; and scroll down to make sure that &amp;ldquo;Previous Activity&amp;rdquo; is
checked in the &amp;ldquo;Resume To&amp;rdquo; section.&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>
    
    <item>
<title>Dice Pass for Mac</title>
<link>https://troz.net/post/2015/dice-pass-for-mac/</link>
<pubDate>Sat, 30 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2015/dice-pass-for-mac/</guid>
<description>&lt;p&gt;We live in a world of passwords and passphrases and there is a constant struggle
between having a secure and a memorable password. As a result, many of us re-use
passwords even though we know this is a bad idea.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://xkcd.com/936/&#34;&gt;XKCD&lt;/a&gt; had a wonderful comic that illustrated the theory of using a
passphrase composed of words that are easy to remember but with a combination
that made the passphrase very hard to guess. However even when deciding to use a
passphrase like this, it is not easy for us humans to avoid using words that
have meaning for us, particularly when it is something we really need to
remember.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://world.std.com/~reinhold/diceware.html&#34;&gt;Diceware&lt;/a&gt; was developed to solve this problem. You have a set of 5 dice and
a list of words assigned to each possible dice roll for 11111 to 66666. You roll
the five dice and get the matching word from the list. Repeat this for the
number of words you want to use in your passphrase and you have a random phrase
that is hopefully still memorable.&lt;/p&gt;

&lt;p&gt;But this sounds like a lot of effort and not something you are likely to do when
faced by a password entry field on a web page. So &lt;a href=&#34;https://troz.net/dicepass/&#34;&gt;Dice Pass&lt;/a&gt; was written to
do the work for you quickly and easily.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/DicePass_Mac.png&#34; alt=&#34;Dice Pass for Mac&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Select the number of words you want in your passphrase and see the phrase
immediately. Keep clicking the &amp;ldquo;Generate New Phrase&amp;rdquo; button until you get a
phrase you like. If you feel that the computer is not to be trusted when
generating a random number for the dice rolls, use your real dice and click the
dice to change them to the roll you got. If you get a passphrase that is good
except for one or two words, use the Re-Roll button beside those words to get a
new roll for just that word.&lt;/p&gt;

&lt;p&gt;Dice Pass is available from the &lt;a href=&#34;https://itunes.apple.com/app/dice-pass/id997688302?mt=12&amp;amp;uo=4&#34;&gt;Mac App Store&lt;/a&gt; now.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Dice Pass</title>
<link>https://troz.net/dicepass/</link>
<pubDate>Fri, 29 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/dicepass/</guid>
<description>

&lt;p&gt;Dice Pass is available from the &lt;a href=&#34;https://itunes.apple.com/us/app/dice-pass/id997688302&#34;&gt;Mac App Store&lt;/a&gt; and version 3.2 (released 26th September 2018) supports macOS Mojave&amp;rsquo;s dark mode.&lt;/p&gt;

&lt;p&gt;Dice Pass is a utility to app to generate random passphrases based on the
&lt;a href=&#34;http://world.std.com/~reinhold/diceware.html&#34;&gt;Diceware system&lt;/a&gt;. Diceware uses a table of pre-defined words, each assigned
a 5 digit code number containing the digits 1 to 6. The official way to generate
a phrase is to roll 5 dice for each word you want in your passphrase and then
consult the words table to find the matching word.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/DicePass_Mac.png&#34; alt=&#34;Dice Pass for Mac&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The resulting phrase uses real words or common abbreviations, so it is easier to
remember than a random collection of characters. At the same time, the random
selection of words makes the generated passphrase much more secure as it avoids
the human tendency to pick words with personal meaning.&lt;/p&gt;

&lt;p&gt;The Diceware system was invented by Arnold Reinhold. This utility is not
associated with or supported by Arnold Reinhold in any way, but uses his
techniques with thanks. For more information about Diceware, have a look at the
&lt;a href=&#34;http://world.std.com/%7Ereinhold/dicewarefaq.html&#34;&gt;Diceware Passphrase FAQ page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The default word list used in this app is a variation compiled by &lt;a href=&#34;http://world.std.com/~reinhold/beale.wordlist.asc&#34;&gt;Alan
Beale&lt;/a&gt; that removes some of the more obscure words. But you can select the
original Diceware word list or the Diceware 8k word list fromt rh Word List menu
if you prefer to use something different. You can also provide your own word
list file if you prefer.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;f-a-q&#34;&gt;F.A.Q.&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;How many words should I use in my passphrase?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Arnold Reinhold recommends 6 words. He used to suggest that 5 was sufficient for
most needs, but as of 2014 has increased this to 6. See the Diceware Passphrase
FAQ page for more details. (Link above.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How often can I re-generate the passphrase?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As often as you like. Keep clicking until you get a phrase that you can
remember. If you get a phrase where most of the words are good but you would
like to change one or two, you can click &amp;rsquo;Re-Roll&amp;rsquo; on individual words to change
them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is there a way to check the strength of my passphrase?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are many password strength checkers on the internet and three of these are
listed below. But always be careful when pasting your passphrase into a web
page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Online password strength checkers:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rumkin.com/tools/password/passchk.php&#34;&gt;Rumkin.com Strength Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://howsecureismypassword.net&#34;&gt;How Secure Is My Password?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.passwordmeter.com&#34;&gt;The Password Meter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Some of the words in the phrase are not complete words.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The theory is that shorter words or abbreviations are easier to remember than
long ones, without compromising security. But if you get a word you don&amp;rsquo;t like
or think that you will not be able to remember, just re-roll that word.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if I want to roll the dice myself?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Dice Pass allows you to tap on the 5 dice to set the numbers needed for each
word manually. Each time you tap the number will go up be one, wrapping from 6
back to 1. The app will then look up the word table for you and show the new
word.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When the phrase gets too long I can&amp;rsquo;t see all the words.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;Copy&amp;rdquo; button will copy the complete passphrase even if it is not all
visible. You can also scroll by clicking and dragging along the passphrase.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Does my passphrase get saved by the app or transmitted over the internet?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No. The app saves no data except for basic preferences (window positioning &amp;amp;
size, preferred word list etc.). There is never any data sent over the network
and the app will work perfectly if you disconnect your computer before using.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are those 3 buttons: #, A and 1?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Some sites may require a passphrase that contains a mix of character types.
These buttons will insert a special character, change the start of one word to
uppercase, or insert a number. Tap the button again to undo the change. Again,
these characters are chosen using the dice roll system and the special
characters are selected and positioned using the method and data suggested by
Arnold Reinhold.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I thought there was a version of Dice Pass for iOS!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There was, but with the need to update apps to support iOS 10, I decided to drop
support for some under-performing iOS apps. If you bought the iOS version and
would like to switch to the Mac, send me a screen shot of the app running on
your iPhone or iPad and I will send you a free promo code for the Mac version.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Apple Watch First Impressions</title>
<link>https://troz.net/post/2015/apple-watch-first-impressions/</link>
<pubDate>Wed, 29 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2015/apple-watch-first-impressions/</guid>
<description>

&lt;p&gt;I realise that every one has written one of these posts, but given that everyone
looks for and notices different things, I think it is still valid.&lt;/p&gt;

&lt;p&gt;My first impression was &amp;ldquo;Why does it come in such a large box?&amp;rdquo;. The courier
delivered two boxes - my 38mm Apple Watch Sport and Tim&amp;rsquo;s 42mm Apple Watch
Sport. They both came in long boxes, with the 42mm box significantly longer. And
both boxes were heavy!&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;un-boxing&#34;&gt;Un-boxing:&lt;/h3&gt;

&lt;p&gt;Opening them was a typical Apple experience: pull the tag to open the external
cardboard box, lift out the white internal box. This opens to reveal the watch
with the default strap attached (short for 38mm, long for 42mm). Lift the watch
out and pull the tags to remove the plastic protective coating. (On a side note,
it drives me crazy when people leave this coating on devices, but I can&amp;rsquo;t see
this happening on the watch.) Underneath there is a sleeve containing the other
half watch strap so you can swap from long to short. My family tells me that
this also includes a user guide, but I didnât read that - typical Apple user&amp;hellip;
Under the sleeve is the power block and charging cable. The charging puck is
larger than I expected and the cable is very long. Having removed all the
components, the packaging is still quite heavy, so I guess Apple just wanted to
make sure that no watches were damaged in transit and that it felt like a
quality product.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;pairing&#34;&gt;Pairing&lt;/h3&gt;

&lt;p&gt;Pairing my watch to my iPhone was amazingly slick. After selecting my language,
the watch displayed a sort of nebula pattern. On the iPhone, I launched the
Apple Watch app, selected the pairing option and pointed the phone camera at the
watch display. This did the pairing. Then I waited while all the relevant apps
transferred their Apple Watch components to the watch and I was ready to start
using it.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;the-watch&#34;&gt;The Watch:&lt;/h3&gt;

&lt;p&gt;The watch comes with the modular watch face showing by default. This is a
digital time read-out with various &amp;lsquo;complications&amp;rsquo;. Force-touch the watch face
to change it - this takes a surprisingly strong touch. Then you can swipe
sideways to select a watch style. Once you have a style selected, some of them
offer further customisations: select how much detail is shown, choose what extra
information to display, adjust colors.&lt;/p&gt;

&lt;p&gt;This is a lot of fun and I am still changing mine very frequently. The good
thing is that your customisations are stored, so if you set up the utility watch
face in a particular way, then swap to the modular and configure it, when you go
back to utility, your previous settings are all still there.&lt;/p&gt;

&lt;p&gt;The screen is gorgeous - very crisp and easy to read.&lt;/p&gt;

&lt;p&gt;Twisting your wrist to show the time works well most of the time. There is a
delay that I would estimate at about half a second, presumably to avoid false
positives triggering unnecessary displays. If you are holding your wrist at an
unusual angle e.g. showing the watch to someone, this twist will not always
work, but tapping the screen will display the watch face instantly.&lt;/p&gt;

&lt;p&gt;Tapping on a complication will take you to the relevant parent app e.g. tapping
the current temperature will open the Weather app.&lt;/p&gt;

&lt;p&gt;A minor quibble is that the phases of the moon are displayed from a northern
hemisphere point of view and do not match what we actually see here in
Australia.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;battery-life&#34;&gt;Battery Life:&lt;/h3&gt;

&lt;p&gt;This is a complete non-issue. On my first day with the watch, the battery was at
70% when I first turned it on. As you can imagine, usage was very intense that
first day and I got to 8%. Since then, the battery level has only got down to 40
-50% over a day and it recharges to 100% within 2 hours. Tim&amp;rsquo;s 42mm model gets
slightly better battery life as expected.&lt;/p&gt;

&lt;p&gt;I started off having the battery indicator as one of the &amp;lsquo;complications&amp;rsquo; on my
watch face, but now I just ignore it.&lt;/p&gt;

&lt;p&gt;And the battery life of my iPhone has improved remarkably due to so many quick
transactions being done through the watch instead.&lt;/p&gt;

&lt;p&gt;I did have a charging problem one night. I woke up and checked the time and
realised that the watch was quite warm to the touch. I checked the battery level
which was actually lower than when I had put it on the charger. I took it off
the charger for a few hours, then put it back and all was well.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;notifications&#34;&gt;Notifications&lt;/h3&gt;

&lt;p&gt;Here is where you need to be careful. I had turned off most notifications on my
phone before getting the watch, so I have not been inconvenienced, in fact I
have been able to re-enable many notifications as they are no longer so
intrusive.&lt;/p&gt;

&lt;p&gt;At first we thought some notifications were not getting through to the watch,
then we found out that if your iPhone is awake and un-locked, notifications are
not passed on to the watch. So drop the time until sleep on your phone to the
minimum which saves your phone battery and makes sure you receive most
notifications on the watch.&lt;/p&gt;

&lt;p&gt;If you want to stop any apps sending notifications through to the watch, this is
easily set in the iPhone&amp;rsquo;s Apple Watch app.&lt;/p&gt;

&lt;p&gt;I have noticed there is a bit of a delay. I hear an email or message arriving on
my phone and it can be half a minute before it gets to my watch.&lt;/p&gt;

&lt;p&gt;Once you get a notification, you can tap it to go to the parent app, swipe up to
process it in some way depending on the type of notification, or swipe to the
left to see a button that will clear the notification. If you want to get rid of
all your notifications at once, do a force-touch on the notifications screen to
get the option to clear them all.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;glances&#34;&gt;Glances&lt;/h3&gt;

&lt;p&gt;Glances are designed to be one screen indicators giving you important
information as quickly as possible. From there, you can decide whether to go to
the parent app or not. These are accessed by swiping up from the bottom of the
screen when looking at the watch face.&lt;/p&gt;

&lt;p&gt;I found that the most important thing here was to reduce the number of glances
shown, since they are displayed sequentially. If you have 20 glances installed,
you have to swipe at least 20 times to see them all. So go to the Apple Watch
app on your iPhone and turn off the glances you do not find essential.&lt;/p&gt;

&lt;p&gt;The first glance in the sequence is essential though as it allows you to toggle
airplane mode, do not disturb and silent mode. It also has a button that can
make your iPhone make a sound to help you locate it. Hold this button down to
make the iPhone flash come on as well.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;activity&#34;&gt;Activity&lt;/h3&gt;

&lt;p&gt;Here I have to confess to my first disappointment. The activity app tracks three
things: Move, Exercise and Stand. When you first start the watch, you tell it
your age, sex, weight and height. It computes a suggested daily move goal for
you which you can adjust at any time. Then it tracks your daily activities and
shows how well you are doing in relation to your goal. For exercise and standing
the goals are 30 minutes exercise and standing for at least one minute in an
hour 12 times though the day.&lt;/p&gt;

&lt;p&gt;The move tracking seems to be fine. I am not sure what metrics it uses, but on
more active days, the numbers go up.&lt;/p&gt;

&lt;p&gt;The exercise one doesn&amp;rsquo;t work for me. We went for a walk and when we returned,
Tim&amp;rsquo;s watch showed 25 minutes exercise and mine showed 1 minute. We had walked
the same distance at the same speed, as confirmed by the pedometer. Subsequent
tests revealed that I don&amp;rsquo;t swing my arms enough when walking to trigger what
ever sensor this is using. I can&amp;rsquo;t quite see why it ignores the pedometer
completely, but hopefully this can be fixed by a software update. For now, I
just ignore this circle.&lt;/p&gt;

&lt;p&gt;Standing is another issue since I use a standing desk, so I stand for many hours
each day. Even when standing, I get my hourly reminders to stand. However I use
this as a trigger to make me to move about for a minute, so I suppose that is
still useful.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;communications&#34;&gt;Communications&lt;/h3&gt;

&lt;p&gt;The various forms of communication are a real strength of the watch. With Tim &amp;amp;
I both having watches, we can phone, message (audio or text) and use the new
Digital Touch to send sketches, taps or heart beats. While it feels a bit weird
to be talking to your wrist, this works really well and the sound quality is
amazing for such a small device. If you need more privacy, it is very easy to
transfer a phone call back to your phone.&lt;/p&gt;

&lt;p&gt;Oddly, the watch does not appear to offer FaceTime but always uses standard
phone calls.&lt;/p&gt;

&lt;p&gt;Messages are where the watch excels. If you get a message with a question, the
watch can suggest possible answers so you just have to tap a button. Even
without this, there is a set of pre-defined answers which you can edit in the
Apple Watch app on your iPhone. And you can also use dictation or the new
animated emojis. Dictation seems a lot better on the watch than it ever was
before on the phone. And even if dictation is not transcribed perfectly, you can
send the message as an audio recording instead of text.&lt;/p&gt;

&lt;p&gt;When recording, tap the Done button as soon as you have finished speaking. The
inclination is to wait for the text to be processed, but the recording carries
on, so stop the recording and let the text processing finish in its own time.&lt;/p&gt;

&lt;p&gt;The animated emojis work when you send them to other devices as they appear as
GIFs. You can choose from 3 sets: faces, hands and hearts. Once you have swiped
to select a set, use the crown to scroll between the options. You can also swipe
further to get to the standard emojis.&lt;/p&gt;

&lt;p&gt;Digital Touch works between watches only. It is a fun gimmick and I can imagine
us developing a set of key codes or sketches, but neither of us can draw very
well, so the sketches are very rough. The heart beat is amusing, but the tapping
is surprisingly effective as an attention-getter.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;I think this is the start of a new way of interacting with our technology in a
way that is both closer to us and less intrusive. I am loving the watch so far
and can&amp;rsquo;t wait to see where it goes from here.&lt;/p&gt;

&lt;hr /&gt;
</description>
</item>
    
    <item>
<title>Time In Words 4.0</title>
<link>https://troz.net/post/2015/time-in-words-4.0/</link>
<pubDate>Wed, 15 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2015/time-in-words-4.0/</guid>
<description>&lt;p&gt;&lt;a href=&#34;https://troz.net/time-in-words/&#34;&gt;Time In Words&lt;/a&gt; for iOS started off as a fun gimmick, emulating the
&lt;a href=&#34;http://www.qlocktwo.com/&#34;&gt;Qlocktwo&lt;/a&gt; type of time display where the relevant words are highlighted in
some way to spell out the time as a sentence. This very quickly evolved into
what I hoped would be more useful app, still showing the original display, but
also providing the current time &amp;amp; date as complete sentences. Then I added time
conversions and discovered the real power and utility of writing out times as
words.&lt;/p&gt;

&lt;p&gt;When it comes to converting times, I doubt there are many people in the world
who haven&amp;rsquo;t had problems.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is that morning or afternoon for them?&lt;/li&gt;
&lt;li&gt;Are they in tomorrow, today or yesterday?&lt;/li&gt;
&lt;li&gt;What if they are using daylight-savings?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Having the time written out removes all ambiguity. As an example, Time In Words
currently reports very clearly:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In Los Angeles, it is nine minutes to ten on Tuesday evening (daylight-savings
time).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When writing &lt;a href=&#34;https://troz.net/time-in-words-for-mac/&#34;&gt;Time In Words for Mac&lt;/a&gt;, I focussed immediately on the time zone
conversion facilities, and provided a menu bar app that can display as many time
zones as you like (although more than will show on a single screen would
probably get annoying).&lt;/p&gt;

&lt;p&gt;So when I decided to do a complete re-write of Time In Words for iOS, the
obvious move was to emulate the Mac version and allow for as many time zones as
the user wants, instead of the current 2 or 4 (iPhone or iPad). So I discarded
the Qlocktwo display and the separate date display which used a similar
mechanic. I kept the display that shows the current date and time, but every
display after that shows the time in a different time zone. The time zones can
be changed and re-ordered, so the ones you need most are the fastest to get to
once the app opens.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;One new feature (again taken from the Mac version), is the ability to calculate
&amp;ldquo;What time will it be&amp;hellip;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/TiW_what_time.png&#34; alt=&#34;What time&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You dial in your local date and time to see what time that will be in your
selected zone. And if you want to calculate the other way around, tap the &amp;ldquo;Swap
time zones&amp;rdquo; button.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The main impetus for a re-write was the Apple Watch. I thought this would be a
perfect app for the watch as it could use the Apple Watch&amp;rsquo;s superb time-keeping
in conjunction with my text generation, to add a significant level of usability
to the Apple Watch as regards time zone conversions.&lt;/p&gt;

&lt;p&gt;Sadly, Apple disagreesâ¦&lt;/p&gt;

&lt;p&gt;I completed the app and submitted it to the App Store for review. The review
process seems to be very fast at the moment and the app moved into review only
one day later. And there it stuck for 3 days. This was very odd. My experience
is that once an app gets into review, it only takes a few hours, if that. For
&lt;a href=&#34;https://troz.net/19th-hole/&#34;&gt;19th Hole&lt;/a&gt; - my other app with an Apple Watch component, the review process
took 30 hours. But 3 days!&lt;/p&gt;

&lt;p&gt;Then I got a phone call from Apple where a very polite person explained to me
that although this was not mentioned in any of the documentation, the marketing
people had decided that no apps were to be allowed on the watch if they told the
time.&lt;/p&gt;

&lt;p&gt;I offered to remove the initial screen telling the local time, so the app would
not actually supply the current time but only the time conversions, but that was
not acceptable either.&lt;/p&gt;

&lt;p&gt;Then I tried appealing the rejection. My hopes were not high, but I didn&amp;rsquo;t see
any harm in asking. I again offered to remove the local time display and
emphasised the accessibility advantages of displaying times in this manner.
Another day, another phone call, another polite Apple person saying no.&lt;/p&gt;

&lt;p&gt;So now I have re-submitted the app for review without the Apple Watch component,
which is a shame. I am hoping that after some months they will review this
policy and allow me to try again, but who knows.&lt;/p&gt;

&lt;p&gt;So you can see what you are missing, here are a couple of screen shots from the
watch app showing my local time, plus one time zone:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/Watch_1.png&#34; alt=&#34;Local time&#34; /&gt;
&lt;span class=&#34;float_right&#34;&gt;&lt;img src=&#34;https://troz.net/images/Watch_2.png&#34; alt=&#34;Converted time&#34; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;One more minor point. People who actually look at version numbers may wonder why
I have gone from version 2.5 to version 4.0. When I was working on version 2.5,
I considered making it version 3.0 and then changed my mind. However by that
time I had already created a version 3.0 in iTunesConnect, so I was not able to
use 3.0 again this time. This version was such a big change that I wanted it to
be a .0 release, so that meant going to version 4.0&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Apple Watch App - Rejected, then Accepted</title>
<link>https://troz.net/post/2015/apple-watch-rejected-then-accepted/</link>
<pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2015/apple-watch-rejected-then-accepted/</guid>
<description>&lt;p&gt;As described in a &lt;a href=&#34;https://troz.net/post/2015-04-02-my-first-apple-watch-app/&#34;&gt;previous post&lt;/a&gt;, about 9 days ago I submitted my first
Apple Watch app for review. The app was an extension of my golf scoring app:
&lt;a href=&#34;https://troz.net/19th-hole/&#34;&gt;The 19th Hole&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I expected that App Store review times would go up dramatically once Apple had
allowed developers to submit watch apps, but this proved to be incorrect. Three
days after submission, the app was marked as &amp;ldquo;In Review&amp;rdquo;. This seemed to happen
last thing on a Saturday, so there was no further action for two days, at which
point the app was rejected, with the following details (sic):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We noticed an issue in your app that contributes to a lower quality user
experience than Apple users expect. Specifically,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;while using the Apple Watch app with the phone app is in the background mode
(display off), the new data entry on the Watch App does not refresh
accordingly until the phone app is turn back on.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;So it appeared that the communication between the watch and the phone, which
worked perfectly on the simulators, did not work at all on the actual devices.
This is the problem with developing for a device that you do not have.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;After some research, it appears that the problem is with the phone not operating
correctly in background mode. Apple provides for communications from the watch
to the phone. The phone can respond, but only the watch can initiate a
connection. I guess this makes sense since every watch will be paired with a
phone but the reverse will not always be true.&lt;/p&gt;

&lt;p&gt;To talk to the phone, the watch uses this function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func openParentApplication(_ userInfo: [NSObject : AnyObject],
  reply reply: (([NSObject : AnyObject]!, NSError!) -&amp;gt; Void)?) -&amp;gt; Bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The phone listens for messages in this event handler:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func application(_ application: UIApplication,
  handleWatchKitExtensionRequest userInfo: [NSObject : AnyObject]?,
  reply reply: (([NSObject : AnyObject]!) -&amp;gt; Void)!)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The name of the WatchKit function is slightly misleading as it does open the
parent application, but only in the background. Then the parent app is supposed
to do whatever tasks are called for in the handleWatchKitExtensionRequest
function, and return any required data using the supplied reply() function.&lt;/p&gt;

&lt;p&gt;So far, so good, and it all worked perfectly in the simulator. But it appears
that although this call wakes the iPhone app, it does not stay awake long enough
to do anything. Many thanks to Brian at &lt;a href=&#34;http://www.fiveminutewatchkit.com/blog/2015/3/11/one-weird-trick-to-fix-openparentapplicationreply&#34;&gt;Five Minute WatchKit&lt;/a&gt; who pointed
out the way to make this work. Firstly, you create a dummy background task
guaranteed to keep the iPhone app awake for 2 seconds. Then you perform your own
work, using another background task. When that is finished, the phone can send
the response and end the real background task. The dummy task will time out by
itself after 2 seconds.&lt;/p&gt;

&lt;p&gt;For my needs, I could probably reduce the 2 seconds considerably, but since this
is a problem I am unable to test, I decided just to go with Brian&amp;rsquo;s suggestion
as it is.&lt;/p&gt;

&lt;p&gt;I re-submitted the app the same day it was rejected, and two days later it was
back in review. The review process took longer than usual, but about 30 hours
later, the app was marked &amp;ldquo;Pending an Apple Release&amp;rdquo;. I assumed this meant that
Apple would release all WatchKit apps on 24th April when the watches shipped,
but the following day the app was reported as &amp;ldquo;Pending Developer Release&amp;rdquo; (I had
set it to release manually). Now I have told iTunesConnect to release the app
and it is &amp;ldquo;Processing for App Store&amp;rdquo;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;On a related note, the start of pre-ordering for the Apple Watch was scheduled
for a very civilised 5:01 pm here in eastern Australia. I had three watches all
lined up in my Favorites in the Apple Store app, ready for ordering. When the
store became live (at about 5:03 pm), I could not work out how to order all
three in a single operation, so had to place these orders one at a time. I got
the first two ordered for the soonest possible delivery, but by the time I got
to the third (about 3 minutes later), I had missed out and it will ship in 4 to
6 weeks!&lt;/p&gt;
</description>
</item>
    
    <item>
<title>My First Apple Watch App</title>
<link>https://troz.net/post/2015/my-first-apple-watch-app/</link>
<pubDate>Thu, 02 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2015/my-first-apple-watch-app/</guid>
<description>&lt;p&gt;I have just submitted my first Apple Watch app to the iTunes App Store. This is
a scary thing to do, since I have never seen, touched or used an Apple Watch and
all I had to go on was the Simulator that Apple supplies with Xcode.&lt;/p&gt;

&lt;p&gt;At the moment, Apple has only made a limited set of Apple Watch features
available to developers, and all Apple Watch apps come tethered to an iOS app -
presumably this will mainly be iPhone apps, but I wonder will we be able to
connect Apple Watches to iPads? Anyway, it made sense to extend one of my
existing apps to use the Apple Watch instead of starting from scratch.&lt;/p&gt;

&lt;p&gt;Of my &lt;a href=&#34;https://troz.net/apps-ios/&#34;&gt;iOS apps&lt;/a&gt;, I decided that &lt;a href=&#34;https://troz.net/19th-hole/&#34;&gt;The 19th Hole&lt;/a&gt;, my golf scoring app,
would be well suited to the Apple Watch. The problem with using the iPhone
version to score is that you have to keep pulling your iPhone in and out of your
golf bag, sometimes in the rain, sometimes in bright sunlight. Being able to
enter the scores on your wrist sounds like a big improvement. We know that the
Apple Watch is at least somewhat water-resistant, but we are yet to see how well
it performs in bright sunlight, however I would expect that Apple has put
considerable effort into this.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Once I decided to write an Apple Watch app, the first step was to learn how. I
read all Apple&amp;rsquo;s published documents to get a feel for what was possible and
what user-interface objects would be available. I find online courses very
helpful and by far the best Apple Watch course that I found was &lt;a href=&#34;http://www.raywenderlich.com/video-tutorials#watchkit&#34;&gt;Ray
Wenderlich&amp;rsquo;s WatchKit video tutorial series&lt;/a&gt;. The instructors were very clear
and explained how the layout and sizing of objects works on the Apple Watch, as
well as how to set up and move between views and how to communicate from the
Watch back to the iPhone. The layout section of the course was particularly
valuable as no other course I found even mentioned this, although it is crucial
to the interface design and allowing for the two sizes of watch.&lt;/p&gt;

&lt;p&gt;I had released an update to &lt;a href=&#34;https://troz.net/19th-hole/&#34;&gt;The 19th Hole&lt;/a&gt; recently in preparation for this.
I wanted to have squashed the bugs and updated the interface, so the only
changes needed would be the WatchKit ones.&lt;/p&gt;

&lt;p&gt;The first step in adding a WatchKit app to your existing app is to create a new
target in the Xcode project. Choosing WatchKit actually adds two new targets:
the WatchKit Extension which lives on the iPhone and supplies the code for the
Watch, and the WatchKit App which lives on the Watch and provides the interface.&lt;/p&gt;

&lt;p&gt;I decided to use a paged interface with one page per hole. Each of these pages
has a table, with one row per player. A slider with plus &amp;amp; minus buttons lets
you enter the score for each player and the total score for each player is also
displayed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/19thHole-Watch2.png&#34; alt=&#34;Data entry&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Apart from this data entry view, I have a splash screen which shows you the
current round as set up on the iPhone and a final summary screen showing
everyone&amp;rsquo;s totals.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/19thHole-Watch1.png&#34; alt=&#34;Splash screen&#34; /&gt;
&lt;img src=&#34;https://troz.net/images/19thHole-Watch3.png&#34; alt=&#34;Summary&#34; /&gt;&lt;/p&gt;

&lt;p&gt;These images are taken from the Apple Watch simulator running in 42mm mode.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The biggest programming problem was getting the communications working beween
the two devices. The 19th Hole uses Core Data for all data storage. My first
attempt shared this data between the two apps, allowing both to read and update
the database. This almost worked, but if both apps were open, then changes in
one device did not get across to the other. It seemed that the data was cached
and I was unable to find a way to force either app to update every time.&lt;/p&gt;

&lt;p&gt;My next attempt kept all the data in the iPhone app and had the WatchKit
extension ask for whatever data it needed and send changes to the iPhone app.
This worked much better and I was able to get live updates between the two
devices.&lt;/p&gt;

&lt;p&gt;The other issue is the fact that I have never seen, touched or used an Apple
Watch. This means that I had to guess a lot of things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;how well will it perform?&lt;/li&gt;
&lt;li&gt;will the icon look OK?&lt;/li&gt;
&lt;li&gt;are the controls large enough to use?&lt;/li&gt;
&lt;li&gt;will the text be large enough to read?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My main philosophy was to keep the Watch app as simple as possible and use the
standard interface elements, font sizes etc. Hopefully that will work.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The final step was submitting the app to iTunes Connect for review. It was not
clear to me how to do this, so I logged into iTunes Connect, created a new
version and entered the meta-data. I couldn&amp;rsquo;t see anywhere to say anything about
the Watch. I archived the main iOS app as usual and validated it with the Store.
I had a few things to fix up, but I got the build submitted.&lt;/p&gt;

&lt;p&gt;Back to iTunes Connect and once the uploaded build had been processed, I was
able to select it and click &amp;ldquo;Submit for Review&amp;rdquo;. At this point, the page
reported an error and showed me a new section where I could upload the Apple
Watch icon and screen shots.&lt;/p&gt;

&lt;p&gt;I had been unsure how the icon would look when made round, but it looks OK on
the iTunes Connect page. How it will look on a tiny watch screen remains to be
seen. Anyway, once I had my icon and screen shots uploaded, I was able to
proceed to the next step. But then I got a message saying that the app could not
be processed - no explanation. Thankfully, I had seen some developers on Twitter
reporting this, and somebody said that the solution was to remove the alpha
channel from your screen shots. Sorry for not giving credit here - I forget who
said this, but it worked, so thank you whoever you are.&lt;/p&gt;

&lt;p&gt;So now my app is waiting for review and who knows how long that will take.
According to &lt;a href=&#34;http://appreviewtimes.com&#34;&gt;App Review Times&lt;/a&gt;, the current estimate is 8 days, but the
trend is heading upwards. I would expect that to blow out in the next few weeks
as developers try to get their apps ready for the Apple Watch release date of
April 24th.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>LiveCode stacks</title>
<link>https://troz.net/post/2015/livecode-stacks/</link>
<pubDate>Wed, 18 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2015/livecode-stacks/</guid>
<description>&lt;p&gt;When I converted my site to Jekyll &amp;amp; GitHub, one of the things I left behind was
a collection of LiveCode (Revolution) stacks. For many years I was active in the
Revolution community before going in other directions and over that time, I
built up a small library of stacks that I released into the public domain.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://livecode.com&#34;&gt;LiveCode&lt;/a&gt; is a cross-platform rapid development environment. There is an
open source community edition available for anyone wishing to get started.&lt;/p&gt;

&lt;p&gt;I had assumed that since I had not been an active LiveCode user for many years,
these stacks would have become worthless. But in the last couple of days, I have
received a couple of queries from people looking for them.&lt;/p&gt;

&lt;p&gt;So I created a new GitHub repository and uploaded them all to here: &lt;br&gt;
&lt;a href=&#34;https://github.com/trozware/rev_stacks&#34;&gt;LiveCode stacks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;None of these stacks have been updated recently, but feel free to use or adapt
as you see fit. They have not been tested using recent versions of LiveCode, so
may not work as expected. As stacks are provided as is. Use at your own risk.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Icon Builder 3.0.1</title>
<link>https://troz.net/post/2015/icon-builder-3.0.1/</link>
<pubDate>Tue, 17 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2015/icon-builder-3.0.1/</guid>
<description>

&lt;p&gt;So why an announcement for such a minor upgrade?&lt;/p&gt;

&lt;p&gt;Version 3.0 got no announcement because it was not the release I wanted.&lt;/p&gt;

&lt;p&gt;Having downloaded the Xcode 6.2 &amp;amp; 6.3 betas, I had worked out what icons were
needed to a WatchKit app. This, combined with several other changes, made me
bump the version number to 3.0.&lt;/p&gt;

&lt;p&gt;Sadly, Apple rejected the update because it referred to pre-release products. So
I pulled all mentions of WatchKit out of the interface and meta data and got 3.0
released.&lt;/p&gt;

&lt;p&gt;After the Apple keynote on March 9th, I re-enabled the WatchKit portions of the
app and re-submitted to the App Store, hoping that with the WatchKit SDK now
part of the official Xcode release, Apple&amp;rsquo;s reviewers would allow it to get
through this time.&lt;/p&gt;

&lt;p&gt;This worked - in fact the app was reviewed and accepted within 6 days - so now
Icon Builder adds WatchKit to its list of supported platforms.&lt;/p&gt;

&lt;p&gt;Actually, Apple may have done me a favour in rejecting the first one as they
changed the specifications for the icons slightly between Xcode 6.2 beta and
Xcode 6.2 release.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://troz.net/icon-builder/&#34;&gt;Icon Builder page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/us/app/icon-builder/id552293482?mt=12&amp;amp;uo=4&#34;&gt;Mac App Store link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;what-s-new-in-version-3&#34;&gt;Whatâs New in version 3?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Support for WatchKit app icons (version 3.0.1)&lt;/li&gt;
&lt;li&gt;Simplified interface: removed display of smaller icons.&lt;/li&gt;
&lt;li&gt;Fix for @3x images not being saved when you selected iOS 6 support.&lt;/li&gt;
&lt;li&gt;iTunesArtwork@2x file now saved as a JPG to avoid iTunes Connect errors.&lt;/li&gt;
&lt;li&gt;Removed CarPlay icon - Xcode sometimes gave errors when this was included.&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>
    
    <item>
<title>19th Hole</title>
<link>https://troz.net/19th-hole/</link>
<pubDate>Mon, 16 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/19th-hole/</guid>
<description>

&lt;p&gt;19th Hole is the golf scoring app for everyone, and it is available from the
&lt;a href=&#34;https://itunes.apple.com/us/app/the-19th-hole/id871686159?mt=8&amp;uo=4&#34; target=&#34;itunes_store&#34;&gt;iTunes
App Store&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Whether you are playing for the club championship, having a weekend round with
friends or playing pitch&amp;rsquo;n&amp;rsquo;putt with the kids, 19th Hole makes it easy to keep
score.&lt;/p&gt;

&lt;p&gt;Designed for fast, accurate score keeping with a color scheme chosen for optimal
outdoor viewing, 19th Hole uses a simple setup process and an intuitive,
gesture-based score entry system. During and after the round, you can see totals
and results using various methods: total strokes, total putts, match play (Irish
match play for more than 2 players) &amp;amp; Stableford.&lt;/p&gt;

&lt;p&gt;19th Hole now includes an Apple Watch app so strokes can be entered quickly and
easily using the watch to avoid having to pull your iPhone out of your bag.&lt;/p&gt;

&lt;p&gt;When you have finished, you can archive the score card for future reference and
email the completed card to your fellow players.&lt;/p&gt;

&lt;h2 id=&#34;scoring-a-round-is-very-simple&#34;&gt;Scoring a round is very simple:&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Select a course - the last played course is pre-selected.&lt;/li&gt;
&lt;li&gt;Select the players - the last set of players is pre-selected.&lt;/li&gt;
&lt;li&gt;Tap &amp;lsquo;Start Round&amp;rsquo;&lt;/li&gt;
&lt;li&gt;Optionally enter the players&amp;rsquo; handicaps - the last used handicaps are
pre-selected.&lt;/li&gt;
&lt;li&gt;After each hole, enter the strokes played by each person, on your iPhone or
Apple Watch.&lt;/li&gt;
&lt;li&gt;You can also record putts and various other statistics (iPhone only).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/19-1_4-500.png&#34; alt=&#34;Scoring&#34; /&gt;
&lt;br&gt;iPhone&lt;/p&gt;

&lt;p&gt;&lt;img title=&#34;Watch Scoring&#34; alt=&#34;Watch Scoring&#34; src=&#34;https://troz.net/images/19thHole-Watch-v3.jpg&#34; /&gt;
&lt;br&gt;Apple Watch&lt;/p&gt;

&lt;p&gt;Courses only need to be entered once and are then saved for future use.&lt;br /&gt;
Enter the course name, number of holes and select the tees in use. For each hole,
enter the par, index/handicap, and the distance from each tee.&lt;/p&gt;

&lt;p&gt;If you are in a hurry to start the round, enter the name of the course and the
number of holes. The rest of the data can be entered for each hole as you play,
or can be edited later.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/19-3_4-500.png&#34; alt=&#34;Adding a course&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Players can be selected from your Contacts or entered manually. Add email
addresses so the completed cards can be emailed after the round. Choose an icon
for each player. If a player was selected from Contacts, you can use the photo
assigned in the Contacts app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/19-4_4-500.png&#34; alt=&#34;Adding a player&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;gesture-controlled&#34;&gt;Gesture-controlled:&lt;/h2&gt;

&lt;p&gt;All scores are entered using a special number button that you tap, then drag
your finger up or down the screen to raise or lower the number.&lt;/p&gt;

&lt;p&gt;Hold your finger down on the number, then move it up or down to change the
number displayed. To make it easier to see what you are doing, hold your finger
down on the number, then first drag to one side before dragging up or down. Play
the video below to see how this works.&lt;/p&gt;

&lt;video controls poster=&#34;/images/19thHole-scoring-web.png&#34;&gt;
  &lt;source src=&#34;https://troz.net/images/19thHole-scoring-web.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;

&lt;p&gt;&lt;br&gt;
To change hole, swipe left or right in the lower half of the screen, below the line. Swiping back from hole 1 allows you to change the handicaps. Swiping on from the last hole takes you to Notes where you can record any interesting events during this round.&lt;/p&gt;

&lt;p&gt;During a round, cumulative statistics are shown at the bottom of the screen.&lt;br /&gt;
For a more complete score card, you can swipe downwards in the middle of the screen.&lt;/p&gt;

&lt;p&gt;Tap on the hole details at the top of the screen to edit that data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/19-5_4-500.png&#34; alt=&#34;Gestures&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;after-the-game&#34;&gt;After the game:&lt;/h2&gt;

&lt;p&gt;While relaxing at &amp;ldquo;The 19th Hole&amp;rdquo; after the game, you can check the scores and
swipe back and forth between holes to see what happened during the round.&lt;/p&gt;

&lt;p&gt;Once you are sure the scores are correct, tap the &amp;ldquo;Action&amp;rdquo; button in the top
right. You can add some notes to the round at this point or archive the round so
that the completed score card is saved on your iPhone. After this, you will not
be able to make any further changes.&lt;/p&gt;

&lt;p&gt;Completed rounds are listed when you tap &amp;ldquo;See Old Cards&amp;rdquo; with the most recent at
the top. Tap one to see the complete score card for that round. Tap &amp;ldquo;Strokes&amp;rdquo;,
&amp;ldquo;Putts&amp;rdquo; or &amp;ldquo;Stableford&amp;rdquo; to change what is shown for each hole. The summary is
shown at the bottom.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/19-2_4-500.png&#34; alt=&#34;Final Score Card&#34; /&gt;&lt;/p&gt;
</description>
</item>
    
    <item>
<title>App Store Preview Videos</title>
<link>https://troz.net/post/2015/app-store-preview-videos/</link>
<pubDate>Mon, 16 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2015/app-store-preview-videos/</guid>
<description>&lt;p&gt;Apple now allows app developers to add a video preview of their app when
uploading to iTunes Connect. This video is shown to potential purchasers when
they are looking at an app in the iTunes App Store, just like the screen shots.&lt;/p&gt;

&lt;p&gt;I have been working on an update to &lt;a href=&#34;https://troz.net/19th-hole/&#34;&gt;19th Hole&lt;/a&gt; and since it uses a custom
method for data input, I decided that a video would be really useful in this
case.&lt;/p&gt;

&lt;p&gt;The first step was to work out how to record video from my iPhone. In OS X
Yosemite (10.10), this can be done using QuickTime Player. Connect your device
to your Mac using a Lightning cable (I think it has to be a Lightning cable -
the old cables will not work). Open up QuickTime Player and choose &amp;ldquo;New Movie
Recording&amp;rdquo; from the File menu. By default this shows input from the Mac&amp;rsquo;s
FaceTime camera, but just to the right of the red Record button, there is a down
arrow that shows a popup menu. Click this and you can select your iPhone as the
Camera. Since I wanted the sound effects included, I also selected my iPhone as
the Microphone, but if you want to provide a voice-over or sound-track, you
might want to change this.&lt;/p&gt;

&lt;p&gt;That handles the technical side of recording, but I needed a way to show where I
was tapping and pressing on the iPhone screen. After some searching, I found
&lt;a href=&#34;https://github.com/toddreed/Touchpose&#34;&gt;Touchpose&lt;/a&gt; which was exactly what I wanted. Since it requires changing the
main.m file, as well as changes to the app delegate, I created a branch in my
app&amp;rsquo;s git repository so that I could apply these changes temporarily, but save
them for next time. The only alternation I made to the default settings was to
change the color of the cursor indicator to suit the color scheme of my app. And
since this was a temporary change, I set it to show the cursor indicator all the
time, not just when the screen was mirrored. All the details are shown in the
sample project.&lt;/p&gt;

&lt;p&gt;Next step was to actually record a session. After my first attempt (which lasted
about 67 seconds), I checked the Apple specs and found that the video could not
be longer than 30 seconds. So I re-thought what I wanted to include and tried
again. It took a few tries to get what I wanted, but finally I ended up with a
.mov file that was 26 seconds long.&lt;/p&gt;

&lt;p&gt;On to iTunes Connect where I had the new version of the app set up already with
its screen shots. Since I have an iPhone 6, the video was only suited for the
4.7 inch section. So I dragged it into the drop zone and waited. No good - the
video frame rate was too high. It has to be 30 fps or less. QuickTime Player had
made a video that was 50 fps.&lt;/p&gt;

&lt;p&gt;The app I usually turn to for any video conversion needs is &lt;a href=&#34;https://handbrake.fr&#34;&gt;Handbrake&lt;/a&gt;. So I
ran the app through Handbrake, specifying a frame rate of 30. This converted the
video to .mp4 instead of .mov, but it was 30 fps. It wasn&amp;rsquo;t until I tried to
upload it to iTunes Connect that I realised Handbrake had cropped the video from
750 x 1334 to 750 x 1330. After searching through the settings, I found where I
needed to turn on custom clipping and set it to 0 so that the original
dimensions were preserved. But iTunes Connect still didn&amp;rsquo;t like it, although
this time the error message was un-informative.&lt;/p&gt;

&lt;p&gt;Eventually, the brains trust on the other side of the room suggested iMovie. Not
only that, but he found that once the original had been dragged into iMovie, the
share options included an &amp;ldquo;App Preview&amp;rdquo; setting. This gave us a .mov file of the
correct dimensions and the correct frame rate which iTunes Connect accepted.&lt;/p&gt;

&lt;p&gt;iTunes Connect that allowed me to select the poster frame for the video and save
the changes to the app meta data. At that point, it showed a notice saying that
the app preview was being processed which could take up to 24 hours. It appears
that the processing has been finished, as that notice has disappeared.&lt;/p&gt;

&lt;p&gt;For the next stage, I ned to wait until the app gets reviewed and hopefully
approved. Then it will be interesting to see how the video looks in the iTunes
App Store.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;As a reward for reading this post, here is a pre-release of the video, showing
how to enter the score data for a hole of golf using &lt;a href=&#34;https://troz.net/19th-hole/&#34;&gt;19th Hole&lt;/a&gt;:&lt;/p&gt;

&lt;video controls poster=&#34;/images/19thHole-scoring-web.png&#34;&gt;
  &lt;source src=&#34;https://troz.net/images/19thHole-scoring-web.mp4&#34; type=&#34;video/mp4&#34;&gt;
    Your browser does not support the video tag.
&lt;/video&gt;
</description>
</item>
    
    <item>
<title>Testing automation</title>
<link>https://troz.net/post/2015/testing-automation/</link>
<pubDate>Thu, 12 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2015/testing-automation/</guid>
<description>&lt;p&gt;Today I am experimenting with automating post generation.&lt;/p&gt;

&lt;p&gt;Firstly, there is the structure of the post Markdown document, which really
boils down to the file name and the header.&lt;/p&gt;

&lt;p&gt;I have set up a macro in &lt;a href=&#34;http://www.ergonis.com/products/typinator/&#34;&gt;Typinator&lt;/a&gt; so that I just type the title of the
post in a text document. I copy that title to the clipboard and type the
shortcut. The header is then created with the title and the formatted permalink.&lt;/p&gt;

&lt;p&gt;To save the document, I use another Typinator snippet to convert the title
(still in the clipboard) to lower case and to replace the spaces in the title
with dashes.&lt;/p&gt;

&lt;p&gt;For starting the local Jekyll server, I have turned to an &lt;a href=&#34;http://www.alfredapp.com&#34;&gt;Alfred&lt;/a&gt; workflow.
I have two actions in the workflow. One opens Terminal, cd&amp;rsquo;s to my site folder
and runs the command to start the local Jekyll server. The second opens my
default browser to the local Jekyll test address.&lt;/p&gt;

&lt;p&gt;Both these actions happen simultaneously so the browser usually fails until
refreshed. The server is left running in Terminal so I can shut it down when
finished testing.&lt;/p&gt;

&lt;p&gt;After writing the post, the final stage is to publish, so I need to work out the
commands for doing a git commit and push. Then I should be able to automate
those tasks.&lt;/p&gt;

&lt;p&gt;Testing the git commands using Terminal, I have come up with the following
sequence:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add .
git commit -a -m &amp;quot;Commit message here&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The commit message could be the title of the post, so I need a way to construct
the command and then execute it. Typinator is good at text manipulation, so I
constructed another macro that takes the clipboard, uses it as the commit
message and performs the git commands. This gave a good commit message, but the
actual commit failed, so that was no use.&lt;/p&gt;

&lt;p&gt;So then I went back to Alfred and created a workflow there with a series of
Terminal commands to perform the actions above. This only allows a generic
commit message, but it works as expected.&lt;/p&gt;

&lt;p&gt;So there is still room for improvement, but with a set of macros, I can automate
a lot of the standard text entry, which is always good for reducing errors.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The sequence now is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the text editor and type the title of the post.&lt;/li&gt;
&lt;li&gt;Cut this into the clipboard.&lt;/li&gt;
&lt;li&gt;Run the Typinator macro to fill in the post header.&lt;/li&gt;
&lt;li&gt;Save the post file, using the Typinator macro to construct the file name.&lt;/li&gt;
&lt;li&gt;Write the post, then use an Alfred workflow to test it locally.&lt;/li&gt;
&lt;li&gt;When ready, use an Alfred workflow to publish.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
</description>
</item>
    
    <item>
<title>Workflow for writing a post</title>
<link>https://troz.net/post/2015/workflow-for-writing-a-post/</link>
<pubDate>Tue, 10 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2015/workflow-for-writing-a-post/</guid>
<description>&lt;p&gt;So here is where I need to get used to Jekyll and how things are done. I will
end up automating this when I am sure of the process, but for now, I am just
going to work my way through it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Start up the local Jekyll server:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I opened Terminal and used &lt;code&gt;cd&lt;/code&gt; to get to the folder containing my site.&lt;/li&gt;
&lt;li&gt;Next I started the Jekyll server locally using &lt;code&gt;jekyll serve&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This gave me the address of the local server - in my case
&lt;code&gt;http://127.0.0.1:4000/&lt;/code&gt; - so I went there in my browser to see the default
page.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;My goal is to write a new blog post (this one in fact).&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For advice on creating a new post, I went to the &lt;a href=&#34;http://jekyllrb.com/docs/posts/&#34;&gt;Jekyll docs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Jekyll needs the file name to be a specific format which includes the date
and title.&lt;/li&gt;
&lt;li&gt;Looking in the &lt;code&gt;_posts&lt;/code&gt; folder of the site folder, I see the previous post
file is titled &lt;code&gt;2015-03-08-new-site-for-trozware.md&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;As it is now 10th March 2015, I am saving this file as:
&lt;code&gt;2015-03-10-workflow-for-writing-a-post.md&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Saving at this point shows a Jekyll error in the Terminal, but the next
stage will fix that.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Front matter:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jekyll specifies that each file must have a &lt;a href=&#34;http://jekyllrb.com/docs/frontmatter/&#34;&gt;front matter block&lt;/a&gt; in a
certain format.&lt;/li&gt;
&lt;li&gt;The header has certain essential parameters and then more optional ones.&lt;/li&gt;
&lt;li&gt;My site was imported from WordPress, so the older posts contain several
header parameters that may not be necessary any more.&lt;/li&gt;
&lt;li&gt;Look at the screen shot below to see what I have in this post file:&lt;/li&gt;
&lt;li&gt;After saving, I see this entry in my Terminal:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Regenerating: 1 file(s) changed at 2015-03-10 13:50:40 ...done in 0.421789
seconds.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Now I can see the title and the start of the post on my first page and when
clicking on it, I can see all the text.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Adding an image:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is not really necessary for this post, but I wanted to document it as
part of the workflow.&lt;/li&gt;
&lt;li&gt;I wanted to show the front matter and start of this post, so I took a
screen shot of the top of my editor window.&lt;/li&gt;
&lt;li&gt;Then I renamed the image file and moved it into the &lt;code&gt;images&lt;/code&gt; folder of my
site.&lt;/li&gt;
&lt;li&gt;Now to embed the image using this Markdown: &lt;code&gt;![Post header][2]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;As you can see, I prefer to group all links (images &amp;amp; URLs) at the end of
the document and keep the body of the text as clean as possible.&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://troz.net/images/post_header.png&#34; alt=&#34;Post header&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Proofing:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now that I have the text of my post, I need to proof-read it from the local
Jekyll server.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;jekyll serve&lt;/code&gt; command running in Terminal keeps the pages up-to-date
as you edit, but you will need to refresh your page in the browser manually
to check your changes.&lt;/li&gt;
&lt;li&gt;And I have found that if you make a major change to the site e.g. a CSS
file or a config file, then it is best to stop the Jekyll server and start
it again to make it re-build all the files.&lt;/li&gt;
&lt;li&gt;To be completely sure, stop the server and run &lt;code&gt;jekyll build&lt;/code&gt; in Terminal
although this may only do what &lt;code&gt;jekyll serve&lt;/code&gt; does on startup anyway.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Publishing:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now it is time to publish.&lt;/li&gt;
&lt;li&gt;As I am using GitHub Pages to host, the site files are all part of a single
Git repository.&lt;/li&gt;
&lt;li&gt;And as I understand it, the data &lt;strong&gt;must&lt;/strong&gt; be in the &lt;code&gt;master&lt;/code&gt; branch.&lt;/li&gt;
&lt;li&gt;Opening up the GitHub client, I see that my repository has a bunch of
changes: - the file I am working on - the image I inserted - feed.xml -
index.html files for each page&lt;/li&gt;
&lt;li&gt;This is as expected, since all pages are pre-generated when using Jekyll,
so pages of posts must be re-rendered when a new post is added to the top.&lt;/li&gt;
&lt;li&gt;Note that several of the files appear twice: once from where they are
edited and once from the _site folder which serves them.&lt;/li&gt;
&lt;li&gt;Just two simple steps now, using the GitHub client: 1. Commit 2. Sync&lt;/li&gt;
&lt;li&gt;And that&amp;rsquo;s it. My new post is online and ready for reading.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This was my first post after the one I wrote when setting up, so the first
real post.&lt;/li&gt;
&lt;li&gt;While there appear to be a lot of steps, none of them are difficult.&lt;/li&gt;
&lt;li&gt;But I do have 4 apps running to do it: 1. TextWrangler for editing 1.
Terminal to run the local Jekyll server 1. Safari to check the finished
post 1. GitHub to commit and upload&lt;/li&gt;
&lt;li&gt;Automating this is an obvious next step, so stay tuned&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
</item>
    
    <item>
<title>New Site for TrozWare</title>
<link>https://troz.net/post/2015/new-site-for-trozware/</link>
<pubDate>Sun, 08 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2015/new-site-for-trozware/</guid>
<description>

&lt;h2 id=&#34;welcome-to-trozware-s-new-site&#34;&gt;Welcome to TrozWare&amp;rsquo;s new site.&lt;/h2&gt;

&lt;p&gt;It appears that I am not alone in deciding to move away from WordPress.
WordPress is great - easy to set up and with lots of cool themes to allow
customisation of your site. But it is slow, especially if (like me) you are
running on a low-cost shared server.&lt;/p&gt;

&lt;p&gt;I had been reading about &lt;a href=&#34;http://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt;, so I decide to give it a go and also host
my site on &lt;a href=&#34;https://pages.github.com&#34;&gt;GitHub&lt;/a&gt;, taking advantage of their faster servers.&lt;/p&gt;

&lt;p&gt;I followed the advice given by &lt;a href=&#34;http://www.girliemac.com/blog/2013/12/27/wordpress-to-jekyll/&#34;&gt;Girlie Mac&lt;/a&gt; and performed the migration from
my self-hosted WordPress site. I am using the &lt;a href=&#34;http://pixyll.com&#34;&gt;Pixyll&lt;/a&gt; theme by &lt;a href=&#34;http://johnotander.com&#34;&gt;John
Otander&lt;/a&gt; with a few tweaks of my own. The site is much faster to load, and I
am hoping that the easier editing will inspire me to write more posts.&lt;/p&gt;

&lt;p&gt;Of course it wasn&amp;rsquo;t all positive. WordPress did give me some features I liked,
but I think overall the result is better.&lt;/p&gt;

&lt;h3 id=&#34;wordpress&#34;&gt;WordPress&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;WordPress gave me a full LAMP stack, so I could run my own PHP scripts.&lt;/li&gt;
&lt;li&gt;WordPress gave me a search function.&lt;/li&gt;
&lt;li&gt;Commenting was built-in.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;jekyll&#34;&gt;Jekyll&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Jekyll builds the pages out as static HTML, so all pages are pre-generated for
fast loading.&lt;/li&gt;
&lt;li&gt;Writing for Jekyll is pure Markdown so it is easier to write and preview
locally.&lt;/li&gt;
&lt;li&gt;Some of the things I needed a plugin for in WordPress can be done natively in
Jekyll: - tables - syntax-highlighting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For comments, I have switched to &lt;a href=&#34;https://disqus.com&#34;&gt;Disqus&lt;/a&gt;, but I am not sure about it yet. I
will evaluate over the next few weeks. In WordPress, I used a plugin to handle
the spam that inevitably arrived. I am hoping that Disqus will protect me from
that, but I have to see how good a job it does and whether the few real comments
are worth it. A better option might be to turn off comments completely and just
have a contact form (which I have added using &lt;a href=&#34;http://formspree.io&#34;&gt;Formspree&lt;/a&gt;). Working in
Markdown is great. I love how I can have a really clean look in my editor and
still end up with well formatted HTML. I use Coda 2 on my Mac as my standard web
editor, so that is what I am writing in now. I will probably experiment with
other Markdown editors as I go. And for any Mac users out there working in
Markdown, I highly recommend &lt;a href=&#34;http://brettterpstra.com/projects/markdown-service-tools/&#34;&gt;Brett Terpstra&amp;rsquo;s Markdown Service Tools&lt;/a&gt;.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>World Time In Words</title>
<link>https://troz.net/world-time-in-words/</link>
<pubDate>Tue, 10 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/world-time-in-words/</guid>
<description>&lt;p&gt;&lt;a href=&#34;http://itunes.apple.com/au/app/time-in-words/id509085586?mt=8&#34; target=&#34;_blank&#34;&gt;World
Time In Words version 3.0&lt;/a&gt; is now available in the Mac App Store.&lt;/p&gt;

&lt;p&gt;With version 3.0 of this app, I have changed the name to &amp;ldquo;World Time In Words&amp;rdquo;.
This is to reflect what I feel to be the most useful feature of this app: the
ability to convert between time zones.&lt;/p&gt;

&lt;p&gt;It has two other new features:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The time shown in the menu bar can now be set to use 24-hour time. Go to
Preferences to change this.&lt;/li&gt;
&lt;li&gt;If you temporarily need to see the time in digital format, hold down Option
when opening the menu.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And there is one other thing in this version that I am almost too embarrassed to
mention: after using this app for about two years, it was finally pointed out to
me that the 3rd of every month was being shown as the &amp;ldquo;3th&amp;rdquo;. Oh dear - it was a
copy-paste error but I should I found it a long time ago.&lt;/p&gt;

&lt;p&gt;As always, please let me know if you have any suggestions for future versions.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Man Reader 1.4 Now Available</title>
<link>https://troz.net/post/2014/man-reader-1-4-now-available/</link>
<pubDate>Thu, 03 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2014/man-reader-1-4-now-available/</guid>
<description>

&lt;p&gt;&lt;a href=&#34;https://troz.net/manreader/&#34;&gt;Man Reader 1.4&lt;/a&gt; is now available through the &lt;a href=&#34;http://itunes.apple.com/app/man-reader/id522583774?mt=12&#34;&gt;Mac App Store&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;the-new-features-and-fixes-are&#34;&gt;The new features and fixes are:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Fix for plain text view not wrapping correctly for odd-sized fonts.&lt;/li&gt;
&lt;li&gt;Fix for HTML text view over-riding font colors that may be invisible.&lt;/li&gt;
&lt;li&gt;Search for missing entry (e.g. g++) no longer requires Enter or Return.&lt;/li&gt;
&lt;li&gt;Better automatic selection of matching entries while searching.&lt;/li&gt;
&lt;li&gt;Fix for animation warning message appearing in Console.&lt;/li&gt;
&lt;li&gt;Status display shows when man page list is being updated.&lt;/li&gt;
&lt;li&gt;Searching inside a page now allows a minimum of 2 characters (was 3), so
flags&lt;br /&gt;
e.g. â-bâ do not need to be escaped.&lt;/li&gt;
&lt;li&gt;Fixed path for Network Utility in tool bar (moved in OS X 10.9).&lt;/li&gt;
&lt;li&gt;More information available about the effects of sand-boxing for this app.&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>
    
    <item>
<title>Email clients for Mac and iOS</title>
<link>https://troz.net/post/2014/email-clients-for-mac-ios/</link>
<pubDate>Tue, 25 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2014/email-clients-for-mac-ios/</guid>
<description>&lt;p&gt;Some people are moving away from email, but for me, it remains the best way to
communicate online. I get to keep a record of conversations and the attached
files are with the text so I can always see the context.&lt;/p&gt;

&lt;p&gt;But I think everyone would agree that Apple have dropped the ball with Mail in
OS X Mavericks, and to a lesser extent, in iOS 7.&lt;/p&gt;

&lt;p&gt;So I have been on a campaign lately to find an email client that suits my needs.
I don&amp;rsquo;t feel that I have found the perfect answer yet, but I am getting there.&lt;/p&gt;

&lt;p&gt;The first step was to work out what I really needed in an email client:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;support for IMAP accounts and Gmail accounts&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;line-height: 1.5;&#34;&gt;unified inbox - all accounts shown
together&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;conversation threading&lt;/li&gt;
&lt;li&gt;support for POP accounts (optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;On the Mac, I have narrowed it down to two clients that I am swapping between
every few days: &lt;a href=&#34;https://www.uniboxapp.com&#34; target=&#34;_blank&#34;&gt;Unibox&lt;/a&gt;
and &lt;a href=&#34;http://airmailapp.com&#34; target=&#34;_blank&#34;&gt;Airmail&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unibox is different in the way it displays your emails. It is much more focussed
on people and conversations, so the side bar shows all the people who you have
sent emails to or received emails from, grouped by date. I really like the
merging of incoming &amp;amp; outgoing emails, but it can be a bit weird if you delete
the latest email from someone who then disappears from sight.&lt;/p&gt;

&lt;p&gt;Emails are grouped by a single person, not by conversation. There is a button on
appropriate emails to toggle conversation view for that particular thread, but
it doesn&amp;rsquo;t stick.&lt;/p&gt;

&lt;p&gt;In order to show a conversation, they truncate emails in the main part of the
window and show a &amp;ldquo;More&amp;rdquo; button at the bottom of the email to expand it. This
was annoying, but in the latest beta, it performs much better, so you are not
continually tapping this to see a long email.&lt;/p&gt;

&lt;p&gt;Airmail has a more conventional display. Threading and the layout of threaded
emails are both very nice. There are multiple view options, which I find can get
a bit messy looking, so I prefer the &amp;ldquo;Minimized View&amp;rdquo; setting. Airmail also does
POP accounts which is a plus.&lt;/p&gt;

&lt;p&gt;The main reason I keep going back to Unibox is the unification. I have grown to
like having sent and received messages all in the same window without having to
go and find them somewhere else.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;On the iPad, I am currently using
&lt;a href=&#34;http://www.getboxer.com&#34; target=&#34;_blank&#34;&gt;Boxer&lt;/a&gt; and have tried
numerous others. &lt;a href=&#34;http://www.moltoapp.com/&#34; target=&#34;_blank&#34;&gt;Molto&lt;/a&gt;
was quite good and the interface was fun, but it would only use landscape mode
and like to be able to swap. Boxer is not great in portrait mode, but it does
work.&lt;/p&gt;

&lt;p&gt;So the jury is still out for iPad email clients, but on the Mac, I am leaning
towards Unibox.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Berio Sequenza VII</title>
<link>https://troz.net/post/2013/berio-sequenza-vii/</link>
<pubDate>Thu, 07 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2013/berio-sequenza-vii/</guid>
<description>&lt;p&gt;So my latest app is way outside my usual sphere but that&amp;rsquo;s what happens when
family decide that what you do might actually be useful!&lt;/p&gt;

&lt;p&gt;My son is an oboist and he is currently learning Berio&amp;rsquo;s Sequenza VII for Oboe.
This is a weird piece without a standard time signature. Instead each line has
13 bars with each bar being allocated a certain time span in actual seconds. As
can easily be imagined, this makes learning and practicing this piece more of a
mathematical exercise than a musical one.&lt;/p&gt;

&lt;p&gt;So I wrote him an app to sound out the end of each bar. Once he and his teacher
used it, a few more features crept in and now I think it will be of great
assistance to any student or teacher trying to work on this piece.&lt;/p&gt;

&lt;p&gt;While I doubt that many oboists frequent this web site, it anyone who does can
pass this on to any oboist, I would be very grateful, and I think the oboist
would be too!&lt;/p&gt;

&lt;p&gt;The app is available through the
&lt;a href=&#34;https://itunes.apple.com/us/app/sequenza-vii/id730234638?mt=8&amp;uo=4&#34; target=&#34;_blank&#34;&gt;iTunes
App Store&lt;/a&gt;.&lt;br /&gt;
More details are on &lt;a href=&#34;https://troz.net/berio/&#34; title=&#34;Berioâs Sequenza VII&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Berio&#39;s Sequenza VII</title>
<link>https://troz.net/berio/</link>
<pubDate>Wed, 06 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/berio/</guid>
<description>&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Luciano_Berio&#34; target=&#34;itunes_store&#34;&gt;Luciano
Berio&lt;/a&gt; wrote a series of Sequenzas for various instruments with Sequenza VII
being the one for oboe.&lt;br /&gt;
&lt;img src=&#34;https://troz.net/images/Berio_icon.png&#34; alt=&#34;Sequenza VII icon&#34; width=&#34;86&#34; height=&#34;86&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Preparing this work creates some unique problems for the oboist as Berio did not
adhere to any time signature that could be indicated by a metronome. Instead,
each line consists of
&lt;a href=&#34;http://www.nuoboe.com/berio/html/factsheet.html&#34; target=&#34;itunes_store&#34;&gt;13
bars (measures) with each bar&amp;rsquo;s length specified in exact seconds&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When my son (an oboist currently studying in Melbourne, Australia) started
trying to learn this piece, it occurred to him that having an iOS app developer
in the family could be of some assistance. So with instructions from him and
with suggestions from other oboists, I have developed the
&lt;a href=&#34;https://itunes.apple.com/us/app/sequenza-vii/id730234638?mt=8&amp;uo=4&#34; target=&#34;itunes_store&#34;&gt;Berio
Sequenza VII app for iPhone or iPod Touch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/Berio_2-500.png&#34; alt=&#34;Berio&#39;s Sequenza VII&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With the default settings it will count the bar lengths, using metronome-like
sounds to mark the starts of bars and lines. The player who needs to practice a
specific bar can easily set the app to start at that bar and even to repeat that
bar length continuously.&lt;/p&gt;

&lt;p&gt;Tapping the &amp;ldquo;i&amp;rdquo; button at the bottom right of the screen takes you to the more
advanced options.&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;Settings&amp;rdquo; section deals primarily with the B4 drone that is supposed to
accompany the performance of this piece. While in an actual performance, the
dynamics of this drone would vary, for this practice app it remains at a
constant volume as specified by you. The volume can be set to a percentage of
the iPhone&amp;rsquo;s current volume setting. If it is still too quiet, plug your iPhone
into a speaker or use some sort of physical amplification. If you prefer to play
with an A other than 440 Hz, that can be adjusted. And finally, the wave form
used to generate this drone sound can be switched between a sine wave or a
triangle wave. Disclaimer: excessive use of this drone may cause loss of
friends!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/Berio_3-500.png&#34; alt=&#34;Settings&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The Settings page also includes an option to slow down the times for practice.
At 100% speed, bar 1 on each line will last for 3 seconds. The speed can be
reduced to allow each bar to last longer, for use during the learning process.&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;Bars &amp;amp; Sounds&amp;rdquo; section allows you to customise the various options marking
the start of each new bar. You can specify the number of seconds &amp;amp; the sound
used to count you in after tapping the Start button. You can also select which
of the metronome sounds to use to mark the start of each bar, making the first
bar of each line use a different sound if you prefer. Finally, in case you are
playing so loudly that you are unable to hear the iPhone, you can set the screen
to flash a different color at the start of each new bar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/Berio_4-500.png&#34; alt=&#34;Bars &amp; Sounds&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Jacqueline Leclair wrote a
&lt;a href=&#34;http://www.nuoboe.com/berio/index.html&#34; target=&#34;_blank&#34;&gt;supplementary
edition&lt;/a&gt; of this work in 2000 using traditional time signatures in a way that
almost exactly duplicates the original timings. This app is designed for use
with the original score using Berio&amp;rsquo;s real time bar lengths.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Icon Builder &amp; iOS 7</title>
<link>https://troz.net/post/2013/icon-builder-ios-7/</link>
<pubDate>Mon, 23 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2013/icon-builder-ios-7/</guid>
<description>&lt;p&gt;Icon Builder 1.2 was released on 18 September 2013.&lt;br /&gt;
It was an update with 2 new functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The ability to create images to suit an Xcode 5 assets library&lt;/li&gt;
&lt;li&gt;The ability to create icons with the required sizes for IOS 7 apps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Knowing that iOS 7 apps can only be built using Xcode 5, I linked the switch for
these 2 abilities in a single check box.&lt;br /&gt;
The problem was not really that they were in a single checkbox but that I had labelled
it badly, so it was not obvious that this was what needed to be checked to create
iOS 7 sized icon files.&lt;/p&gt;

&lt;p&gt;After some feedback from early users, it became clear to me that this was not
enough. So 1.2.1 is now waiting for Apple&amp;rsquo;s approval.&lt;br /&gt;
The changes in this version are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;More informative labelling of the checkbox.&lt;/li&gt;
&lt;li&gt;The checkbox is checked by default is Xcode 5 is installed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While waiting for the new version to be approved, please be aware that iOS 7
icon sizes will only be generated if you select &amp;ldquo;Check Assets (for Xcode 5.x or
later)&amp;rdquo;&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Icon apps updated</title>
<link>https://troz.net/post/2013/icon-apps-updated/</link>
<pubDate>Thu, 19 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2013/icon-apps-updated/</guid>
<description>&lt;p&gt;&lt;a href=&#34;https://itunes.apple.com/au/app/icns-maker/id550942266?mt=12&#34; target=&#34;_blank&#34;&gt;Icns
Maker&lt;/a&gt; and
&lt;a href=&#34;https://itunes.apple.com/au/app/icon-builder/id552293482?mt=12&#34; target=&#34;_blank&#34;&gt;Icon
Builder&lt;/a&gt; have both just been updated to support Xcode 5.&lt;/p&gt;

&lt;p&gt;Icon Builder is a Mac app that takes your images and creates all the required
icon files for use in your iOS apps.&lt;br /&gt;
It now supports Xcode 5&amp;rsquo;s image assets folders and if you are using Xcode 5, it will
create the icon sizes required for iOS 7 app.&lt;/p&gt;

&lt;p&gt;Icns Maker is a Mac app that takes your images and creates icons for use in your
Mac apps.&lt;br /&gt;
For Xcode 4 or earlier, it creates a .icns file.&lt;br /&gt;
For Xcode 5, it creates a folder of images for use in your project&amp;rsquo;s image
assets folder.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Markdown</title>
<link>https://troz.net/post/2013/markdown/</link>
<pubDate>Mon, 01 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2013/markdown/</guid>
<description>

&lt;p&gt;For some time now, I have been aware of the increasing trend towards using
Markdown for text editing and for creating HTML. Markdown has been on my list of
&amp;ldquo;things I should learn some day&amp;rdquo; so I was interested last week to read about a
new iBooks book called &lt;a href=&#34;http://macsparky.com/markdown&#34;&gt;The MacSparky Markdown Field Guide&lt;/a&gt;. This was
sufficient inspiration so I got the book and read through it this weekend.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://static.squarespace.com/static/5008676d84aeae82b8acdd8c/t/5147c7a6e4b0d224b4419401/1363658669971/Markdown%20Cover%20Art%20-%20JPG.jpg?format=500w&#34; alt=&#34;The MacSparky Markdown Field Guide&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Actually, to say that I &lt;em&gt;read&lt;/em&gt; through the book is a mis-representation. The
book was written using iBooks Author specially for the iPad and contains screen
casts and interviews as well as text. But by the end of it, I now feel I have a
basic understanding on Markdown and the ways in which I can use it.&lt;/p&gt;

&lt;p&gt;I guess the really big thing about using Markdown is that is creates plain text
files that are human-readable even without being converted to HTML. This makes
them future-proof since they are not tied to a proprietary file format that may
cease to exist at any time.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;using-markdown&#34;&gt;Using Markdown:&lt;/h2&gt;

&lt;p&gt;Since this web site is a self-hosted WordPress site, my next step was to look
for a WordPress plugin that would allow me to use Markdown to create my posts. I
could have used a Markdown editor that had HTML export, but I wanted to try
something that would eliminate the extra step. The first one I decide to try was
&lt;a href=&#34;http://wordpress.org/extend/plugins/markdown-on-save-improved/&#34;&gt;Markdown on Save Improved&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of the main reasons for choosing this one was that it stores the posts as
both Markdown and as HTML. This saves time when going back to edit a post,
avoids the constant changes that creep in when converting between formats all
the time, and makes it so that the post will still display correctly even if
Markdown is no longer supported. The only problem I have found so far is that it
doesn&amp;rsquo;t automatically create links &amp;amp; image links using the Markdown format, but
uses standard &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; links instead.&lt;/p&gt;

&lt;p&gt;My next stop, since I always use a Mac, was to get Brett Terpstra&amp;rsquo;s collection
of &lt;a href=&#34;http://brettterpstra.com/projects/markdown-service-tools/&#34;&gt;Services for Markdown&lt;/a&gt;. These add a lot on convenient shortcuts: one of
my favourites is the ability to convert inline links to references links for
increased readability while editing.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;first-impressions&#34;&gt;First Impressions:&lt;/h2&gt;

&lt;p&gt;So having written this first post in Markdown, how do I feel about it? I haven&amp;rsquo;t
really tried anything too weird this time, but there are a few things that were
very easy to do. Particularly in the paragraph where I was talking about links &amp;amp;
images and wanted to include the tags as text without having it interpreted as
HTML. All I had to do was surround the text with back-ticks.&lt;/p&gt;

&lt;p&gt;Links are vastly easier to manage and edit in Markdown. I miss the ability to
specify that links should open in a new tab - I prefer to have that setting for
links that take you outside my web site, but the modern theories on usability
seem to be heading towards deprecation of this feature, so I may just stop using
it.&lt;/p&gt;

&lt;p&gt;With the standard WordPress editor, I always felt that I was fighting it. I had
to swap between the visual &amp;amp; HTML editor tabs and when I swapped tabs, things
would sometimes change without me doing anything. So far, I feel more in control
using Markdown and although I have lost the WYSIWYG visual editor, I no longer
have to wade through the HTML editor to get the effect I want or to remove the
results of a few careless clicks.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;what-next&#34;&gt;What next?&lt;/h2&gt;

&lt;p&gt;Some of the things on my wish list would be solved by a better editor and some
by more powerful syntax.&lt;/p&gt;

&lt;p&gt;Editor:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adding links &amp;amp; images using Markdown style instead of HTML&lt;/li&gt;
&lt;li&gt;Being able to create lists

&lt;ul&gt;
&lt;li&gt;Markdown makes this very easy but this WP plugin does not support lists as
far as I can tell&lt;/li&gt;
&lt;li&gt;So these lists are in HTML&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Syntax:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Alignment of text &amp;amp; images&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using a stand-alone Markdown editor would solve the editor questions, but I
wanted to try writing this post completely in WordPress.&lt;br /&gt;
And with the alignment, there is nothing to stop me adding CSS to the Markdown.&lt;/p&gt;

&lt;p&gt;Next time, I will test out a different WordPress Markdown editor and see how
that goes. I will also test using a standalone editor and exporting its HTML to
create a post.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>A Knight&#39;s Move 1.3</title>
<link>https://troz.net/post/2013/a-knights-move-1-3/</link>
<pubDate>Wed, 27 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2013/a-knights-move-1-3/</guid>
<description>

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; September 2016 - A Knight&amp;rsquo;s Move for iOS is no longer available.&lt;br&gt;
&lt;a href=&#34;https://troz.net/knightsmove/&#34;&gt;A Knight&amp;rsquo;s Move for Mac&lt;/a&gt; is still supported.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A Knight&amp;rsquo;s Move has been updated to version 1.3. The Mac version is available
through the
&lt;a href=&#34;https://itunes.apple.com/app/a-knights-move/id533321133?mt=12&#34; target=&#34;_blank&#34;&gt;Mac
App Store&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;three-new-level-packs&#34;&gt;Three new level packs:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Eight by Eight&lt;/li&gt;
&lt;li&gt;Bishops Rule&lt;/li&gt;
&lt;li&gt;Castles&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eight by Eight has every puzzle set in a chessboard sized grid with more
conventional placing of pieces.&lt;br /&gt;
Bishops Rule has at least one Bishop in every puzzle.&lt;br /&gt;
Castles has a Castle or Rook in every puzzle and is suited to players who would
like more of a challenge.&lt;/p&gt;

&lt;h2 id=&#34;new-feature&#34;&gt;New feature:&lt;/h2&gt;

&lt;p&gt;When your knight has been taken, you have the option to undo the last move so
you can try again without losing the moves you have already made.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;Undo Last Move&#34; src=&#34;https://troz.net/images/KM-UndoLast.png&#34; /&gt;&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Man Reader (no SB)</title>
<link>https://troz.net/post/2013/man-reader-no-sb/</link>
<pubDate>Wed, 06 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2013/man-reader-no-sb/</guid>
<description>

&lt;p&gt;These instructions are no longer valid. As of version 1.5, the App Store version
of Man Reader has solved the sand-boxing issues and is now as powerful as the
non-sand-boxed version.&lt;/p&gt;

&lt;p&gt;The non-sand-boxed version will no longer be supported or updated, so please
revert to the App Store version.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you find that Man Reader is not working well for you due to Apple&amp;rsquo;s
sandboxing restrictions, then you can download a non-sandboxed version here. To
find out more about this, including how to test if you are affected, read the
&lt;a href=&#34;https://troz.net/manreader-sandbox/&#34;&gt;Sand-Boxing Man Reader&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;The non-sandboxed version will only work if you have the App Store version of
Man Reader already installed.&lt;/p&gt;

&lt;p&gt;When you run &amp;lsquo;Man Reader (no SB)&amp;rsquo; for the first time, it will check to see if
you have a valid installation of &amp;lsquo;Man Reader&amp;rsquo; that you have purchased from the
App Store.&lt;br /&gt;
If you do not, &amp;lsquo;Man Reader (no SB)&amp;rsquo; will offer to take you to the App Store and then
quit.&lt;/p&gt;

&lt;p&gt;If you already own the App Store version of Man Reader and &amp;lsquo;Man Reader (no SB)&amp;rsquo;
has started once, you can delete the App Store version and &amp;lsquo;Man Reader (no SB)&amp;rsquo;
will keep working.&lt;/p&gt;

&lt;p&gt;To install &amp;lsquo;Man Reader (no SB)&amp;rsquo;, click the download link below. This will
download &amp;lsquo;ManReader-noSB.zip&amp;rsquo;. Double-click on this file to un-zip it, and then
move the &amp;lsquo;Man Reader (no SB).app&amp;rsquo; into your Applications folder and use as
normal. Do not delete the App Store version of Man Reader until &amp;lsquo;Man Reader (no
SB)&amp;rsquo; has been run at least once.&lt;/p&gt;

&lt;h2 id=&#34;del-download-man-reader-no-sb-del-2&#34;&gt;&lt;a href=&#34;#&#34;&gt;&lt;del&gt;Download Man Reader (no SB)&lt;/del&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I found out today (thanks Ron) that under OS X 10.10.3 the security settings no
longer allow the downloaded version of Man Reader (no SB) to run, despite the
fact that I have signed it with my Apple Developer ID. OS X gives a very
un-helpful dialog reporting that the app is damaged. In fact the app is fine,
but being blocked by the security settings. The solution as shown at
&lt;a href=&#34;http://www.tech-recipes.com/rx/45404/mac-downloaded-app-is-damaged-and-cant-be-opened-error-solved/&#34;&gt;TechRecipes&lt;/a&gt; is to change your security system preferences to allow
downloaded apps from anywhere. You only need to do this temporarily as after you
have run the app once you can set this setting back to whatever you had before.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Sand-Boxing Man Reader</title>
<link>https://troz.net/post/2013/sand-boxing-man-reader/</link>
<pubDate>Wed, 06 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2013/sand-boxing-man-reader/</guid>
<description>&lt;p&gt;These instructions are no longer valid. As of version 1.5, the App Store version
of Man Reader has solved the sand-boxing issues and is now as powerful as the
non-sand-boxed version.&lt;/p&gt;

&lt;p&gt;The non-sand-boxed version will no longer be supported or updated, so please
revert to the App Store version.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;As with all apps in the App Store, &lt;a href=&#34;https://troz.net/manreader/&#34;&gt;Man Reader&lt;/a&gt; is restricted by Apple&amp;rsquo;s
sand-boxing policy. Sand-boxing is a great thing. It isolates apps from each
other and from the system, making it far less likely that a problem app will
cause wide-spread havoc. However for an app like Man Reader, this can lead to a
drop in functionality.&lt;/p&gt;

&lt;p&gt;Due to the permissions limitations of sand-boxing, Man Reader can only search
defined paths on your system drive e.g. /usr/, /opt/&lt;br /&gt;
This is where the default man pages are all stored, but if you install other software
(Xcode is a good example), then Man Reader may not be able to list all the available
man pages on your system.&lt;/p&gt;

&lt;p&gt;To tell if Man Reader is missing man pages, copy &amp;amp; paste the following command
into the Terminal app:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;whatis . &amp;gt;&amp;gt; ~/Desktop/whatis.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Man Reader runs this command internally when it starts, but the Terminal app is
not sand-boxed and so can access everything.&lt;br /&gt;
Running this command will create a text file on your desktop with a list of all available
man pages on your system. Open it in a text editor that can show the number of lines
in a file. &lt;a href=&#34;http://www.barebones.com/products/textwrangler/&#34;&gt;TextWrangler from Bare Bones Software&lt;/a&gt; is a good free editor that
will do this.&lt;/p&gt;

&lt;p&gt;To check what man pages ManReader can read, go to Finder and select &amp;lsquo;Go to
Folder&amp;hellip;&amp;rdquo; from the Go menu. Paste in the following path:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/Library/Containers/net.troz.Man-Reader/Data/Library/Application Support/Man Reader/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will see two files: open the one called &amp;lsquo;ManReader.raw&amp;rsquo; in your text editor.
This is the result of Man Reader running the whatis command. Compare the number
of lines in the two files. Don&amp;rsquo;t worry about the order of the items in the file
as that may vary, you are only concerned with the total number of lines in each.&lt;/p&gt;

&lt;p&gt;There may be one or two lines more in the whatis.txt file but if there is a big
difference, then you are being sand-boxed&amp;hellip;&lt;br /&gt;
As an example, on my system, the whatis.txt file contains 8954 lines and the ManReader.raw
file contains 2320 lines!&lt;/p&gt;

&lt;p&gt;&lt;del&gt;If you are affected by this or think that you might be, I now have a
solution - actually two possible solutions:&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;If you have already bought Man Reader from the App Store, then you can
&lt;a href=&#34;#&#34;&gt;download a non-sandboxed version&lt;/a&gt;. This will only work if you have the App
Store version of the app installed.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;If you do not already own a copy of Man Reader, and want to buy it
un-sandboxed, then you can now &lt;a href=&#34;#&#34;&gt;buy it directly&lt;/a&gt;.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;Please &lt;a href=&#34;mailto:sarah@troz.net?subject=Man%20Reader%20and%20Sand-Boxing&#34;&gt;contact me&lt;/a&gt; if you have any issues with this.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Icns Maker &amp; Icon Builder updated</title>
<link>https://troz.net/post/2013/icns-maker-icon-builder-updated/</link>
<pubDate>Sat, 19 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2013/icns-maker-icon-builder-updated/</guid>
<description>&lt;p&gt;January 18th 2013:&lt;/p&gt;

&lt;p&gt;Both of the icon building apps have now been updated to fix a but that made
incorrect icon sizes when running on a Retina MacBook Pro.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/icns-maker/&#34; title=&#34;Icns Maker&#34;&gt; Icns Maker&lt;/a&gt; uses your image to create an icns file for Mac apps.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://itunes.apple.com/app/icns-maker/id550942266?mt=12&amp;uo=4&#34; target=&#34;itunes_store&#34;&gt;&lt;img style=&#34;border: 0;&#34; alt=&#34;Icns Maker - TrozWare&#34; src=&#34;http://r.mzstatic.com/images/web/linkmaker/badge_macappstore-lrg.gif&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/icon-builder/&#34; title=&#34;Icon Builder&#34;&gt;Icon Builder&lt;/a&gt; uses your image to create the suite of icon files needed for
iOS apps.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://itunes.apple.com/app/icon-builder/id552293482?mt=12&amp;uo=4&#34; target=&#34;itunes_store&#34;&gt;&lt;img style=&#34;border: 0;&#34; alt=&#34;Icon Builder - TrozWare&#34; src=&#34;http://r.mzstatic.com/images/web/linkmaker/badge_macappstore-lrg.gif&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Icon Makers &amp; Retina Macs</title>
<link>https://troz.net/post/2013/icon-makers-retina-macs/</link>
<pubDate>Mon, 14 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2013/icon-makers-retina-macs/</guid>
<description>&lt;p&gt;Icns Maker which makes an icns icon file for Mac apps, and Icon Builder which
makes the suite of png files needed for iOS apps, are both compatible with the
Retina MacBook Pro.&lt;/p&gt;

&lt;p&gt;However it was recently brought to my attention (thanks Cameron), that when
running on a Retina MBP, all the icon files were exactly twice as large as they
should be. The Icon.png file which supplies the main app icon for iPhone apps
should be 57 pixels by 57 pixels. Using Icon Builder on a Retina MBP produced an
Icon.png file that was 114 x 114 pixels.&lt;/p&gt;

&lt;p&gt;I have now worked out how to persuade the Retina Mac that when I ask for an
image size, I actually want that size, not the size that OS X thinks would look
better. Updates to these 2 apps will be submitted to the App Store for approval
later today which will solve the problem.&lt;/p&gt;

&lt;p&gt;In the meantime, there is a work-around for Retina MBP users: force the app to
run in low resolution mode.&lt;/p&gt;

&lt;p&gt;In Finder, open your Applications folder and select the app (this works for both
Icns Maker and Icon Builder). Press Command-I or choose Get Info from the File
menu which will open a window like this:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;Selecting low resolution mode&#34; src=&#34;https://troz.net/images/LowRes.png&#34; width=&#34;379&#34; height=&#34;952&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Check the checkbox labelled &amp;ldquo;Open in Low Resolution&amp;rdquo;. Next time the app is
opened, it will ignore the Retina options and use standard resolution only. This
will create icon files with the correct sizes. However text may look slightly
fuzzy.&lt;/p&gt;

&lt;p&gt;When the updates to these apps become available, make sure you go back and
un-check this setting to return to Retina mode.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>A Knight&#39;s Move updates</title>
<link>https://troz.net/post/2012/a-knights-move-updates/</link>
<pubDate>Mon, 15 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2012/a-knights-move-updates/</guid>
<description>&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; September 2016 - A Knight&amp;rsquo;s Move for iOS is no longer available.&lt;br&gt;
&lt;a href=&#34;https://troz.net/knightsmove/&#34;&gt;A Knight&amp;rsquo;s Move for Mac&lt;/a&gt; is still supported.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A Knight&amp;rsquo;s Move for iOS has been updated to take advantage of the taller iPhone
5 screen.&lt;/p&gt;

&lt;p&gt;In-app purchasing of packs has been removed from both Mac &amp;amp; iOS versions.&lt;br /&gt;
For iOS, the app is now free but supported by iAds (please click through if you would
like to show your support).&lt;br /&gt;
Apple does not have an ad system for Mac, so the Mac version is now a paid app
that includes all the puzzle packs.&lt;/p&gt;

&lt;p&gt;The in-app purchasing was an interesting experiment, but the ratio of purchases
to downloads was too low to sustain the development.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>App Store Review Times</title>
<link>https://troz.net/post/2012/app-store-review-times/</link>
<pubDate>Mon, 15 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2012/app-store-review-times/</guid>
<description>&lt;p&gt;There are been a lots of stories going around about lengthening Mac App Store
review times.
&lt;a href=&#34;http://reviewtimes.shinydevelopment.com&#34; target=&#34;_blank&#34;&gt;Shiny
Developments&lt;/a&gt; crowd-sourced data certainly backs this up although they have
much more data for iOS apps than for Mac apps.&lt;/p&gt;

&lt;p&gt;Some people, including
&lt;a href=&#34;http://www.macworld.com/article/2011430/developers-stymied-by-mac-app-store-approval-delays.html&#34; target=&#34;_blank&#34;&gt;Lex
Friedman of MacWorld&lt;/a&gt; and
&lt;a href=&#34;http://daringfireball.net/linked/2012/10/09/app-store-delays&#34; target=&#34;_blank&#34;&gt;John
Gruber of Daring Fireball&lt;/a&gt;, are suggesting that the delays are due to the
rush of new apps to support the iPhone 5 and iOS 6. This implies that there is
only one set of review staff and that a large proportion of them have been moved
from Mac to iOS apps.&lt;/p&gt;

&lt;p&gt;I think this is an incorrect analysis. The slowdown started before iOS 6 and
before the iPhone 5. I think it started in June when Apple started to enforce
Mac sandboxing.&lt;/p&gt;

&lt;p&gt;As discussed in a &lt;a href=&#34;https://troz.net/sandboxing-and-the-mac-app-store/&#34;&gt;previous post&lt;/a&gt;, I have had a lot of trouble getting Man
Reader to be sandbox-compatible leading to many rejections. One problem was that
I had implemented sand-boxing before the deadline, but with some temporary
entitlements to allow read-only access to required system files. This
entitlement was approved initially, but after one rejection, an Apple reviewer
told me that they had been approving all requested entitlements before the
deadline, but now were actually reviewing them all.&lt;/p&gt;

&lt;p&gt;To me, this seems like a rather silly thing to have done which has now returned
to haunt them. Instead of allowing developers time to get used to the
restrictions, Apple reviewers allowed developers to think that their apps were
sandbox-complient already. Then Apple was faced with the enormous task of
re-checking all the entitlements that they had previously allowed without
checking. This was unfair to developers and has only created extra work for the
reviewers.&lt;/p&gt;

&lt;p&gt;Here is a table showing the recent review times for my Mac apps:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;App&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Process&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Review days&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Dates&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Time In Words&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;update&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;22&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Sept 22 - Oct 14&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Icns Maker&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;new app&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;24&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Aug 5 - Aug 29&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;A Knight&amp;rsquo;s Move&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;update&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;26&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Sept 6 - Oct 2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Icon Builder&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;new app&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;33&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Aug 22 - Sept 24&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br&gt;
I have not included Man Reader as it was rejected too many times to be a valid data point.&lt;/p&gt;

&lt;p&gt;By comparison, when I submitted an update to A Knight&amp;rsquo;s Move for iOS in October,
it was passed in only 8 days.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Icon makers for Mac &amp; iOS apps</title>
<link>https://troz.net/post/2012/icon-makers-for-mac-ios-apps/</link>
<pubDate>Mon, 15 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2012/icon-makers-for-mac-ios-apps/</guid>
<description>

&lt;p&gt;Announcing two new apps for creating icons for with Mac or iOS projects:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/icns-maker/&#34; title=&#34;Icns Maker&#34;&gt;Icns Maker&lt;/a&gt; helps you convert a single image into a .icns file in two
steps.&lt;br /&gt;
&lt;a href=&#34;https://troz.net/icon-builder/&#34; title=&#34;Icon Builder&#34;&gt;Icon Builder&lt;/a&gt; creates all the files needed to set up your icons for any iOS project.&lt;/p&gt;

&lt;h2 id=&#34;creating-icon-files-for-mac-apps&#34;&gt;Creating icon files for Mac apps:&lt;/h2&gt;

&lt;p&gt;In versions of Xcode before 4.4, Apple provided an app called âIcon Composerâ.
It allowed you to drag images into a window and export a .icns file for use in
your Mac apps. With Xcode 4.4, Apple has changed the way icons are handled for
Mac apps and âIcon Composerâ is no longer supplied.&lt;/p&gt;

&lt;p&gt;The Xcode docs describe the process you need to go through to make a .icns file:
create a suite of image files of the correct size and with the correct file
names, bundle them into a specially named folder and then use Terminal to stitch
them together.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/icns-maker/&#34; title=&#34;Icns Maker&#34;&gt;Icns Maker&lt;/a&gt; does all this for you in two easy steps.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Drag in an image file (preferably 1024x1024 but 512x512 will also work).&lt;/li&gt;
&lt;li&gt;Click a button.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are more options available for fine-tuning your icons allowing you to
select different images for the various sizes, but this is all that is needed
for basic operation.&lt;/p&gt;

&lt;p&gt;Icns Maker is available from the
&lt;a href=&#34;http://itunes.apple.com/app/icns-maker/id550942266?mt=12&amp;uo=4&#34; target=&#34;_blank&#34;&gt;Mac
App Store&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;creating-icon-files-for-ios-apps&#34;&gt;Creating icon files for iOS apps:&lt;/h2&gt;

&lt;p&gt;Icons for iOS apps are not bundled into a single file like a Mac .icns file. You
add various .png images to your project. Depending on the devices supported by
your app, you will need many different sizes of icon file. There are some icons
for iPad only, some for iPhone / iPod Touch only and others required for any
device. Additionally, you will need larger versions of each image to support
Retina displays.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/icon-builder/&#34; title=&#34;Icon Builder&#34;&gt;Icon Builder&lt;/a&gt; is a Mac app that does all this for you. As with Icns Maker,
you just drag your image into the app and click a button. You can also select
which devices your icon needs to suit and use different images for the different
sizes if you want finer control.&lt;/p&gt;

&lt;p&gt;When the app creates your icon files, it generates a ReadMe file with the
information needed for installing these files in your project, including
information to copy &amp;amp; paste directly into your Info.plist file.&lt;/p&gt;

&lt;p&gt;Icon Builder is available from the
&lt;a href=&#34;http://itunes.apple.com/app/icon-builder/id552293482?mt=12&#34; target=&#34;_blank&#34;&gt;Mac
App Store&lt;/a&gt;.&lt;br /&gt;
Note that although this app builds icon files for iOS app, it runs on a Mac.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;naming&#34;&gt;Naming&lt;/h2&gt;

&lt;p&gt;Originally these apps were named in a consistent manner: Mac Icon Builder and
iOS Icon Builder. However both these names were rejected by Apple - you are not
allowed to use the words &amp;ldquo;Mac&amp;rdquo; or &amp;ldquo;iOS&amp;rdquo; in any app name sold through the Mac App
Store.&lt;/p&gt;

&lt;p&gt;Then I tried Icns Maker and Icon Maker. Icns Maker was approved, but there is
already an app called Icon Maker, so I went with Icon Builder. But by that time
Icns Maker had already been released, so there was no way to make the names more
consistent.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Icon Builder</title>
<link>https://troz.net/icon-builder/</link>
<pubDate>Mon, 01 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/icon-builder/</guid>
<description>

&lt;p&gt;&lt;a href=&#34;http://itunes.apple.com/app/icon-builder/id552293482?mt=12&#34;&gt;Icon Builder 5.1&lt;/a&gt; is available from the Mac App Store. Updated 26th September 2018 to support macOS Mojave dark mode and with extra icons needed for Apple Watch Series 4.&lt;/p&gt;

&lt;h2 id=&#34;make-and-install-a-set-of-icons-for-an-ios-mac-or-apple-watch-app-in-3-steps&#34;&gt;Make and install a set of icons for an iOS, Mac or Apple Watch app in 3 steps:&lt;/h2&gt;

&lt;p&gt;1: Drag an image into the window.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/IconBuilder1.png&#34; alt=&#34;Make an icon set in 3 steps&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2: Choose the device family you are building for: iOS Universal, iPhone, iPad, Apple Watch, Mac, Sticker Pack or iMessage.&lt;/p&gt;

&lt;p&gt;3: Click &amp;ldquo;Create icon assets&amp;rdquo; and select the folder containing your Xcode project.&lt;/p&gt;

&lt;p&gt;Icon Builder will create an AppIcon set inside the &amp;ldquo;Assets.xcassets&amp;rdquo; folder for
that project.
The icons are immediately ready for use in your project with no installation necessary.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;why-is-this-necessary&#34;&gt;Why is this necessary?&lt;/h2&gt;

&lt;p&gt;Depending on the devices supported by your app, you will need many different sizes of icon file. There are some icons for iPad only, some for iPhone / iPod Touch only and others required for any iOS device. Mac apps use completely different icon sizes. Apple Watch apps need a completely different set of icons and now with iOS 10, Messages apps and Sticker apps require even more - 2 different icon sets for Messages app. Additionally, you will need larger versions of each image to support Retina displays.&lt;/p&gt;

&lt;p&gt;These icons must be in PNG format, with the color space set to sRGB (or P3 for iOS apps, but Icon Builder always uses sRGB) and for iOS apps, with no transparency and with alpha channel in the image files.&lt;/p&gt;

&lt;p&gt;Your Xcode project contains a special folder called âAssets.xcassetsâ which contains all the image files used in your project, including the app icons. Icon Builder will install the icon files into your âAssets.xcassetsâ folder automatically and the icons are immediately ready for use in your project with no installation necessary.&lt;/p&gt;

&lt;p&gt;Icon Builder still allows you to create the old-style .icns file if required by selecting âMac icnsâ in the device family popup menu. This can be useful for other development environments or when making icons for documents in your Mac app.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You will get the best results if you start with a 1024 x 1024 image.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;using-the-icon-images&#34;&gt;Using the icon images:&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/IconBuilder2.png&#34; alt=&#34;Using the icons&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Icon Builder creates all the required image files in a folder called âAppIcon.appiconsetâ, âAppIcon-Watch.appiconsetâ or âiMessage App Icon.stickersiconsetâ inside the âAssets.xcassetsâ folder for your project. If you already have images stored in an appiconset folder, Icon Builder will not over-write them, but will add a new folder e.g. âAppIcon-1.appiconsetâ. You can then switch between AppIcon sets in the project settings for your target app.&lt;/p&gt;

&lt;p&gt;If you prefer to add the icon files manually, select a folder that does not contain a .xcodeproj file and the icon sets will be saved directly to that folder. You can then drag the iconset folder manually into âAssets.xcassetsâ in your Xcode project.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;what-s-new-in-version-5&#34;&gt;What&amp;rsquo;s New in version 5?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Icon images have the correct sRGB color profile attached.&lt;/li&gt;
&lt;li&gt;For iOS icons, transparency is replaced by white and the alpha channel is removed from the image file.&lt;/li&gt;
&lt;li&gt;The icons created match the latest Apple guidelines.&lt;/li&gt;
&lt;li&gt;The app has been completely re-written in Swift to use the latest macOS APIs so only supports macOS 10.13.x or later.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;faq&#34;&gt;FAQ&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;I thought there were only 2 steps before - why are there 3 now?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The 2 step process gave you a folder of image files. You then had to install them manually. So really, there were always three steps, but the app was not helping you with step 3. By adding a third step asking you to locate your project folder, I was able to make the app install the icons for you automatically. So the app is doing step 3 for you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What if I want to install the icon files myself?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When asked to select a folder to save the icons, select a folder that does not contain a .xcodeproj file. Icon Builder will save all the files, but not install them into an Assets.xcassets or Images.xcassets folder automatically.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What image types can I use?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Any image type compatible with QuickTime, including JPEG, PNG, TIFF, GIF, PDF, PSD, BMP.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Does Icon Builder create icons for use in Mac apps?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Yes. Mac apps use image assets just like iOS apps, but with different image sizes. Select &amp;ldquo;Mac App&amp;rdquo; in the Device popup to create icons for a Mac app.&lt;/li&gt;
&lt;li&gt;Icon Builder still allows you to create the old-style .icns file if required by selecting &amp;ldquo;Mac icns file&amp;rdquo; in the Device popup menu. This can be useful for other development environments or when making icons for documents in your Mac app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What is the difference between Mac App Icon and Mac icns file?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Mac AppIcon&amp;rdquo; will create the modern AppIcon set of images for inclusion in your Assets.xcassets.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Mac icns file&amp;rdquo; will create an old style .icns file with all the image sizes embedded into a single file. Open the file in Preview to see the contents.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Does Icon Builder create icons for use in Watch Kit apps?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Yes. Select &amp;ldquo;Apple Watch&amp;rdquo; from the Device popup. Create a WatchKit target in your iOS project if necessary. When you are choosing the location to save the icons, select the folder containing the main .xcodeproj file. Icon Builder will find the WatchKit App folder and save the icons to the WatchKit App&amp;#39;s Assets.xcassets folder. The icon set will be called AppIcon-Watch to help you distinguish between sets when allocating them to your apps.&lt;/li&gt;
&lt;li&gt;When the WatchKit icons have been made, Icon Builder will ask you if you want to use the same image to create the icons for the parent iOS app. Unless you want a different icon for the parent app, select the parent app device at this point to create the second set.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Does Icon Builder create icons for use in iMessage apps and Sticker Pack apps?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Yes. Select &amp;ldquo;Sticker Pack App&amp;rdquo; or &amp;ldquo;iMessage App&amp;rdquo; from the Device popup. When you are choosing the location to save the icons, select the folder containing the main .xcodeproj file and Icon Builder will create the icon sets accordingly.&lt;/li&gt;
&lt;li&gt;iMessage apps require two sets: one for the Messages extension and one for the parent iOS app. When the iMessage icons have been made, Icon Builder will ask you if you want to use the same image to create the icons for the parent iOS app. Unless you want a different icon for the parent app, select the parent app device at this point to create the second set.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Why is my starting image re-sized for a Sticker Pack app or iMessage app?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For Mac, iOS and Apple Watch apps, all the icons are square. For Sticker Pack apps and iMessage apps, most (but not all) of the icons are letterbox-shaped. Icon Builder displays your starting image in letterbox format when you choose &amp;ldquo;Sticker Pack App&amp;rdquo; &amp;ldquo;iMessage App&amp;rdquo; so that you can see how it will look.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;When I choose any iOS app type, my starting image loses its transparent background!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apple requires that iOS icons have no transparency so Icon Builder displays the image like that so you can confirm the look. If you do not like the default change, edit the image to remove the transparency before using Icon Builder.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What versions of macOS and Xcode do I need?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This app requires macOS 10.13 as it uses the latest APIs to manipulate images.&lt;/li&gt;
&lt;li&gt;Xcode 9 is the latest version, but Xcode 8 will probably work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;I don&amp;rsquo;t use Xcode, I use an alternative IDE. Can I still use the icons created by this app?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Yes, you can save the icon set to a folder and install the icons manually in the IDE of your choice. If your IDE requires a .icns file, select &amp;ldquo;Mac icns file&amp;rdquo; from the device popup.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What if my starting image is the wrong size?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If your image is not the correct size, it will be cropped or expanded when you drag it in.&lt;/li&gt;
&lt;li&gt;It will then be resized to create all the required image sizes.&lt;/li&gt;
&lt;li&gt;If this does not give the result you want, resize or crop the image before dropping it into Icon Builder.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;How do I start again with a blank slate?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Choose &amp;ldquo;New&amp;rdquo; from the File menu, or press Command-N.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Do I have to drag images into the app?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No, you can copy &amp;amp; paste an image file, or an image.&lt;/li&gt;
&lt;li&gt;Or choose &amp;ldquo;Open Image&amp;hellip;&amp;rdquo; from the File menu, or press Command-O.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;How can I delete the icons from my project?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select &amp;ldquo;Assets.xcassets&amp;rdquo; in the project navigator.&lt;/li&gt;
&lt;li&gt;In the next sidebar, you will see a list of the asset sets in your project.&lt;/li&gt;
&lt;li&gt;Select the one you want to delete (e.g. AppIcon, AppIcon-1, AppIcon-Watch) and press the Delete key.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;I have an old project with no &amp;ldquo;Assets.xcassets&amp;rdquo; - how do I add that?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select the project at the top of the Project Navigator.&lt;/li&gt;
&lt;li&gt;Make sure you are editing the target and go to the General tab.&lt;/li&gt;
&lt;li&gt;In the &amp;ldquo;App Icons&amp;rdquo; section, click the &amp;ldquo;Use Asset Catalog&amp;rdquo; button.&lt;/li&gt;
&lt;li&gt;The &amp;ldquo;Assets.xcassets&amp;rdquo; folder will be created and any existing icons will be migrated to the new structure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What if I want to use the images from a Mac .icns file?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Drag it in just like any image file. However the largest image in an .icns bundle is 512 x 512, so you may want to create a larger version.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Why are there files with @2x and @3x in the names?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;These are for high-resolution displays. iOS knows it needs a certain image size, but if the device has a Retina display, the system will look for an @2x file so it can squeeze twice as many pixels in and make it look sharp. For the larger or more recent iPhones, the system will use the @3x files if they are available.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;I use Pixelmator. Can I drag my pxm files into Icon Builder?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No. Pixelmator&amp;rsquo;s pxm files cannot be used directly. Export them as png files first.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Iâm a programmer, not a graphic designer. How do I make icon images?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One easy way to create basic shapes with gradients, text, added images etc. is to use Keynote. I presume PowerPoint has the same sort of abilities.&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>
    
    <item>
<title>Updating apps for iPhone 5</title>
<link>https://troz.net/post/2012/updating-apps-for-iphone-5/</link>
<pubDate>Mon, 24 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2012/updating-apps-for-iphone-5/</guid>
<description>&lt;p&gt;I have started work updating my iOS apps to fill the larger screen of an iPhone&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;My iPhone 5 is on order - I missed out on the first shipment, but hopefully
it won&amp;rsquo;t be too long. Meanwhile, I will just test in the iPhone Simulator and
hope this is OK.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But it was a puzzle to me how to get an app to fill the longer screen. I have
the latest Xcode and the latest Simulator which allows you to specify what
screen size iPhone to simulate. So I re-built an app and nothing changed - it
showing black strips top &amp;amp; bottom and left my app at the old size.&lt;/p&gt;

&lt;p&gt;After trying many different things and reading a lot of the new sections of the
Apple developer documentation, I finally found the answer online:&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px;&#34;&gt;
  &lt;strong&gt;If you want your app to fill the 4&#34; screen, you must provide&lt;/strong&gt;&lt;br /&gt; &lt;strong&gt; a new launch image file called &#34;Default-568h@2x.png&#34;.&lt;/strong&gt;&lt;br /&gt; &lt;strong&gt; This image must be exactly 640 x 1136 pixels.&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;Apparently the system uses the presence or absence of this file this to detect
whether your app supports the longer iPhone.&lt;/p&gt;

&lt;p&gt;I read that Xcode is supposed to warn you of the consequences if this file is
missing, but in my case, when I opened my project, Xcode helpfully used the old
launch image in its place. It showed a warning icon that the image was the wrong
size, but nothing else.&lt;/p&gt;

&lt;p&gt;The next problem was how to create this file. I use screen shots, but until the
app worked in the correct format, I wasn&amp;rsquo;t going to be able to get the screen
shot. So I made it a 2 step process: first I duplicated the original launch
image, renamed it and resized it. It looked wrong but this was irrelevant - it
was enough to get the app working in the correct format. Once I had the app
working, I was able to take a screen shot and create the final launch image.&lt;/p&gt;

&lt;p&gt;Once you have the app working in 2 sizes, you have to do more work with the
layout, either using springs &amp;amp; struts or using the modern auto-layout feature. I
find auto-layout confusing, but it is obviously more powerful and the way of the
future, so I am trying to work it out. I found a good tutorial at
&lt;a href=&#34;http://www.raywenderlich.com/20881/beginning-auto-layout-part-1-of-2&#34; target=&#34;_blank&#34;&gt;Ray
Wenderlich&amp;rsquo;s site&lt;/a&gt;. While directed at iOS 6, it also applies to Mac apps.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>A Knight&#39;s Move for iOS 1.1</title>
<link>https://troz.net/post/2012/a-knights-move-for-ios-1-1/</link>
<pubDate>Thu, 13 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2012/a-knights-move-for-ios-1-1/</guid>
<description>&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; September 2016 - A Knight&amp;rsquo;s Move for iOS is no longer available.&lt;br&gt;
&lt;a href=&#34;https://troz.net/knightsmove/&#34;&gt;A Knight&amp;rsquo;s Move for Mac&lt;/a&gt; is still supported.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A Knight&amp;rsquo;s Move for iPad &amp;amp; iPhone has just been updated to version 1.1&lt;/p&gt;

&lt;p&gt;There were some minor changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New puzzle pack: Majestic.&lt;/li&gt;
&lt;li&gt;iPhone now shows an info button of there is more help available for a
particular puzzle. (This info was already visible in the iPad version.)&lt;/li&gt;
&lt;li&gt;Minor cosmetic fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The big change was that all puzzles packs are now included in the free app,
which is now supported by iAds. The sale of puzzle packs via in-app purchasing
was disappointing, so I have decided to try using iAds instead. Hopefully they
will not feel too intrusive, but if you want to support my apps, please tap on a
few of the ads.&lt;/p&gt;

&lt;p&gt;Note that iAds will not appear in all countries. You may just see a banner
linking you to my other apps on the iPad. On iPhone, you will not see anything
different.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Man Reader 1.1 Released</title>
<link>https://troz.net/post/2012/man-reader-1-1-released/</link>
<pubDate>Tue, 14 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2012/man-reader-1-1-released/</guid>
<description>&lt;p&gt;The update of &lt;a href=&#34;https://troz.net/manreader/&#34; title=&#34;Man Reader&#34;&gt;Man Reader&lt;/a&gt; to version 1.1 has just become available through
the Mac App Store. This update has a bunch of &lt;a href=&#34;https://troz.net/manreader/#new_features&#34;&gt;new features&lt;/a&gt; - thanks to
everyone who made suggestions.&lt;/p&gt;

&lt;p&gt;As detailed in a &lt;a href=&#34;https://troz.net/sandboxing-and-the-mac-app-store/&#34;&gt;previous post&lt;/a&gt;, there have been major issues getting this
app approved with Apple&amp;rsquo;s new sand-boxing restrictions fully in place. But to
their credit, the Apple reviewers have been unfailing helpful and polite in
answering my questions and keeping me informed.&lt;/p&gt;

&lt;p&gt;I hope everyone finds the new features useful. Please &lt;a href=&#34;mailto:sarah@troz.net?subject=Man%20Reader&#34;&gt;keep the suggestions
coming in&lt;/a&gt; to make this app even better!&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Sandboxing and the Mac App Store</title>
<link>https://troz.net/post/2012/sandboxing-and-the-mac-app-store/</link>
<pubDate>Sat, 28 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2012/sandboxing-and-the-mac-app-store/</guid>
<description>&lt;p&gt;As of June 2012, all apps submitted to the Mac App Store have to be sandboxed
i.e. they have to be able to run in a limited environment where they cannot
interfere with other apps or other parts of the system. While this is generally
a good thing, there are problems when apps have legitimate reasons for requiring
access to other resources.&lt;/p&gt;

&lt;p&gt;One annoyance for developers is that Apple&amp;rsquo;s apps are mostly not sandboxed. To
check what apps you have installed that are sandboxed, open up Activity Monitor
(in Applications/Utilities). In the View menu, check that Sandbox is checked in
the Columns submenu. Then you can sort by clicking on the Sandbox title and work
out which apps are already sandboxed. Mail, Preview and Text Edit are now
sandboxed and so is the new Reminders app, but as far as I can tell, no other
Apple apps are. This causes two problems: firstly it is not fair to other
developers if Apple is enforcing a standard which only they are allowed to
break. Secondly, if Apple developers had to follow the same rules as everyone
else, then maybe the system would evolve to become more usable for everyone.&lt;/p&gt;

&lt;p&gt;In the Apple developer documentation about sandboxing, there is a section headed
&amp;ldquo;Determine Whether Your App Is Suitable for Sandboxing&amp;rdquo;. Here they list numerous
reasons why any app might not work in the sandbox. But the Mac App Store now
makes sandboxing compulsory, so what to do with apps that are not suitable?&lt;/p&gt;

&lt;p&gt;Some resources can be requested when building the app: access to various folders
(Pictures, Music, Downloads etc), access to Address Book and Calendar data,
printing facilities, networking etc. Beyond the specified list of entitlements
that can be requested, developers can also apply for &amp;ldquo;temporary entitlements&amp;rdquo;
which, if granted, will unlock access to other parts of the operating system.
However these are subject to the whims of app reviewers and will be re-assessed
with every update. Apple has also made it clear that they are intended as a
transition feature and will not be available for ever.&lt;/p&gt;

&lt;p&gt;This has lead to a recent spate of popular apps leaving the App Store.
&lt;a href=&#34;http://www.marco.org/2012/07/26/mac-app-store-future&#34; target=&#34;_blank&#34;&gt;Marco
Arment&lt;/a&gt; has discussed this problem with an emphasis on the issue of lack of
confidence in buying from the App Store. If you cannot be sure that an app you
buy will remain in the App Store, then you are less likely to buy it there.&lt;/p&gt;

&lt;p&gt;I have run into direct issues with sandboxing already. With
&lt;a href=&#34;http://www.picapod.com/&#34; target=&#34;_blank&#34;&gt;Pic-a-POD&lt;/a&gt;, I used to have
links to the Desktop and Screen Saver panes in System Preferences. These used
AppleScripts which required a temporary entitlement to send an AppleEvent. The
app was rejected because of this, so I had to modify this feature - it now just
takes you to the relevant section of System Prefs, but not directly to either
Desktop or Screen Saver. However Pic-a-POD&amp;rsquo;s help, which runs in Apple&amp;rsquo;s Help
Viewer app, contains exactly the same AppleScripts and so is allowed to access
these preference panes directly. Try working out the logic of that one!&lt;/p&gt;

&lt;p&gt;I have more serious problems with
&lt;a title=&#34;Man Reader&#34; href=&#34;https://troz.net/manreader/&#34; target=&#34;_blank&#34;&gt;Man Reader&lt;/a&gt;. Man
Reader displays a list of the man pages on your system. Depending on the tools
you have installed, these pages may be in a variety of locations. The shell
command that detects them first reads a config file and then checks the folders
listed in that config file. All it needs is read-only access. With the first
sandboxed version, I asked for a temporary entitlement to give me read-only
access to the startup disk. This was granted, but I have since been informed
that all requested entitlements were granted before the App Store cut-off date.
This may have been meant to be helpful, but it was not useful to allow access
that would later be removed without any warning.&lt;/p&gt;

&lt;p&gt;The current version of Man Reader waiting for approval asks for read-only access
to the config file directly and then to every folder listed in that config file.
If approved, this should be able to access all the man pages on a system. I have
no idea whether these entitlements will be granted, but if not, then I will have
to remove Man Reader from the App Store. It would be wrong to continue to sell
an app that only functioned in a limited manner, even though the App Store is
far and away my best form of marketing.&lt;/p&gt;

&lt;p&gt;So what do I suggest Apple does? I think they need to allow apps that are not
sand-boxed. However these apps could come with a warning before installation. In
Mountain Lion, the new security feature called Gatekeeper allows you to specify
the level of security you want when installing apps. Currently the options are
to allow apps downloaded from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mac App Store&lt;/li&gt;
&lt;li&gt;Mac App Store and identified developers&lt;/li&gt;
&lt;li&gt;Anywhere&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They could split the first option in two and allow&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mac App Store sandboxed&lt;/li&gt;
&lt;li&gt;Mac App Store any&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One further wrinkle is iCloud. Apple is encouraging users and developers towards
iCloud data storage and sharing. But only apps in the App Store are allowed to
use iCloud.&lt;/p&gt;

&lt;p&gt;So it will be interesting to see how this plays out. Obviously Apple is not
going to care if a tiny developer like me leaves the App Store, but if enough
high-profile developers leave, then there will surely be some consideration
given to the problem.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Update to Time In Words screen saver</title>
<link>https://troz.net/post/2012/update-to-time-in-words-screen-saver/</link>
<pubDate>Fri, 27 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2012/update-to-time-in-words-screen-saver/</guid>
<description>&lt;p&gt;&lt;a href=&#34;https://troz.net/time-in-words-screen-saver-for-mac/&#34; title=&#34;Time In Words Screen Saver for Mac&#34;&gt;Time In Words screen saver&lt;/a&gt; has just been updated to version 1.1 and is now
fully compatible with Mountain Lion. It is free to use and can be
&lt;a href=&#34;https://troz.net/screensaver/TimeInWords-ScreenSaver.zip&#34;&gt;downloaded&lt;/a&gt; here.&lt;/p&gt;

&lt;p&gt;The basic screen saver worked before, but searching for an alternative time zone
would crash System Preferences. That is now fixed.&lt;/p&gt;

&lt;p&gt;The screen saver also shows a thumbnail image when in Mountain Lion and is
code-signed with my developer ID for compatibility with Mountain Lion&amp;rsquo;s
Gatekeeper.&lt;/p&gt;

&lt;p&gt;The current version is compatible with 10.8 and 10.7. It may work in 10.6 but I
cannot be sure. If anyone tries it, please let me know.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>A Knight&#39;s Move Released</title>
<link>https://troz.net/post/2012/a-knights-move-released/</link>
<pubDate>Mon, 09 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2012/a-knights-move-released/</guid>
<description>&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; September 2016 - A Knight&amp;rsquo;s Move for iOS is no longer available.&lt;br&gt;
&lt;a href=&#34;https://troz.net/knightsmove/&#34;&gt;A Knight&amp;rsquo;s Move for Mac&lt;/a&gt; is still supported.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&amp;ldquo;A Knight&amp;rsquo;s Move&amp;rdquo; is a fun, addictive and simple puzzle game based on the
movements of chess pieces. Your goal is to move your white knight across a board
to a target square using the same movements as a knight in chess. Pawns may
block your way, while enemy bishops, castles, knights and the queen may try to
stop you.&lt;/p&gt;

&lt;p&gt;The game is available for iPad, iPhone and iPod Touch from the iTunes Store and
requires iOS 5.0 or later. The Mac version is available from the Mac App Store
and requires OS X 10.7 or later.&lt;/p&gt;

&lt;p&gt;Perfect for when you have a few minutes to relax, like on the train to work,
during your lunch break or during a boring lecture or class (Kids: don&amp;rsquo;t take
advice from randoms, but you can turn the sound FX off. Just sayin&amp;rsquo;), &amp;ldquo;A
Knight&amp;rsquo;s Move&amp;rdquo; will keep you coming back for &amp;ldquo;Just One More Go&amp;rdquo;!&lt;/p&gt;

&lt;p&gt;Once you have played the tutorial pack, you can move on to the other puzzle
packs. Each pack comes with 25 more puzzles and there are many different packs
allowing you to select easy puzzles, challenging puzzles or variety packs, some
with themes.&lt;/p&gt;

&lt;p&gt;See more about &amp;ldquo;A Knight&amp;rsquo;s Move&amp;rdquo; at the &lt;a href=&#34;https://troz.net/knightsmove/&#34;&gt;Knight&amp;rsquo;s Move web page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get the game from the
&lt;a href=&#34;http://itunes.apple.com/app/a-knights-move/id533321133&#34; target=&#34;_blank&#34;&gt;Mac
App Store&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img title=&#34;Tutorial puzzle on iPhone&#34; src=&#34;https://troz.net/images/Tutorial-500.png&#34; alt=&#34;Tutorial puzzle on iPhone&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Tutorial puzzle on iPhone&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/images/PeskyPawns.png&#34;&gt;&lt;img title=&#34;Pesky Pawns - one of the more difficult puzzles on Mac.&#34; src=&#34;https://troz.net/images/PeskyPawns-600.png&#34; alt=&#34;Pesky Pawns - one of the more difficult puzzles on Mac.&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pesky Pawns - one of the more difficult puzzles on Mac.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>A Knight&#39;s Move</title>
<link>https://troz.net/knightsmove/</link>
<pubDate>Sun, 08 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/knightsmove/</guid>
<description>

&lt;p&gt;A Knight&amp;rsquo;s Move is a puzzle game where you have to move your knight across a
board to a target square using the same movements as a knight in chess. Pawns
may block your way, while enemy bishops, castles, knights and the queen may try
to stop you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: &lt;a href=&#34;http://itunes.apple.com/app/a-knights-move/id533321133&#34;&gt;Version 1.3 for Mac now available&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Available from the &lt;a href=&#34;http://itunes.apple.com/app/a-knights-move/id533321133&#34;&gt;Mac App Store&lt;/a&gt; for OS X 10.7 or later&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/KnightsMoveMac1.png&#34; alt=&#34;A Knight&#39;s Move for Mac&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Get from the starting position to the target in the shortest possible number of
moves. Score stars based on the moves taken. If you need help, take a one star
penalty to show all possible moves. If you really get stuck, after several tries
the Cheat button allows you to see a solution, although that will cost you all
your stars.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/KnightsMoveMac2.png&#34; alt=&#34;A Knight&#39;s Move for Mac&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Choose your preferred board and chess pieces.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/KM-Prefs.png&#34; alt=&#34;A Knight&#39;s Move Preferences&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;faq&#34;&gt;FAQ&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt; Does the time I take to solve a puzzle count against me?&lt;br /&gt;
**A. **No - the number of stars you get depends solely on the number of moves taken.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt; Are there any penalties for using Undo or Restart?&lt;br /&gt;
**A. **No - both Undo and Restart wind back the number of moves, so are not counted
towards your final number of moves.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt; What are the best techniques for solving a large puzzle?&lt;br /&gt;
&lt;strong&gt;A.&lt;/strong&gt; Sometimes it is easier to work backwards. Work out which squares get you to
the target safely and see if you can work out how to get to one of them. Another
technique is to check all the possible moves and see how many can be eliminated because
of danger or because they don&amp;rsquo;t lead anywhere except back to where you started. Just
remember that trying and failing doesn&amp;rsquo;t count against you, so give it a go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt; What if I need help with a puzzle?&lt;br /&gt;
&lt;strong&gt;A.&lt;/strong&gt; The first way to get help is to turn on &amp;ldquo;Show Moves&amp;rdquo;. This puts green circles
on any square that your White Knight can reach next move. It does not indicate whether
these squares are safe, but just shows you all legal moves. This option costs you
a one star penalty but you can always do the puzzle again to try for three stars.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt; What if I think a puzzle is completely impossible?&lt;br /&gt;
&lt;strong&gt;A.&lt;/strong&gt; All the puzzles have at least one solution. If you have tried and tried, using
Restart or being captured at least 5 times, the Cheat button will become available.
Using the Cheat button will show you a possible solution but will mean that you can
never get any stars for that puzzle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt; You&amp;rsquo;re kidding, right? No starsâ¦ everâ¦ just because I cheated?&lt;br /&gt;
&lt;strong&gt;A.&lt;/strong&gt; OK, I&amp;rsquo;m kidding, but the way out of this is deliberately hidden and inconvenient.
If you go to Settings or Preferences, you can reset all the game scores which clears
all records of stars won so far, allowing you to restart completely. If you reset
the scores three times in a row, this will also clear all records of cheating.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt; I think I solved a puzzle in fewer moves than the minimum moves shown.&lt;br /&gt;
&lt;strong&gt;A.&lt;/strong&gt; Great! Please take a screen shot of the puzzle and annotate it to show your
moves. Email it in to sarah@troz.net so that I can edit the puzzle for the next update.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Easy access to the Library folder</title>
<link>https://troz.net/post/2012/easy-access-to-the-library-folder/</link>
<pubDate>Wed, 16 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2012/easy-access-to-the-library-folder/</guid>
<description>&lt;p&gt;In Mac OS X 10.7 (Lion), Apple decided to make it more difficult to access your
Library folder, presumably to stop people doing stuff that made apps crash. But
as a developer, I need access to my Library folder a lot. I need to check that
preferences are being saved correctly. If I have an app that uses the
Application Support folder, then I need to be able to check it. And for
sand-boxed apps, they keep all their data in the Containers folder inside the
Library.&lt;/p&gt;

&lt;p&gt;You can easily get to the Library folder by holding down the Option key while
choosing the Go menu in Finder. This adds Library to the menu and you can get to
the folder that way. But this is not as convenient as single-click access from a
Finder window, so here is my preferred method.&lt;/p&gt;

&lt;p&gt;Use the Option key and the Finder&amp;rsquo;s Go menu to get the Library folder open in a
Finder window. Switch this window to column view, which will display the Library
folder (slightly greyed out) in the first column. Drag this Library folder to
the side bar of your Finder window. Now it is there all the time, in every
Finder window that is showing the side bar.&lt;/p&gt;

&lt;p&gt;I have read about various Terminal tricks to get the Library to show up, but
every system update seems to turn it off again. This technique doesn&amp;rsquo;t involve
anything except the Finder&amp;rsquo;s side bar preferences and so far (I&amp;rsquo;m now up to
10.7.4), it hasn&amp;rsquo;t needed to be reset after any update.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Man Reader update coming soon</title>
<link>https://troz.net/post/2012/man-reader-update-coming-soon/</link>
<pubDate>Fri, 11 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2012/man-reader-update-coming-soon/</guid>
<description>&lt;p&gt;Man Reader launched on the Mac App Store a couple of days ago and yesterday I
got an email from a purchaser who reported that Man Reader was not displaying
the man pages for MacPorts, even though he had the paths set up correctly.&lt;/p&gt;

&lt;p&gt;I installed MacPorts to check this out and ran into the same problem. Running
the command &amp;ldquo;man port&amp;rdquo; in Terminal worked fine, but &amp;ldquo;port&amp;rdquo; did not appear in Man
Reader&amp;rsquo;s list.&lt;/p&gt;

&lt;p&gt;Man Reader uses the &amp;ldquo;apropos&amp;rdquo; command to list all available man pages, so I
tested it next. When I found that it was not listing &amp;ldquo;port&amp;rdquo; either, I thought I
had discovered the problem. OS X offers two commands for searching for man
pages: apropos &amp;amp; whatis. The database files used by these commands are updated
weekly by one of the periodic system commands. I manually ran this update
command using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo /etc/periodic/weekly/320.whatis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This did part of the job, as the apropos command when used in Terminal now
contained the MacPorts man pages. However Man Reader still did not show these
man pages.&lt;/p&gt;

&lt;p&gt;Reverting to the Console log, I found that this was a sand-boxing problem. The
Mac OS X sand-box was preventing access to the man.conf file (which tells where
to look for man pages), and the whatis database file containing the new data. I
assume that without access to these files, the default locations for man pages
were still searched, but no non-standard locations were being searched.&lt;/p&gt;

&lt;p&gt;I have just submitted an update to the App Store that still uses sand-boxing but
requests temporary read-only access to the file system to read these files. If
Apple rejects this, then I will release a version without sand-boxing.&lt;/p&gt;

&lt;p&gt;Either way, you can be assured that the matter is being dealt with and the next
update, whether sand-boxed or not, will allow access to all man pages.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Pic-a-POD 2.0.4 for Mac</title>
<link>https://troz.net/post/2012/pic-a-pod-2-0-4-for-mac/</link>
<pubDate>Fri, 11 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2012/pic-a-pod-2-0-4-for-mac/</guid>
<description>

&lt;p&gt;The latest update for &lt;a href=&#34;http://www.picapod.com/&#34;&gt;Pic-a-POD for Mac&lt;/a&gt; is now available through the
&lt;a href=&#34;http://itunes.apple.com/app/pic-a-pod/id477909802?mt=12&amp;uo=4&#34; target=&#34;_blank&#34;&gt;Mac
App Store&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;bug-fix&#34;&gt;Bug fix:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;selecting an iPhoto pic from the Recent Desktops menu now works correctly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;new-features&#34;&gt;New features:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Better indication of downloads and when large pics are not yet available&lt;/li&gt;
&lt;li&gt;Direct link to App Store in Help menu - please rate or review.&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>
    
    <item>
<title>Making a Mac Screen Saver</title>
<link>https://troz.net/post/2012/making-a-mac-screen-saver/</link>
<pubDate>Wed, 09 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2012/making-a-mac-screen-saver/</guid>
<description>&lt;p&gt;Having just completed the my first screen saver for Mac - the &lt;a href=&#34;https://troz.net/time-in-words-screen-saver-for-mac/&#34; title=&#34;Time In Words Screen Saver for Mac&#34;&gt;Time In Words
Screen Saver&lt;/a&gt;, I thought I would share some of the experiences. I am using OS
X Lion (10.7) and Xcode 4.3.2&lt;/p&gt;

&lt;p&gt;The first thing is to create a new project in Xcode using the Screen Saver
template:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/images/ScreenSaverTemplate.png&#34;&gt;&lt;img title=&#34;Xcode Screen Saver Template&#34; src=&#34;https://troz.net/images/ScreenSaverTemplate-441x300.png&#34; alt=&#34;Xcode Screen Saver Template&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Xcode sets up a project for you with everything you need for a screen saver
module. Start editing the ScreenSaverView.m file. The most important method here
is animateOneFrame.&lt;/p&gt;

&lt;p&gt;This is called every time the animation time interval elapses. This interval is
set in &lt;code&gt;initWithFrame:isPreview:&lt;/code&gt;. I have seen some debate online as to whether
the drawing should be done in the &lt;code&gt;animateOneFrame&lt;/code&gt; method or in the &lt;code&gt;drawRect&lt;/code&gt;
method. I chose to use &lt;code&gt;animateOneFrame&lt;/code&gt; because they are both called when the
screen saver starts which can lead to an unpleasant flicker.&lt;/p&gt;

&lt;p&gt;Now it is up to you to decide what to show in the &lt;code&gt;animateOneFrame&lt;/code&gt; method. For
Time In Words, I assembled the data as a string, created a dictionary of text
attributes, calculated the location where I wanted to show the text and used
&lt;code&gt;drawAtPoint:withAttributes:&lt;/code&gt; to display it.&lt;/p&gt;

&lt;p&gt;There are a couple of important tricks when working out locations: firstly, you
will need to know the bounds of the screen saver area. This will vary depending
on the monitor, screen size or whether the screen saver is appearing in the
preview window in System Preferences. The screen saver view has a method that
does this work for you.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;NSRect viewBounds = [self bounds];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next trick is that you are most likely going to need some random numbers.
Again, the screen saver framework supplies these to you in several forms. I used
&lt;code&gt;SSRandomFloatBetween&lt;/code&gt; but there are others. Check the documentation.&lt;/p&gt;

&lt;p&gt;I ran into an oddity in System Preferences that made testing a bit tedious. I
built the screen saver module and double-clicked on it to install into System
Preferences. That worked fine, but when I made some changes and repeated the
process, the original screen saver was still in place. I found that I had to
quit System Preferences each time. Deleting the old version of the screen saver
was not necessary, but quitting the System Prefs app was essential.&lt;/p&gt;

&lt;p&gt;So that gives the basic screen saver module but with no options. Adding options
is not difficult, but as always, there are a few things that are not obvious on
first glance.&lt;/p&gt;

&lt;p&gt;Add a xib file to your project: I used a window template. Then change the
window&amp;rsquo;s class to NSPanel and configure it as shown:&lt;/p&gt;

&lt;p&gt;&lt;img title=&#34;NSPanel Settings&#34; src=&#34;https://troz.net/images/PanelSettings.png&#34; alt=&#34;NSPanel Settings&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Set the File&amp;rsquo;s Owner class to the class of your Screen Saver view. In your
ScreenSaverView.h file, declare a property for this new panel. e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt; @property (assign) IBOutlet NSPanel *optionsPanel;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;@synthesize this in the ScreenSaverView.m file. In the xib file, connect the
panel to this outlet.&lt;/p&gt;

&lt;p&gt;Now go back to ScreenSaverView.m and add the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;* (BOOL)hasConfigureSheet { return YES; }

* (NSWindow *)configureSheet { if (!self.optionsPanel) { [NSBundle
  loadNibNamed:@&amp;quot;Options&amp;quot; owner:self]; } return self.optionsPanel; }

- (IBAction)closeConfig:(id)sender { [[NSApplication sharedApplication]
  endSheet:self.optionsPanel]; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;hasConfigureSheet&lt;/code&gt; and &lt;code&gt;configureSheet&lt;/code&gt; stubs are already there for you,
but you can replace them with these versions.&lt;/p&gt;

&lt;p&gt;Go back to the xib file and drag in a button to close the options panel. Connect
it to the &lt;code&gt;closeConfig:&lt;/code&gt; action.&lt;/p&gt;

&lt;p&gt;Save everything, build, install in System Preferences and test. Firstly, the
&amp;ldquo;Options&amp;hellip;&amp;rdquo; button should be enabled. Clicking it should open your panel as a
sheet, and when you click your button, the panel should close.&lt;/p&gt;

&lt;p&gt;If that doesn&amp;rsquo;t work, check the class assignments, the connections, the settings
for the NSPanel and the code in that order.&lt;/p&gt;

&lt;p&gt;Once the panel is opening and closing as required, you need to add the ability
to store and retrieve the settings. Instead of using NSUserDefaults as you would
in a standard Mac app, there is a special class call ScreenSaverDefaults for
screen savers. It needs a unique module name, so I used the bundle identifier.
For my Time In Words screen saver, this is
&amp;ldquo;net.troz.Time-In-Words-Screen-Saver&amp;rdquo;. I defined a constant to hold this as a
string, so I could use it anywhere I needed.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;initWithFrame:isPreview:&lt;/code&gt; method, I got a reference to the screen saver
defaults for my screen saver and registered the defaults. I am never very sure
about the need to do this, but it is supposed to be a good practice.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;ScreenSaverDefaults *defaults = [ScreenSaverDefaults defaultsForModuleWithName:kModuleName];
[defaults registerDefaults:[NSDictionary dictionaryWithObjectsAndKeys:
  @&amp;quot;NO&amp;quot;, @&amp;quot;UseAlternativeZone&amp;quot;, @&amp;quot;&amp;quot;,
  @&amp;quot;AlternativeZoneName&amp;quot;, nil]
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using them is exactly the same as using NSUserDefaults:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;// Reading
ScreenSaverDefaults *defaults = [ScreenSaverDefaults defaultsForModuleWithName:kModuleName];
BOOL useAlternativeZone = [defaults boolForKey:@&amp;quot;UseAlternativeZone&amp;quot;];
NSString *alternativeZoneName = [defaults objectForKey:@&amp;quot;AlternativeZoneName&amp;quot;];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;// Writing
ScreenSaverDefaults *defaults = [ScreenSaverDefaults defaultsForModuleWithName:kModuleName]; [defaults setBool:useAlternative forKey:@&amp;quot;UseAlternativeZone&amp;quot;];
[defaults setObject:alternativeZoneName forKey:@&amp;quot;AlternativeZoneName&amp;quot;];
[defaults synchronize];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One last thing: if you want to distribute the screen saver, you will want to
create an archive, possibly code-signing with your Apple developer ID to allow
for Mountain Lion&amp;rsquo;s up-coming Gatekeeper security system. I code-signed the
project and built an archive, but when I clicked &amp;ldquo;Distribute&amp;rdquo; in the Organizer,
the only appropriate options was &amp;ldquo;Save Built Products&amp;rdquo;. I selected this option
and ended up with a series of folders inside folders, with the screen saver
module in about the fifth folder down. I don&amp;rsquo;t know why the module gets
distributed like this, but I pulled it out of the folders and it worked fine.&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s about it. A lot of this stuff is online or in Apple&amp;rsquo;s documentation,
but there are enough oddities to make it worthwhile gathering together all that
I learnt while making this screen saver.&lt;/p&gt;

&lt;p&gt;Click this icon to download the screen saver:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/screensaver/TimeInWords-ScreenSaver.zip&#34;&gt;&lt;img src=&#34;https://troz.net/images/ScreenSaverIcon128.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Man Reader</title>
<link>https://troz.net/manreader/</link>
<pubDate>Tue, 08 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/manreader/</guid>
<description>

&lt;p&gt;Man Reader is a utility app for reading macOS&amp;rsquo;s man pages. Man Reader allows
quick, convenient and easy access to the man pages on your system, useful for
programmers, system administrators and tweakers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/images/MR_Start.png&#34;&gt;&lt;img src=&#34;https://troz.net/images/MR_Start_small.png&#34; alt=&#34;MR&#34; title=&#34;Man Reader&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://itunes.apple.com/app/man-reader/id522583774?mt=12&#34;&gt;Buy Man Reader from the Mac App Store&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Man pages are available for the Unix commands used mostly in Terminal or when
shell scripting. These man pages are normally displayed in Terminal using the
&amp;ldquo;man&amp;rdquo; command e.g. &amp;ldquo;man man&amp;rdquo; gives you the man page for the man command.&lt;/p&gt;

&lt;p&gt;However there are problems with this: the man page is displayed to you in your
Terminal window page by page and when you have got to the bottom, you have to
know to press &amp;lsquo;q&amp;rsquo; to get out of the man page display, at which point it
disappears completely. Hope you have a good memory!&lt;/p&gt;

&lt;p&gt;There are various tricks to get around this: opening it in a separate window,
piping it to Preview as a PDF, listing it as a single page etc, but none of
these are really convenient, which is why I wrote Man Reader. Basically, I
reckon that if I want a utility, then there must be other people who would want
the same thing.&lt;/p&gt;

&lt;p&gt;Man Reader assembles a list of the commands with available man pages on your
system - this will vary according to what developer tools you have installed.
These commands are listed for you and you can click on any one to display the
man page for that command.&lt;/p&gt;

&lt;h2 id=&#34;man-reader-features&#34;&gt;Man Reader Features:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;List of all available man pages on your system.&lt;/li&gt;
&lt;li&gt;Show only a section of the pages.&lt;/li&gt;
&lt;li&gt;Search for a man page by name.&lt;/li&gt;
&lt;li&gt;Display man page in text or HTML (different pages look best in different
formats).&lt;/li&gt;
&lt;li&gt;Step back &amp;amp; forward through recently viewed man pages.&lt;/li&gt;
&lt;li&gt;Live links to &amp;lsquo;See Also&amp;rsquo; entries.&lt;/li&gt;
&lt;li&gt;&amp;lsquo;Sticky notes&amp;rsquo; at the side to jump to sub-sections in a page.&lt;/li&gt;
&lt;li&gt;Choose a font and size for the display.&lt;/li&gt;
&lt;li&gt;Convenient buttons in the toolbar allow quick access to commonly used
utilities.&lt;/li&gt;
&lt;li&gt;Sand-boxed for OS X Lion &amp;amp; later.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;man-reader-version-1-8-changes-23-oct-2016&#34;&gt;Man Reader version 1.8 changes (23 Oct 2016):&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;More complete search for man pages, including in third-party IDEs.&lt;/li&gt;
&lt;li&gt;Fix for glitch when displaying previously selected page on launch.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;man-reader-version-1-7-changes-10-oct-2016&#34;&gt;Man Reader version 1.7 changes (10 Oct 2016):&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Updated for macOS Sierra.&lt;/li&gt;
&lt;li&gt;List of pages now uses alternating colors even if not using the defaults.&lt;/li&gt;
&lt;li&gt;Minimum supported system version raised to 10.11.&lt;/li&gt;
&lt;li&gt;Minor display glitches fixed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;man-reader-version-1-6-changes-13-jul-2016&#34;&gt;Man Reader version 1.6 changes (13 Jul 2016):&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Much improved searching for available man pages, including permissions fix for
some pages.&lt;/li&gt;
&lt;li&gt;Fixed error with new search term being over-written.&lt;/li&gt;
&lt;li&gt;Sand-boxed version now works just as well as the non-sand-boxed so please
switch back to this version.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;man-reader-version-1-5-changes&#34;&gt;Man Reader version 1.5 changes:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Much improved searching for available man pages.&lt;/li&gt;
&lt;li&gt;Sand-boxed version now works just as well as the non-sand-boxed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;man-reader-version-1-4-changes&#34;&gt;Man Reader version 1.4 changes:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Fix for plain text view not wrapping correctly for odd-sized fonts.&lt;/li&gt;
&lt;li&gt;Fix for HTML text view over-riding font colors that may be invisible.&lt;/li&gt;
&lt;li&gt;Search for missing entry (e.g. g++) no longer requires Enter or Return.&lt;/li&gt;
&lt;li&gt;Better automatic selection of matching entries while searching.&lt;/li&gt;
&lt;li&gt;Fix for animation warning message appearing in Console.&lt;/li&gt;
&lt;li&gt;Status display shows when man page list is being updated.&lt;/li&gt;
&lt;li&gt;Searching inside a page now allows a minimum of 2 characters (was 3), so flags
e.g. &amp;lsquo;-b&amp;rsquo; do not need to be escaped.&lt;/li&gt;
&lt;li&gt;Fixed path for Network Utility in tool bar (moved in OS X 10.9).&lt;/li&gt;
&lt;li&gt;More information available about the effects of sand-boxing for this app.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;man-reader-version-1-3-changes&#34;&gt;Man Reader version 1.3 changes:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Better formatting of plain text to allow for HTML entities.&lt;/li&gt;
&lt;li&gt;Fix for font in some HTML pages getting bigger &amp;amp; bigger.&lt;/li&gt;
&lt;li&gt;Failed search for page will search for a matching man page anyway.&lt;/li&gt;
&lt;li&gt;Editable apps in toolbar (see Preferences &amp;amp; View menu).&lt;/li&gt;
&lt;li&gt;Fixed bug when setting custom colors for marker tabs.&lt;/li&gt;
&lt;li&gt;Changed shortcuts for Find (see Edit menu).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;man-reader-version-1-2-changes&#34;&gt;Man Reader version 1.2 changes:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Customizable colors for text, background, links, found text.&lt;/li&gt;
&lt;li&gt;Searching for text within pages marks all matches.&lt;/li&gt;
&lt;li&gt;Pages will adjust line width to suit window size, even in plain text mode.&lt;/li&gt;
&lt;li&gt;If a search only results in a single page, press Return to display it.&lt;/li&gt;
&lt;li&gt;More man pages should be located on your system.&lt;/li&gt;
&lt;li&gt;Fix for bug where app did not always remember full screen setting.&lt;/li&gt;
&lt;li&gt;Fix for bug where some pages were being added to the history list twice.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;man-reader-version-1-1-changes&#34;&gt;Man Reader version 1.1 changes:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Search for text within a man page.&lt;/li&gt;
&lt;li&gt;Bookmark frequently visited pages.&lt;/li&gt;
&lt;li&gt;Search man page list using &amp;ldquo;Starts with&amp;rdquo; or &amp;ldquo;Contains&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Preferences for the marker tabs: choose a pre-made color set or design your
own.&lt;/li&gt;
&lt;li&gt;Full screen mode now supported.&lt;/li&gt;
&lt;li&gt;Custom toolbar configurations now saved &amp;amp; restored correctly.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;If you have any problems with Man Reader, any suggestions for future versions or
encounter any bugs, please &lt;a href=&#34;mailto:sarah@troz.net?subject=Man%20Reader&#34;&gt;contact me&lt;/a&gt;.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Time In Words Screen Saver</title>
<link>https://troz.net/time-in-words-screen-saver-for-mac/</link>
<pubDate>Mon, 07 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/time-in-words-screen-saver-for-mac/</guid>
<description>&lt;p&gt;The latest member of the Time In Words suite of apps is a screen saver module
for Macs.&lt;br /&gt;
Version 1.2 updated January 2013: compatible with Lion (OS X 10.7), Mountain Lion
(OS X 10.8), Mavericks (OS X 10.9) &amp;amp; Yosemite (OS X 10.10).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/ScreenSaverIcon128.png&#34; alt=&#34;Time In Words Screen Saver Download&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/screensaver/TimeInWords-ScreenSaver.zip&#34;&gt;Download Time In Words Screen Saver&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like &lt;a href=&#34;https://troz.net/time-in-words/&#34; title=&#34;Time In Words&#34;&gt;Time In Words for iOS&lt;/a&gt; and &lt;a href=&#34;https://troz.net/time-in-words-for-mac/&#34; title=&#34;Worlds Time In Words for Mac&#34;&gt;World Time In Words for Mac&lt;/a&gt;, it
displays the time and date in plain words which are easy to read and comprehend.
While it only shows a single time and date, this can be configured to show your
local time &amp;amp; date or any available time zone. Since the App Store does not have
a section for screen savers, the &lt;a href=&#34;https://troz.net/screensaver/TimeInWords-ScreenSaver.zip&#34;&gt;Time In Words screen saver&lt;/a&gt; is available as
a direct download from my site. Click the link or the icon above to download the
screen saver as a zip file. If the zip file does not open automatically,
double-click the file to unzip it. Then double-click the &amp;ldquo;Time In Words Screen
Saver.saver&amp;rdquo; file to install the screen saver in your System Preferences. You
will be asked whether you want to install it for the current user only or for
all users. Selecting &amp;ldquo;All Users&amp;rdquo; will require you to enter your password, so I
recommend just installing for the current user.&lt;/p&gt;

&lt;p&gt;Scroll to the &amp;ldquo;Other&amp;rdquo; section of the list of screen savers and click &amp;ldquo;Time In
Words Screen Saver&amp;rdquo; to activate it. Sometimes the installation leaves the screen
saver selected but not active. If this is the case, select another screen saver
and then click back on Time In Words.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/images/ScreenSaver1.png&#34;&gt;&lt;img src=&#34;https://troz.net/images/ScreenSaver1-small.png&#34; alt=&#34;Time In Words Screen Saver&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By default, your local time &amp;amp; date will be displayed. To select a different time
zone, click the &amp;ldquo;Screen Saver Optionsâ¦&amp;rdquo; button to display the following:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/images/ScreenSaver2.png&#34;&gt;&lt;img src=&#34;https://troz.net/images/ScreenSaver2-small.png&#34; alt=&#34;Time In Words Screen Saver Options&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the &amp;ldquo;Show Alternate Time&amp;rdquo; radio button to enable the time zone list. As
with Time In Words for Mac, you can type part of a city name in the search field
to find a zone quickly. Select the zone you want to use and click &amp;ldquo;OK&amp;rdquo;. The
preview will switch to showing your newly selected time zone.&lt;/p&gt;

&lt;p&gt;For anyone interested in the source code, here is a download link: &lt;a href=&#34;https://troz.net/screensaver/TimeInWordsScreenSaverXcode.zip&#34;&gt;Time In
Words Screen Saver Xcode project&lt;/a&gt;. This was written using Xcode 4.x so is
rather out-dated by now, but may prove useful to others wishing to start writing
their own screen savers.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Support for older operating systems</title>
<link>https://troz.net/post/2012/support-for-older-operating-systems/</link>
<pubDate>Wed, 02 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2012/support-for-older-operating-systems/</guid>
<description>&lt;p&gt;Working out what operating systems to support in your software is always a
difficult decision. I only program for Mac &amp;amp; iOS systems for starters. This is
because they are the systems I use and understand. I am not interested in
expending the time &amp;amp; money needed to program and test my software for other
systems.&lt;/p&gt;

&lt;p&gt;Within the Mac &amp;amp; iOS ecosystems, there is still the decision of which versions
to support. Partially, this is based on the usage statistics of each version. I
found a site that segments the current Mac market:
&lt;a href=&#34;http://www.netmarketshare.com/operating-system-market-share.aspx?qprid=10&amp;qpcustomb=*2&#34; target=&#34;_blank&#34;&gt;Distribution
of Mac OS X versions&lt;/a&gt;. This tells me that OS 10.6 &amp;amp; OS 10.7 between them have
83% which makes 10.6 a good cut-off point.&lt;/p&gt;

&lt;p&gt;Distribution of iOS versions is harder to discover, but I found a post that did
a good job of analysing the statistics that are available:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pxldot.com/post/18754186750/ios-ebb-and-flow&#34;&gt; pxldot (iOS Ebb and Flow)&lt;/a&gt;. According to this post, by March 2012, iOS had
about 75% with the remainder being almost exclusively iOS 4.&lt;/p&gt;

&lt;p&gt;So based on statistics alone, it makes sense to support Mac OS X 10.6 or later
and iOS 4 and later. However this doesn&amp;rsquo;t cover all the relevant issues. Another
important factor is new techniques and APIs introduced in Apple&amp;rsquo;s developer
tools.&lt;/p&gt;

&lt;p&gt;In iOS 4, Apple gave us ARC - Automatic Reference Counting - which basically
removes the tedious job of memory management. This was especially painful in iOS
apps where there is no garbage collection. &lt;a href=&#34;http://longweekendmobile.com/2011/09/07/objc-automatic-reference-counting-in-xcode-explained/&#34;&gt;The Long Weekend Website&lt;/a&gt; has an
excellent summary of ARC - what it is and how to use it. Since this only
excludes iOS 3 or earlier, there is no issue using this for all iOS projects.&lt;/p&gt;

&lt;p&gt;But now Apple has extended ARC to Mac apps as well, but only for apps built to
run under 10.7 or later. Even though Mac apps could use garbage collection to
remove some of the burden of memory management, this had its own inefficiencies
and overheads. So in my case, I have decided that all future apps will require
10.7 to take advantage of ARC. Existing apps will stay as is - requiring 10.6 or
later. With 10.8 not that far away, the usage statistics should follow this
trend.&lt;/p&gt;

&lt;p&gt;Back to iOS, there is another new feature of Xcode that is really too attractive
to ignore and that is story-boarding. This is a graphical way of laying out the
navigation logic for your app and providing segues between different views. Ray
Wenderlich has a good &lt;a href=&#34;http://www.raywenderlich.com/5138/beginning-storyboards-in-ios-5-part-1&#34;&gt;introduction to storyboards&lt;/a&gt;. So this means that my
future iOS apps will all require 10.5 or later.&lt;/p&gt;

&lt;p&gt;One final factor is testing. You really need to have a device running each
version of any supported operating system. I would rather concentrate on getting
the best result for users of the latest versions that spend my time tweaking for
older systems. With iOS, Apple makes it amazingly easy to update to the latest
version. With Macs it costs money which is always a barrier, but technically,
the App Store is making updates easier to apply.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Time In Words &amp; the new iPad</title>
<link>https://troz.net/post/2012/time-in-words-the-new-ipad/</link>
<pubDate>Tue, 10 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2012/time-in-words-the-new-ipad/</guid>
<description>&lt;p&gt;The new iPad has a Retina display, meaning that the pixel density is much
greater. For some apps, this is a problem as their graphics are now scaled and
look pixellated. However Time In Words is very simple. It uses standard fonts
and interface widgets with no images or external graphics apart from the icon.
The icon may not look perfect on a new iPad, but the display itself should look
really great.&lt;/p&gt;

&lt;p&gt;I had a report from one user that Time In Words will not work at all on his new
iPad. Unfortunately, the email address supplied did not work, so I was unable to
contact this person directly. If you are reading this, please contact me again.&lt;/p&gt;

&lt;p&gt;The person having the problem did not specify exactly what the problem was, so I
don&amp;rsquo;t know if the app will not start, or if it is not displaying correctly, or
if it is showing the wrong times or what.&lt;/p&gt;

&lt;p&gt;However I suggested two things to try, and I will list them now in case anyone
else is having issues:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Try deleting the app from your iPad and then re-installing from the App
Store.&lt;/li&gt;
&lt;li&gt;Do a complete reboot of your iPad in case it is running low on memory.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hopefully one or both of these ideas will solve any problems. They are both good
general tricks to try with any problem app.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>iPhone 4 Home Button</title>
<link>https://troz.net/post/2012/iphone-4-home-button/</link>
<pubDate>Wed, 28 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2012/iphone-4-home-button/</guid>
<description>&lt;p&gt;My iPhone 4 is now 18 months old, and it&amp;rsquo;s Home button is starting to feel the
strain. These buttons have been used much more than originally intended, with
the new multitasking required double-presses, not to mention access to the
camera etc. So basically , it is wearing out.&lt;/p&gt;

&lt;p&gt;The phone is out of warranty and there is no way I am going to pay for an
expensive repair when my current phone contract will expire later this year, and
hopefully the iPhone 5 will be ready for me then. And a cheap repair or DIY is
too risky.&lt;/p&gt;

&lt;p&gt;I saw a post comparing the physical structure of the home buttons on iPhone 4 &amp;amp;
4S. Unfortunately I cannot find the link now, but it showed that the actual
hardware has been made a lot more robust since the iPhone 4 was released, so
this should only be a short term issue.&lt;/p&gt;

&lt;p&gt;I read a article suggesting the use of WD-40 for a mis-behaving Home button.
This is a TERRIBLE idea! Do not spray a penetrating oil into your expensive
electronic device. For starters, it don&amp;rsquo;t believe it is a friction problem - I
think the mechanism is just wearing out.&lt;/p&gt;

&lt;p&gt;Some people recommend recalibrating the Home button as shown in this post from
&lt;a href=&#34;http://www.idownloadblog.com/2011/12/22/recalibrate-home-button-responsive/&#34;&gt;idownloadblog.com&lt;/a&gt;. I am a bit sceptical about this. I tried it, but I can&amp;rsquo;t
see that it did anything. Maybe if your problem is software rather than
hardware, then it will do some good. Anyway, unlike the WD-40 trick, it can&amp;rsquo;t do
any harm.&lt;/p&gt;

&lt;p&gt;Finally, on to the workaround. If your iPhone button is really unreliable, but
you are not ready to repair or upgrade, then you can use the Accessibility tools
to get a software Home button on the screen.&lt;/p&gt;

&lt;p&gt;Go to Settings - General - Accessibility. Scroll down to &amp;ldquo;Physical &amp;amp; Motor&amp;rdquo;.
Turn on AssistiveTouch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/images/HomeButton1.png&#34;&gt;&lt;img title=&#34;AssistiveTouch settings&#34; src=&#34;https://troz.net/images/HomeButton1-small.png&#34; alt=&#34;AssistiveTouch settings&#34; width=&#34;200&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you back out of Settings, you will see a white blob somewhere on your
screen. This can be dragged to any location around the edge of the screen, so
you can always move it out of the way in any app.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/images/HomeButton2.png&#34;&gt;&lt;img title=&#34;The White Blob&#34; src=&#34;https://troz.net/images/HomeButton2-small.png&#34; alt=&#34;The White Blob&#34; width=&#34;200&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tapping on the white blob gives you an overlay view with four options, one of
which is Home. Tapping this is exactly the same as pressing the physical Home
button. So with this and the power button, you can do everything, even if the
Home button stops working completely.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://troz.net/images/HomeButton3.png&#34;&gt;&lt;img title=&#34;AssistiveTouch panel open&#34; src=&#34;https://troz.net/images/HomeButton3-small.png&#34; alt=&#34;AssistiveTouch panel open&#34; width=&#34;200&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to Tom at our local Apple Store (Robina, Queensland, Australia) for this
tip.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Time In Words for Mac now available</title>
<link>https://troz.net/post/2012/time-in-words-for-mac-now-available/</link>
<pubDate>Tue, 20 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2012/time-in-words-for-mac-now-available/</guid>
<description>&lt;p&gt;Time In Words for Mac has just been approved and is now available for free from
the
&lt;a href=&#34;http://itunes.apple.com/au/app/time-in-words/id509085586?mt=12&#34; target=&#34;_blank&#34;&gt;Mac
App Store&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more details, check out the &lt;a href=&#34;https://troz.net/time-in-words-for-mac/&#34;&gt;Time In Words for Mac&lt;/a&gt; web page.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>World Time In Words for Mac</title>
<link>https://troz.net/time-in-words-for-mac/</link>
<pubDate>Mon, 19 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/time-in-words-for-mac/</guid>
<description>&lt;p&gt;&lt;a href=&#34;http://itunes.apple.com/au/app/time-in-words/id509085586?mt=8&#34; target=&#34;_blank&#34;&gt;World
Time In Words for Mac&lt;/a&gt; version 3.2 is now available through the Mac App
Store. This version adds support for macOS Mojave dark mode.&lt;/p&gt;

&lt;p&gt;Version 3 changed the name from &amp;ldquo;Time In Words&amp;rdquo; to &amp;ldquo;World Time In
Words&amp;rdquo; as an acknowledgment that the major feature of this app is converting
time between different time zones. This update adds the ability to show digital
time if you need greater accuracy - just hold down Option as you open the menu.
I have also added the ability to show 24-hour time in the menu bar.&lt;/p&gt;

&lt;p&gt;World Time In Words runs as a menu bar utility app that displays your current
time and date in words. Optionally, it can be set to display a number of time
zones, in plain English so it is always clear which day is being referred
to. It shows the time in words in your menu bar all the time if you like, and
now offers a convenient way to work out what the time will be in other zones at
a specified local time.&lt;/p&gt;

&lt;p&gt;The first time you run the World Time In Words app, it will appear in your menu
bar and pop down a menu that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/WTiW-web-1.png&#34; alt=&#34;World Time In Words starting menu&#34; width=&#34;257&#34; height=&#34;257&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Selecting Preferences&amp;hellip; will take you to a window like
this&lt;img src=&#34;https://troz.net/images/WTiW-web-2.png&#34; alt=&#34;World Time In Words Preferences&#34; width=&#34;562&#34; height=&#34;398&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;text-align: center;&#34;&gt;Type in part of a city name in the search area
to find that city and its time zone. Drag or double-click a line in the table on
the right to move a time zone to the list on the left, which shows the time
zones that will appear in the menu. Drag a line out of the list on the left to
remove a zone, or double-click the unwanted line. Drag and drop to re-arrange
the zones in the selected list.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Once you have selected some time zones, your menu may look like
this:&lt;img src=&#34;https://troz.net/images/WTiW-web-3.png&#34; alt=&#34;World Time In Words menu with added time zones&#34; width=&#34;280&#34; height=&#34;667&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;text-align: center;&#34;&gt;Note that the menu will indicate which time
zones are currently in daylight savings time.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Version 3.0 adds the ability to see all the time digitally if you have a
temporary need for greater accuracy. Hold down the Option key as you click in
the menu title and the menu will appear like this:&lt;br /&gt;
&lt;img src=&#34;https://troz.net/images/WTiW-web-6.png&#34; alt=&#34;World Time In Words digital option&#34; width=&#34;262&#34; height=&#34;521&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To specify what will be displayed in the menu bar, you can toggle &amp;ldquo;Show time in
words as menu title&amp;rdquo;. If this is checked, you have two other methods for
adjusting what you will see. Select your preferred accuracy: &amp;ldquo;To closest 5
minutes&amp;rdquo; or &amp;ldquo;Precise&amp;rdquo;. Use the popup menu to select a time &amp;amp; date format to show
in the menu bar. You can also choose 24 hour time for the menu title if you
prefer.&lt;br /&gt;
&lt;img src=&#34;https://troz.net/images/WTiW-web-4.png&#34; alt=&#34;Menu bar time &amp; date formats&#34; width=&#34;561&#34; height=&#34;396&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To see what time it will be in your selected time zones at various hours during
your day, choose &amp;ldquo;What time will it be when&amp;hellip;&amp;rdquo; from the menu. Move the slider
to different hours in your local zone and read what the corresponding time will
be in your preferred time zones.&lt;br /&gt;
&lt;img src=&#34;https://troz.net/images/WTiW-web-5.png&#34; alt=&#34;What time will it be when...&#34; width=&#34;514&#34; height=&#34;435&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to make World Time In Words start automatically whenever you log in
to your Mac, check the &amp;ldquo;Auto start&amp;hellip;&amp;rdquo; checkbox. This uses Apple&amp;rsquo;s new methods
of adding sandboxed items to the login startup list which has two consequences:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;World Time In Words will not show up in your Login Items if you go to System
Preferences&lt;/li&gt;
&lt;li&gt;The auto-start will only work if the app is installed in your Applications
folder.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While I do not think the second item is a problem, since the App Store
automatically installs into your Applications folder, I disagree with the policy
enforced in the first item. It means that if you wish to un-install World Time
In Words, you should ensure that you have turned off &amp;ldquo;Auto start&amp;hellip;&amp;rdquo; first, as
there is no easy way to do this from outside the app.&lt;/p&gt;

&lt;p&gt;However, World Time In Words is sandboxed, so it&amp;rsquo;s data and settings are kept in
their own container and isolated from other apps for better security.&lt;/p&gt;

&lt;p&gt;If you are having any problems with World Time In Words, or you have any
suggestions for future improvements, please &lt;a href=&#34;mailto:sarah@troz.net?subject=World%20Time%20In%20Words%20-%20Mac&#34;&gt;email me&lt;/a&gt;.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Interface options for selecting time zones</title>
<link>https://troz.net/post/2012/interface-options-for-selecting-time-zones/</link>
<pubDate>Sat, 25 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2012/interface-options-for-selecting-time-zones/</guid>
<description>&lt;p&gt;As part of the design for [Time In Words for Mac][1], I had to work out the
interface for selecting time zones. With [Time In Word for iOS][2], I used
picker wheels which are excellent for selecting hierarchical data. On the Mac,
there is no such thing as the iOS picker wheel and so I had to consider what to
use instead.&lt;/p&gt;

&lt;p&gt;When you ask the system (Mac or iOS) for the available time zones, you get a
list of names like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Africa/Abidjan&lt;br /&gt;
Africa/Accra&lt;br /&gt;
&amp;hellip;&lt;br /&gt;
America/Cayman&lt;br /&gt;
America/Chicago&lt;br /&gt;
&amp;hellip;&lt;br /&gt;
Europe/Riga&lt;br /&gt;
Europe/Rome&lt;br /&gt;
etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This seems obviously designed for a hierarchical display with the major regions
as a first selection, filtering down to the cities in that region, making
selection a two-step process. With the picker wheel in iOS, that is what I did.
The first wheel selects the region which then populates the second wheel with
the relevant city names. It makes it quick and easy to select a zone.&lt;/p&gt;

&lt;p&gt;I always prefer to use standard user interface objects because people are
familiar with them, they automatically update with the system, and there is much
less chance of the App Store rejecting the app. So I scrolled through the
available Mac options and came to NSBrowser. This is basically what Finder uses
when in column mode.&lt;/p&gt;

&lt;p&gt;I created an NSBrowser object, worked out a way to populate it and tested. It
was incredibly slow! The list of regions appeared when the window opened, and
that was no problem. Then I clicked a region and the first set of city names
appeared instantly. But subsequent selections took about 3 seconds to appear.&lt;/p&gt;

&lt;p&gt;I added some timing tests and my data gathering was taking about 20
milliseconds. The log thought the browser had updated within about 100
milliseconds, so I guess the rest of the time was some redraw issue.&lt;/p&gt;

&lt;p&gt;Apple provides a large number of sample projects so I downloaded one that used
NSBrowser. It seemed fast and responsive, so I duplicated it&amp;rsquo;s different method
of assembling the data and tried again. No luck - it was as slow as before.&lt;/p&gt;

&lt;p&gt;I am sure that if I kept at it, I would eventually work out what was causing the
bottleneck and make NSBrowser work - after all, Finder is responsive enough,
even if not great. But in the end, I decided that the advantages to using this
form of interface didn&amp;rsquo;t justify the time spent, so I went with a simple table
and a search field.&lt;/p&gt;

&lt;p&gt;It is fast to populate, responsive to searches and didn&amp;rsquo;t take long to set up.
So I am happy, although still perplexed about NSBrowser. It is on my to-do list
of things I want to work out one day.&lt;/p&gt;

&lt;p&gt;[1]: /time-in-words-for-mac/ [2]: /time-in-words/&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Scroll bars in Mac OX 10.6 and 10.7</title>
<link>https://troz.net/post/2012/scroll-bars-in-mac-ox-10-6-and-10-7/</link>
<pubDate>Sat, 25 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2012/scroll-bars-in-mac-ox-10-6-and-10-7/</guid>
<description>&lt;p&gt;With the introduction of OS X 10.7 (Lion), Apple removed the obvious scroll bars
from windows and replaced them with a much more subtle scroll indicator, that
only appears when you are actually scrolling. This was designed to match the iOS
scrolling, as was the swap of scroll direction which makes much more sense if
you use a trackpad.&lt;/p&gt;

&lt;p&gt;With the upcoming &lt;a href=&#34;https://troz.net/time-in-words-for-mac/&#34;&gt;Time In Words for Mac&lt;/a&gt;, I have a Preferences window to
allow selection of time zones to display in the menu. The app will be compatible
with 10.6 or later. Under 10.6, the scrollbars are always visible and this is
what the Preferences display looks like:&lt;/p&gt;

&lt;p&gt;&lt;img title=&#34;Preferences 10.6&#34; src=&#34;https://troz.net/images/TiW-Prefs-10.6.png&#34; alt=&#34;Preferences 10.6&#34; width=&#34;550&#34; height=&#34;272&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This may change, but the basic layout is there. As you can see, I have a
3-column table listing all the available time zones, with the final column right
justified.&lt;/p&gt;

&lt;p&gt;Under 10.7, this doesn&amp;rsquo;t quite work:&lt;/p&gt;

&lt;p&gt;&lt;img title=&#34;Preferences 10.7&#34; src=&#34;https://troz.net/images/TiW-Prefs-10.7.png&#34; alt=&#34;Preferences 10.7&#34; width=&#34;550&#34; height=&#34;272&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I had to grab this screen shot quickly after swiping the trackpad, but you can
see the problem. When not scrolling, the scroll indicator is hidden and the
right column is fully visible, but when dragging the scroll indicator appears on
top of the right-justified entries in that column.&lt;/p&gt;

&lt;p&gt;So now I am not quite sure what to do. Here are the options I have considered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Left or centre-justify the text in the final column.&lt;/li&gt;
&lt;li&gt;Add some spacing at the end of each line so that the scroll indicator appears
in blank space.&lt;/li&gt;
&lt;li&gt;Put up with it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will have to experiment with various options and see what I can do.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Time In Words available in the App Store</title>
<link>https://troz.net/post/2012/time-in-words-available-in-the-app-store/</link>
<pubDate>Thu, 09 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2012/time-in-words-available-in-the-app-store/</guid>
<description>&lt;p&gt;Time In Words is now available at the App Store.&lt;/p&gt;

&lt;p&gt;Time In Words is a clock and calendar app that takes you out of the digital era
and back to when saying âquarter to sevenâ or âfive past twoâ was accurate
enough.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://itunes.apple.com/app/time-in-words/id498403851&#34;&gt;&lt;img title=&#34;App Store link&#34; src=&#34;https://linkmaker.itunes.apple.com/htmlResources/assets/en_us//images/web/linkmaker/badge_appstore-lrg.png&#34; alt=&#34;App Store link&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&#34;https://troz.net/time-in-words/&#34;&gt;Time In Words web page&lt;/a&gt; for more info and screen shots.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>World Time In Words for iOS</title>
<link>https://troz.net/time-in-words/</link>
<pubDate>Wed, 08 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/time-in-words/</guid>
<description>&lt;p&gt;World Time In Words is a clock and time converter app that takes you away from numbers and shows you the time as a complete sentence. No more worrying about whether it is morning or evening or whether it is yesterday, today or tomorrow in some other part of the world.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/WTiW-iOS.jpg&#34; alt=&#34;Basic display&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Do you plan on phoning an overseas friend in the middle of the night? How about scheduling an online meeting with people in different time zones? Or even checking what time the next big keynote will start in your time?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://itunes.apple.com/app/time-in-words/id498403851&#34;&gt;World Time In Words v 5.0&lt;/a&gt; is now available from the App Store.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Set up World Time In Words up with all the time zones you need to check. Scroll through the list to see the local time in each of your selected zones shown as a sentence. This is easier to comprehend and much less prone to error.&lt;/p&gt;

&lt;p&gt;If you need to plan a meeting or phone call, tap &amp;ldquo;What time will it beâ¦&amp;rdquo;. Use the slider to adjust the hour in your local zone and the corresponding hour in your selected world zones will appear.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/WTiW-iOS-2.jpg&#34; alt=&#34;What time will it be&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Tap the &amp;ldquo;+&amp;rdquo; button to add or delete time zones.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/WTiW-iOS-1.jpg&#34; alt=&#34;Edit zones&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Your top three selected time zones can also be added to your Notification Centre as a widget. Click Edit and drag to change the order of time zones in the table to decide which ones appear. Then swipe to your widgets page, scroll to the bottom and click the Edit button to add the Time in Words widget.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/WTiW-iOS-4.jpg&#34; alt=&#34;Today widget&#34; /&gt;&lt;/p&gt;
</description>
</item>
    
  </channel>
</rss>