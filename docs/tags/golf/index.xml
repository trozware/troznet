<rss version="2.0" 
  xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golf on TrozWare</title>
    <link>https://troz.net/tags/golf/</link>
    <description>Recent content in golf on TrozWare</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Â© 2012 - 2019 Sarah Reichelt</copyright>
    <lastBuildDate>Sat, 07 May 2016 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://troz.net/tags/golf/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
<title>19th Hole Golf Scorer 3.1</title>
<link>https://troz.net/post/2016/19th-hole-golf-scorer-3.1/</link>
<pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2016/19th-hole-golf-scorer-3.1/</guid>
<description>&lt;p&gt;One of the problems with using 19th Hole on the Apple Watch is making the app
show every time you raise your wrist. My solution to this was to go into
Settings (either on my iPhone through the Watch app, or directly on the watch)
and change it to &amp;ldquo;Resume Last Activity&amp;rdquo; on wrist raise. This worked fine but as
I usually prefer the watch face to show on wrist raise, I had to keep setting
and re-setting this which was a pain.&lt;/p&gt;

&lt;p&gt;But last week I noticed the fine print when changing this setting. In this
screen shot from the Watch app on my iPhone, you can see that &amp;ldquo;session-based
apps&amp;rdquo; and &amp;ldquo;some third-party workout apps&amp;rdquo; will over-ride the &amp;ldquo;Show Watch Face&amp;rdquo;
setting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/WakeScreen.jpg&#34; alt=&#34;Wrist raise settings&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I started to research this and found that if an app starts a &amp;ldquo;workout session&amp;rdquo;,
then it will become the active app until the session is ended or some other app
starts a session. So I got to work and added a workout session to the 19th
Hole&amp;rsquo;s Apple Watch app.&lt;/p&gt;

&lt;p&gt;When you start scoring a round on the Apple Watch, you will see this dialog
asking if you would like to start a workout:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/Watch-workout.png&#34; alt=&#34;Start workout dialog&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The workout will be stopped automatically when you have scored the last hole.
You can also use a force-press on the scoring screen to turn the workout off or
on at any time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/Watch_end_workout.png&#34; alt=&#34;Stop workout&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This should make the app much more usable as an Apple Watch app, so happy
golfing :-)&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Using 19th Hole on the Apple Watch</title>
<link>https://troz.net/post/2015/using-19th-hole-on-the-apple-watch/</link>
<pubDate>Sat, 12 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2015/using-19th-hole-on-the-apple-watch/</guid>
<description>&lt;p&gt;19th Hole for iPhone and Apple Watch version 3 is now available through the
&lt;a href=&#34;https://itunes.apple.com/us/app/the-19th-hole/id871686159?mt=8&amp;amp;uo=4&#34;&gt;iTunes App Store&lt;/a&gt;. This version is a complete re-write to accommodate the
changes in iOS 9 and watchOS2.&lt;/p&gt;

&lt;p&gt;The major changes are to do with the way the iPhone and the Watch communicate.
In watchOS1, all the brains of the app had to live in the iPhone, meaning that
every single interaction on the Watch had to be referred back to the iPhone for
processing and the result sent back to the Watch for display. This lead to
communications delays and breakdowns which caused third-party apps to work
sluggishly or not at all. In watchOS2, the brains of the watch part of the app
can now operate inside the watch, greatly reducing the number of communications
needed. As well as that, Apple has now provided us with multiple ways of getting
data to and from the Watch which again improves performance and reliability.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;With the 19th Hole, I made the decision to change the method of inputting
scores. The previous version used a slider with plus and minus buttons to adjust
scores. The problems with this were the small target area of the plus &amp;amp; minus
buttons as well as the fact that a slider with more than about 3 divisions was
not useful as a visual indicator.&lt;/p&gt;

&lt;p&gt;When watchOS2 allowed developers access to the digital crown, I decided to
switch to using that instead. Now you tap the score box of the player you wish
to adjust and use the digital crown to select a number. I think this will be
easier to use while wearing a glove and hope that it is still easy to read out
doors.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The other suggestion is not to do with watchOS2 but is a general tip for using
apps of this kind. By default, the Apple Watch will always show the watch face
when you raise your wrist. Normally this is the most useful thing, but when
scoring a round of golf, it would be easier if The 19th Hole app stayed at the
front. To make this happen, you need to set to watch to show the last used app
instead of the watch face. This can be set using the Apple Watch app on the
phone or on the watch itself.&lt;/p&gt;

&lt;p&gt;On the phone:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open the Apple Watch app.&lt;/li&gt;
&lt;li&gt;Select My Watch from the tabs at the bottom.&lt;/li&gt;
&lt;li&gt;Tap &amp;ldquo;General&amp;rdquo; and then scroll down to tap &amp;ldquo;Wake Screen&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Make sure &amp;ldquo;Resume Last Activity&amp;rdquo; is checked.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the watch:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Press the digital crown to see the app icons.&lt;/li&gt;
&lt;li&gt;Find and tap the Settings icon.&lt;/li&gt;
&lt;li&gt;Scroll down and tap &amp;ldquo;General&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Tap &amp;ldquo;Wake Screen&amp;rdquo; and scroll down to make sure that &amp;ldquo;Previous Activity&amp;rdquo; is
checked in the &amp;ldquo;Resume To&amp;rdquo; section.&lt;/li&gt;
&lt;/ul&gt;
</description>
</item>
    
    <item>
<title>Apple Watch App - Rejected, then Accepted</title>
<link>https://troz.net/post/2015/apple-watch-rejected-then-accepted/</link>
<pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2015/apple-watch-rejected-then-accepted/</guid>
<description>&lt;p&gt;As described in a &lt;a href=&#34;https://troz.net/post/2015-04-02-my-first-apple-watch-app/&#34;&gt;previous post&lt;/a&gt;, about 9 days ago I submitted my first
Apple Watch app for review. The app was an extension of my golf scoring app:
&lt;a href=&#34;https://troz.net/19th-hole/&#34;&gt;The 19th Hole&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I expected that App Store review times would go up dramatically once Apple had
allowed developers to submit watch apps, but this proved to be incorrect. Three
days after submission, the app was marked as &amp;ldquo;In Review&amp;rdquo;. This seemed to happen
last thing on a Saturday, so there was no further action for two days, at which
point the app was rejected, with the following details (sic):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We noticed an issue in your app that contributes to a lower quality user
experience than Apple users expect. Specifically,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;while using the Apple Watch app with the phone app is in the background mode
(display off), the new data entry on the Watch App does not refresh
accordingly until the phone app is turn back on.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;So it appeared that the communication between the watch and the phone, which
worked perfectly on the simulators, did not work at all on the actual devices.
This is the problem with developing for a device that you do not have.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;After some research, it appears that the problem is with the phone not operating
correctly in background mode. Apple provides for communications from the watch
to the phone. The phone can respond, but only the watch can initiate a
connection. I guess this makes sense since every watch will be paired with a
phone but the reverse will not always be true.&lt;/p&gt;

&lt;p&gt;To talk to the phone, the watch uses this function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func openParentApplication(_ userInfo: [NSObject : AnyObject],
  reply reply: (([NSObject : AnyObject]!, NSError!) -&amp;gt; Void)?) -&amp;gt; Bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The phone listens for messages in this event handler:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func application(_ application: UIApplication,
  handleWatchKitExtensionRequest userInfo: [NSObject : AnyObject]?,
  reply reply: (([NSObject : AnyObject]!) -&amp;gt; Void)!)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The name of the WatchKit function is slightly misleading as it does open the
parent application, but only in the background. Then the parent app is supposed
to do whatever tasks are called for in the handleWatchKitExtensionRequest
function, and return any required data using the supplied reply() function.&lt;/p&gt;

&lt;p&gt;So far, so good, and it all worked perfectly in the simulator. But it appears
that although this call wakes the iPhone app, it does not stay awake long enough
to do anything. Many thanks to Brian at &lt;a href=&#34;http://www.fiveminutewatchkit.com/blog/2015/3/11/one-weird-trick-to-fix-openparentapplicationreply&#34;&gt;Five Minute WatchKit&lt;/a&gt; who pointed
out the way to make this work. Firstly, you create a dummy background task
guaranteed to keep the iPhone app awake for 2 seconds. Then you perform your own
work, using another background task. When that is finished, the phone can send
the response and end the real background task. The dummy task will time out by
itself after 2 seconds.&lt;/p&gt;

&lt;p&gt;For my needs, I could probably reduce the 2 seconds considerably, but since this
is a problem I am unable to test, I decided just to go with Brian&amp;rsquo;s suggestion
as it is.&lt;/p&gt;

&lt;p&gt;I re-submitted the app the same day it was rejected, and two days later it was
back in review. The review process took longer than usual, but about 30 hours
later, the app was marked &amp;ldquo;Pending an Apple Release&amp;rdquo;. I assumed this meant that
Apple would release all WatchKit apps on 24th April when the watches shipped,
but the following day the app was reported as &amp;ldquo;Pending Developer Release&amp;rdquo; (I had
set it to release manually). Now I have told iTunesConnect to release the app
and it is &amp;ldquo;Processing for App Store&amp;rdquo;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;On a related note, the start of pre-ordering for the Apple Watch was scheduled
for a very civilised 5:01 pm here in eastern Australia. I had three watches all
lined up in my Favorites in the Apple Store app, ready for ordering. When the
store became live (at about 5:03 pm), I could not work out how to order all
three in a single operation, so had to place these orders one at a time. I got
the first two ordered for the soonest possible delivery, but by the time I got
to the third (about 3 minutes later), I had missed out and it will ship in 4 to
6 weeks!&lt;/p&gt;
</description>
</item>
    
    <item>
<title>My First Apple Watch App</title>
<link>https://troz.net/post/2015/my-first-apple-watch-app/</link>
<pubDate>Thu, 02 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://troz.net/post/2015/my-first-apple-watch-app/</guid>
<description>&lt;p&gt;I have just submitted my first Apple Watch app to the iTunes App Store. This is
a scary thing to do, since I have never seen, touched or used an Apple Watch and
all I had to go on was the Simulator that Apple supplies with Xcode.&lt;/p&gt;

&lt;p&gt;At the moment, Apple has only made a limited set of Apple Watch features
available to developers, and all Apple Watch apps come tethered to an iOS app -
presumably this will mainly be iPhone apps, but I wonder will we be able to
connect Apple Watches to iPads? Anyway, it made sense to extend one of my
existing apps to use the Apple Watch instead of starting from scratch.&lt;/p&gt;

&lt;p&gt;Of my &lt;a href=&#34;https://troz.net/apps-ios/&#34;&gt;iOS apps&lt;/a&gt;, I decided that &lt;a href=&#34;https://troz.net/19th-hole/&#34;&gt;The 19th Hole&lt;/a&gt;, my golf scoring app,
would be well suited to the Apple Watch. The problem with using the iPhone
version to score is that you have to keep pulling your iPhone in and out of your
golf bag, sometimes in the rain, sometimes in bright sunlight. Being able to
enter the scores on your wrist sounds like a big improvement. We know that the
Apple Watch is at least somewhat water-resistant, but we are yet to see how well
it performs in bright sunlight, however I would expect that Apple has put
considerable effort into this.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Once I decided to write an Apple Watch app, the first step was to learn how. I
read all Apple&amp;rsquo;s published documents to get a feel for what was possible and
what user-interface objects would be available. I find online courses very
helpful and by far the best Apple Watch course that I found was &lt;a href=&#34;http://www.raywenderlich.com/video-tutorials#watchkit&#34;&gt;Ray
Wenderlich&amp;rsquo;s WatchKit video tutorial series&lt;/a&gt;. The instructors were very clear
and explained how the layout and sizing of objects works on the Apple Watch, as
well as how to set up and move between views and how to communicate from the
Watch back to the iPhone. The layout section of the course was particularly
valuable as no other course I found even mentioned this, although it is crucial
to the interface design and allowing for the two sizes of watch.&lt;/p&gt;

&lt;p&gt;I had released an update to &lt;a href=&#34;https://troz.net/19th-hole/&#34;&gt;The 19th Hole&lt;/a&gt; recently in preparation for this.
I wanted to have squashed the bugs and updated the interface, so the only
changes needed would be the WatchKit ones.&lt;/p&gt;

&lt;p&gt;The first step in adding a WatchKit app to your existing app is to create a new
target in the Xcode project. Choosing WatchKit actually adds two new targets:
the WatchKit Extension which lives on the iPhone and supplies the code for the
Watch, and the WatchKit App which lives on the Watch and provides the interface.&lt;/p&gt;

&lt;p&gt;I decided to use a paged interface with one page per hole. Each of these pages
has a table, with one row per player. A slider with plus &amp;amp; minus buttons lets
you enter the score for each player and the total score for each player is also
displayed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/19thHole-Watch2.png&#34; alt=&#34;Data entry&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Apart from this data entry view, I have a splash screen which shows you the
current round as set up on the iPhone and a final summary screen showing
everyone&amp;rsquo;s totals.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://troz.net/images/19thHole-Watch1.png&#34; alt=&#34;Splash screen&#34; /&gt;
&lt;img src=&#34;https://troz.net/images/19thHole-Watch3.png&#34; alt=&#34;Summary&#34; /&gt;&lt;/p&gt;

&lt;p&gt;These images are taken from the Apple Watch simulator running in 42mm mode.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The biggest programming problem was getting the communications working beween
the two devices. The 19th Hole uses Core Data for all data storage. My first
attempt shared this data between the two apps, allowing both to read and update
the database. This almost worked, but if both apps were open, then changes in
one device did not get across to the other. It seemed that the data was cached
and I was unable to find a way to force either app to update every time.&lt;/p&gt;

&lt;p&gt;My next attempt kept all the data in the iPhone app and had the WatchKit
extension ask for whatever data it needed and send changes to the iPhone app.
This worked much better and I was able to get live updates between the two
devices.&lt;/p&gt;

&lt;p&gt;The other issue is the fact that I have never seen, touched or used an Apple
Watch. This means that I had to guess a lot of things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;how well will it perform?&lt;/li&gt;
&lt;li&gt;will the icon look OK?&lt;/li&gt;
&lt;li&gt;are the controls large enough to use?&lt;/li&gt;
&lt;li&gt;will the text be large enough to read?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My main philosophy was to keep the Watch app as simple as possible and use the
standard interface elements, font sizes etc. Hopefully that will work.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The final step was submitting the app to iTunes Connect for review. It was not
clear to me how to do this, so I logged into iTunes Connect, created a new
version and entered the meta-data. I couldn&amp;rsquo;t see anywhere to say anything about
the Watch. I archived the main iOS app as usual and validated it with the Store.
I had a few things to fix up, but I got the build submitted.&lt;/p&gt;

&lt;p&gt;Back to iTunes Connect and once the uploaded build had been processed, I was
able to select it and click &amp;ldquo;Submit for Review&amp;rdquo;. At this point, the page
reported an error and showed me a new section where I could upload the Apple
Watch icon and screen shots.&lt;/p&gt;

&lt;p&gt;I had been unsure how the icon would look when made round, but it looks OK on
the iTunes Connect page. How it will look on a tiny watch screen remains to be
seen. Anyway, once I had my icon and screen shots uploaded, I was able to
proceed to the next step. But then I got a message saying that the app could not
be processed - no explanation. Thankfully, I had seen some developers on Twitter
reporting this, and somebody said that the solution was to remove the alpha
channel from your screen shots. Sorry for not giving credit here - I forget who
said this, but it worked, so thank you whoever you are.&lt;/p&gt;

&lt;p&gt;So now my app is waiting for review and who knows how long that will take.
According to &lt;a href=&#34;http://appreviewtimes.com&#34;&gt;App Review Times&lt;/a&gt;, the current estimate is 8 days, but the
trend is heading upwards. I would expect that to blow out in the next few weeks
as developers try to get their apps ready for the Apple Watch release date of
April 24th.&lt;/p&gt;
</description>
</item>
    
  </channel>
</rss>