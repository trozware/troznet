{
    "version" : "https://jsonfeed.org/version/1",
    "title" : "TrozWare",
    "description": "Recent content on TrozWare",
    "home_page_url" : "https://troz.net/",
    "icon": "/apple-touch-icon.png",
    "feed_url" : "https://troz.net/feed.json",
    "author" : {
        "name" : "Sarah Reichelt"
    },
    "items" : [
    {
        "title" : "SwiftUI for Mac 2024",
        "date_published" : "2024-08-22T17:21:54+10:00",
        "date_modified" : "2024-08-22T17:21:54+10:00",
        "id" : "https://troz.net/post/2024/swiftui-mac-2024/",
        "url" : "https://troz.net/post/2024/swiftui-mac-2024/",
        "content_html" : "\u003cp\u003eOver the years, I have written articles and sample apps to demonstrate the new features of each year\u0026rsquo;s SwiftUI updates with particular emphasis on macOS app development. Last year, the major update to SwiftUI was the new data flow system using the Observation framework. I covered that in my article \u003ca href=\"/post/2023/swiftui-data-flow-2023/\"\u003eSwiftUI Data Flow 2023\u003c/a\u003e but I didn\u0026rsquo;t feel there were sufficient UI changes to warrant an update to my usual sample app.\u003c/p\u003e\n\u003cp\u003eThis year, the \u003ca href=\"https://http.cat/\"\u003eHTTP Cats\u003c/a\u003e app is back! And I\u0026rsquo;ll cover new features from both WWDC 2023 and WWDC 2024.\u003c/p\u003e\n\u003cp\u003eIt\u0026rsquo;s currently August 2024 and I am running macOS Sequoia 15.1 Beta (24B5024e) with Xcode 16.1 beta (16B5001e).\u003c/p\u003e\n\u003cp\u003eDownload the project from \u003ca href=\"https://github.com/trozware/swiftui-mac-2024\"\u003eGitHub\u003c/a\u003e and, if you\u0026rsquo;re running the correct versions of macOS and Xcode, you can run the app and follow along. If not, you can still look at the code, but it won\u0026rsquo;t build.\u003c/p\u003e\n\u003cp\u003e\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n\u003c/style\u003e\n\n\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n  }\n\u003c/style\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/http_teapot.png\" alt=\"HTTP Cats\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWarning\u003c/strong\u003e: there\u0026rsquo;s a bug right now that crashes the app in macOS 15.1. If you scroll down the list in the sidebar and then select a status that is more than 8 or 9 rows below the previous selection, the app crashes with this error: \u003ccode\u003eRow index -1 out of row range (numberOfRows: 60)\u003c/code\u003e. I\u0026rsquo;ve tested this with Xcode 16.0 beta 6 and Xcode 16.1 and they both act the same. But on a computer running macOS 15.0 beta 7 and Xcode 16.0 beta 6, it works perfectly. So this is a bug in macOS 15.1.\u003c/p\u003e\n\u003cp\u003eHere are the areas that I\u0026rsquo;m going to discuss:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#xcode\"\u003eXcode\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#previews\"\u003ePreviews\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#windows\"\u003eWindows\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#tabs\"\u003eTabs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#charts\"\u003eCharts\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#colors-and-gradients\"\u003eColors and gradients\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#sf-symbols\"\u003eSF Symbols\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"xcode\"\u003e\n  Xcode\n  \u003ca href=\"#xcode\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eWhen you create a new project in Xcode 16.1, the second item in the project navigator is now a folder instead of a group. This sounds trivial, since it really is a folder in Finder but I find it really annoying because it doesn\u0026rsquo;t allow me to arrange my other files and folders as I want them. To fix this, right-click on the folder and select \u003cstrong\u003eConvert to Group\u003c/strong\u003e. The icon switches from blue to gray and you can once again drag files and folders to re-order them.\u003c/p\u003e\n\u003cp\u003eThe advantage to the folder option is that your project is read directly from the file system, so you can use Finder to move files around and Xcode will reflect the changes. To import a file into the project, you can drag it into the project\u0026rsquo;s Finder window and Xcode will see it. Similarly, to delete a file, you can use Finder directly. With the group option, you have to import files into the Xcode Project navigator, and when you do, source control marks the \u003cstrong\u003e.xcodeproj\u003c/strong\u003e file as modified, making source control messier. Using the folder option, only the new file itself gets marked as a change. So use which option works for you, but I much prefer the clarity of being able to organize my files in the Project navigator.\u003c/p\u003e\n\u003cp\u003eThe next thing to look at in Xcode is \u003cstrong\u003ePredictive Code Completion\u003c/strong\u003e. While the Xcode betas run on macOS Sonoma, predictive code completion requires Sequoia and I think it also requires a minimum of 16GB of memory. We don\u0026rsquo;t yet have the promised \u003cstrong\u003eSwift Assist\u003c/strong\u003e which will allow for a more detailed way of asking Xcode to write code, but the code completion is supposed to be much better.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;ve used \u003ca href=\"https://github.com/github-copilot-resources\"\u003eGitHub Copilot\u003c/a\u003e for writing JavaScript for a couple of years now and overall, it works well. I use it as a form of super autocomplete and targeted search rather than asking it to write large chunks of code for me, and that\u0026rsquo;s what I\u0026rsquo;m hoping to get for Swift now. Xcode has a way to go to catch up yet. Surprisingly, it suffers from one of the same problems as Copilot - it appears to have been trained on old code!\u003c/p\u003e\n\u003cp\u003eI know some people are very negative about using any form of AI to write parts of your code, but I see it as just another tool to help us be more efficient. For example, I bet you\u0026rsquo;ve written code to download and process JSON many, many times. Why not let Xcode write that for you? You still have to do the thinking. What\u0026rsquo;s the URL? Which properties do I need? How am I going to use the data? But you don\u0026rsquo;t have to write the boilerplate. It\u0026rsquo;s no different to using a library or a pre-built function.\u003c/p\u003e\n\u003cp\u003eI put predictive code completion to the test by creating a new Swift file called \u003cstrong\u003eNetworker.swift\u003c/strong\u003e. I set up a \u003ccode\u003eNetworker\u003c/code\u003e class and gave it a web address. Then I started to write a function to fetch the data:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/predictive_code_1.png\" alt=\"Predictive Code Completion 1\"\u003e\u003c/p\u003e\n\u003cp\u003eThe faded text is the suggestion. I had only typed \u003ccode\u003efunc fet\u003c/code\u003e. It used the address to deduce that I was downloading quotes - not unreasonable. I pressed \u003cstrong\u003eTab\u003c/strong\u003e to accept and got the next chunk:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/predictive_code_2.png\" alt=\"Predictive Code Completion 2\"\u003e\u003c/p\u003e\n\u003cp\u003eAfter pressing \u003cstrong\u003eTab\u003c/strong\u003e a few more times, I ended up with this:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/predictive_code_3.png\" alt=\"Predictive Code Completion 3\"\u003e\u003c/p\u003e\n\u003cp\u003eThis doesn\u0026rsquo;t build and it uses old-style completion handlers instead of async/await. The biggest problem I see is that it\u0026rsquo;s fallen into the usual \u003ccode\u003eURLSession\u003c/code\u003e trap and not called \u003ccode\u003eresume\u003c/code\u003e on the task. So this was never going to download anything.\u003c/p\u003e\n\u003cp\u003eI started to define a \u003ccode\u003eNetworkError\u003c/code\u003e enum and it filled in the cases it had used, so that was really good. When I started to define a \u003ccode\u003eQuote\u003c/code\u003e struct, it also added some reasonable properties, as well as marking it as conforming to \u003ccode\u003eCodable\u003c/code\u003e - bonus points there.\u003c/p\u003e\n\u003cp\u003eWhen I tried to build, I got sensible warnings pointing out that I had not used either \u003ccode\u003etask\u003c/code\u003e or \u003ccode\u003edata\u003c/code\u003e. This would have reminded me to call \u003ccode\u003eresume\u003c/code\u003e if I hadn\u0026rsquo;t already noticed. I also got a Swift 6 concurrency warning about the completion handler.\u003c/p\u003e\n\u003cp\u003eSo overall, not great yet. Old technology and a flawed implementation. One of the points Apple people made at WWDC 2024 was that these code tools would be trained on the latest Apple APIs. This is not the case here, but I\u0026rsquo;m still running a beta, so I\u0026rsquo;ll give them the benefit of the doubt for now. I\u0026rsquo;ll definitely be keeping an eye on this feature and hope to be able to make good use of it in the future.\u003c/p\u003e\n\u003cp\u003eBefore I move on from Xcode, there\u0026rsquo;s one more feature I want to mention and that\u0026rsquo;s the new options for creating a new file. If you press \u003cstrong\u003eCommand-N\u003c/strong\u003e, you get the file template chooser, just as before. But now there are other possibilities. You can use the \u003cstrong\u003eFile\u003c/strong\u003e menu or right-click in the Project navigator to add a new empty file, but the one I like best is the ability to make new files from the clipboard. I don\u0026rsquo;t know about you, but when I\u0026rsquo;m working on a SwiftUI project, I\u0026rsquo;ll often have more than one view in a file, especially if I\u0026rsquo;ve created views by extracting subviews. Later on, I\u0026rsquo;ll want the view to have it\u0026rsquo;s own file.\u003c/p\u003e\n\u003cp\u003eI had a view called \u003ccode\u003eMeshBackground\u003c/code\u003e which didn\u0026rsquo;t have its own file, so I selected the entire struct and pressed \u003cstrong\u003eCommand-X\u003c/strong\u003e to cut it out. Then both the contextual menu and the \u003cstrong\u003eFile -\u0026gt; New\u003c/strong\u003e menu offered \u003cstrong\u003eNew \u0026ldquo;Meshbackground.swift\u0026rdquo; from Clipboard\u003c/strong\u003e. When I selected this, it added the file, named it and pasted in my struct. The only thing I had to do was to add the \u003ccode\u003eimport SwiftUI\u003c/code\u003e statement at the top of the new file. I think it could have been smart enough to work this one out, but maybe later.\u003c/p\u003e\n\u003cp\u003eThis is a great time-saver and will really encourage me to keep my code well-structured.\u003c/p\u003e\n\u003cp\u003eIn minor Xcode updates over the last two years, my favorite feature is using \u003cstrong\u003eControl-M\u003c/strong\u003e to split long lines of code over multiple lines.\u003c/p\u003e\n\u003ch3 id=\"previews\"\u003e\n  Previews\n  \u003ca href=\"#previews\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eLast year, we got the \u003ccode\u003e#Preview\u003c/code\u003e macro which made SwiftUI previews a lot neater. We went from:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSidebarRowView_Previews\u003c/span\u003e: PreviewProvider {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e previews: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    SidebarRowView(code: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;418\u0026#34;\u003c/span\u003e, title: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;I\u0026#39;m a teapot\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTo this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e#Preview {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  SidebarRowView(code: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;418\u0026#34;\u003c/span\u003e, title: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;I\u0026#39;m a teapot\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eXcode 15 has a converter you could use to switch to the new format, and Xcode 16.0 still has it but Xcode 16.1 does not. I\u0026rsquo;m not sure why they removed it, but it\u0026rsquo;s not a big deal to do it manually.\u003c/p\u003e\n\u003cp\u003eThe new thing this year in previews is the \u003ccode\u003e@Previewable\u003c/code\u003e macro which lets us provide data to a preview. This is especially useful for binding properties. In \u003cstrong\u003eSidebarView.swift\u003c/strong\u003e in the sample app, I show the old style commented out:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSidebarView(httpSections: HttpSection.localData, selectedStatus: .constant(\u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003eselectedStatus\u003c/code\u003e is a Binding, so I can\u0026rsquo;t just pass in nil. I had to use \u003ccode\u003e.constant\u003c/code\u003e to create a Binding set to nil. With \u003ccode\u003e@Previewable\u003c/code\u003e, I can do this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@Previewable @State \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e selectedStatus: HttpStatus? = \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSidebarView(httpSections: HttpSection.localData, selectedStatus: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003eselectedStatus)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI expected to be able to supply an actual \u003ccode\u003eHttpStatus\u003c/code\u003e here and have it start as the selected item in the list, but although it compiled fine, it didn\u0026rsquo;t show up as selected in the preview initially. But I am now able to change the selection in the preview.\u003c/p\u003e\n\u003ch3 id=\"windows\"\u003e\n  Windows\n  \u003ca href=\"#windows\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThe first window feature I want to address is not new, but I\u0026rsquo;ve been asked about it a few times. How do you make a single window app and get SwiftUI to remove the \u003cstrong\u003eFile -\u0026gt; New Window\u003c/strong\u003e menu item?\u003c/p\u003e\n\u003cp\u003eWhen you create a new SwiftUI app, the \u003cstrong\u003e\u0026hellip;App.swift\u003c/strong\u003e file contains something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@main\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNewApp\u003c/span\u003e: App {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some Scene {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    WindowGroup {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      ContentView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis defines the main scene of the app as a window group which allows for multiple identical but independent windows. You get a \u003cstrong\u003eFile\u003c/strong\u003e menu with a \u003cstrong\u003eNew Window\u003c/strong\u003e item and a \u003cstrong\u003eClose\u003c/strong\u003e item. If you want a single window app, you need to change the \u003ccode\u003eWindowGroup\u003c/code\u003e to a \u003ccode\u003eWindow\u003c/code\u003e, supplying the window title and an \u003ccode\u003eid\u003c/code\u003e string:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@main\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNewApp\u003c/span\u003e: App {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some Scene {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Window(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;New App\u0026#34;\u003c/span\u003e, id: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;mainWindow\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      ContentView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003eid\u003c/code\u003e can be anything so long as you don\u0026rsquo;t use it for any other window in your app. In the default state, this removes the \u003cstrong\u003eFile\u003c/strong\u003e menu completely. If also changes the app behavior so that closing the window quits the app completely. If you add any new commands to the \u003cstrong\u003eFile\u003c/strong\u003e menu, you\u0026rsquo;ll get the \u003cstrong\u003eClose\u003c/strong\u003e item back, but using it will still quit the app. You can still open secondary windows in this style of app, but you can\u0026rsquo;t duplicate the initial window.\u003c/p\u003e\n\u003cp\u003eI covered how to open new windows in my previous article \u003ca href=\"/post/2022/swiftui-mac-2022/#opening-new-windows\"\u003eSwiftUI for Mac 2022\u003c/a\u003e. The code is still present in this year\u0026rsquo;s sample app for reference, but commented out.\u003c/p\u003e\n\u003cp\u003eThere is a new window scene called \u003ccode\u003eUtilityWindow\u003c/code\u003e. This is primarily intended for floating palettes and toolbars. I\u0026rsquo;ve used it for the \u003cstrong\u003eUI Samples\u003c/strong\u003e window just because that was a window I wanted to show, but it\u0026rsquo;s not really the right design choice for this sort of informational window.\u003c/p\u003e\n\u003cp\u003eIn \u003cstrong\u003eSwiftUI_Mac_2024App.swift\u003c/strong\u003e, here\u0026rsquo;s how I set up the utility window:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eUtilityWindow(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;UI Samples\u0026#34;\u003c/span\u003e, id: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ui_samples\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  SamplesView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.keyboardShortcut(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;u\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSimilarly to \u003ccode\u003eWindow\u003c/code\u003e, it needs a window title and an \u003ccode\u003eid\u003c/code\u003e. The view to show in the window is in the closure and I\u0026rsquo;ve added an optional keyboard shortcut.\u003c/p\u003e\n\u003cp\u003eIf you add a \u003ccode\u003eWindow\u003c/code\u003e scene that\u0026rsquo;s not the initial window, it appears in the \u003cstrong\u003eWindow\u003c/strong\u003e menu and you can open it from there with an optional keyboard shortcut. A \u003ccode\u003eUtilityWindow\u003c/code\u003e gets a \u003cstrong\u003eShow/Hide\u003c/strong\u003e menu item in the \u003cstrong\u003eView\u003c/strong\u003e menu instead, and the keyboard shortcut toggles it.\u003c/p\u003e\n\u003cp\u003eA utility window has a few other differences:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIt\u0026rsquo;s a floating window that appears above your other windows.\u003c/li\u003e\n\u003cli\u003eIt doesn\u0026rsquo;t get focus by default when opened, you have to click in it to make it active.\u003c/li\u003e\n\u003cli\u003eWhen focused, you can close it with the \u003cstrong\u003eEscape\u003c/strong\u003e key.\u003c/li\u003e\n\u003cli\u003eIt\u0026rsquo;s hidden when your app is no longer the active app.\u003c/li\u003e\n\u003cli\u003eIt cannot be minimized, so the orange button in the title bar is disabled.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese windows can be opened programmatically in exactly the same way as other windows, using \u003ccode\u003eopenWindow\u003c/code\u003e. Check out the code in \u003cstrong\u003eToolbarView.swift\u003c/strong\u003e to see how I do this.\u003c/p\u003e\n\u003cp\u003eThe other window features I want to explore relate to style, initial position, and dragging. In one of the WWDC 2024 videos, the presenters created a custom \u003cstrong\u003eAbout\u003c/strong\u003e window for their app, so I decided to try to do the same.\u003c/p\u003e\n\u003cp\u003eFirst I made a SwiftUI view called \u003ccode\u003eAboutView\u003c/code\u003e. I added some titles and buttons, including one to close the window. I also added a mesh gradient background to make it look a bit more interesting. See the \u003ca href=\"#colors-and-gradients\"\u003eColors and gradients\u003c/a\u003e section below for more info on that.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/about_view.png\" alt=\"About View\"\u003e\u003c/p\u003e\n\u003cp\u003eWith the view created, now I had to work out how to show it instead of the default \u003cstrong\u003eAbout\u003c/strong\u003e window. I started by adding a new window scene to \u003cstrong\u003eSwiftUI_Mac_2024App.swift\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eWindow(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;About\u0026#34;\u003c/span\u003e, id: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;about\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  AboutView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen in \u003cstrong\u003eMenuView.swift\u003c/strong\u003e, I added a new \u003ccode\u003eCommandGroup\u003c/code\u003e, replacing the existing \u003ccode\u003eappInfo\u003c/code\u003e command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCommandGroup(replacing: .appInfo) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Button(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;About SwiftUI Mac 2024\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    openWindow(id: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;about\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhen testing this, there were two problems:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThe window was too large for my content.\u003c/li\u003e\n\u003cli\u003eThere was now an \u003cstrong\u003eAbout\u003c/strong\u003e menu item in the \u003cstrong\u003eWindow\u003c/strong\u003e menu as well as \u003cstrong\u003eAbout SwiftUI Mac 2024\u003c/strong\u003e in the app menu.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTo fix these issues, I added modifiers to the window scene:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.windowResizability(.contentSize)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.commandsRemoved()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow my content filled the window although the sizing could still be too small or too big. But the \u003cstrong\u003eWindow -\u0026gt; About\u003c/strong\u003e menu item was gone, so I was making progress.\u003c/p\u003e\n\u003cp\u003eNext up is the new \u003ccode\u003edefaultWindowPlacement\u003c/code\u003e modifier, which lets you set the initial position and size of a window. I added this to the \u003cstrong\u003eAbout\u003c/strong\u003e window scene:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.defaultWindowPlacement { content, context \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e displayBounds = context.defaultDisplay.bounds\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e contentSize = content.sizeThatFits(.unspecified)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e position = CGPoint(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    x: displayBounds.midX \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e (contentSize.width \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    y: displayBounds.midY \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e (contentSize.height \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e WindowPlacement(position, size: contentSize)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003econtext\u003c/code\u003e is a \u003ccode\u003eWindowPlacementContext\u003c/code\u003e that provides the display where the window will appear. I\u0026rsquo;m using its \u003ccode\u003ebounds\u003c/code\u003e to determine the screen size.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003econtent\u003c/code\u003e is a \u003ccode\u003eWindowLayoutRoot\u003c/code\u003e that gives the \u003ccode\u003esizeThatFits\u003c/code\u003e for the proposed content allowing for various proposed view sizes. I\u0026rsquo;m using the \u003ccode\u003eunspecified\u003c/code\u003e size to get the ideal size for the content.\u003c/p\u003e\n\u003cp\u003eWith these two pieces of data, I can calculate the position for the top left of the window so that the center of the window will be at the center of the screen, and combine this with the size into a \u003ccode\u003eWindowPlacement\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNow when I run the app and open the \u003cstrong\u003eAbout\u003c/strong\u003e box, it\u0026rsquo;s in the center of the screen and the right size for the content. But if move the window, then the next time I run the app, it\u0026rsquo;s where I put it instead of in the center. This is the correct behavior for most windows, but not for the \u003cstrong\u003eAbout\u003c/strong\u003e window. I want it to be centered every time.\u003c/p\u003e\n\u003cp\u003eTime for another modifier:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.restorationBehavior(.disabled)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis stops the window from remembering where it was put when the app re-launches. It remembers inside a single launch, but not on the next launch. If your window still remembers where it was because you moved it before adding this modifier, you may need to delete the app\u0026rsquo;s container folder in the \u003cstrong\u003eLibrary/Containers\u003c/strong\u003e folder to reset it.\u003c/p\u003e\n\u003cp\u003eOne thing I noticed was that this always put the \u003cstrong\u003eAbout\u003c/strong\u003e box on my primary monitor, even if the app was running on a secondary monitor. If I re-enable the restoration behavior, the window appears on the correct monitor, but then it doesn\u0026rsquo;t center.\u003c/p\u003e\n\u003cp\u003eNow I have two more requirements: I want the \u003cstrong\u003eAbout\u003c/strong\u003e window to have no title bar and I want to be able to drag it around the screen by clicking anywhere in the window. The first part is accomplished with yet another modifier:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.windowStyle(.plain)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow the window has no title bar. Good thing I added a \u003cstrong\u003eClose\u003c/strong\u003e button! One annoying bug is that I added a keyboard shortcut to the \u003cstrong\u003eClose\u003c/strong\u003e button so I could use \u003cstrong\u003eEscape\u003c/strong\u003e to close the window. With a plain window style, it no longer works. The console shows this: \u003ccode\u003eWarning: -[NSWindow makeKeyWindow] called on SwiftUI.AppKitWindow 0x139365800 which returned NO from -[NSWindow canBecomeKeyWindow]\u003c/code\u003e, so I guess the plain styled window is unable to become the key window and so cannot detect keyboard events.\u003c/p\u003e\n\u003cp\u003eFor the dragging, open \u003cstrong\u003eAboutView.swift\u003c/strong\u003e itself. The simplest way to achieve the required result is to add this modifier to the main \u003ccode\u003eVStack\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.gesture(WindowDragGesture())\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow I can drag the window around by pressing and dragging from anywhere in the window. But I want more! I want to be able to track when the window is being dragged so I can change it visually. \u003ccode\u003eWindowDragGesture\u003c/code\u003e is new but it conforms to the \u003ccode\u003eGesture\u003c/code\u003e protocol so I can use it to detect the state of the drag. I added an \u003ccode\u003e@GestureState\u003c/code\u003e property to \u003ccode\u003eAboutView\u003c/code\u003e to track it:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@GestureState \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e isDraggingWindow = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen I created a new \u003ccode\u003eWindowDragGesture\u003c/code\u003e with an \u003ccode\u003eupdating\u003c/code\u003e closure to set the gesture state to \u003ccode\u003etrue\u003c/code\u003e during a drag operation:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e dragWindow: some Gesture {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  WindowDragGesture()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .updating(\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003eisDraggingWindow) { \u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e, state, \u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      state = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFinally, I changed the \u003ccode\u003egesture\u003c/code\u003e modifier to use this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.gesture(dragWindow)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow that I have a property to track the dragging, I added a modifier to the \u003ccode\u003eVStack\u003c/code\u003e to change the \u003ccode\u003eopacity\u003c/code\u003e while the window is being dragged:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.opacity(isDraggingWindow ? \u003cspan style=\"color:#ae81ff\"\u003e0.8\u003c/span\u003e : \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd after all this, I finally had what I wanted:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/drag_about.png\" alt=\"Drag About\"\u003e\u003c/p\u003e\n\u003cp\u003eOne final tweak would be to show an appropriate cursor when the window is being dragged. I tried adding to the \u003ccode\u003edragWindow\u003c/code\u003e gesture, but in the end I switched to using an \u003ccode\u003eonChange\u003c/code\u003e modifier:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.onChange(of: isDraggingWindow) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e isDraggingWindow {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    NSCursor.closedHand.push()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    NSCursor.pop()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"tabs\"\u003e\n  Tabs\n  \u003ca href=\"#tabs\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThe syntax for defining tabs got what appears to be quite a minor upgrade, but it feels so much better. Here\u0026rsquo;s the old syntax:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eTabView {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  ChartSamplesView().tabItem {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Chart\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  FormSamplesView().tabItem {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Form\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis always felt backwards to me. The label of the tab is in the closure and the view that\u0026rsquo;s inside the tab comes first, with a \u003ccode\u003etabItem\u003c/code\u003e modifier.\u003c/p\u003e\n\u003cp\u003eThe same tab view now looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eTabView {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Tab(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Chart\u0026#34;\u003c/span\u003e, systemImage: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;chart.bar.doc.horizontal\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ChartSamplesView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Tab(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Form\u0026#34;\u003c/span\u003e, systemImage: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;list.bullet.clipboard\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    FormSamplesView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis suits my brain much better. I define a tab first and then use the closure to say what it will show. The only issue I have with this is that it has not considered Mac tabs which are mostly text only. You must specify an image for the tab, even when it won\u0026rsquo;t appear. In an app\u0026rsquo;s Settings view, the tabs are styled differently and will show an image, but not in a conventional Mac window.\u003c/p\u003e\n\u003cp\u003eOk, the image \u003cem\u003ecan\u003c/em\u003e appear in a conventional Mac window if you style the tab view differently. If you add a \u003ccode\u003e.tabViewStyle\u003c/code\u003e modifier to a tab view, you can set it to either \u003ccode\u003eautomatic\u003c/code\u003e, \u003ccode\u003egrouped\u003c/code\u003e, \u003ccode\u003esidebarAdaptable\u003c/code\u003e or \u003ccode\u003etabBarOnly\u003c/code\u003e. The default is \u003ccode\u003eautomatic\u003c/code\u003e, which is \u003ccode\u003etabBarOnly\u003c/code\u003e on macOS. The \u003ccode\u003egrouped\u003c/code\u003e option is marked as being in beta, but it looks very familiar. It moves the tabs down so they are more like part of the content. The new one is \u003ccode\u003esidebarAdaptable\u003c/code\u003e which moves the tabs to the sidebar and shows the images. I can\u0026rsquo;t see myself using this in a Mac app, I think it\u0026rsquo;s designed more for the other OSes. It would only be useful if you had a long list of tabs that wouldn\u0026rsquo;t fit horizontally.\u003c/p\u003e\n\u003cp\u003eIn the sample app, open \u003cstrong\u003eSamplesView.swift\u003c/strong\u003e and test the different tab styles to see what you think. I\u0026rsquo;ve added the two non-standard options there commented out so you can try them in the preview.\u003c/p\u003e\n\u003ch3 id=\"charts\"\u003e\n  Charts\n  \u003ca href=\"#charts\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eLast year, Swift Charts got a pie or donut option. This year, the charts team added vector and function plotting. In \u003cstrong\u003eChartSamplesView.swift\u003c/strong\u003e, I have three different charts: a bar chart as before, a pie chart and a line chart that plots various sine waves. My understanding is that the various plot types are great for functions or for large data sets but for more comprehensive information, check out the WWDC presentation: \u003ca href=\"https://developer.apple.com/wwdc24/10155\"\u003eSwift Charts: Vectorized and function plots\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/line_plot.png\" alt=\"Line Plot\"\u003e\u003c/p\u003e\n\u003cp\u003eIn my samples, I have a separate computed property for each of the three chart types, with a \u003ccode\u003e@ViewBuilder\u003c/code\u003e property to return the correct chart. I\u0026rsquo;ve also updated the chart image export to use SwiftUI\u0026rsquo;s \u003ccode\u003efileExporter\u003c/code\u003e instead of the AppKit\u0026rsquo;s \u003ccode\u003eNSSave\u003c/code\u003e. I had a slight issue with \u003ccode\u003efileExporter\u003c/code\u003e. I started off by including the image content type when configuring the exporter. This gave \u003cstrong\u003egeneric error\u003c/strong\u003e when I tried to save - not the most helpful of messages. I removed the content type and it worked fine. I\u0026rsquo;m not sure if this is a bug or a feature.\u003c/p\u003e\n\u003ch3 id=\"colors-and-gradients\"\u003e\n  Colors and gradients\n  \u003ca href=\"#colors-and-gradients\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eWhen you specify a \u003ccode\u003eColor\u003c/code\u003e in SwiftUI, you have the ability to add a standard gradient:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCapsule()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  .fill(.orange.gradient)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis is a great modifier as it gives us a very simple way to improve the look of a flat block of color.\u003c/p\u003e\n\u003cp\u003eThis year, we also get the ability to mix colors, like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCapsule()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  .fill(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    selectedColor\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .mix(with: mixColor, by: mixPercent)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .gradient\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  )\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOpen the \u003cstrong\u003eUI Samples\u003c/strong\u003e window and go to the \u003cstrong\u003eForm\u003c/strong\u003e tab to test out some color mixes. This not only allows us to create our own colors, but it also gives us a way to change colors programmatically like I do with the slider in the example. You can even chain \u003ccode\u003emix\u003c/code\u003e modifiers for more variability.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/color_mix.png\" alt=\"Color Mix\"\u003e\u003c/p\u003e\n\u003cp\u003eThe other big new thing is mesh gradients. As you saw in the \u003ca href=\"#windows\"\u003eWindows\u003c/a\u003e section above, I used a mesh gradient to create a background for the \u003cstrong\u003eAbout\u003c/strong\u003e window. The basic technique for creating a mesh gradient is to make a grid of points and assign a color to each point. The points are defined as \u003ccode\u003eSIMD2\u0026lt;Float\u0026gt;\u003c/code\u003e so you initialize each point with \u003ccode\u003eSIMD2(x, y)\u003c/code\u003e. Then you supply an array of colors for each point. The colors expand out from each point, meshing with their neighbors.\u003c/p\u003e\n\u003cp\u003eIn my example, I set most of the colors to white but changed the top left, middle and bottom right points to different colors so that I got a diagonal gradient. I also used even spacing for the points, which is not necessary. Check out the code in \u003cstrong\u003eMeshBackground.swift\u003c/strong\u003e to see how I did this.\u003c/p\u003e\n\u003cp\u003eIf you want to know more about mesh gradients, I highly recommend Stewart Lynch\u0026rsquo;s video: \u003ca href=\"https://www.youtube.com/watch?v=s_eQZ8rRV8Y\"\u003eMeshGradients in iOS 18 and Xcode 15\u003c/a\u003e. Although the title says iOS 18, it\u0026rsquo;s all valid for macOS 15 too.\u003c/p\u003e\n\u003ch3 id=\"sf-symbols\"\u003e\n  SF Symbols\n  \u003ca href=\"#sf-symbols\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eMy final topic is the ability to add animated effects to \u003ca href=\"https://developer.apple.com/sf-symbols/\"\u003eSF Symbols\u003c/a\u003e. You can test this in the \u003cstrong\u003eFormSamplesView.swift\u003c/strong\u003e preview, which only works because I used \u003ccode\u003e@Previewable\u003c/code\u003e to add the menu selection to the preview. Before that, the preview worked but ignored any menu changes. The demo is a bit strange because it will often show the previous animation before using the new one, but this is not the way I would use these effects in an app and it does allow you to see what\u0026rsquo;s happening. Just keep clicking \u003cstrong\u003eShow Effect\u003c/strong\u003e to see your selected animation.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/symbol_effects.png\" alt=\"Symbol Effects\"\u003e\u003c/p\u003e\n\u003cp\u003eI wasn\u0026rsquo;t able to get the \u003ccode\u003eappear\u003c/code\u003e or \u003ccode\u003escale\u003c/code\u003e effects to work, but maybe that\u0026rsquo;s an Xcode beta issue. They work in the SF Symbols app. The syntax for applying an effect looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eImage(systemName: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;rainbow\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  .font(.system(size: \u003cspan style=\"color:#ae81ff\"\u003e50\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  .symbolEffect(.bounce, value: showEffect)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSpecify a symbol as usual, sizing it as needed. Then add the \u003ccode\u003esymbolEffect\u003c/code\u003e modifier with the effect you want and a \u003ccode\u003evalue\u003c/code\u003e. The effect is triggered whenever the value changes.\u003c/p\u003e\n\u003ch3 id=\"conclusion\"\u003e\n  Conclusion\n  \u003ca href=\"#conclusion\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eSo those are my favorite SwiftUI additions from WWDC 2024. As we have seen in recent years, Apple is gradually converging the OSes, especially with SwiftUI, which means that a lot of code is no longer platform-specific. But as developers, we still have the responsibility to make our apps look, feel and behave in a way that suits the platform, whatever it is.\u003c/p\u003e\n\u003cp\u003eOne other point is that a lot of resources will state that they are for iOS, but many of them are totally valid for macOS too. Don\u0026rsquo;t skip an article or video just because it doesn\u0026rsquo;t label itself as specifically for macOS.\u003c/p\u003e\n\u003cp\u003eIf you want more Mac-specific content, check out my recently updated book: \u003ca href=\"https://troz.net/books/macos_tutorials/\"\u003emacOS by Tutorials\u003c/a\u003e. It\u0026rsquo;s designed to help iOS developers extend into macOS development.\u003c/p\u003e\n\u003cp\u003eThe project from this article is available on \u003ca href=\"https://github.com/trozware/swiftui-mac-2024\"\u003eGitHub\u003c/a\u003e. And as usual, I\u0026rsquo;d be thrilled to hear any suggestions, corrections or improvements. Please contact me using one of the links below or through the \u003ca href=\"/contact/\"\u003eContact\u003c/a\u003e page. And if you found this article useful, I\u0026rsquo;d love you to \u003ca href=\"https://ko-fi.com/trozware\"\u003ebuy me a coffee\u003c/a\u003e.\u003c/p\u003e"
    },
    {
        "title" : "Book Building",
        "date_published" : "2024-08-06T11:29:44+10:00",
        "date_modified" : "2024-08-06T11:29:44+10:00",
        "id" : "https://troz.net/post/2024/book_building/",
        "url" : "https://troz.net/post/2024/book_building/",
        "content_html" : "\u003cp\u003eI started writing books for Kodeco when I was asked to contribute some Mac content to \u003ca href=\"https://www.kodeco.com/books/swiftui-by-tutorials\"\u003eSwiftUI by Tutorials\u003c/a\u003e. I quickly learned that I really enjoyed long form technical writing but I wanted to create more Mac-specific content. After some negotiations, Kodeco agreed to my plan to write \u003ca href=\"https://troz.net/books/macos_tutorials\"\u003emacOS by Tutorials\u003c/a\u003e and the first edition was published in April 2022.\u003c/p\u003e\n\u003cp\u003eAs I have written elsewhere, Kodeco has pivoted away from books and into providing multi-modal courses. They agreed to transfer the rights of the macOS by Tutorials book to me as it was out-of-catalog and since then, I have released an update.\u003c/p\u003e\n\u003cp\u003eWhen writing for Kodeco, all I had to do was write the text and the accompanying code and images. The people at Kodeco took care of the rest. Many thanks to all involved - I greatly underestimated the work that this entailed! Now that I am self-publishing, I have had to learn how to create the various formats myself. This post is a summary of how I did that.\u003c/p\u003e\n\u003ch3 id=\"table-of-contents\"\u003e\n  Table of Contents\n  \u003ca href=\"#table-of-contents\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#project-structure\"\u003eProject Structure\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#formatting\"\u003eFormatting\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#html\"\u003eHTML\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#pdf\"\u003ePDF\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#epub\"\u003eePub\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#writing-tools\"\u003eWriting Tools\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"introduction\"\u003e\n  Introduction\n  \u003ca href=\"#introduction\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eSince I always used Markdown when writing for Kodeco, that\u0026rsquo;s where I started. I wanted to produce the book as an ePub and a PDF, so I needed to convert the Markdown to those formats. I also wanted to produce a web version, so that required a Markdown to HTML conversion. After some research, I started off with \u003ca href=\"https://pandoc.org\"\u003epandoc\u003c/a\u003e. This is a command-line tool that can convert between many different formats, so it seemed like a good choice.\u003c/p\u003e\n\u003cp\u003eI found it very difficult to use and to configure to give the results I wanted. While looking for examples online, I discovered \u003ca href=\"https://github.com/progit/progit\"\u003ePro Git\u003c/a\u003e. This looked like it was doing what I was trying to do, but even after following their examples, I was still having problems. Then I discovered that \u003ca href=\"https://github.com/progit/progit2\"\u003ePro Git 2nd Edition\u003c/a\u003e was written in AsciiDoc, not Markdown. I had never heard of AsciiDoc but it looked like it might make generating various book formats easier, so I decided to give it a try.\u003c/p\u003e\n\u003cp\u003eAsciiDoc is a markup language very similar to Markdown. This quick reference guide shows the syntax: \u003ca href=\"https://docs.asciidoctor.org/asciidoc/latest/syntax-quick-reference/\"\u003eAsciiDoc Syntax Quick Reference\u003c/a\u003e. The secret sauce was using AsciiDoctor to convert AsciiDoc files into HTML, ePub and PDF. This was much easier to use than pandoc but it took a bit of tweaking to get the results I wanted for each format.\u003c/p\u003e\n\u003ch2 id=\"project-structure\"\u003e\n  Project Structure\n  \u003ca href=\"#project-structure\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eI started by copying the file and folder structure used for Pro Git. I\u0026rsquo;ve since modified it to suit my needs but the basic structure is much the same. In the root folder, I have the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eRakefile\u003c/strong\u003e: The Ruby file that contains the commands to generate the various formats.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGemfile\u003c/strong\u003e \u0026amp; \u003cstrong\u003eGemfile.lock\u003c/strong\u003e: These files handle the Ruby libraries used to create the various formats.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ebook.adoc\u003c/strong\u003e: The main file that assembles the contents of the book and is used for the PDFs and ePub versions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ebook-html.adoc\u003c/strong\u003e: The same as book.adoc but with an added image, since the HTML version doesn\u0026rsquo;t have a cover.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003etheme folder\u003c/strong\u003e: The files used to style the different versions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eimages folder\u003c/strong\u003e: All the images used in the book.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003efonts folder\u003c/strong\u003e: The custom fonts used in the book.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ecomponents folder\u003c/strong\u003e: The adoc files referenced by book.adoc.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ebook folder\u003c/strong\u003e: The adoc files for each chapter as well as preface, introduction, conclusion etc.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAsciiDoc files can import other AsciiDoc files, so I have a separate file for each chapter in the book as well as files for the non-chapter content. The \u003cstrong\u003ebook.adoc\u003c/strong\u003e file includes \u003cstrong\u003ecomponents/headers.adoc\u003c/strong\u003e, a link to the cover image and \u003cstrong\u003ecomponents/contents.adoc\u003c/strong\u003e. \u003cstrong\u003ebook-html.adoc\u003c/strong\u003e is the same except for including the cover as an image file.\u003c/p\u003e\n\u003cp\u003eThe \u003cstrong\u003eheaders.adoc\u003c/strong\u003e file is where AsciiDoctor reads the metadata for the book:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-asciidoc\" data-lang=\"asciidoc\"\u003e= macOS by Tutorials\nSarah Reichelt\n:doctype: book\n:doctitle: macOS by Tutorials\n:notitle:\n:toc: macro\n:toclevels: 2\n:figure-caption!:\n:description: macOS App Development for iOS Developers\n:author: Sarah Reichelt\n:copyright: (C) 2024 Sarah Reichelt. All rights reserved.\n:epub3-stylesdir: theme\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSome of these are self-explanatory, but there are some oddities:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e:doctype: book\u003c/code\u003e: Set the type of this document to a book. AsciiDoctor uses different formatting and allows different header levels for different types of documents.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:notitle: \u003c/code\u003e: Turn off default title page. I wanted to customise my title page.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:toc: macro\u003c/code\u003e: Setting this to macro allows me to specify the location for the table of contents, instead of using the default placement.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:toclevels: 2\u003c/code\u003e: Set the number of header levels to include in the table of contents.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:figure-caption!:\u003c/code\u003e: Tell AsciiDoctor not to add \u0026lsquo;Figure #\u0026rsquo; to all image captions.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e:epub3-stylesdir: theme\u003c/code\u003e: The folder containing the styles for the ePub version.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe next file in components is \u003cstrong\u003econtent.adoc\u003c/strong\u003e. This is where I include the title page, the table of contents, the introductory pages, the sections and the conclusion. Each section file has a header, an introduction and links to the chapter files.\u003c/p\u003e\n\u003cp\u003eWith the folder structure in place, I copied the matching Markdown files from the original book. Then I used various tools to convert these files into AsciiDoc. The \u003ca href=\"https://github.com/asciidoctor/kramdown-asciidoc\"\u003eKramdown AsciiDoc\u003c/a\u003e converter did most of the work to translate Markdown to AsciiDoc. The image links needed special handling, especially when it came to adding captions and sizes. I used Python scripts for this. Python is always my go-to tool for text and file manipulation. I also used Python to strip out the Markdown metadata at the start of every chapter and add the AsciiDoc metadata.\u003c/p\u003e\n\u003cp\u003eI am not artistic, so I used Keynote to create the cover image. This allowed me to do object-oriented design with images, shapes and text. I then exported it as a PNG file for use in the book.\u003c/p\u003e\n\u003cp\u003eFinally, I had all the files in the right places and in the correct formats. Now to generate and style the various versions.\u003c/p\u003e\n\u003cp\u003eThis involved using Ruby to run the various AsciiDoctor commands. My Mac had Ruby installed but only an old version, so I used Homebrew to update to Ruby 3.3. I\u0026rsquo;m not familiar with Ruby, so I had to learn how to install and update the required gems. With them in place, I used the commands in the Rakefile to create the various formats.\u003c/p\u003e\n\u003ch2 id=\"formatting\"\u003e\n  Formatting\n  \u003ca href=\"#formatting\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eThe Pro Git Rakefile started by defining some parameters that could be passed to the AsciiDoctor commands for all the formats.\nIn their case, params included two attributes: \u003ccode\u003erevnumber\u003c/code\u003e and \u003ccode\u003erevdate\u003c/code\u003e. I also wanted to specify the syntax highlighter and its style. Working out what to use for the syntax highlighter was a bit tricky as I wanted the code blocks to look like they would in Xcode, but I eventually found the right combination using \u003ca href=\"https://pygments.org\"\u003epygments\u003c/a\u003e and its \u003cstrong\u003excode\u003c/strong\u003e style:\u003c/p\u003e\n\u003cp\u003eMy parameters used by all the different formats ended up like\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eversion_string \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;2.0\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edate_string \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eTime\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enow\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003estrftime(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;%Y-%m-%d\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eparams \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;--attribute revnumber=\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e#{\u003c/span\u003eversion_string\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39; --attribute revdate=\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e#{\u003c/span\u003edate_string\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esyntax_params \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;--attribute source-highlighter=pygments --attribute pygments-style=xcode\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen I had to work out how to style each format.\u003c/p\u003e\n\u003ch3 id=\"html\"\u003e\n  HTML\n  \u003ca href=\"#html\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003ePro Git uses this command for generating the HTML, which gave me my starting point:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esh \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bundle exec asciidoctor \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e#{\u003c/span\u003eparams\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e -a data-uri progit.asc\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI had already added a second set of params for the syntax highlighter, but the next thing was to add my own style sheet. The Pro Git repo had a \u003cstrong\u003etheme\u003c/strong\u003e folder with sub-folders for each format. I tried editing \u003cstrong\u003etheme/html/html.css\u003c/strong\u003e but that didn\u0026rsquo;t work. I eventually found that I needed to create a new file called \u003cstrong\u003edocinfo.html\u003c/strong\u003e in the \u003cstrong\u003etheme\u003c/strong\u003e folder and then add more attributes to access it. This changed my command to:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebook_title \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;macOS_by_Tutorials_v2.0.html\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estyle_sheet \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;-a docinfodir=theme -a docinfo=shared\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esh \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bundle exec asciidoctor \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e#{\u003c/span\u003eparams\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e#{\u003c/span\u003esyntax_params\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e#{\u003c/span\u003estyle_sheet\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e -a data-uri -o \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e#{\u003c/span\u003ebook_title\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e book-html.adoc\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis meant that I could add my own CSS or JavaScript to the \u003cstrong\u003etheme/docinfo.html\u003c/strong\u003e file and it would be included in the HTML output. The \u003ccode\u003edata-uri\u003c/code\u003e attribute tells AsciiDoctor to embed the images in the HTML output. I didn\u0026rsquo;t want to have to give people a folder of images to go with the HTML file, I wanted a single file that could be opened in a browser and would include everything.\u003c/p\u003e\n\u003cp\u003eI generated an HTML file using the default styling, then copied the default CSS into a \u003ccode\u003estyle\u003c/code\u003e block in this file. I then edited it to my satisfaction.\u003c/p\u003e\n\u003cp\u003eOne refinement for the HTML version was to add a copy button on the code blocks. I used \u003ca href=\"https://clipboardjs.com\"\u003eclipboard.js\u003c/a\u003e for this and tweaked the style and position of the copy button to match my style. I also added JavaScript to make the copy operation ignore the numbered comment lines that are used to mark explanation points throughout the code.\u003c/p\u003e\n\u003ch3 id=\"pdf\"\u003e\n  PDF\n  \u003ca href=\"#pdf\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThe PDF was the most difficult to format as it doesn\u0026rsquo;t use CSS but includes some other formatting options in a YML file, perhaps based on Postscript? I used AsciiDoctor to export the default PDF theme so I could see the format. Then I created my own PDF theme file, extending the default theme. This involved quite a bit of trial and error as I had to work out what the various styles were called and how to override them. I also wanted to create a dark mode version of the PDF, so I made a second theme file for that.\u003c/p\u003e\n\u003cp\u003eThe two theme files are called \u003cstrong\u003epdf-theme.yml\u003c/strong\u003e and \u003cstrong\u003epdfdark-theme.yml\u003c/strong\u003e. They are both inside the \u003cstrong\u003etheme\u003c/strong\u003e folder. I used these in the Rakefile like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epdf_params \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;-a pdf-theme=pdf -a pdf-themesdir=theme -a pdf-fontsdir=.\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eoutput_name \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e book_title \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;_v\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e version_string \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;.pdf\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esh \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bundle exec asciidoctor-pdf \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e#{\u003c/span\u003epdf_params\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e#{\u003c/span\u003esyntax_params\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e#{\u003c/span\u003eparams\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e -o \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e#{\u003c/span\u003eoutput_name\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e book.adoc\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epdf_params \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;-a pdf-theme=pdfdark -a pdf-themesdir=theme -a pdf-fontsdir=.\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esyntax_params \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;--attribute source-highlighter=pygments --attribute pygments-style=github-dark\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eoutput_name \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e book_title \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;_v\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e version_string \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;_dark.pdf\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esh \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bundle exec asciidoctor-pdf \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e#{\u003c/span\u003epdf_params\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e#{\u003c/span\u003esyntax_params\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e#{\u003c/span\u003eparams\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e -o \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e#{\u003c/span\u003eoutput_name\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e book.adoc\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAs you can see, the \u003cstrong\u003e-theme.yml\u003c/strong\u003e part of the file name is not included in the command, just the base name. The \u003ccode\u003epdf-themesdir\u003c/code\u003e attribute is used to point to the theme folder and the \u003ccode\u003epdf-fontsdir\u003c/code\u003e attribute is used to point to the root folder. This worked because I had the font files in a \u003cstrong\u003efonts\u003c/strong\u003e folder and included the folder path in the font specifications of the YML files.\u003c/p\u003e\n\u003cp\u003eFor the PDF versions, I also added a header to every page with the book title and the chapter title using the YML files.\u003c/p\u003e\n\u003ch3 id=\"epub\"\u003e\n  ePub\n  \u003ca href=\"#epub\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eFinally, the ePub version. To my surprise, an ePub is actually a zip file. The contents are XHTML files, images and styles. The secret here was again to have files with the correct name in the correct location. In this case, I needed \u003cstrong\u003eepub3.scss\u003c/strong\u003e and \u003cstrong\u003eepub3-css3-only.css\u003c/strong\u003e in the \u003cstrong\u003etheme\u003c/strong\u003e folder. I left \u003cstrong\u003eepub3.scss\u003c/strong\u003e empty, but it still had to be there. The \u003cstrong\u003eepub3-css3-only.css\u003c/strong\u003e file had styles for where I wanted to override the defaults. It wasn\u0026rsquo;t always easy to know what classes to apply the styles to, but I opened one of the XHTML files in my browser and used the web inspector to find them.\u003c/p\u003e\n\u003ch2 id=\"writing-tools\"\u003e\n  Writing Tools\n  \u003ca href=\"#writing-tools\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eThe editor I used was \u003ca href=\"https://code.visualstudio.com\"\u003eVisual Studio Code\u003c/a\u003e. While it\u0026rsquo;s not a native Mac app, it\u0026rsquo;s a very powerful editor and has a fantastic array of extensions. I installed the \u003ca href=\"https://marketplace.visualstudio.com/items?itemName=asciidoctor.asciidoctor-vscode\"\u003eAsciiDoc extension\u003c/a\u003e which allowed me to preview the AsciiDoc files in the editor.\u003c/p\u003e\n\u003cp\u003eThere was a problem with previewing because of the image paths. The \u003cstrong\u003ebook.adoc\u003c/strong\u003e file specifies the path to the images folder, but when previewing an individual chapter file, this was not applied. I had to add a line to the metadata at top of each chapter file to include the path to the images folder. I also added a header to show a table of contents to make it easier to jump around the file while editing. When building the entire book, these headers had to go - the image path over-rode the one in the book.adoc file and meant that book.adoc couldn\u0026rsquo;t find any images, and a table of contents was included in every chapter. I ended up turning to Python again and wrote a script to add and remove these headers as needed.\u003c/p\u003e\n\u003cp\u003eI use \u003ca href=\"https://github.com\"\u003eGitHub\u003c/a\u003e to store the book files and to collaborate with my editor, or language engineer as he prefers to be called.\u003c/p\u003e\n\u003cp\u003eThe other important extension is \u003ca href=\"https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker\"\u003eCode Spell Checker\u003c/a\u003e. Of course there will still be typos in the final book, but this extension helps to catch some of them. A big advantage of this spell checker is that it defaults to US English spelling. I normally write UK/Australian English, but I prefer to use US English for my books to avoid things like \u003cstrong\u003eCreate an NSColor is store the selected colour\u003c/strong\u003e :-). Another big plus is that the custom dictionary is a JSON file stored in the project. That way my editor gets the same spell checking as I do, and I can easily edit the file if I want to delete or change a custom spelling.\u003c/p\u003e\n\u003cp\u003eAll the code is written in Xcode using the default settings and theme as much as possible.\u003c/p\u003e\n\u003cp\u003eScreenshots are taken with \u003ca href=\"https://cleanshot.com\"\u003eCleanShot X\u003c/a\u003e and edited in Preview, which usually just involves cropping.\u003c/p\u003e\n\u003cp\u003eFor hardware, my main computer is a 24\u0026quot; M3 iMac, my keyboard is an \u003ca href=\"https://www.zsa.io/moonlander/\"\u003eErgodox Moonlander\u003c/a\u003e and my mouse is a \u003ca href=\"https://www.logitech.com/en-au/products/mice/mx-vertical-ergonomic-mouse.910-005449.html\"\u003eLogitech MX Vertical\u003c/a\u003e. I also have a 13\u0026quot; M1 MacBook Pro for when I need to work in a different location.\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003e\n  Conclusion\n  \u003ca href=\"#conclusion\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eAsciiDoc is just as easy to write as Markdown, but makes creating books vastly easier.\u003c/p\u003e\n\u003cp\u003eWhile creating all the files to format the first book took a lot of time and effort, I now have a template and subsequent books will start from that, making the process much less complicated. I imagine that I will keep tweaking the configuration and design as I go to make each format look better, but I now have the basic structure in place.\u003c/p\u003e\n\u003cp\u003eIf anyone is interested, I am happy to share the template and the scripts I have written. Contact me using one of the links below or through the \u003ca href=\"/contact/\"\u003eContact\u003c/a\u003e page.\u003c/p\u003e"
    },
    {
        "title" : "macOS by Tutorials",
        "date_published" : "2024-07-23T19:49:12+10:00",
        "date_modified" : "2024-07-23T19:49:12+10:00",
        "id" : "https://troz.net/post/2024/macos_tutorials/",
        "url" : "https://troz.net/post/2024/macos_tutorials/",
        "content_html" : "\u003cp\u003eIn April 2022, Kodeco published the first edition of \u003ca href=\"https://www.kodeco.com/books/macos-by-tutorials\"\u003emacOS by Tutorials\u003c/a\u003e. Nothing stays the same in the world of Apple development, so I started to plan an update after WWDC 2023. At around that time, Kodceo was going through a transformation from being like a library to being more of an educational institution. Their focus is now on multi-modal courses and they are no longer interested in publishing books.\u003c/p\u003e\n\u003cp\u003eKodeco agreed to transfer the rights of the macOS by Tutorials book to me, since it was out-of-catalog and since then, I have been working on an update which is almost ready for release. I had hoped to have it out before WWDC 2024, but real-life has a habit of getting in the way, and that was not possible.\u003c/p\u003e\n\u003cp\u003eThe book is now available at \u003ca href=\"https://sarahreichelt.gumroad.com/l/oximx\"\u003eGumroad\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIf you previously bought the book from either Kodeco or Amazon, please \u003ca href=\"mailto:books@troz.net?subject=macOS%20by%20Tutorials%20Discount\"\u003eemail me\u003c/a\u003e for a 50% discount code.\nI am unable to provide a free update for the Kodeco version, but I will provide free updates subsequently for the self-published version.\u003c/p\u003e\n\u003cp\u003eEvery project in this book has been updated to macOS 14 Sonoma and Xcode 15. They have also been tested using Xcode 16 beta 3.\u003c/p\u003e\n\u003cp\u003e\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n\u003c/style\u003e\n\n\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n  }\n\u003c/style\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/mos_cover_small.png\" alt=\"Book cover\"\u003e\u003c/p\u003e\n\u003cp\u003eThe major changes in this edition include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003cem\u003eOn This Day\u003c/em\u003e app uses \u003ccode\u003eNavigationSplitView\u003c/code\u003e instead of the older \u003ccode\u003eNavigationView\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eOn This Day\u003c/em\u003e implements the new \u003ccode\u003eObservation\u003c/code\u003e framework for its data.\u003c/li\u003e\n\u003cli\u003eThe \u003cem\u003eTime-ato\u003c/em\u003e app no longer imports the external \u003ccode\u003eLaunchAtLogin\u003c/code\u003e package but now uses Apple\u0026rsquo;s \u003ccode\u003eServiceManagement\u003c/code\u003e library.\u003c/li\u003e\n\u003cli\u003eCreating an app intent in \u003cem\u003eImageSipper\u003c/em\u003e uses the new code-based system.\u003c/li\u003e\n\u003cli\u003eThe workflow for distributing your app has been updated to reflect the changes in App Store Connect and Xcode.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAs I am now a self-publisher, I will be able to release more timely and incremental updates and will incorporate the latest changes to macOS, Xcode Swift and SwiftUI as they are released.\u003c/p\u003e\n\u003cp\u003eTo keep up-to-date with my books and other projects, please read my introduction and subscribe to my Gumroad \u003ca href=\"https://sarahreichelt.gumroad.com/p/welcome-to-sarah-s-books\"\u003enewsletter\u003c/a\u003e. It will be very low volume, mainly about my own books.\u003c/p\u003e"
    },
    {
        "title" : "macOS by Tutorials",
        "date_published" : "2024-07-22T09:26:32+10:00",
        "date_modified" : "2024-07-22T09:26:32+10:00",
        "id" : "https://troz.net/books/macos_tutorials/",
        "url" : "https://troz.net/books/macos_tutorials/",
        "content_html" : "\u003cp\u003eIf you\u0026rsquo;re an iOS developer who wants to branch out into creating native macOS apps, this is the book for you!\u003c/p\u003e\n\u003cp\u003eThe book is available for sale through Gumroad at \u003ca href=\"https://sarahreichelt.gumroad.com/l/oximx\"\u003emacOS by Tutorials\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIf you\u0026rsquo;d like to check out the start of the book including the table of contents and the first chapter, you can read it online at \u003ca href=\"/books/mos_2.0.1_sample.html\"\u003emacOS by Tutorials Sample\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eVersion 2.0.1 is a minor update to address some formatting issues in the HTML and ePub versions. The content is exactly the same as in version 2.0 but for the HTML version, I have worked out how to make the table of contents into a sidebar, which works much better.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eIn April 2022, Kodeco published the first edition of \u003ca href=\"https://www.kodeco.com/books/macos-by-tutorials\"\u003emacOS by Tutorials\u003c/a\u003e. Nothing stays the same in the world of Apple development, so I started to plan an update after WWDC 2023. At around that time, Kodceo was going through a transformation from being like a library to being more of an educational institution. Their focus is now on multi-modal courses and they are no longer interested in publishing books.\u003c/p\u003e\n\u003cp\u003eKodeco agreed to transfer the rights of the macOS by Tutorials book to me, since it was out-of-catalog and since then, I have been working on an update which is almost ready for release. I had hoped to have it out before WWDC 2024, but real-life has a habit of getting in the way, and that was not possible.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eEvery project in this book has been updated to macOS 14 Sonoma and Xcode 15. They have also been tested using Xcode 16 beta 3.\u003c/p\u003e\n\u003cp\u003e\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n\u003c/style\u003e\n\n\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n  }\n\u003c/style\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/mos_cover_small.png\" alt=\"Book cover\"\u003e\u003c/p\u003e\n\u003cp\u003eThis book is split into five sections:\u003c/p\u003e\n\u003ch2 id=\"section-i-your-first-app-on-this-day\"\u003e\n  Section I: Your First App: On This Day\n  \u003ca href=\"#section-i-your-first-app-on-this-day\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eBegin your journey developing for macOS by building a full-featured app using SwiftUI. The app, On This Day, accesses a public network API to collect information about events, births and deaths for a given date.You\u0026rsquo;ll learn how to manage multiple windows, add menu and toolbar commands, and choose multiple display options. You\u0026rsquo;ll experience first-hand the power of SwiftUI and see just how easy it is to build an app that has all of the look and feel you expect in a macOS app.\u003c/p\u003e\n\u003ch2 id=\"section-ii-building-a-menu-bar-app\"\u003e\n  Section II: Building a Menu Bar App\n  \u003ca href=\"#section-ii-building-a-menu-bar-app\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eIn this section, you\u0026rsquo;ll use AppKit to build a Pomodoro-style time tracking app that lives only in the macOS menu bar. Along the way, you\u0026rsquo;ll learn how to manage timers, update the menu in real-time, and integrate a SwiftUI view into an AppKit app. You\u0026rsquo;ll also learn about how macOS “sandboxes” apps to protect both them and the system itself.\u003c/p\u003e\n\u003ch2 id=\"section-iii-building-a-document-based-app\"\u003e\n  Section III: Building a Document-based App\n  \u003ca href=\"#section-iii-building-a-document-based-app\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eIn this section, you\u0026rsquo;ll return to using SwiftUI and explore how to build a document-based app. You\u0026rsquo;ll create a Markdown editor — there can never be enough Markdown editors in the world! — that allows you to preview your text in real time. While working on this app, you\u0026rsquo;ll add menu commands to change the styling of the preview and add formatting to your Markdown text.\u003c/p\u003e\n\u003ch2 id=\"section-iv-advanced-wizardry\"\u003e\n  Section IV: Advanced Wizardry\n  \u003ca href=\"#section-iv-advanced-wizardry\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eBecause macOS has its roots in Unix, it provides a vast array of command line tools which allow power users to perform tasks ranging from system management to image manipulation. In this section, you\u0026rsquo;ll learn how to build a graphical front-end for one such command: sips. Once you\u0026rsquo;ve built your sips GUI, you\u0026rsquo;ll enable automation to allow your new command to appear in the Services menu and Shortcuts app. When you complete this section, you too will be a wizard!\u003c/p\u003e\n\u003ch2 id=\"section-v-distributing-your-macos-apps\"\u003e\n  Section V: Distributing Your macOS Apps\n  \u003ca href=\"#section-v-distributing-your-macos-apps\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eOnce you\u0026rsquo;ve written your app, you\u0026rsquo;ll want to distribute it to others so they can benefit from your creativity. On macOS, you have more distribution options than you do on iOS. In this section, you\u0026rsquo;ll explore the pros and cons of those options so you can choose which is best for you.\u003c/p\u003e\n"
    },
    {
        "title" : "Books",
        "date_published" : "2024-07-18T14:58:22+10:00",
        "date_modified" : "2024-07-18T14:58:22+10:00",
        "id" : "https://troz.net/books/",
        "url" : "https://troz.net/books/",
        "content_html" : ""
    },
    {
        "title" : "Man Reader 2",
        "date_published" : "2023-10-13T15:46:38+10:00",
        "date_modified" : "2023-10-13T15:46:38+10:00",
        "id" : "https://troz.net/post/2023/manreader2/",
        "url" : "https://troz.net/post/2023/manreader2/",
        "content_html" : "\u003cp\u003eSeveral years after I started planning it, Man Reader version 2 is now available.\nThis is a major update with a completely new, modern, user interface and it’s available from the \u003ca href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\"\u003eMac App Store\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eMan Reader is a utility app for reading macOS\u0026rsquo;s \u003cstrong\u003eman\u003c/strong\u003e pages. Man Reader allows\nquick, convenient and easy access to the man pages on your system, useful for\nprogrammers, system administrators and tweakers.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\"\u003e\u003cimg src=\"/icons/ManReader128.png\" alt=\"Buy Man Reader from the Mac App Store\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eComplete re-write for modern versions of macOS.\u003c/li\u003e\n\u003cli\u003eOnly runs on macOS Sonoma 14.0 or later.\u003c/li\u003e\n\u003cli\u003eSupport for tabs and multiple windows.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n\u003c/style\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/ManReader2.png\" alt=\"Man Reader 2\"\u003e\n\u003cimg src=\"/images/ManReader2_dark.png\" alt=\"Man Reader 2 dark mode\"\u003e\u003c/p\u003e\n\u003cp\u003eRead all the details at the \u003ca href=\"/manreader/\"\u003eMan Reader support page\u003c/a\u003e.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"development-notes\"\u003e\n  Development Notes\n  \u003ca href=\"#development-notes\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eVersion 1.0 of Man Reader was released in 2012. It was written in Objective-C\nand it suffered from the MVC - Massive View Controller - problem, but it kept going.\u003c/p\u003e\n\u003cp\u003eOver the years, I added new features and fixed bugs, but as macOS evolved, it started looking its age.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;ve been planning a major update for a long time, but I\u0026rsquo;ve been busy with other things so in 2021\nI released an interim update to keep the app working and readable on the latest macOS.\u003c/p\u003e\n\u003cp\u003eThis year, I finally got a decent break in my usual schedule and I was able to get to work.\u003c/p\u003e\n\u003cp\u003eThe new version was always going to be in Swift. After writing Swift for years now, I am\nvery comfortable with it and I write better and safer code in Swift than I can in Objective-C.\u003c/p\u003e\n\u003cp\u003eThe difficult question was whether to use SwiftUI or AppKit as the basis for the app, understanding that\nwhichever way I went, I could add in components from the other framework. This required\nseveral iterations to find the best solution.\u003c/p\u003e\n\u003cp\u003eI prefer working in SwiftUI so I started there first, but as I have written elsewhere,\nSwiftUI Lists, especially on macOS, do not handle large numbers of rows. This has improved a lot\nin macOS Sonoma but it\u0026rsquo;s still not great. On my system, I have\nmore than 10,000 man pages and that rises to over 25,000 if I include all of Xcode\u0026rsquo;s commands.\nI tried a number of different approaches to make a SwiftUI List work, but then decided I\u0026rsquo;d have to use\nAppKit as the starting point for the app.\u003c/p\u003e\n\u003cp\u003eThis solved the performance issue but caused others. I\u0026rsquo;ve got so used to SwiftUI\u0026rsquo;s reactive\ndata flow that I found it difficult to work with pure AppKit. There were also things that SwiftUI is\njust better at, like support for multiple windows.\u003c/p\u003e\n\u003cp\u003eSo I went back to a SwiftUI base and embedded an AppKit \u003ccode\u003eNSTableView\u003c/code\u003e to handle the long list in the sidebar.\nThis was interesting because I dislike creating an \u003ccode\u003eNSTableView\u003c/code\u003e via code - there are just too many components\nand settings that storyboards make simple. So for the first time, I embedded a Storyboard view into a SwiftUI\nview. I did this by adding an \u003ccode\u003eNSViewController\u003c/code\u003e with a \u003cstrong\u003exib\u003c/strong\u003e file and then using that in an\n\u003ccode\u003eNSViewControllerRepresentable\u003c/code\u003e struct. This worked well and the published app has a SwiftUI base and an AppKit sidebar.\u003c/p\u003e\n\u003cp\u003eOne feature that I was very keen to maximise was keyboard support. To a large extent, you can operate\nMan Reader without the mouse. The menus show most of the available shortcuts, but you can also\npress Tab or Shift-Tab to get to the two search fields. The sidebar is a table so you can use the arrow keys\nto navigate but you can also use type-select if there is no active cursor. Start typing to select\nthe first page with a name starting with those characters.\u003c/p\u003e\n\u003cp\u003eOne other design decision was to support the latest version of macOS only. The old version of Man Reader is\nstill available for anyone on older systems, but I wanted to learn and use all the latest features of\nSwift and SwiftUI.\u003c/p\u003e\n\u003cp\u003eIf you have any ideas for future versions or\nencounter any bugs, please \u003ca href=\"mailto:sarah@troz.net?subject=Man%20Reader%202\"\u003eemail me\u003c/a\u003e or get in touch through the \u003ca href=\"/contact/\"\u003eContact\u003c/a\u003e page.\u003c/p\u003e"
    },
    {
        "title" : "Man Reader 2",
        "date_published" : "2023-10-13T15:46:27+10:00",
        "date_modified" : "2023-10-13T15:46:27+10:00",
        "id" : "https://troz.net/manreader/",
        "url" : "https://troz.net/manreader/",
        "content_html" : "\u003cp\u003eSeveral years after I started planning it, Man Reader version 2\nis now available. This is a major update with a completely new,\nmodern, user interface and it\u0026rsquo;s available from the Mac App Store.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\"\u003e\u003cimg src=\"/icons/ManReader128.png\" alt=\"Buy Man Reader from the Mac App Store\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eMan Reader is a utility app for reading macOS\u0026rsquo;s \u003cstrong\u003eman\u003c/strong\u003e pages. Man Reader allows\nquick, convenient and easy access to the man pages on your system, useful for\nprogrammers, system administrators and tweakers.\u003c/p\u003e\n\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n\u003c/style\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/ManReader2.png\" alt=\"Man Reader 2\"\u003e\u003c/p\u003e\n\u003cp\u003eMan pages are available for most of the Unix commands used mostly in Terminal or when\nshell scripting. These man pages are normally displayed in Terminal using the\n\u003ccode\u003eman\u003c/code\u003e command.\u003cbr\u003e\ne.g. \u003ccode\u003eman ipconfig\u003c/code\u003e gives you the \u003cstrong\u003eman\u003c/strong\u003e page for the \u003ccode\u003eipconfig\u003c/code\u003e command.\u003c/p\u003e\n\u003cp\u003eHowever there are problems with this: the man page is displayed in your\nTerminal window page by page and you have to press Space to get to the next page.\nOnce you\u0026rsquo;ve got to the end, you have to\nknow to press \u0026lsquo;q\u0026rsquo; to get out of the man page display, at which point it\ndisappears completely. Hope you have a good memory!\u003c/p\u003e\n\u003cp\u003eThere are various tricks to get around this: opening it in a separate window,\npiping it to Preview as a PDF, listing it as a single page etc, but none of\nthese are really convenient, which is why I wrote Man Reader.\u003c/p\u003e\n\u003cp\u003eMan Reader searches the most usual directories and assembles a list of the man pages\nit finds. These commands are listed in the sidebar and you can select any one\nto display the man page for that command.\u003c/p\u003e\n\u003cp\u003eIf you have other locations you would like Man Reader to search, you can add\nthem using Settings.\u003c/p\u003e\n\u003ch2 id=\"major-features\"\u003e\n  Major Features:\n  \u003ca href=\"#major-features\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eList the man pages on your system.\u003c/li\u003e\n\u003cli\u003eShow only pages in a selected section.\u003c/li\u003e\n\u003cli\u003eSearch for a man page by name.\u003c/li\u003e\n\u003cli\u003eBookmark your favorite pages.\u003c/li\u003e\n\u003cli\u003eJump to sub-sections in a page.\u003c/li\u003e\n\u003cli\u003eLive links to \u0026lsquo;See Also\u0026rsquo; entries.\u003c/li\u003e\n\u003cli\u003eSearch for text within a page.\u003c/li\u003e\n\u003cli\u003eDisplay man pages in text or HTML (different pages look best in different\nformats).\u003c/li\u003e\n\u003cli\u003eSee and use your History of recently viewed pages.\u003c/li\u003e\n\u003cli\u003eAdd your own custom notes to any man page.\u003c/li\u003e\n\u003cli\u003eChoose a font and font sizes for the display.\u003c/li\u003e\n\u003cli\u003eView the app\u0026rsquo;s custom man page for help.\u003c/li\u003e\n\u003cli\u003eExtensive support for keyboard operations.\u003c/li\u003e\n\u003cli\u003eOpen multiple tabs or windows.\u003c/li\u003e\n\u003cli\u003eAdd custom search locations.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"/images/ManReader2_dark.png\" alt=\"Man Reader 2 dark mode\"\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"change-log\"\u003e\n  Change Log:\n  \u003ca href=\"#change-log\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003ch4 id=\"man-reader-version-20-changes-26-oct-2022\"\u003e\n  Man Reader version 2.0 changes (26 Oct 2022):\n  \u003ca href=\"#man-reader-version-20-changes-26-oct-2022\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eComplete re-write for modern versions of macOS.\u003c/li\u003e\n\u003cli\u003eOnly runs on macOS Sonoma 14.0 or later.\u003c/li\u003e\n\u003cli\u003eSupport for tabs and multiple windows.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-150-changes-18-oct-2022\"\u003e\n  Man Reader version 1.50 changes (18 Oct 2022):\n  \u003ca href=\"#man-reader-version-150-changes-18-oct-2022\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eSupport for macOS 13 Ventura.\u003c/li\u003e\n\u003cli\u003eUse light or dark system modes instead of custom color schemes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-113-changes-26-may-2021\"\u003e\n  Man Reader version 1.13 changes (26 May 2021):\n  \u003ca href=\"#man-reader-version-113-changes-26-may-2021\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAdd missing links for non-standard man pages.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-112-changes-17-may-2021\"\u003e\n  Man Reader version 1.12 changes (17 May 2021):\n  \u003ca href=\"#man-reader-version-112-changes-17-may-2021\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eFixes issues with crashing on first run and with dark mode over-riding the user preferences.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-111-changes-16-may-2021\"\u003e\n  Man Reader version 1.11 changes (16 May 2021):\n  \u003ca href=\"#man-reader-version-111-changes-16-may-2021\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eI am working on a major update to Man Reader, but this is taking longer than expected due to other commitments, so this is an interim release to fix some of the UI problems with the current version.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-110-changes-11-may-2018\"\u003e\n  Man Reader version 1.10 changes (11 May 2018):\n  \u003ca href=\"#man-reader-version-110-changes-11-may-2018\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eFix for possible crash if toolbar apps are not available.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-19-changes-27-nov-2017\"\u003e\n  Man Reader version 1.9 changes (27 Nov 2017):\n  \u003ca href=\"#man-reader-version-19-changes-27-nov-2017\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eFix for High Sierra problem where page navigation had stopped working.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-18-changes-23-oct-2016\"\u003e\n  Man Reader version 1.8 changes (23 Oct 2016):\n  \u003ca href=\"#man-reader-version-18-changes-23-oct-2016\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eMore complete search for man pages, including in third-party IDEs.\u003c/li\u003e\n\u003cli\u003eFix for glitch when displaying previously selected page on launch.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-17-changes-10-oct-2016\"\u003e\n  Man Reader version 1.7 changes (10 Oct 2016):\n  \u003ca href=\"#man-reader-version-17-changes-10-oct-2016\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eUpdated for macOS Sierra.\u003c/li\u003e\n\u003cli\u003eList of pages now uses alternating colors even if not using the defaults.\u003c/li\u003e\n\u003cli\u003eMinimum supported system version raised to 10.11.\u003c/li\u003e\n\u003cli\u003eMinor display glitches fixed.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-16-changes-13-jul-2016\"\u003e\n  Man Reader version 1.6 changes (13 Jul 2016):\n  \u003ca href=\"#man-reader-version-16-changes-13-jul-2016\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eMuch improved searching for available man pages, including permissions fix for\nsome pages.\u003c/li\u003e\n\u003cli\u003eFixed error with new search term being over-written.\u003c/li\u003e\n\u003cli\u003eSand-boxed version now works just as well as the non-sand-boxed so please\nswitch back to this version.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-15-changes\"\u003e\n  Man Reader version 1.5 changes:\n  \u003ca href=\"#man-reader-version-15-changes\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eMuch improved searching for available man pages.\u003c/li\u003e\n\u003cli\u003eSand-boxed version now works just as well as the non-sand-boxed.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-14-changes\"\u003e\n  Man Reader version 1.4 changes:\n  \u003ca href=\"#man-reader-version-14-changes\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eFix for plain text view not wrapping correctly for odd-sized fonts.\u003c/li\u003e\n\u003cli\u003eFix for HTML text view over-riding font colors that may be invisible.\u003c/li\u003e\n\u003cli\u003eSearch for missing entry (e.g. g++) no longer requires Enter or Return.\u003c/li\u003e\n\u003cli\u003eBetter automatic selection of matching entries while searching.\u003c/li\u003e\n\u003cli\u003eFix for animation warning message appearing in Console.\u003c/li\u003e\n\u003cli\u003eStatus display shows when man page list is being updated.\u003c/li\u003e\n\u003cli\u003eSearching inside a page now allows a minimum of 2 characters (was 3), so flags\ne.g. \u0026lsquo;-b\u0026rsquo; do not need to be escaped.\u003c/li\u003e\n\u003cli\u003eFixed path for Network Utility in tool bar (moved in OS X 10.9).\u003c/li\u003e\n\u003cli\u003eMore information available about the effects of sand-boxing for this app.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-13-changes\"\u003e\n  Man Reader version 1.3 changes:\n  \u003ca href=\"#man-reader-version-13-changes\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eBetter formatting of plain text to allow for HTML entities.\u003c/li\u003e\n\u003cli\u003eFix for font in some HTML pages getting bigger \u0026amp; bigger.\u003c/li\u003e\n\u003cli\u003eFailed search for page will search for a matching man page anyway.\u003c/li\u003e\n\u003cli\u003eEditable apps in toolbar (see Preferences \u0026amp; View menu).\u003c/li\u003e\n\u003cli\u003eFixed bug when setting custom colors for marker tabs.\u003c/li\u003e\n\u003cli\u003eChanged shortcuts for Find (see Edit menu).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-12-changes\"\u003e\n  Man Reader version 1.2 changes:\n  \u003ca href=\"#man-reader-version-12-changes\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eCustomizable colors for text, background, links, found text.\u003c/li\u003e\n\u003cli\u003eSearching for text within pages marks all matches.\u003c/li\u003e\n\u003cli\u003ePages will adjust line width to suit window size, even in plain text mode.\u003c/li\u003e\n\u003cli\u003eIf a search only results in a single page, press Return to display it.\u003c/li\u003e\n\u003cli\u003eMore man pages should be located on your system.\u003c/li\u003e\n\u003cli\u003eFix for bug where app did not always remember full screen setting.\u003c/li\u003e\n\u003cli\u003eFix for bug where some pages were being added to the history list twice.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-11-changes\"\u003e\n  Man Reader version 1.1 changes:\n  \u003ca href=\"#man-reader-version-11-changes\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eSearch for text within a man page.\u003c/li\u003e\n\u003cli\u003eBookmark frequently visited pages.\u003c/li\u003e\n\u003cli\u003eSearch man page list using \u0026ldquo;Starts with\u0026rdquo; or \u0026ldquo;Contains\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003ePreferences for the marker tabs: choose a pre-made color set or design your\nown.\u003c/li\u003e\n\u003cli\u003eFull screen mode now supported.\u003c/li\u003e\n\u003cli\u003eCustom toolbar configurations now saved \u0026amp; restored correctly.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cp\u003eIf you have any problems with Man Reader, any suggestions for future versions or\nencounter any bugs, please \u003ca href=\"mailto:sarah@troz.net?subject=Man%20Reader%202\"\u003eemail me\u003c/a\u003e or get in touch through the \u003ca href=\"/contact/\"\u003eContact\u003c/a\u003e page.\u003c/p\u003e\n"
    },
    {
        "title" : "SwiftUI Data Flow 2023",
        "date_published" : "2023-07-10T09:22:54+10:00",
        "date_modified" : "2023-07-10T09:22:54+10:00",
        "id" : "https://troz.net/post/2023/swiftui-data-flow-2023/",
        "url" : "https://troz.net/post/2023/swiftui-data-flow-2023/",
        "content_html" : "\u003cp\u003eSwiftUI is a reactive framework where the data drives the UI. In 2019, I wrote a \u003ca href=\"/post/2019/swiftui-data-flow/\"\u003epost\u003c/a\u003e detailing how I manage the various forms of data flow through a SwiftUI app, and with the help of others in the community, I iterated over this until I had a good understanding of the concepts and which methods you should use when. In 2021, I updated the post to cover the minor changes, but there have been no major modifications since then.\u003c/p\u003e\n\u003cp\u003eAt WWDC 2023, things changed a lot! With the introduction of Swift macros, the SwiftUI team was able to reduce the number of property wrappers need to send data around, and remove a lot of boilerplate code.\u003c/p\u003e\n\u003cp\u003eFor this article, I have re-written my sample app as a Mac app and updated it to use the new data macros.\u003c/p\u003e\n\u003cp\u003eUpdated 10th July 2023 to cover changes in version 3 of all the betas.\u003c/p\u003e\n\u003ch3 id=\"table-of-contents\"\u003e\n  Table of Contents\n  \u003ca href=\"#table-of-contents\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#observation\"\u003eObservation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#sample-app\"\u003eSample app\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#property\"\u003eProperty\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#state\"\u003e@State\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#binding\"\u003e@Binding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#binding-for-a-structure\"\u003e@Binding for a Structure\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#observable-and-bindable\"\u003e@Observable and @Bindable\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#observable-and-bindable-list\"\u003e@Observable and @Bindable List\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#environment\"\u003e@Environment\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#wrapping-up\"\u003eWrapping Up\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWith the release of all the version 3 betas, I have added these sections:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#update-1\"\u003eOld code still works\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#update-2\"\u003eObserved properties no longer require initial values\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#update-3\"\u003e\u003ccode\u003e@Environment\u003c/code\u003e properties cannot be used for bindings.\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"observation\"\u003e\n  Observation\n  \u003ca href=\"#observation\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eIn the WWDC talk on \u003ca href=\"https://developer.apple.com/wwdc23/10149\"\u003eDiscover Observation in SwiftUI\u003c/a\u003e, Apple showed the following flow chart:\u003c/p\u003e\n\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n\u003c/style\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/apple_data_flow.jpeg\" alt=\"Apple\u0026rsquo;s flow chart\"\u003e\u003c/p\u003e\n\u003cp\u003eThis is a good starting point, but I feel that it leaves out a few cases, so I\u0026rsquo;ve made my own:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/my_data_flow.png\" alt=\"My flow chart\"\u003e\u003c/p\u003e\n\u003cp\u003eApart from adding some details to the decisions points, there are really only two additions to my chart:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIf a property doesn\u0026rsquo;t need to change, it can be a \u003ccode\u003elet\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@Bindable\u003c/code\u003e only works for classes. The equivalent for structs or primitive data types is still \u003ccode\u003e@Binding\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe new macros system removes this protocol and property wrappers:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eObservableObject\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@ObservedObject\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@EnvironmentObject\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@Published\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThat\u0026rsquo;s a lot of typing we don\u0026rsquo;t have to do any more!\u003c/p\u003e\n\u003ch4 id=\"update-1\"\u003e\n  UPDATE 1:\n  \u003ca href=\"#update-1\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cp\u003eI didn\u0026rsquo;t make it clear originally, but all these property wrappers still work, and you can still use \u003ccode\u003e@Binding\u003c/code\u003e for classes, so you can adapt to the new Observation code incrementally. The Apple developer site has a very useful article on \u003ca href=\"https://developer.apple.com/documentation/swiftui/migrating-from-the-observable-object-protocol-to-the-observable-macro\"\u003emigrating from ObservableObject\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"#top\"\u003eBack to Top\u003c/a\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"sample-app\"\u003e\n  Sample app\n  \u003ca href=\"#sample-app\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eMy sample app demonstrates the following data flow options:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/data_flow_types.png\" alt=\"Sample app options\"\u003e\u003c/p\u003e\n\u003cp\u003eThe code is available on \u003ca href=\"https://github.com/trozware/swiftui-data-flow-2023\"\u003eGitHub\u003c/a\u003e and I recommend you download the project and  follow along. It requires macOS 14 and Xcode 15. Currently I\u0026rsquo;m using macOS 14.0 beta 3 (23A5286g) and Xcode 15.0 beta 3 (15A5195k), but I will update this article with any changes as we work through the beta cycle.\u003c/p\u003e\n\u003cp\u003eBecause Xcode 15 now supports live previews for Mac apps, you can test all the options from inside Xcode. In the Project navigator, expand the numbered groups and preview the first file in each group to view and interact with that data flow type.\u003c/p\u003e\n\u003cp\u003eOr go to the Bookmarks navigator where I\u0026rsquo;ve used the new bookmaking system to provide quick links to each one. You can even check off each one as you finish that section.\u003c/p\u003e\n\u003cp\u003eIn the code snippets below, I include the essentials, but strip out most display modifiers and some similar views to keep the code short. The project contains the complete code.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"#top\"\u003eBack to Top\u003c/a\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"property\"\u003e\n  Property\n  \u003ca href=\"#property\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThe first option is using a static property. We get so caught up in property wrappers that it\u0026rsquo;s easy to forget that SwiftUI doesn\u0026rsquo;t always need them. Using static text from a constant may seem like a simplistic and obvious example, but separating it out allows for localization or re-usability as well as making the view body neater and easier to read.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eProperty\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// static property that never changes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e greeting = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello from SwiftUI!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Using the property directly in a View\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Text(greeting)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eMy flow chart shows two use cases for \u003ccode\u003elet\u003c/code\u003e. This covers the first one where the view owns the property. The second is when a parent supplies the property to a view but the child view never changes the property. You\u0026rsquo;ll see an example of this later on in this article.\u003c/p\u003e\n\u003cp\u003eA parent view may have some dynamic data that it uses to set properties in a subview where the subview only needs to display the data statically. This data will still change as the parent view changes but the subview will not be able to change the data itself or in the parent view.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIf a view owns a property or gets it from a parent but doesn\u0026rsquo;t need to change it, use \u003ccode\u003elet\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003ca href=\"#top\"\u003eBack to Top\u003c/a\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"state\"\u003e\n  @State\n  \u003ca href=\"#state\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThis is where things start to get interesting in the SwiftUI world. SwiftUI views are contained in structs, so are non-mutable. Also, views are re-created every time the data changes, so any properties are re-created then too. By marking a property with the \u003ccode\u003e@State\u003c/code\u003e property wrapper, you are telling SwiftUI that you want it to keep this data in a separate portion of memory, allow it to be mutated, and preserve the current value during view refreshes.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUsingState\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Using @State as this view owns and can mutate the property\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  @State \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e counter = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Displaying and editing @State property\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    VStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Counter = \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003ecounter\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      Button(action: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        counter \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }, label: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Image(systemName: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;plus.circle\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      })\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn this example, the \u003ccode\u003ecounter\u003c/code\u003e property uses \u003ccode\u003e@State\u003c/code\u003e. The text view displays it and the \u003ccode\u003eButton\u003c/code\u003e view can change it. The button\u0026rsquo;s action changes the counter which causes the view to redraw in order to display the new value, but the value of the \u003ccode\u003e@State\u003c/code\u003e property does not get reset to 0 every time.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhenever a view owns the property and that property is mutable, declare it using the \u003ccode\u003e@State\u003c/code\u003e property wrapper.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003ca href=\"#top\"\u003eBack to Top\u003c/a\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"binding\"\u003e\n  @Binding\n  \u003ca href=\"#binding\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThe Apple flow chart mentioned \u003ccode\u003e@Bindable\u003c/code\u003e but that only works with observable classes. For connecting structures or primitive data types to subviews, use \u003ccode\u003e@Binding\u003c/code\u003e. Apple does this internally for controls like \u003ccode\u003eToggle\u003c/code\u003e and \u003ccode\u003eTextField\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eA problem with building SwiftUI views is that it is very easy to end up with a gigantic \u003cem\u003ePyramid of Doom\u003c/em\u003e as you embed views within views within views. Extracting subviews is a great solution, but then you need a way to pass the data to a subview in a way that allows the subview to edit that property \u003cstrong\u003eand\u003c/strong\u003e have the edits flow back to the parent.\u003c/p\u003e\n\u003cp\u003eThis is where \u003ccode\u003e@Binding\u003c/code\u003e and \u003ccode\u003e@Bindable\u003c/code\u003e come into play.\u003c/p\u003e\n\u003cp\u003eThe \u003cstrong\u003eBinding 1\u003c/strong\u003e example uses a primitive data type - in this case an \u003ccode\u003eInt\u003c/code\u003e. The parent \u003ccode\u003eNumbers\u003c/code\u003e view declares it using \u003ccode\u003e@State\u003c/code\u003e because it owns the property, and it displays the value. The \u003ccode\u003eNumbers\u003c/code\u003e view passes the property to the \u003ccode\u003eNumberChooser\u003c/code\u003e subview as an \u003ccode\u003e@Binding\u003c/code\u003e property by using the \u003ccode\u003e$\u003c/code\u003e prefix.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNumbers\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Using @State as this view owns and can mutate the property\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  @State \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e stepperValue = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    VStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#75715e\"\u003e// Display @State property\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Parent view value = \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003estepperValue\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#75715e\"\u003e// Pass to subview as a Binding ($) for two-way editing\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      NumberChooser(stepperValue: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003estepperValue)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003eNumberChooser\u003c/code\u003e subview has this property marked with \u003ccode\u003e@Binding\u003c/code\u003e. It has no initial value as this view expects to receive the value from its parent view. \u003ccode\u003eNumberChooser\u003c/code\u003e has a \u003ccode\u003eStepper\u003c/code\u003e for changing the value of the property. It displays the value after each change and you can see that the value displayed in the parent view also changes as the change flows back.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNumberChooser\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Using value from parent with 2-way binding\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  @Binding \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e stepperValue: Int\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    VStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#75715e\"\u003e// Using bound state from parent with 2-way binding\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      Stepper(value: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003estepperValue, \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e0.\u003c/span\u003e..\u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Value in child = \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003estepperValue\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#75715e\"\u003e// Using bound state from parent as property\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#75715e\"\u003e// this view cannot change the value\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      NumberBlock(stepperValue: stepperValue)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003eNumberChooser\u003c/code\u003e has its own subview - \u003ccode\u003eNumberBlock\u003c/code\u003e. This is purely a display view that never edits the value. \u003ccode\u003eNumberChooser\u003c/code\u003e passes it the value and it stores it as a \u003ccode\u003elet\u003c/code\u003e. Whenever the value changes, SwiftUI redraws the view with the new value, and the display updates. This demonstrates the second use of \u003ccode\u003elet\u003c/code\u003e that I talked about in the property section. There is no need to make this a \u003ccode\u003evar\u003c/code\u003e because it doesn\u0026rsquo;t change - it gets re-created with every update.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNumberBlock\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// As this view never changes the value, there is no need to bind it\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e stepperValue: Int\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Image(systemName: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003estepperValue\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e.square\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"#top\"\u003eBack to Top\u003c/a\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"binding-for-a-structure\"\u003e\n  @Binding for a Structure\n  \u003ca href=\"#binding-for-a-structure\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThe previous example showed how to use \u003ccode\u003e@Binding\u003c/code\u003e for a primitive data type like \u003ccode\u003eInt\u003c/code\u003e, \u003ccode\u003eString\u003c/code\u003e etc. But bindings also work for any value type, including structures, and that\u0026rsquo;s what you can see in \u003cstrong\u003eBinding 2\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eWhile this is not very common, I enjoyed writing this example for a couple of reasons. Firstly, it shows how to draw the UI based on the different cases in an enum. Check out \u003cstrong\u003ePizza.swift\u003c/strong\u003e which has three enums. Each of the picker views loops through one of these enums to draw the view.\u003c/p\u003e\n\u003cp\u003eSecondly, it demonstrates how you can pass portions of the data model to a subview, instead of sending everything everywhere.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ePizzaView\u003c/code\u003e has a \u003ccode\u003ePizza\u003c/code\u003e property declared using \u003ccode\u003e@State\u003c/code\u003e because this view owns the data. It draws a \u003ccode\u003eForm\u003c/code\u003e containing three different pickers. Each picker gets a binding to one of the properties of the pizza. A \u003ccode\u003eText\u003c/code\u003e view shows the assembled data to confirm that the parent knows about any changes.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePizzaView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Using @State for a struct\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  @State \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e pizza = Pizza()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    VStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      Form {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Using 2-way binding but each component\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// only needs 1 property from the struct\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        PizzaNamePicker(selectedPizzaName: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003epizza.name)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        PizzaSizePicker(selectedPizzaSize: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003epizza.size)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        PizzaCrustPicker(selectedPizzaCrust: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003epizza.crust)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#75715e\"\u003e// Text representation to prove that the\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#75715e\"\u003e// subviews are modifying the parent struct\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      Text(pizza.pizzaSelection)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI won\u0026rsquo;t show the code for all of the pickers, but here\u0026rsquo;s the one to select the size:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePizzaSizePicker\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// A single property of the Pizza struct is passed hare.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// It\u0026#39;s a Binding so data flows 2 ways.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  @Binding \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e selectedPizzaSize: PizzaSize\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Section(header: Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Select your size:\u0026#34;\u003c/span\u003e).font(.headline)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      Picker(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e, selection: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003eselectedPizzaSize) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ForEach(PizzaSize.allCases, id: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\\\u003c/span\u003e.\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e) { pizzaSize \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          Text(pizzaSize.rawValue.capitalized)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .pickerStyle(.segmented)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote\u003e\n\u003cp\u003eIf you\u0026rsquo;re passing a primitive data type or a struct to a subview, and the subview can change the value of this property, use \u003ccode\u003e@Binding\u003c/code\u003e in the subview and pass the property with a \u003ccode\u003e$\u003c/code\u003e prefix.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003ca href=\"#top\"\u003eBack to Top\u003c/a\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"observable-and-bindable\"\u003e\n  @Observable and @Bindable\n  \u003ca href=\"#observable-and-bindable\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eSo far, the examples have been largely the same as before. Now the new property wrappers appear. The first big change is in the model class: \u003ccode\u003eColorSet\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSwiftUI\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eObservation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@Observable \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eColorSet\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Observable class\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// The color components are not private so any changes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// get published to the views that are observing\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e foregroundRed = \u003cspan style=\"color:#ae81ff\"\u003e0.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e foregroundGreen = \u003cspan style=\"color:#ae81ff\"\u003e0.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e foregroundBlue = \u003cspan style=\"color:#ae81ff\"\u003e0.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Computed variables to create the RGB colors from the components\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e foregroundColor: Color {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e Color(red: foregroundRed, green: foregroundGreen, blue: foregroundBlue)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe first thing to notice is the new import: \u003ccode\u003eObservation\u003c/code\u003e. This is the library that supports the new \u003ccode\u003e@Observable\u003c/code\u003e macro. Previously, \u003ccode\u003eColorSet\u003c/code\u003e conformed to the \u003ccode\u003eObservableObject\u003c/code\u003e protocol and the properties that needed to be observed were marked with the \u003ccode\u003e@Published\u003c/code\u003e property wrapper.\u003c/p\u003e\n\u003cp\u003eNow the class uses the \u003ccode\u003e@Observable\u003c/code\u003e macro and any property that isn\u0026rsquo;t private, is automatically published. This is only available for classes, not structures.\u003c/p\u003e\n\u003ch4 id=\"update-2\"\u003e\n  UPDATE 2:\n  \u003ca href=\"#update-2\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cp\u003e\u003cdel\u003eThe properties must all have an initial value - setting them in an \u003ccode\u003einit\u003c/code\u003e is not sufficient and will not build.\u003c/del\u003e\u003c/p\u003e\n\u003cp\u003eIn beta 3, observed properties no longer require an initial value. For this class, I actually want to specify initial values, but in the next section, I do not.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eIf you want a look at what\u0026rsquo;s happening inside the macro, right-click on \u003ccode\u003e@Observable\u003c/code\u003e and select \u003cstrong\u003eExpand Macro\u003c/strong\u003e. When you\u0026rsquo;ve finished, right -click again and choose \u003cstrong\u003eHide Macro Expansion\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/show_macro.png\" alt=\"Expand the macro\"\u003e\u003c/p\u003e\n\u003cp\u003eWhile this is not something I can read comfortably, it shows how macros are regular Swift code that saves a lot of typing, but are not doing magical things invisibly in the background.\u003c/p\u003e\n\u003cp\u003eNow that the model uses the new macro, how do we use it?\u003c/p\u003e\n\u003cp\u003eAgain, the owning view declares it using \u003ccode\u003e@State\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eColorSetView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Using an Observable for reference-based data (classes)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  @State \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e colorSet = ColorSet()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// ...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003eColorSetView\u003c/code\u003e uses the data to add color modifiers to the view background and to a system image of a cat.\u003c/p\u003e\n\u003cp\u003eBut the next change is when sending the data to the \u003ccode\u003eColorChooser\u003c/code\u003e view. This needs two-way binding so the current values can be passed to the chooser and any changes can be passed back. But with the new Observation methods, this uses \u003ccode\u003e@Bindable\u003c/code\u003e and not \u003ccode\u003e@Binding\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eFirst, the \u003ccode\u003eColorChooser\u003c/code\u003e gets the \u003ccode\u003ecolorSet\u003c/code\u003e property, but this doesn\u0026rsquo;t need the \u003ccode\u003e$\u003c/code\u003e prefix.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eColorChooser(colorSet: colorSet)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003eColorChooser\u003c/code\u003e view receives it as \u003ccode\u003e@Bindable\u003c/code\u003e and can in turn, pass it down to its subviews, again using the \u003ccode\u003e@Bindable\u003c/code\u003e technique which requires no \u003ccode\u003e$\u003c/code\u003e prefixes.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eColorChooser\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  @Bindable \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e colorSet: ColorSet\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// The chooser subview also get passed the Observed\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ForeColorChooser(colorSet: colorSet)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"/images/color_chooser.png\" alt=\"Color chooser\"\u003e\u003c/p\u003e\n\u003cp\u003eThere is one oddity to beware of. When declaring the original \u003ccode\u003ecolorSet\u003c/code\u003e property, I use \u003ccode\u003e@State\u003c/code\u003e but if I declare it as a simple \u003ccode\u003evar\u003c/code\u003e, the app still works. Don\u0026rsquo;t do this!\u003c/p\u003e\n\u003cp\u003eIf you remember the older code style, the owning view initialized an \u003ccode\u003eObservableObject\u003c/code\u003e using \u003ccode\u003e@StateObject\u003c/code\u003e. Subsequent views declared the same property using \u003ccode\u003e@ObservedObject\u003c/code\u003e but it was very important for the owning view to use \u003ccode\u003e@StateObject\u003c/code\u003e to avoid strange and difficult to trace bugs. The app worked if you used \u003ccode\u003e@ObservedObject\u003c/code\u003e instead of \u003ccode\u003e@StateObject\u003c/code\u003e for the original declaration, but then odd things could happen.\u003c/p\u003e\n\u003cp\u003eI think this is the same, and it\u0026rsquo;s just as important for the owning view to declare the original property using  \u003ccode\u003e@State\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"#top\"\u003eBack to Top\u003c/a\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"observable-and-bindable-list\"\u003e\n  @Observable and @Bindable List\n  \u003ca href=\"#observable-and-bindable-list\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eIn the original post, this was the section that gave me the most trouble - having a list of data objects where each one could be edited and updating the original list to show the edits.\u003c/p\u003e\n\u003cp\u003eThis is now a lot easier, although it took me some time to realize this.\u003c/p\u003e\n\u003cp\u003eI have a sample data file and a \u003ccode\u003ePerson\u003c/code\u003e model class using \u003ccode\u003e@Observable\u003c/code\u003e. The \u003ccode\u003ePersonListModel\u003c/code\u003e class holds an array of these \u003ccode\u003ePerson\u003c/code\u003e objects and it also uses \u003ccode\u003e@Observable\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eI wanted to make the selection of the list point directly to a \u003ccode\u003ePerson\u003c/code\u003e instead of going through an \u003ccode\u003eid\u003c/code\u003e, so I added this extension to \u003ccode\u003ePerson\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eextension\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePerson\u003c/span\u003e: Hashable, Equatable {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehash\u003c/span\u003e(into hasher: \u003cspan style=\"color:#66d9ef\"\u003einout\u003c/span\u003e Hasher) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    hasher.combine(id)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e ==(lhs: Person, rhs: Person) -\u0026gt; Bool {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    lhs.id == rhs.id\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen I was able to set up a \u003ccode\u003eList\u003c/code\u003e to display the names of the people, with the list\u0026rsquo;s selection bound to an optional \u003ccode\u003ePerson\u003c/code\u003e. I had to add a \u003ccode\u003etag\u003c/code\u003e to the person, I presume the tag is set to the \u003ccode\u003eid\u003c/code\u003e by default.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eList(selection: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003eselectedPerson) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  ForEach(\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003epersonList.persons) { \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003eperson \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Text(person.fullName)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .tag(person)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTwo important things to see in this code snippet:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe contents of the \u003ccode\u003eForEach\u003c/code\u003e is a binding as you can see from the \u003ccode\u003e$\u003c/code\u003e prefix\u003c/li\u003e\n\u003cli\u003eThe argument passed in to each entry in the list is also a binding.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese two bindings make the list respond to edits.\u003c/p\u003e\n\u003cp\u003eWith this in place, it was time to think about an editor and I decided to try out the new inspector. Unfortunately, unlike with sheets, you can only trigger an inspector with a Boolean so I added an event listener to set the inspector trigger:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.onChange(of: selectedPerson, { oldValue, newValue \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  shouldShowInspector = newValue \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAfter that, I added this inspector modifier:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.inspector(isPresented: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003eshouldShowInspector) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e selectedPerson {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    PersonEditView(person: selectedPerson)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eEven though \u003ccode\u003eshouldShowInspector\u003c/code\u003e is only true when there is a valid \u003ccode\u003eselectedPerson\u003c/code\u003e, force unwrapping causes a crash as it appears that the inspector tries to draw itself off-screen on launch.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003ePersonEditView\u003c/code\u003e in the inspector receives the person as \u003ccode\u003e@Bindable\u003c/code\u003e and populates the fields on a form. And editing the data flows right back to the list.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/person_edit.mp4\" alt=\"Editing a person\"\u003e\u003c/p\u003e\n\u003cp\u003eThis took a lot less code than the previous version. Part of the improvement was the ability to use bindings in a list, which we got last year, but another big part was using the \u003ccode\u003ePerson\u003c/code\u003e directly as the selection. This needs the \u003ccode\u003eHashable\u003c/code\u003e and  \u003ccode\u003eEquatable\u003c/code\u003e conformance, which I think should be a standard part of \u003ccode\u003eIdentifiable\u003c/code\u003e, but once that\u0026rsquo;s in place, all the data flows smoothly.\u003c/p\u003e\n\u003cp\u003eIf I was using a sheet for the editor, it would be even neater as I could tie the sheet\u0026rsquo;s appearance to \u003ccode\u003eselectedPerson\u003c/code\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhen you have a model class and you want changes to be published, declare the class with the \u003ccode\u003e@Observable\u003c/code\u003e macro. The owning view declares the model using \u003ccode\u003e@State\u003c/code\u003e and can pass it to editing subviews using \u003ccode\u003e@Bindable\u003c/code\u003e or to display subviews as \u003ccode\u003elet\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003ca href=\"#top\"\u003eBack to Top\u003c/a\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"environment\"\u003e\n  @Environment\n  \u003ca href=\"#environment\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThe last section is \u003ccode\u003eEnvironment\u003c/code\u003e, which again, has changed a lot. The benefit of using Environment is that the data flow doesn\u0026rsquo;t have to be unbroken. In the sample app, the parent view (NestedViews) uses the Environment property and so does the GrandChildView, but the ChildView in the middle doesn\u0026rsquo;t.\u003c/p\u003e\n\u003cp\u003eSetting up a property for Environment is the same as for Observable.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eObservation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// An Environment class is just like any Observable class\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@Observable \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUserSettings\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e isLoggedIn: Bool = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe difference is in the way that you use it. When creating the first view that needs this environment value, use an \u003ccode\u003eenvironment\u003c/code\u003e modifier to inject the initial value. In the sample app, this happens in \u003cstrong\u003eDataLink.swift\u003c/strong\u003e which displays the view for each example.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNestedViews()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  .environment(UserSettings())\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTo access this property, declare an \u003ccode\u003eEnvironment\u003c/code\u003e property with a key path, which is its type, in this case \u003ccode\u003eUserSettings.self\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNestedViews\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// The injected environment property is accessed by type and assigned a name\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  @Environment(UserSettings.\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e userSettings\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// ...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis is similar the way we use built-in environment values like \u003ccode\u003ecolorScheme\u003c/code\u003e, \u003ccode\u003eopenWindow\u003c/code\u003e and so on. Use this same declaration in any view that needs access.\u003c/p\u003e\n\u003cp\u003ePreviews need to get access too, like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e#Preview {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// The environment object must be injected into the preview too.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  NestedViews()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .environment(UserSettings())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd even though ChildView doesn\u0026rsquo;t use the environment object, because its preview contains GrandChildView that does, it also needs the \u003ccode\u003eenvironment\u003c/code\u003e modifier in its preview, but not in the main view code.\u003c/p\u003e\n\u003cp\u003eIn the sample app, the various nested views are brightly colored to show which is which. Using the \u003cstrong\u003eLog In\u003c/strong\u003e or \u003cstrong\u003eLog Out\u003c/strong\u003e buttons works on either the outer view or the inner view with the data being synced between them.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/environment.png\" alt=\"Environment\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIf you have a class that is global to your app, like UserSettings in this example, declare the class with the \u003ccode\u003e@Observable\u003c/code\u003e macro. Inject it into your view hierarchy using \u003ccode\u003e.environment\u003c/code\u003e and then use \u003ccode\u003e@Enviroment\u003c/code\u003e to access it.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 id=\"update-3\"\u003e\n  UPDATE 3:\n  \u003ca href=\"#update-3\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cp\u003eThere is one aspect of using \u003ccode\u003e@Enviroment\u003c/code\u003e where things get tricky, and that\u0026rsquo;s if you need to use any properties of the environment object as bindings for other controls.\u003c/p\u003e\n\u003cp\u003eI added a \u003ccode\u003eToggle\u003c/code\u003e to \u003ccode\u003eGrandChildView\u003c/code\u003e and wanted to connect it to the same \u003ccode\u003euserSettings.isLoggedIn\u003c/code\u003e Boolean. A toggle takes a binding, so normally, I\u0026rsquo;d do this by adding the \u003ccode\u003e$\u003c/code\u003e prefix to the property to bind.\u003c/p\u003e\n\u003cp\u003eWith \u003ccode\u003e@Environment\u003c/code\u003e, this gives an error:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/env_binding.png\" alt=\"Binding error\"\u003e\u003c/p\u003e\n\u003cp\u003eThe solution is to create an intermediary \u003ccode\u003e@Bindable\u003c/code\u003e property from the \u003ccode\u003e@Environment\u003c/code\u003e property and bind it to the toggle (or any control that needs a binding).\u003c/p\u003e\n\u003cp\u003eStripping out a lot of what was there, the code becomes:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGrandChildView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  @Environment(UserSettings.\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e userSettings\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Bindable \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e userSettingsBindable = userSettings\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Toggle(isOn: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003euserSettingsBindable.isLoggedIn, label: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Log In Status\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    })\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou declare the \u003ccode\u003e@Environment\u003c/code\u003e property as usual, then \u003cstrong\u003einside\u003c/strong\u003e the \u003ccode\u003ebody\u003c/code\u003e, declare an \u003ccode\u003e@Bindable\u003c/code\u003e property with the value from the \u003ccode\u003e@Environment\u003c/code\u003e property. You have to do this inside the body because doing it outside gives an error.\u003c/p\u003e\n\u003cp\u003eSurprisingly, I didn\u0026rsquo;t have to add a \u003ccode\u003ereturn\u003c/code\u003e before the Toggle, even though it was no longer the only statement in the body.\u003c/p\u003e\n\u003cp\u003eThanks to \u003ca href=\"https://iosdev.space/@StewartLynch\"\u003eStewart Lynch\u003c/a\u003e for suggesting I add this. Hopefully it will be fixed soon but until then, this is the workaround.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"#top\"\u003eBack to Top\u003c/a\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"wrapping-up\"\u003e\n  Wrapping Up\n  \u003ca href=\"#wrapping-up\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThere are two issues I want to discuss before ending.\u003c/p\u003e\n\u003cp\u003eFirst is the use of \u003ccode\u003eprivate\u003c/code\u003e for view properties. Apple recommends marking every \u003ccode\u003e@State\u003c/code\u003e property as \u003ccode\u003eprivate\u003c/code\u003e. It seems a bit strange as you then pass them around and sometimes the subviews change the data, but it means that no object can edit the value unless the view has expressly given permission. I presume there are security and performance benefits to this.\u003c/p\u003e\n\u003cp\u003eSimilarly, \u003ccode\u003e@Enviroment\u003c/code\u003e properties can (and I presume, should) be private. The two binding property wrappers do not allow their properties to be private.\u003c/p\u003e\n\u003cp\u003eAnd lastly, in \u003ccode\u003e@Observable\u003c/code\u003e classes, everything that is \u003cstrong\u003eNOT\u003c/strong\u003e private is published. This is the opposite to what we had before where you had to explicItly state which properties were published. So mark properties as \u003ccode\u003eprivate\u003c/code\u003e if they should not be published.\u003c/p\u003e\n\u003cp\u003eThe other issue is to do with using \u003ccode\u003evar\u003c/code\u003e on its own i.e. without any property wrapper. The Apple flow chart suggests doing this if you get to the end of the flow without making any other decision, but I think you should use \u003ccode\u003elet\u003c/code\u003e in this case. The only time I use a plain \u003ccode\u003evar\u003c/code\u003e in a view is for computed properties, otherwise I use \u003ccode\u003elet\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIn my flow chart, I left the appropriate end point showing \u003cstrong\u003evar or let\u003c/strong\u003e, to better match Apple\u0026rsquo;s, but I recommend using \u003ccode\u003elet\u003c/code\u003e and only changing to \u003ccode\u003evar\u003c/code\u003e if Xcode complains. This is a good rule for any Swift code, not just SwiftUI.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eThis article may get several updates before we exit this years beta cycle, but I thought other people might find it useful. Writing it certainly helped clarify the new options in my head.\u003c/p\u003e\n\u003cp\u003eIf you have any suggestions, ideas or corrections, please contact me using one of the links below or through the \u003ca href=\"/contact/\"\u003eContact\u003c/a\u003e page. And if you found this article useful, I\u0026rsquo;d love you to \u003ca href=\"https://ko-fi.com/trozware\"\u003ebuy me a coffee\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"#top\"\u003eBack to Top\u003c/a\u003e\u003c/p\u003e"
    },
    {
        "title" : "macOS Apprentice",
        "date_published" : "2023-06-29T09:48:37+10:00",
        "date_modified" : "2023-06-29T09:48:37+10:00",
        "id" : "https://troz.net/post/2023/macos_book_2/",
        "url" : "https://troz.net/post/2023/macos_book_2/",
        "content_html" : "\u003cp\u003eI\u0026rsquo;ve written another book! This one is for people who want to get started in macOS development and here it is: \u003ca href=\"https://www.kodeco.com/books/macos-apprentice/v1.0\"\u003emacOS Apprentice\u003c/a\u003e, published by \u003ca href=\"https://www.kodeco.com/\"\u003ekodeco.com\u003c/a\u003e (formerly raywenderlich.com).\u003c/p\u003e\n\u003cp\u003eIf you’re a beginner or near-beginner who wants to start learning Swift, SwiftUI and AppKit for building Mac apps, then this is the book for you.\u003c/p\u003e\n\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n\u003c/style\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/book_cover_2.png\" alt=\"Book Cover\"\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"contents\"\u003e\n  Contents\n  \u003ca href=\"#contents\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThe book consists of four sections:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSection 1\u003c/strong\u003e: Install Xcode and learn the basics of programming in Swift. Experiment with several different ways to execute Swift code on your Mac.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSection 2\u003c/strong\u003e: Use SwiftUI to develop a word-guessing game called Snowman. Learn about data flow in SwiftUI, managing multiple windows, using charts and adding macOS-specific features such as toolbars and menus.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSection 3\u003c/strong\u003e: There are still a number of tasks where AppKit works better than SwiftUI. In this section, build an AppKit app to browse movie data from IMDb, the online movie database.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSection 4\u003c/strong\u003e: Add AppKit to your SwiftUI app and add SwiftUI to your AppKit app in order to add some finishing touches to both of the apps from the previous sections.\u003c/p\u003e\n\u003cp\u003eYou can read more details of the book contents in the \u003ca href=\"https://www.kodeco.com/books/macos-apprentice/v1.0/chapters/v-introduction\"\u003eIntroduction\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIf you are a more experienced iOS developer who wants to branch out into macOS development, then my previous book - \u003ca href=\"https://www.kodeco.com/books/macos-by-tutorials\"\u003emacOS by Tutorials\u003c/a\u003e - might be a better fit, although I think you could still learn a lot of Mac app tips and tricks from this one.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"where-can-you-read-the-book\"\u003e\n  Where can you read the book?\n  \u003ca href=\"#where-can-you-read-the-book\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eYou can read it online at \u003ca href=\"https://www.kodeco.com/books/macos-apprentice/v1.0\"\u003ekodeco.com\u003c/a\u003e as part of a Kodeco subscription.\u003c/li\u003e\n\u003cli\u003eYou can download an ebook (ePub or pdf) at the same page if you have a subscription or buy one there if you don\u0026rsquo;t.\u003c/li\u003e\n\u003cli\u003eThe paperback is available at \u003ca href=\"https://www.amazon.com/dp/1950325865?\u0026amp;linkCode=sl1\u0026amp;tag=kodeco-20\u0026amp;linkId=66080845dc88e8300c02194f4516961a\u0026amp;language=en_US\u0026amp;ref_=as_li_ss_tl\"\u003eAmazon\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAll the code and extra materials for the book can be downloaded or cloned from \u003ca href=\"https://github.com/kodecocodes/maca-materials/tree/editions/1.0\"\u003eGitHub\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eFor support, to ask questions or to report any errors, please go to the \u003ca href=\"https://forums.kodeco.com/c/books/macos-apprentice/107\"\u003eforum\u003c/a\u003e.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"thanks-to\"\u003e\n  Thanks to\u0026hellip;\n  \u003ca href=\"#thanks-to\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThis book was made possible by an awesome team. There were a lot of people involved, but I want to give special thanks to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.kodeco.com/u/rcritz\"\u003eRichard Critz\u003c/a\u003e, the wonderful editor who had the unenviable task of fixing my grammar.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.kodeco.com/u/audrey\"\u003eAudrey Tam\u003c/a\u003e and \u003ca href=\"https://www.kodeco.com/u/ehabamer\"\u003eEhab Amer\u003c/a\u003e were the amazing tech editors who had to make sure that it all worked. Audrey also contributed the first chapter on installing and setting up Xcode.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe whole team at \u003ca href=\"https://www.kodeco.com/\"\u003eKodeco\u003c/a\u003e was great, so a huge thanks to them all. I hope they enjoyed working on the book as much as I did! It\u0026rsquo;s wonderful to have such a supportive group working to make my content as good as it can be.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"feedback\"\u003e\n  Feedback\n  \u003ca href=\"#feedback\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eI would love to hear from anyone who read the book, loved it, hated it, found an error or just wanted to say hello.\u003c/p\u003e\n\u003cp\u003eYou can contact me directly using any of the contact links at the bottom of this page or through the \u003ca href=\"/contact/\"\u003eContact\u003c/a\u003e page.\u003c/p\u003e"
    },
    {
        "title" : "Sparkle",
        "date_published" : "2023-04-11T11:48:38+10:00",
        "date_modified" : "2023-04-11T11:48:38+10:00",
        "id" : "https://troz.net/post/2023/sparkle/",
        "url" : "https://troz.net/post/2023/sparkle/",
        "content_html" : "\u003cp\u003eLast month, I posted about writing my new todo app called \u003ca href=\"/post/2023/to-day/\"\u003eTo-Day\u003c/a\u003e: why I wrote it and how I wrote it. At the time, I mentioned that I had set it up to install updates using \u003ca href=\"https://sparkle-project.org\"\u003eSparkle\u003c/a\u003e but there was too much detail  to include in the initial post. So here, as promised, is the article about implementing Sparkle.\u003c/p\u003e\n\u003cp\u003eOne of the great conveniences of App Store distribution is the update handling. When (or if) an update passes the app review process, Apple does the rest, propagating updates through the App Store app. If you\u0026rsquo;re distributing your apps externally, you need an alternative method.\u003c/p\u003e\n\u003cp\u003eSparkle is an open-source update framework for macOS. It\u0026rsquo;s very popular and I\u0026rsquo;m sure you will have seen it used, even if you didn\u0026rsquo;t recognise it. But setting it up isn\u0026rsquo;t totally straight-forward, at least I didn\u0026rsquo;t find it so, which I why I\u0026rsquo;m using this post to document the process.\u003c/p\u003e\n\u003cp\u003eThe \u003ca href=\"https://sparkle-project.org/documentation/\"\u003eSparkle documentation\u003c/a\u003e is excellent and contains everything you need to know, but they allow for a wide range of use cases and configurations, which makes it difficult to follow at times. For this app, I have the following requirements:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSwiftUI app\u003c/li\u003e\n\u003cli\u003eSandboxed\u003c/li\u003e\n\u003cli\u003eInstall framework using Swift Package Manager\u003c/li\u003e\n\u003cli\u003eDistribution as a disk image\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis guide deals with those requirements only.\u003c/p\u003e\n\u003ch3 id=\"table-of-contents\"\u003e\n  Table of Contents\n  \u003ca href=\"#table-of-contents\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#installation\"\u003eInstallation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#adding-a-public-key-to-your-app\"\u003eAdding a Public Key to your App\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#checking-for-a-existing-key\"\u003eChecking for a Existing Key\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#creating-a-new-key\"\u003eCreating a New Key\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#installing-the-public-key\"\u003eInstalling the Public Key\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#sandboxing\"\u003eSandboxing\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#locating-the-updates\"\u003eLocating the Updates\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#coding-the-update-check\"\u003eCoding the Update Check\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#exporting-the-app\"\u003eExporting the App\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#making-a-disk-image\"\u003eMaking a Disk Image\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#generating-the-appcast-xml\"\u003eGenerating the appcast.xml\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#testing\"\u003eTesting\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#summary\"\u003eSummary\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"installation\"\u003e\n  Installation\n  \u003ca href=\"#installation\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eOpen your app in Xcode and select the project at the top of the project navigator. Click on the project itself in the next sidebar and then choose \u003cstrong\u003ePackage Dependencies\u003c/strong\u003e from the tabs across the top.\u003c/p\u003e\n\u003cp\u003eClick the \u003cstrong\u003e+\u003c/strong\u003e at the bottom of the list to add a new package. Enter this URL into the search field and when the package appears, click \u003cstrong\u003eAdd Package\u003c/strong\u003e.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ehttps://github.com/sparkle-project/Sparkle\n\u003c/code\u003e\u003c/pre\u003e\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n\u003c/style\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/sparkle_install.png\" alt=\"Install Sparkle\"\u003e\u003c/p\u003e\n\u003cp\u003eXcode will download the package and then show another dialog with the Sparkle library checked. Click \u003cstrong\u003eAdd Package\u003c/strong\u003e again to attach it to your project.\u003c/p\u003e\n\u003ch3 id=\"adding-a-public-key-to-your-app\"\u003e\n  Adding a Public Key to your App\n  \u003ca href=\"#adding-a-public-key-to-your-app\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThe next step depends on whether you\u0026rsquo;ve used Sparkle before. You need to create a private and public key pair for security reasons, but you can then use the same keys for all of your apps (I think).\u003c/p\u003e\n\u003ch4 id=\"checking-for-a-existing-key\"\u003e\n  Checking for a Existing Key\n  \u003ca href=\"#checking-for-a-existing-key\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cp\u003eTo check if you already have a key, open the \u003cstrong\u003eKeychain Access\u003c/strong\u003e app from Applications/Utilities. Search for \u003cstrong\u003esparkle\u003c/strong\u003e and if you have a key, you\u0026rsquo;ll see it listed. If you don\u0026rsquo;t find anything, skip ahead to the \u003ca href=\"#creating-a-new-key\"\u003enext section\u003c/a\u003e to create a new one.\u003c/p\u003e\n\u003cp\u003eDouble-click the key to show its details which conveniently includes the public key in the comments.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/sparkle_key.png\" alt=\"Existing Sparkle keys\"\u003e\u003c/p\u003e\n\u003cp\u003eSelect and copy the public key, then jump to \u003ca href=\"#installing-the-public-key\"\u003eInstalling the Public Key\u003c/a\u003e.\u003c/p\u003e\n\u003ch4 id=\"creating-a-new-key\"\u003e\n  Creating a New Key\n  \u003ca href=\"#creating-a-new-key\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cp\u003eIf you don\u0026rsquo;t already have a key pair, you\u0026rsquo;ll use one of Sparkle\u0026rsquo;s tools to create it.\u003c/p\u003e\n\u003cp\u003eBack in Xcode, right-click on Sparkle in the project navigator and select \u003cstrong\u003eShow in Finder\u003c/strong\u003e which opens a folder buried deep in your Library. Press \u003cstrong\u003eCommand-3\u003c/strong\u003e to show the folder in Columns mode and then click  the \u003cstrong\u003eartifacts\u003c/strong\u003e folder that\u0026rsquo;s one level above the Sparkle folder.\u003c/p\u003e\n\u003cp\u003eFrom there, navigate through \u003cstrong\u003esparkle\u003c/strong\u003e to \u003cstrong\u003eSparkle\u003c/strong\u003e where you\u0026rsquo;ll see a \u003cstrong\u003ebin\u003c/strong\u003e folder:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/sparkle_folder.png\" alt=\"Opening the Sparkle folder\"\u003e\u003c/p\u003e\n\u003cp\u003eOpen your preferred Terminal app and type \u003cstrong\u003ecd\u003c/strong\u003e followed by a \u003cstrong\u003espace\u003c/strong\u003e. Drag in the \u003cstrong\u003eSparkle\u003c/strong\u003e folder with the uppercase \u003cstrong\u003eS\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eThen enter and run this command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e./bin/generate_keys\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis generates the keys, saves them to your keychain and displays the public key. Copy the public key for use in the next section.\u003c/p\u003e\n\u003ch4 id=\"installing-the-public-key\"\u003e\n  Installing the Public Key\n  \u003ca href=\"#installing-the-public-key\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cp\u003eTo insert the key into your app, go back to Xcode and select the project and target. Choose \u003cstrong\u003eInfo\u003c/strong\u003e from the tabs at the top. Click the \u003cstrong\u003e+\u003c/strong\u003e blob that appears beside the last entry when you mouse over it, and type in the key name:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eSUPublicEDKey\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe type is String (which should be the default) and the value is the public key you just copied:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/sparkle_info_key.png\" alt=\"Adding the Sparkle public key\"\u003e\u003c/p\u003e\n\u003ch3 id=\"sandboxing\"\u003e\n  Sandboxing\n  \u003ca href=\"#sandboxing\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eMac apps are sandboxed by default, which quarantines their data into their own container and protects the rest of your system. Adding Sparkle to a sandboxed app requires some more steps, but if your app is not sandboxed, \u003ca href=\"#locating-the-updates\"\u003emove on to the next section\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eFirst, you need to give your app access to the internet, so it can retrieve the update information and download any updates.\u003c/p\u003e\n\u003cp\u003eIn the app\u0026rsquo;s target settings, select \u003cstrong\u003eSigning and Capabilities\u003c/strong\u003e and turn on \u003cstrong\u003eOutgoing Connections (Client)\u003c/strong\u003e:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/sparkle_connections.png\" alt=\"Sand-box connection setting\"\u003e\u003c/p\u003e\n\u003cp\u003eNext, add another setting to the target\u0026rsquo;s Info:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eKey\u003c/strong\u003e: SUEnableInstallerLauncherService\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eType\u003c/strong\u003e: Boolean\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eValue\u003c/strong\u003e: YES\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe next settings go into the \u003cstrong\u003e\u0026lt;Your-App-Name\u0026gt;.entitlements\u003c/strong\u003e file which you\u0026rsquo;ll find in the project navigator. Right-click the entitlements file and select \u003cstrong\u003eOpen As \u0026gt; Source Code\u003c/strong\u003e which makes it possible to paste in the next chunk.\u003c/p\u003e\n\u003cp\u003eJust before the last \u003ccode\u003e\u0026lt;/dict\u0026gt;\u003c/code\u003e, add a new line and insert:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026lt;key\u0026gt;\u003c/span\u003ecom.apple.security.temporary-exception.mach-lookup.global-name\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/key\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026lt;array\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e$(PRODUCT_BUNDLE_IDENTIFIER)-spks\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/string\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e$(PRODUCT_BUNDLE_IDENTIFIER)-spki\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/string\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026lt;/array\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow the app is configured to allow Sparkle to work with the Mac sandbox.\u003c/p\u003e\n\u003ch3 id=\"locating-the-updates\"\u003e\n  Locating the Updates\n  \u003ca href=\"#locating-the-updates\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eYou need to have an online location for the app and its update information. Since my To-Day app is on GitHub, I decided to use GitHub for distribution too, but I could have used this web site, AWS or any other online service. It\u0026rsquo;s best if it\u0026rsquo;s coming from an \u003cstrong\u003ehttps\u003c/strong\u003e server.\u003c/p\u003e\n\u003cp\u003eOpen my \u003ca href=\"https://github.com/trozware/To-Day\"\u003eGitHub repo\u003c/a\u003e and look at the file structure. The \u003cstrong\u003eReleases\u003c/strong\u003e folder has a disk image (dmg) containing the app and an XML file generated by Sparkle with the update information.\u003c/p\u003e\n\u003cp\u003eWork out where you\u0026rsquo;re going to put these two files for your app and find the exact URL for the \u003cstrong\u003eappcast.xml\u003c/strong\u003e file.\u003c/p\u003e\n\u003cp\u003eThis gives you the last piece of data that your app needs. Add another setting to your target\u0026rsquo;s Info:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eKey\u003c/strong\u003e: SUFeedURL\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eType\u003c/strong\u003e: String\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eValue\u003c/strong\u003e: \u003ca href=\"https://url-to-your-appcast.xml\"\u003ehttps://url-to-your-appcast.xml\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf you\u0026rsquo;re using GitHub, upload a fake file so you can get the URL, remembering to get the URL for the raw file, not its GitHub page.\u003c/p\u003e\n\u003ch3 id=\"coding-the-update-check\"\u003e\n  Coding the Update Check\n  \u003ca href=\"#coding-the-update-check\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eYou\u0026rsquo;ve done all the setup work now, but there\u0026rsquo;s nothing to trigger a check in the app. I copied and pasted most of the suggested code from the \u003ca href=\"https://sparkle-project.org/documentation/programmatic-setup/\"\u003eSparkle docs\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eFirst, I created a new file called \u003cstrong\u003eUpdater.swift\u003c/strong\u003e which contains:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSwiftUI\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSparkle\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// This view model class publishes when new updates can be checked by the user\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efinal\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCheckForUpdatesViewModel\u003c/span\u003e: ObservableObject {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  @Published \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e canCheckForUpdates = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003einit\u003c/span\u003e(updater: SPUUpdater) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    updater.publisher(\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\\\u003c/span\u003e.canCheckForUpdates)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .assign(to: \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003ecanCheckForUpdates)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// This is the view for the Check for Updates menu item\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Note this intermediate view is necessary for the disabled state on the menu item to work properly before Monterey.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// See https://stackoverflow.com/questions/68553092/menu-not-updating-swiftui-bug for more info\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCheckForUpdatesView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  @ObservedObject \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e checkForUpdatesViewModel: CheckForUpdatesViewModel\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e updater: SPUUpdater\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003einit\u003c/span\u003e(updater: SPUUpdater) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.updater = updater\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Create our view model for our CheckForUpdatesView\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.checkForUpdatesViewModel = CheckForUpdatesViewModel(updater: updater)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Button(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Check for Updates…\u0026#34;\u003c/span\u003e, action: updater.checkForUpdates)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .disabled(\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003echeckForUpdatesViewModel.canCheckForUpdates)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe comments are from the Sparkle team.\u003c/p\u003e\n\u003cp\u003eIn my To-Day app, I have an \u003ccode\u003eAppGroup\u003c/code\u003e view to provide the SwiftUI view for the last section of the menu that controls the app itself.\u003c/p\u003e\n\u003cp\u003eInside this view, I added an \u003ccode\u003eupdaterController\u003c/code\u003e property:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e updaterController = SPUStandardUpdaterController(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  startingUpdater: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  updaterDelegate: \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  userDriverDelegate: \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis required another \u003ccode\u003eimport Sparkle\u003c/code\u003e line at the top of this file.\u003c/p\u003e\n\u003cp\u003eTo trigger the update checker, I added \u003ccode\u003eCheckForUpdatesView\u003c/code\u003e as one of the views in the menu, providing it with this controller\u0026rsquo;s updater:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCheckForUpdatesView(updater: updaterController.updater)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"exporting-the-app\"\u003e\n  Exporting the App\n  \u003ca href=\"#exporting-the-app\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eNow that the app is coded, you need to export it from Xcode, signing it with your Developer ID and getting it notarised by Apple. This assumes that you have an Apple Developer account.\u003c/p\u003e\n\u003cp\u003eIn Xcode, select \u003cstrong\u003eArchive\u003c/strong\u003e from the \u003cstrong\u003eProduct\u003c/strong\u003e menu. This builds the app and opens the Organiser window. Click \u003cstrong\u003eDistribute App\u003c/strong\u003e, check \u003cstrong\u003eDeveloper ID\u003c/strong\u003e and click \u003cstrong\u003eNext\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eMake sure \u003cstrong\u003eUpload\u003c/strong\u003e is selected and click \u003cstrong\u003eNext\u003c/strong\u003e again. Choose \u003cstrong\u003eAutomatically manage signing\u003c/strong\u003e and click \u003cstrong\u003eNext\u003c/strong\u003e again. When the next dialog appears, click \u003cstrong\u003eUpload\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eThis sends the app off to Apple\u0026rsquo;s servers to be checked for malicious code. It\u0026rsquo;s not doing any app review, just checking for viruses etc.\u003c/p\u003e\n\u003cp\u003eIt may take a few minutes, but the app should then be notarised. You may have to go to another display in the Organiser and back again to force a display refresh so you can see this. If there is an error, click \u003cstrong\u003eShow Status Log\u003c/strong\u003e to see what went wrong.\u003c/p\u003e\n\u003cp\u003eAssuming all went well, click \u003cstrong\u003eExport Notarised App\u003c/strong\u003e and save it somewhere convenient.\u003c/p\u003e\n\u003cp\u003eIf you don\u0026rsquo;t have an Apple Developer account, select \u003cstrong\u003eCopy App\u003c/strong\u003e from the distribution dialog and save a folder containing the app. If a user has the default Gatekeeper settings on their Mac, they\u0026rsquo;ll need to right-click the app and select \u003cstrong\u003eOpen\u003c/strong\u003e to run it, after getting past a couple of warnings.\u003c/p\u003e\n\u003ch3 id=\"making-a-disk-image\"\u003e\n  Making a Disk Image\n  \u003ca href=\"#making-a-disk-image\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThe next step is to create the disk image for distribution. You can use a zip file or a disk image, but I prefer a disk image because it gives you a way to guide users to install the app in their Applications folder.\u003c/p\u003e\n\u003cp\u003eThe process for this is:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eMake a writeable disk image.\u003c/li\u003e\n\u003cli\u003eAdd the app and a link to Applications.\u003c/li\u003e\n\u003cli\u003eSet the view options, including a background image.\u003c/li\u003e\n\u003cli\u003eConvert the image into a read-only copy.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eOpen \u003cstrong\u003eDisk Utility\u003c/strong\u003e from Applications/Utilities. Select \u003cstrong\u003eNew Image \u0026gt; Blank Image…\u003c/strong\u003e from the \u003cstrong\u003eFile\u003c/strong\u003e menu. Set its name in two places and its size. The size should be about 2 x the size of your app to allow for future updates.\u003c/p\u003e\n\u003cp\u003eDouble-click the image to open it and drag your exported app into the disk image window. \u003cstrong\u003eCommand-Option-drag\u003c/strong\u003e your Applications folder in. You\u0026rsquo;ll know you\u0026rsquo;re holding down the right modifiers if you see a curved black arrow at the bottom left of the icon. This adds an alias to the current Applications folder, rather than a copy of yours.\u003c/p\u003e\n\u003cp\u003eNow configure the disk image window using Finder\u0026rsquo;s View menu and View Options. I turn off all the extra views: toolbar, path bar, status bar etc. then I set the view options like this:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/sparkle_dmg.png\" alt=\"Configuring the disk image\"\u003e\u003c/p\u003e\n\u003cp\u003eSetting a background image takes a few steps. First, find an image you like. Not being graphically minded, I used a rectangle filled with a gradient and added a curved arrow that pointed from the app to the Applications folder. My file is a png, but I think a jpg will work fine. You can click this link if you want to see my sample \u003ca href=\"/images/dmg_background.png\"\u003ebackground image\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eDrag the image file into your disk image. Don\u0026rsquo;t worry about positioning it - you\u0026rsquo;re about to make the file invisible. With Finder active, press \u003cstrong\u003eShift-Command-.\u003c/strong\u003e to show invisible files. Now, rename the background image file to \u003cstrong\u003e.background.png\u003c/strong\u003e. The leading period makes this an invisible file, but you can see it at the moment. Open the View Options again and select \u003cstrong\u003ePicture\u003c/strong\u003e for the Background. Drag your image file into the well. This may show that you need to re-position the arrow, so repeat the process until you get an image that looks right. Then press \u003cstrong\u003eShift-Command-.\u003c/strong\u003e again to hide invisible files. Re-position the visible icons to suit and adjust the size of the window to what you want to show.\u003c/p\u003e\n\u003cp\u003eNow that the disk image is configured, eject it. Back in Disk Utility, select \u003cstrong\u003eImages \u0026gt; Convert…\u003c/strong\u003e and choose your dmg. On the next dialog, change Image Format to \u003cstrong\u003eread-only\u003c/strong\u003e and click \u003cstrong\u003eConvert\u003c/strong\u003e. This is the disk image that goes into your Releases folder, so change its name to match your app and move it. Keep the read-write disk image too - it\u0026rsquo;s much easier to edit it when updating instead of going through this process every time.\u003c/p\u003e\n\u003cp\u003eOpen the read-only image and check that it\u0026rsquo;s set up the way your want. I have found that sometimes the background image doesn\u0026rsquo;t stick. If this happens to you, eject and trash the read-only image. Mount the read-write image again, confirm its settings and re-convert.\u003c/p\u003e\n\u003ch3 id=\"generating-the-appcastxml\"\u003e\n  Generating the appcast.xml\n  \u003ca href=\"#generating-the-appcastxml\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eNow to create the file that Sparkle uses to see if there is an update.\u003c/p\u003e\n\u003cp\u003eUse the method from when you generated a key to open a Terminal at the Sparkle directory. Type in:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e./bin/generate_appcast /path/to/your/Releases/folder\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOnce you\u0026rsquo;re typed the command and a space, you can drag your Releases folder in to get its path.\nPress Return and wait while Sparkle generates the \u003cstrong\u003eappcast.xml\u003c/strong\u003e file.\u003c/p\u003e\n\u003cp\u003eAnd finally, you\u0026rsquo;re ready to release. Upload your Releases folder to wherever you decided to put it, making sure that the URL for the appcast.xml file is the same as in your app\u0026rsquo;s info.\u003c/p\u003e\n\u003ch3 id=\"testing\"\u003e\n  Testing\n  \u003ca href=\"#testing\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eMove the notarised app into your applications folder and run it. If all has worked, you should be able to check for updates and see that you have the latest version.\u003c/p\u003e\n\u003cp\u003eIf you get an error, check back through all the setup phases. I know I made every mistake possible when setting it up first, so check the sandbox setting, the info and the entitlements. Use a web browser to confirm that the appcast.xml file is where you said it would be.\u003c/p\u003e\n\u003cp\u003eTesting an update requires a new version, so make some small, visible change to your app. Increment the version and build numbers, then archive, notarise and export as before. Find the read-write disk image and mount it. Replace the app there with your new version and then eject the disk image. Create a new read-only disk image and replace the copy in your Releases folder with it.\u003c/p\u003e\n\u003cp\u003eRun the \u003ccode\u003e./bin/generate_appcast\u003c/code\u003e again and it will add a new entry to your appcast.xml file with the new version data.\u003c/p\u003e\n\u003cp\u003eIf you want to add some release notes, open \u003cstrong\u003eappcast.xml\u003c/strong\u003e in a text editor. The top entry is the latest. You can include a description tag and if you use the \u003ccode\u003e\u0026lt;![CDATA[ ... ]]\u0026gt;\u003c/code\u003e wrapper, you can add HTML:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/sparkle_release_notes.png\" alt=\"Adding release notes\"\u003e\u003c/p\u003e\n\u003cp\u003eUpload the Releases folder as before and then run your first version of the app. Check for updates and see what happens.\u003c/p\u003e\n\u003cp\u003eIf it doesn\u0026rsquo;t work, check the Console app and see if you can see any errors there that might point you in the right direction.\u003c/p\u003e\n\u003cp\u003eThis can be a frustrating process, but once you have it all set up correctly, it works very well. I added a ReadMe to my project listing the steps I need to follow when publishing an update, so that I don\u0026rsquo;t have to remember them every time. I recommend this or something similar.\u003c/p\u003e\n\u003ch3 id=\"summary\"\u003e\n  Summary\n  \u003ca href=\"#summary\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eSparkle is a great tool and once you have everything configured, it works really well. Configuring it can be tricky, especially as their docs cover so many different use cases.\u003c/p\u003e\n\u003cp\u003eCheck out the \u003ca href=\"https://github.com/trozware/To-Day\"\u003eGitHub repo\u003c/a\u003e for my To-Day app to see how I\u0026rsquo;ve configured it.\u003c/p\u003e\n\u003cp\u003eIf you have any suggestions or if you run into any problems following this guide, please contact me using one of the links below or through the \u003ca href=\"/contact/\"\u003eContact\u003c/a\u003e page. And if you found this article useful, I\u0026rsquo;d love you to \u003ca href=\"https://ko-fi.com/trozware\"\u003ebuy me a coffee\u003c/a\u003e.\u003c/p\u003e"
    },
    {
        "title" : "To-Day",
        "date_published" : "2023-03-08T14:58:01+10:00",
        "date_modified" : "2023-03-08T14:58:01+10:00",
        "id" : "https://troz.net/post/2023/to-day/",
        "url" : "https://troz.net/post/2023/to-day/",
        "content_html" : "\u003cp\u003eWhen I sit down at my computer at the start of a work day, I typically like to plan out the broad outline of my work. This is the three or four major tasks for my day. I don\u0026rsquo;t want a minute-by-minute plan, just a list of the major items, so that I can check them off as I work, and get to the end of the day without feeling like I\u0026rsquo;ve forgotten anything.\u003c/p\u003e\n\u003cp\u003eThere are a ton of todo apps and web services available, but they all provide much more than I need. When I factored in how I wanted to learn about writing a Mac menubar app in SwiftUI, the solution was obvious - write my own.\u003c/p\u003e\n\u003cp\u003eFirst things first: the project is open-source and on \u003ca href=\"https://github.com/trozware/To-Day\"\u003eGitHub\u003c/a\u003e so feel free to download it, fork it, edit it, create pull requests, file issues or whatever you like. If you just want to install the app, you can download the \u003ca href=\"https://github.com/trozware/To-Day/raw/main/Releases/To-Day.dmg\"\u003edisk image\u003c/a\u003e. It requires macOS 13.0 or later.\u003c/p\u003e\n\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n\u003c/style\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/today1.png\" alt=\"Running the app for the first time\"\u003e\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m not going to go through the entire app in detail. You can download the project and check out the code to see it all. I\u0026rsquo;m just going to give some details about the app structure and architecture as well as mentioning some code that I found new or interesting.\u003c/p\u003e\n\u003ch2 id=\"the-app\"\u003e\n  The App\n  \u003ca href=\"#the-app\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eI\u0026rsquo;ve written menu bar apps using AppKit but this is my first serious look at SwiftUI\u0026rsquo;s \u003ccode\u003eMenuBarExtra\u003c/code\u003e. Configuring the app to be a menu bar app has three steps:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eRemove the \u003ccode\u003eWindowGroup\u003c/code\u003e from your app \u003ccode\u003ebody\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eAdd a \u003ccode\u003eMenuBarExtra\u003c/code\u003e to your app \u003ccode\u003ebody\u003c/code\u003e with some views to show in the menu.\u003c/li\u003e\n\u003cli\u003eInsert an entry into \u003cstrong\u003eTarget - Info\u003c/strong\u003e, setting \u003ccode\u003eApplication is agent (UIElement)\u003c/code\u003e to \u003ccode\u003eYES\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg src=\"/images/today_info.png\" alt=\"Editing the app info\"\u003e\u003c/p\u003e\n\u003cp\u003eYou can then delete \u003cstrong\u003eContentView.swift\u003c/strong\u003e from the project since nothing uses it.\u003c/p\u003e\n\u003cp\u003eLooking at the first screenshot, you can see that I\u0026rsquo;ve split the menu into four sections. The first one displays the actual todos and handles checking them off. This view is provided by the main data object.\u003c/p\u003e\n\u003cp\u003eThe other sections are static and deal with editing the todos, configuring the app settings and managing the app itself. Each of these is split off into a separate view file to keep the main app body as uncluttered as possible. The files for these three sections are in the \u003cstrong\u003eMenu Views\u003c/strong\u003e group in the Xcode project.\u003c/p\u003e\n\u003cp\u003eEditing the todos caused the most issues with the app and took several iterations, but I\u0026rsquo;m pleased with this version:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/today_edits.png\" alt=\"Editing the todos\"\u003e\u003c/p\u003e\n\u003cp\u003eI tried lots of ways of tracking the focus and adding keyboard commands to move items up and down the list but in the end, I went for simplicity. The editing is embedded in a \u003ccode\u003eForm\u003c/code\u003e. This means that I get the standard tabbing behaviour by default, but I also get the small toggle switches, which I really like.\u003c/p\u003e\n\u003cp\u003eThe main view for this is \u003ccode\u003eEditView\u003c/code\u003e and it, with its subviews, are in the \u003cstrong\u003eEdit Views\u003c/strong\u003e project group.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;ll discuss the \u003cstrong\u003eModels\u003c/strong\u003e group and the data flow in a minute, but to finish describing the app structure, the \u003ccode\u003eAboutView\u003c/code\u003e tells you more about the app. I love being able to use basic Markdown styling in \u003ccode\u003eText\u003c/code\u003e views. And I learnt a good lesson: if you\u0026rsquo;re having trouble with truncated text, check out the \u003ccode\u003efixedSize\u003c/code\u003e modifier.\u003c/p\u003e\n\u003cp\u003eFinally, \u003ccode\u003eUpdater\u003c/code\u003e is a class to handle using the \u003cstrong\u003e\u003ca href=\"https://sparkle-project.org\"\u003eSparkle\u003c/a\u003e\u003c/strong\u003e updater, which deserves its own post. I must have made every possible mistake when implementing this, so I think a guide would be useful, for future me if for nobody else.\u003c/p\u003e\n\u003ch2 id=\"the-data\"\u003e\n  The Data\n  \u003ca href=\"#the-data\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eI like to use the \u003ca href=\"https://swiftuivoodo.com\"\u003eVOODO\u003c/a\u003e pattern, which stands for \u003cstrong\u003eView - ObservableObject - DataObject\u003c/strong\u003e. Working backwards through this, the \u003cstrong\u003eDataObject\u003c/strong\u003e is a struct that contains the properties for a single \u003ccode\u003eTodo\u003c/code\u003e item. The \u003cstrong\u003eObservableObject\u003c/strong\u003e is a class called \u003ccode\u003eAppState\u003c/code\u003e that contains a published array of todo items as well as a \u003ccode\u003eDataStore\u003c/code\u003e struct for saving and loading. The \u003cstrong\u003eView\u003c/strong\u003e is the menu itself.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eAppState\u003c/code\u003e also contains a bunch of computed properties to make life easier and methods for adding, deleting and checking. It also has a computed property to generate the view for the todos at the top of the menu.\u003c/p\u003e\n\u003cp\u003eWhen you have an \u003ccode\u003eObservableObject\u003c/code\u003e, you can pass it around the app in two ways: as an \u003ccode\u003eObservedObject\u003c/code\u003e or as an \u003ccode\u003eEnvironmentObject\u003c/code\u003e. Both work fine, but with the ObservedObject, there has to be an unbroken chain of data passing from view to subview to sub-subview and so on. EnvironmentObject makes it easier because once you insert it into a view hierarchy, any view in that hierarchy can access it.\u003c/p\u003e\n\u003cp\u003eIt might seem like EnvironmentObject is less efficient, but I\u0026rsquo;ve read recent reports of it using less memory, perhaps because intermediate views that don\u0026rsquo;t need it, don\u0026rsquo;t access it.\u003c/p\u003e\n\u003cp\u003eI decided to use EnvironmentObject so in the App struct, I initialised it as a \u003ccode\u003eStateObject\u003c/code\u003e. MenuBarExtra can\u0026rsquo;t take an \u003ccode\u003eenvironmentObject\u003c/code\u003e, so I grouped the menu view sections and assigned the environmentObject to the Group. This let the views in the menu access it using \u003ccode\u003e@EnvironmentObject var appState: AppState\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"windows\"\u003e\n  Windows\n  \u003ca href=\"#windows\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eEven though this is a menu bar app, I wanted to be able to open two windows: one for editing the todos and one for showing some info about the app.\u003c/p\u003e\n\u003cp\u003eFor each of these, I added a \u003ccode\u003eWindow\u003c/code\u003e scene to the app. A \u003ccode\u003eWindow\u003c/code\u003e scene differs from a \u003ccode\u003eWindowGroup\u003c/code\u003e in that it only opens one copy of the window. If you try to to open it a second time, it activates the original rather than opening another.\u003c/p\u003e\n\u003cp\u003eBack of these windows has a \u003ccode\u003etitle\u003c/code\u003e and an \u003ccode\u003eid\u003c/code\u003e. The \u003ccode\u003eid\u003c/code\u003e is used by the \u003ccode\u003eopenWindow\u003c/code\u003e \u003ccode\u003eEnvironment\u003c/code\u003e value to show the window and the title is the window title. The contents of the scene is the view that appears in the window.\u003c/p\u003e\n\u003cp\u003eThe Edit window also gets the \u003ccode\u003eEnvironmentObject\u003c/code\u003e so it can access the data. Both have a \u003ccode\u003edefaultSize\u003c/code\u003e - this only applies to the first opening - after that, the app uses whatever you set. The About window also gets a \u003ccode\u003edefaultPosition\u003c/code\u003e (which I am not sure works) and a \u003ccode\u003ewindowResizability\u003c/code\u003e modifier to make sure that the window can\u0026rsquo;t be bigger than the size needed to show the content.\u003c/p\u003e\n\u003ch2 id=\"launch-on-login\"\u003e\n  Launch on Login\n  \u003ca href=\"#launch-on-login\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eGetting an app to launch when the user logins in used to be a lot of work. Thankfully, we now have access to \u003ccode\u003eSMAppService\u003c/code\u003e which makes it much easier. And that\u0026rsquo;s why the app is only for macOS 13 or higher.\u003c/p\u003e\n\u003cp\u003eTo tell whether an app is set to launch on login, import the \u003ccode\u003eServiceManagement\u003c/code\u003e library and run this code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSMAppService.mainApp.status == .enabled\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd to change the setting, use:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e SMAppService.mainApp.register()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOr:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e SMAppService.mainApp.unregister()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe really neat thing about this is that people can now see what apps will launch on login, unlike with the previous system where this data was hidden deep in the Library folder. Go to \u003cstrong\u003eSystem Settings - General - Login Items\u003c/strong\u003e to check it out.\u003c/p\u003e\n\u003ch2 id=\"saving-changes\"\u003e\n  Saving Changes\n  \u003ca href=\"#saving-changes\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eI wanted to save the todos whenever the user made a change, but with a debounce so it didn\u0026rsquo;t save after every keystroke.\u003c/p\u003e\n\u003cp\u003eAfter a bit of research, this is what I used:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e saveTask: DispatchWorkItem?\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edebouncedSave\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.saveTask?.cancel()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e task = DispatchWorkItem { [\u003cspan style=\"color:#66d9ef\"\u003eweak\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e] \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    DispatchQueue.global(qos: .background).async { [\u003cspan style=\"color:#66d9ef\"\u003eweak\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e] \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e self {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.dataStore.saveTodos(todos: \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.todos)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.saveTask = task\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0.5\u003c/span\u003e, execute: task)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI added a \u003ccode\u003edidSet\u003c/code\u003e property observer to the \u003ccode\u003etodos\u003c/code\u003e array, which calls this function after every change. This cancels any existing task, creates a new one and schedules it for half a second later. If no other changes occur in that half-second, the app saves, using a background queue.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eDataStore\u003c/code\u003e struct saves and loads the data as JSON, storing it in the Documents folder inside the app\u0026rsquo;s Container.\u003c/p\u003e\n\u003ch2 id=\"distribution\"\u003e\n  Distribution\n  \u003ca href=\"#distribution\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eTypically, I use the App Store to distribute my apps. Apple handles all the business side of things and it makes distributing updates easy.\u003c/p\u003e\n\u003cp\u003eBut lately, it seems that the App Store review process has become even more capricious, blocking good apps for spurious reasons, while utterly failing in their stated mission of \u0026ldquo;keeping us safe\u0026rdquo; from obvious scams, copycat apps and fake reviews.\u003c/p\u003e\n\u003cp\u003eSo for this app, I have decided not to charge for it and to distribute it myself. I\u0026rsquo;m using GitHub both as the \u003ca href=\"https://github.com/trozware/To-Day\"\u003eopen-source repository\u003c/a\u003e, and as the \u003ca href=\"https://github.com/trozware/To-Day/raw/main/Releases/To-Day.dmg\"\u003eapp distribution source\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIf you enjoy using the app, I\u0026rsquo;d love to hear from you. There are contact details at the bottom of the page. And if you really want to contribute, please \u003ca href=\"https://ko-fi.com/H2H3BU7SI\"\u003ebuy me a coffee\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eUpdating is the missing piece in this puzzle, but that is a sufficiently large topic that I intend to write a follow-up post detailing how I set up \u003ca href=\"https://sparkle-project.org\"\u003eSparkle\u003c/a\u003e and eventually got it to work.\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003e\n  Conclusion\n  \u003ca href=\"#conclusion\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eSo, how does this compare with writing a Mac menu bar app in AppKit? A lot of things are easier in SwiftUI, but one thing I miss is being able to set up a menu delegate to track when the menu is opened or closed. There doesn\u0026rsquo;t appear to be any way to do this for a \u003ccode\u003eMenuBarExtra\u003c/code\u003e - it can\u0026rsquo;t have an \u003ccode\u003eonAppear\u003c/code\u003e or \u003ccode\u003eonDisappear\u003c/code\u003e modifier and \u003ccode\u003escenePhase\u003c/code\u003e detects nothing.\u003c/p\u003e\n\u003cp\u003eFor this app, it\u0026rsquo;s not really a problem, but I have used other apps where it would be a real showstopper.\u003c/p\u003e\n\u003cp\u003eAnd what\u0026rsquo;s next for this app? I\u0026rsquo;ll use it in my daily routine for a while and see what I like, what I hate and what extra features I\u0026rsquo;d like. One possibility is to add some global shortcuts. This requires hooking into the Accessibility settings, which I am reluctant to do, so I\u0026rsquo;ll need to think about this.\u003c/p\u003e\n\u003cp\u003eIf you have any ideas or feature requests, create an issue on GitHub, or fork and edit the project and then create a pull request.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/todo_complete.png\" alt=\"Day complete\"\u003e\u003c/p\u003e"
    },
    {
        "title" : "New Links",
        "date_published" : "2022-12-17T08:47:35+10:00",
        "date_modified" : "2022-12-17T08:47:35+10:00",
        "id" : "https://troz.net/post/2022/new_links/",
        "url" : "https://troz.net/post/2022/new_links/",
        "content_html" : "\u003cp\u003eAs we round out the year, there are several new addresses I\u0026rsquo;d like people to use to contact me or get my book.\u003c/p\u003e\n\u003cp\u003eFirst, raywenderlich.com has re-branded to \u003ca href=\"https://www.kodeco.com/books/\"\u003eKodeco\u003c/a\u003e. Still the same great content created by terrific people, but with a fresh new design that makes it easier to follow the learning path that you prefer.\u003c/p\u003e\n\u003cp\u003eIf you want to read my macOS by Tutorials book, it\u0026rsquo;s now at \u003ca href=\"https://www.kodeco.com/books/macos-by-tutorials\"\u003ekodeco.com/books/macos-by-tutorials\u003c/a\u003e.\u003c/p\u003e\n\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n\u003c/style\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/book_cover.png\" alt=\"Book Cover\"\u003e\u003c/p\u003e\n\u003cp\u003eAs we all know, Twitter is in meltdown and I no longer use it. I\u0026rsquo;d love it if you came over to Mastodon. People on Mastodon are friendly and sharing. It feels much more like a community.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.movetodon.org\"\u003eMovetodon\u003c/a\u003e is a great tool for finding your Twitter friends on Mastodon and \u003ca href=\"https://fedi.tips\"\u003eFedi.tips\u003c/a\u003e is a useful site for learning how to use Mastodon effectively.\u003c/p\u003e\n\u003cp\u003eMy suggestions are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBe nice!\u003c/li\u003e\n\u003cli\u003eDon\u0026rsquo;t stress about choosing a server, you can follow anyone from any server and you can transfer your account to a different server if you change your mind.\u003c/li\u003e\n\u003cli\u003eFollow hashtags as well as people, and add hashtags to your posts.\u003c/li\u003e\n\u003cli\u003eUse \u003cstrong\u003eFavorite\u003c/strong\u003e to tell people you liked their post and \u003cstrong\u003eBoost\u003c/strong\u003e to share with your followers.\u003c/li\u003e\n\u003cli\u003eAdd hashtags using UpperCamelCase to assist screen readers e.g. #AdventOfCode, not #adventofcode.\u003c/li\u003e\n\u003cli\u003eFollow me: \u003ca href=\"https://mastodon.social/@troz\"\u003e@troz@mastodon.social\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI look forward to seeing you there.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;ve added a \u003ca href=\"https://mastodon.social/@troz\"\u003eMastodon\u003c/a\u003e link to my web footer, but I also created a \u003ca href=\"https://linktr.ee/trozware\"\u003eLinkTree\u003c/a\u003e to gather all my links into one place.\u003c/p\u003e\n\u003cp\u003eAnd finally, if you want to support my work, please \u003ca href=\"https://ko-fi.com/H2H3BU7SI\"\u003ebuy me a coffee\u003c/a\u003e.\u003c/p\u003e"
    },
    {
        "title" : "SwiftUI for Mac 2022",
        "date_published" : "2022-06-17T14:18:32+10:00",
        "date_modified" : "2022-06-17T14:18:32+10:00",
        "id" : "https://troz.net/post/2022/swiftui-mac-2022/",
        "url" : "https://troz.net/post/2022/swiftui-mac-2022/",
        "content_html" : "\u003cp\u003eIn December 2019, I wrote a \u003ca href=\"/post/2019/swiftui-for-mac-1/\"\u003eseries of articles about using SwiftUI to build a Mac app\u003c/a\u003e. And in July 2020, I \u003ca href=\"/post/2020/swiftui_mac_big_sur/\"\u003ere-visited the sample app\u003c/a\u003e to apply the new SwiftUI features made available in macOS BigSur. Now that macOS Ventura and Xcode 14 are in beta, it\u0026rsquo;s time to build the app again while learning how to incorporate the new APIs.\u003c/p\u003e\n\u003cp\u003eRight now, it\u0026rsquo;s June 2022 and I\u0026rsquo;m using macOS Ventura 13 beta 2 (22A5286j) with Xcode 14 beta 2 (14A5229c). There will undoubtedly be changes before release, but I\u0026rsquo;ll try to update this article or add notes to point out any major differences.\u003c/p\u003e\n\u003cp\u003eI don\u0026rsquo;t intend to cover features that haven\u0026rsquo;t changed much, but here are the new APIs that I am interested in:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#navigation\"\u003eNavigation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#detecting-the-active-window\"\u003eDetecting the Active Window\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#opening-new-windows\"\u003eOpening New Windows\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#charts\"\u003eCharts\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#image-rendering\"\u003eImage Rendering\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#forms\"\u003eForms\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#menu-bar-apps\"\u003eMenu Bar Apps\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: In Xcode 14 beta 2, the SwiftUI Previews are crashing unless I go to Project \u0026gt; Target \u0026gt; Signing \u0026amp; Capabilities and select my developer team and set Signing Certificate to Development. So if you can\u0026rsquo;t see the Previews, make these changes, or run the app directly.\u003c/p\u003e\n\u003ch3 id=\"navigation\"\u003e\n  Navigation\n  \u003ca href=\"#navigation\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThe \u003ca href=\"https://github.com/trozware/swiftui-mac\"\u003efirst version of this app\u003c/a\u003e used a two pane layout with a sectioned list in the sidebar leading to a detail view in the main area. With the \u003ca href=\"https://github.com/trozware/swiftui-mac-11\"\u003eBig Sur version\u003c/a\u003e, I switched to a three pane layout because the sections were not displaying neatly. This time, I\u0026rsquo;ve reverted to two panes with sections. As before, I\u0026rsquo;m using \u003ca href=\"https://http.cat\"\u003eHTTP Cats\u003c/a\u003e which is a site that serves up a cat image to match almost every HTTP status code.\u003c/p\u003e\n\u003cp\u003ePrevious versions used \u003ccode\u003eNavigationLinks\u003c/code\u003e inside a \u003ccode\u003eNavigationView\u003c/code\u003e. \u003ccode\u003eNavigationView\u003c/code\u003e is now deprecated and we should use either \u003ccode\u003eNavigationStackView\u003c/code\u003e or \u003ccode\u003eNavigationSplitView\u003c/code\u003e. \u003ccode\u003eNavigationStackView\u003c/code\u003e is better suited to a small screen where each view is pushed on to a stack and can be popped off to navigate back. I am going to use \u003ccode\u003eNavigationSplitView\u003c/code\u003e which works well for bigger displays with all the panes visible at once.\u003c/p\u003e\n\u003cp\u003eMy data model is exactly the same as I developed originally and consists of an array of \u003ccode\u003eHttpSections\u003c/code\u003e, each containing an array of \u003ccode\u003eHttpStatuses\u003c/code\u003e.\nSo I was able to render my navigation like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNavigationSplitView {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  List(httpSections, selection: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003eselectedStatus) { section \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Section(header: Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003esection.headerCode\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e - \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003esection.headerText\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      ForEach(section.statuses) { status \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        SidebarRowView(code: status.code, title: status.title)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          .tag(status)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .font(.headline)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  .frame(minWidth: \u003cspan style=\"color:#ae81ff\"\u003e250\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e} detail: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  DetailView(sectionTitle: sectionHeader, httpStatus: selectedStatus)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003eNavigationSplitView\u003c/code\u003e takes various parameters, depending on the result you want. In this case, the first parameter lays out the sidebar, which is a \u003ccode\u003eList\u003c/code\u003e. The detail parameter contains the detail view. For the \u003ccode\u003eList\u003c/code\u003e, I loop through the sections, adding a section header for each one and a custom \u003ccode\u003eSidebarRowView\u003c/code\u003e to display the individual status entries. The \u003ccode\u003eList\u003c/code\u003e selection is bound to an optional \u003ccode\u003eHttpStatus\u003c/code\u003e. The key here is to give each row a \u003ccode\u003etag\u003c/code\u003e that maps to the status displayed in that row. If you omit the tag, the sidebar draws but none of the entries are selectable.\u003c/p\u003e\n\u003cp\u003eInterestingly, when you create a navigation setup like this, Xcode automatically adds a toolbar with a button to toggle the sidebar. This has always been essential as there is a long-standing bug where a hidden sidebar cannot be dragged back into view. But adding it manually meant digging into AppKit to find a method to call.\u003c/p\u003e\n\u003cp\u003eNot so interestingly, the sidebar is often hidden on app launch. I tried giving \u003ccode\u003eNavigationStackView\u003c/code\u003e its optional \u003ccode\u003ecolumnVisibility\u003c/code\u003e parameter, but no setting made it appear consistently.\u003c/p\u003e\n\u003cp\u003eWith the detail, right now there is a bug where you cannot unwrap a conditional and show a view based on that. One workaround is to wrap the entire detail in a \u003ccode\u003eZStack\u003c/code\u003e, but in the interest of keeping my \u003ccode\u003eContentView\u003c/code\u003e code simple and as short as possible, I added an intermediary view. \u003ccode\u003eDetailView\u003c/code\u003e takes optional parameters and it decides whether to show the \u003ccode\u003eStatusView\u003c/code\u003e or a placeholder. Note: the bug may have gone in beta 2, but as I want to display other UI elements in the detail view anyway, this is still a neater approach.\u003c/p\u003e\n\u003cp\u003eThere is nothing much new in either of these views, except where \u003ccode\u003eStatusView\u003c/code\u003e downloads the selected cat image. I tried using \u003ccode\u003eAsyncImage\u003c/code\u003e which worked really well except for one problem. When I selected a new status, the old image stayed in place until the new one arrived. I was unable to work out how to clear or reset an \u003ccode\u003eAsyncImage\u003c/code\u003e so it would show its placeholder again.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUpdate\u003c/strong\u003e: Thanks to \u003ca href=\"https://twitter.com/ramzesenok\"\u003e@ramzesenok\u003c/a\u003e who pointed out that this is another case where I could use an \u003ccode\u003eid\u003c/code\u003e to force a refresh. So now, the app uses \u003ccode\u003eAsyncImage\u003c/code\u003e which makes for a lot less code.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAsyncImage(url: httpStatus.imageUrl) { img \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  CatImageView(catImage: img, statusCode: httpStatus.code)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e} placeholder: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  ProgressView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.id(httpStatus)   \u003cspan style=\"color:#75715e\"\u003e// this resets the AsyncImage whenever httpStatus changes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIf anyone is still interested in the \u003ccode\u003easync/await\u003c/code\u003e version, check out this \u003ca href=\"https://github.com/trozware/swiftui-mac-2022/tree/55dc61b57f50379e4a4b0c247014af521d866c5d\"\u003eearlier commit on GitHub\u003c/a\u003e. It does appear to have better/faster caching, but a beta is not the right place to make speed assessments.\u003c/p\u003e\n\u003cp\u003e\u003cdel\u003eHowever I did switch to using \u003ccode\u003easync/await\u003c/code\u003e to download the image.\u003c/del\u003e\u003c/p\u003e\n\u003cp\u003e\u003cdel\u003eUpdating this was also slightly complicated. I downloaded the first selected image using a \u003ccode\u003etask\u003c/code\u003e modifier and downloaded subsequent selections using an \u003ccode\u003eonChange\u003c/code\u003e modifier. Both of these were required to show the image every time.\u003c/del\u003e\u003c/p\u003e\n\u003cp\u003e\u003cdel\u003eThanks to \u003ca href=\"https://twitter.com/davbeck\"\u003e@davbeck\u003c/a\u003e, \u003ca href=\"https://twitter.com/malhal\"\u003e@malhal\u003c/a\u003e and \u003ca href=\"https://twitter.com/chriseidhof\"\u003e@chriseidhof\u003c/a\u003e for pointing out that if I gave the \u003ccode\u003etask\u003c/code\u003e an \u003ccode\u003eid\u003c/code\u003e, it would be called whenever the \u003ccode\u003eid\u003c/code\u003e property changed.\u003c/del\u003e\u003c/p\u003e\n\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n\u003c/style\u003e\n\n\u003cp\u003e\u003cdel\u003eThe previous image is first set to \u003ccode\u003enil\u003c/code\u003e, so that the progress indicator appears.\u003c/del\u003e\u003c/p\u003e\n\u003cp\u003eWith all this in place, I had the basis of the app and the navigation was complete:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/navigation_2022.jpg\" alt=\"Navigation\"\u003e\u003c/p\u003e\n\u003ch3 id=\"detecting-the-active-window\"\u003e\n  Detecting the Active Window\n  \u003ca href=\"#detecting-the-active-window\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003emacOS apps can have multiple windows open at once, and in previous iterations of SwiftUI, it has been difficult to detect the active one. Last year, we got \u003ccode\u003e@FocusedBinding\u003c/code\u003e but it didn\u0026rsquo;t really work. This year it works, but we also have a new \u003ccode\u003eEnvironmentValue\u003c/code\u003e called \u003ccode\u003econtrolActiveState\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAs I did last time, I set up some menus by adding a \u003ccode\u003ecommands\u003c/code\u003e modifier to my \u003ccode\u003eWindowGroup\u003c/code\u003e in the main _App.swift file. First, I added the pre-built \u003ccode\u003eSidebarCommands()\u003c/code\u003e which added a menu item and keyboard shortcut for toggling the sidebar. Next, I added a menu item for flipping the image:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCommandGroup(after: .textEditing) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Button(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Flip Image\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    NotificationCenter.\u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e.post(name: .flipImage, object: \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  .keyboardShortcut(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;f\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis new item appears in the Edit menu, after the standard items. It has a shortcut of Command-F. The Command key is the default shortcut modifier, so if you only specify a letter, it automatically uses Command. All this menu item does is to broadcast a notification.\u003c/p\u003e\n\u003cp\u003eThe image is shown in a subview called \u003ccode\u003eCatImageView\u003c/code\u003e which now includes the following properties:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@Environment(\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\\\u003c/span\u003e.controlActiveState) \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e controlActiveState\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e flipImageMenuItemSelected = NotificationCenter.\u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  .publisher(\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e: .flipImage)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  .receive(on: RunLoop.main)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@State \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e imageIsFlipped = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe image has a \u003ccode\u003erotation3Deffect\u003c/code\u003e modifier with the angle set to either 0 degrees, or 180 degrees, depending on the value of \u003ccode\u003eimageIsFlipped\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe view subscribes to the \u003ccode\u003eflipImage\u003c/code\u003e notification and receives it like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.onReceive(flipImageMenuItemSelected) { \u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e controlActiveState == .key \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e controlActiveState == .active {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    imageIsFlipped.toggle()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhen the notification arrives, the code checks the value of \u003ccode\u003econtrolActiveState\u003c/code\u003e. In my tests, this was always either \u003ccode\u003ekey\u003c/code\u003e or \u003ccode\u003einactive\u003c/code\u003e, but I saw that \u003ccode\u003eactive\u003c/code\u003e was an option and added it too, in case it becomes relevant later. If the \u003ccode\u003eCatImageView\u003c/code\u003e is in the active window, it flips the image and if not, this notification is ignored.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/target_active_window.jpg\" alt=\"Target Active Window\"\u003e\u003c/p\u003e\n\u003cp\u003eAs you can see from the text in the images, only the front window image is flipped.\u003c/p\u003e\n\u003ch3 id=\"opening-new-windows\"\u003e\n  Opening New Windows\n  \u003ca href=\"#opening-new-windows\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eIn early versions of SwiftUI, opening a secondary window was a very complex process. Read \u003ca href=\"https://troz.net/post/2019/swiftui-for-mac-2/\"\u003epart 2 of the original series\u003c/a\u003e to see how I struggled with this. Later, we got an easy way to open a Preferences window, using a \u003ccode\u003eSettings\u003c/code\u003e scene. Preferences are now called Settings, which makes this nomenclature more logical.\u003c/p\u003e\n\u003cp\u003eLast year, we got the ability to use a \u003ccode\u003eNavigationLink\u003c/code\u003e as a SwiftUI menu item and this will open the destination view in a new window.\u003c/p\u003e\n\u003cp\u003eThis year, we have a new method that uses another new \u003ccode\u003eEnvironmentValue\u003c/code\u003e called \u003ccode\u003eopenWindow\u003c/code\u003e. First, in the _App.swift file, I added another new scene to the body - this time a second \u003ccode\u003eWindowGroup\u003c/code\u003e. A \u003ccode\u003eWindowGroup\u003c/code\u003e can be passed an \u003ccode\u003eid\u003c/code\u003e, a data object of a specific type, or both. In this case, I didn\u0026rsquo;t want to pass any data, so I gave it an \u003ccode\u003eid\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eWindowGroup(id: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ui_samples\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  SamplesView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI want to display a window with a view demonstrating some UI elements. The view is called \u003ccode\u003eSamplesView\u003c/code\u003e, so I set this as the content of the \u003ccode\u003eWindowGroup\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eTo use it, I added a property to \u003ccode\u003eDetailView\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@Environment(\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\\\u003c/span\u003e.openWindow) \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e openWindow\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd inserted a \u003ccode\u003eButton\u003c/code\u003e to call it:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eButton(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Show UI Samples\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  openWindow(id: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ui_samples\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis opens a new window with the appropriate \u003ccode\u003eid\u003c/code\u003e. This can open multiple copies of the same window. If I had passed a data object to the window, it would have brought the window containing that data object to the front instead of opening a new window. To test this behavior, I changed the \u003ccode\u003eWindowGroup\u003c/code\u003e to this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eWindowGroup(\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e: String.\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e) { \u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  SamplesView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd changed the \u003ccode\u003eButton\u003c/code\u003e to:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eButton(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Show UI Samples\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  openWindow(value: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;samples\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow the \u003ccode\u003eWindowGroup\u003c/code\u003e expects a \u003ccode\u003eString\u003c/code\u003e. When you pass a \u003ccode\u003eString\u003c/code\u003e that has already been attached to a window, that window is brought to the front. If you pass a different \u003ccode\u003eString\u003c/code\u003e, you get a new window.\u003c/p\u003e\n\u003cp\u003eAfter that, I realized that there was another scene type I could use. If you create a \u003ccode\u003eWindow\u003c/code\u003e scene instead of a \u003ccode\u003eWindowGroup\u003c/code\u003e, not only does this become a single presentation window, but you get a menu item for it in the Window menu without any extra work. You can add a keyboard shortcut to the \u003ccode\u003eWindow\u003c/code\u003e scene too. Supposedly, you can add default sizing and positioning, but they don\u0026rsquo;t appear to work yet.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eWindow(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Samples\u0026#34;\u003c/span\u003e, id: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ui_samples\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  SamplesView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.keyboardShortcut(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;u\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.defaultPosition(.topLeading)  \u003cspan style=\"color:#75715e\"\u003e// doesn\u0026#39;t work yet\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.defaultSize(width: \u003cspan style=\"color:#ae81ff\"\u003e600\u003c/span\u003e, height: \u003cspan style=\"color:#ae81ff\"\u003e600\u003c/span\u003e)  \u003cspan style=\"color:#75715e\"\u003e// doesn\u0026#39;t work yet\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"charts\"\u003e\n  Charts\n  \u003ca href=\"#charts\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eOne of the signature features of SwiftUI at WWDC 2022 was the new Charts API. I have struggled with charts in the past, so this was very interesting. I need to learn more, but I added a simple bar chart to the samples window:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/bar_chart.jpg\" alt=\"Bar chart\"\u003e\u003c/p\u003e\n\u003cp\u003eThis charts the number of entries in each category of HTTP status. I drew a line across at the 8 value because drawing a marker line is a feature I have often needed in charts.\u003c/p\u003e\n\u003cp\u003eCreating the chart was smooth:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eChart {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  ForEach(chartData.keys.sorted(), id: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\\\u003c/span\u003e.\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e) { key \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    BarMark(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      x: .value(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Category\u0026#34;\u003c/span\u003e, key),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      y: .value(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Count\u0026#34;\u003c/span\u003e, chartData[key] ?? \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .foregroundStyle(by: .value(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Color\u0026#34;\u003c/span\u003e, key))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  RuleMark(y: .value(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Threshold\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .foregroundStyle(.gray)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHaving assembled a dictionary of category codes and counts, I looped through the keys, setting an \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e value for each in its own \u003ccode\u003eBarMark\u003c/code\u003e. The line used a \u003ccode\u003eRuleMark\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eTo get the different colors, I added this modifier to the \u003ccode\u003eChart\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.chartForegroundStyleScale([\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1xx\u0026#34;\u003c/span\u003e: .green,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2xx\u0026#34;\u003c/span\u003e: .purple,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;3xx\u0026#34;\u003c/span\u003e: .blue,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;4xx\u0026#34;\u003c/span\u003e: .yellow,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;5xx\u0026#34;\u003c/span\u003e: .red\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ewhich was used by \u003ccode\u003eforegroundStyle\u003c/code\u003e to assign a different color to each of the categories.\u003c/p\u003e\n\u003cp\u003eNext, I wanted to add the ability to switch between vertical and horizontal bars. This requires swapping the \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e data so that \u003ccode\u003ey\u003c/code\u003e has the category and \u003ccode\u003ex\u003c/code\u003e has the count. After testing this manually, I added a Boolean to specify the orientation, and a method for returning the appropriate \u003ccode\u003eBarMark\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebarMark\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e key: String) -\u0026gt; BarMark {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e drawHorizontal {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e BarMark(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      x: .value(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Count\u0026#34;\u003c/span\u003e, chartData[key] ?? \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      y: .value(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Category\u0026#34;\u003c/span\u003e, key)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e BarMark(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      x: .value(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Category\u0026#34;\u003c/span\u003e, key),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      y: .value(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Count\u0026#34;\u003c/span\u003e, chartData[key] ?? \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA similar method provided the \u003ccode\u003eRuleMark\u003c/code\u003e as either a vertical or horizontal line.\u003c/p\u003e\n\u003cp\u003eA segmented picker switches between the two and the only thing now was to animate the change. There is an \u003ccode\u003eanimation\u003c/code\u003e modifier added last year that allows you to connect an animation to a property, so that when the property changes, the animation is triggered.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.animation(.easeInOut, value: drawHorizontal)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"/images/chart_animation.mp4\" alt=\"Animated chart\"\u003e\u003c/p\u003e\n\u003cp\u003eI added \u003ccode\u003eText\u003c/code\u003e views for the title of the chart and for the axes, inside a  \u003ccode\u003eVStack\u003c/code\u003e and an \u003ccode\u003eHStack\u003c/code\u003e, rotating the text for vertical axis. Maybe there is a chart setting that I\u0026rsquo;m missing for adding these labels automatically using the Chart library.\u003c/p\u003e\n\u003ch3 id=\"image-rendering\"\u003e\n  Image Rendering\n  \u003ca href=\"#image-rendering\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eWhile investigating charts, I experimented with another new SwiftUI feature: \u003ccode\u003eImageRenderer\u003c/code\u003e. When I have made charts, I\u0026rsquo;ve often wanted to export them as images for upload. \u003ccode\u003eImageRenderer\u003c/code\u003e allows us to convert a SwiftUI view into an image: on macOS, either \u003ccode\u003eNSImage\u003c/code\u003e or \u003ccode\u003eCGImage\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe first step was to convert the chart view plus its labels, into a variable (modifiers and RuleMark omitted from this code snippet for brevity):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e chartView = Group {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Status codes by category\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .font(.title3).bold()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .padding()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  HStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Text(drawHorizontal ? \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Category\u0026#34;\u003c/span\u003e : \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Count\u0026#34;\u003c/span\u003e).bold()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .rotationEffect(.degrees(\u003cspan style=\"color:#ae81ff\"\u003e270\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Chart {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      ForEach(chartData.keys.sorted(), id: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\\\u003c/span\u003e.\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e) { key \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        barMark(\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e: key)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Text(drawHorizontal ? \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Count\u0026#34;\u003c/span\u003e : \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Category\u0026#34;\u003c/span\u003e).bold()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen I displayed the view using the variable:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eVStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  chartView\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Picker \u0026amp; Button\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis left the display unchanged, but allowed me to use this variable to create a view for rendering, omitting the controls that should not be part of the image:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eButton(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Save Chart as Image\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e view = chartView\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .padding()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .frame(width: \u003cspan style=\"color:#ae81ff\"\u003e1200\u003c/span\u003e, height: \u003cspan style=\"color:#ae81ff\"\u003e800\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e renderer = ImageRenderer(content: view)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e exportImage = renderer.nsImage {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    saveImage(exportImage)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI added \u003ccode\u003epadding\u003c/code\u003e and \u003ccode\u003eframe\u003c/code\u003e modifiers to the view variable as it came out very small without this. Then I created an \u003ccode\u003eImageRenderer\u003c/code\u003e using this view and converted it into an \u003ccode\u003eNSImage\u003c/code\u003e.\nThe \u003ccode\u003esaveImage\u003c/code\u003e method uses an \u003ccode\u003eNSSavePanel\u003c/code\u003e to get a URL and then convert the NSImage to JPG data before writing it out. I used the same technique in \u003ca href=\"https://troz.net/post/2019/swiftui-for-mac-3/\"\u003epart 3 of the original series\u003c/a\u003e but that only exported the downloaded image. This creates an image from a complete SwiftUI view.\u003c/p\u003e\n\u003cp\u003eI would be interested to try the SwiftUI \u003ccode\u003efileExporter\u003c/code\u003e, but that\u0026rsquo;s for another day.\u003c/p\u003e\n\u003cp\u003eI also tried to use the new \u003ccode\u003eShareLink\u003c/code\u003e to share this image, but couldn\u0026rsquo;t get that to work. The \u003ccode\u003eImageRenderer\u003c/code\u003e seems to work asynchronously so that didn\u0026rsquo;t work well with \u003ccode\u003eShareLink\u003c/code\u003e. Again, that\u0026rsquo;s for another day.\u003c/p\u003e\n\u003ch3 id=\"forms\"\u003e\n  Forms\n  \u003ca href=\"#forms\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eSwiftUI has always had a \u003ccode\u003eForm\u003c/code\u003e object, but the new System Settings app (previously System Preferences) has taken this to a new level. So I added some UI elements to a second tab in the UI Samples window.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/form.jpg\" alt=\"Form\"\u003e\u003c/p\u003e\n\u003cp\u003eThere are a few interesting things here. Firstly, I achieved something I was unable to do last time and that is to make the text edit field have focus when the view opens. This was a three part operation:\u003c/p\u003e\n\u003cp\u003eFirstly, I added this property to the view:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@FocusState \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e emailFieldHasFocus: Bool\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen, I added this modifier to the edit field:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eTextField(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Enter your email address\u0026#34;\u003c/span\u003e, text: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003eemail)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  .focused(\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003eemailFieldHasFocus)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd finally, I set the Boolean property in the \u003ccode\u003eonAppear\u003c/code\u003e modifier:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.onAppear {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  emailFieldHasFocus = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWith this in place, the email text entry field had the focus whenever this view appeared.\u003c/p\u003e\n\u003cp\u003eThe date picker is slightly confused. It can\u0026rsquo;t seem to decide whether it\u0026rsquo;s a graphical picker or a numeric picker, but it works. I haven\u0026rsquo;t tried the new date range picker yet.\u003c/p\u003e\n\u003cp\u003eWith the check marks, I was trying to emulate the toggles in System Settings, where they are very small switches. I set the \u003ccode\u003etoggleStyle\u003c/code\u003e to \u003ccode\u003eswitch\u003c/code\u003e which gave the right shape but it was big, like on an iPhone or iPad. The outermost form is set to use the \u003ccode\u003ecolumns\u003c/code\u003e \u003ccode\u003eformStyle\u003c/code\u003e. This lines up the labels and controls very neatly. But when I put the \u003ccode\u003eToggles\u003c/code\u003e and \u003ccode\u003ePicker\u003c/code\u003e into an inner form with a style of \u003ccode\u003egrouped\u003c/code\u003e, I got the exact System Settings look I was going for.\u003c/p\u003e\n\u003cp\u003eAs an aside, I love the way you can now apply control-specific modifiers to a container view and every appropriate view inside the container will use that setting. For example, I added \u003ccode\u003e.toggleStyle(.switch)\u003c/code\u003e to the \u003ccode\u003eForm\u003c/code\u003e view and it was applied to every \u003ccode\u003eToggle\u003c/code\u003e inside it.\u003c/p\u003e\n\u003cp\u003eThe final item in the form is a color picker. It opens up the standard macOS color picker and uses the selected color to fill the capsule beside it. The interesting thing is that the color has a \u003ccode\u003egradient\u003c/code\u003e modifier. So you can see the faint gradient that is automatically applied to the shape.\u003c/p\u003e\n\u003ch3 id=\"menu-bar-apps\"\u003e\n  Menu Bar Apps\n  \u003ca href=\"#menu-bar-apps\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eWriting a menu bar app has previously required using AppKit to create a \u003ccode\u003eNSStatusItem\u003c/code\u003e. Now, we can add a \u003ccode\u003eMenuBarExtra\u003c/code\u003e scene to the app body to create a menu bar app component.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eMenuBarExtra(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;HTTP Status Code\u0026#34;\u003c/span\u003e, systemImage: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;number.circle\u0026#34;\u003c/span\u003e, isInserted: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003eshowMenuBar) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  MenuBarView(httpSections: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003ehttpSections)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSetting the title without a \u003ccode\u003esystemImage\u003c/code\u003e shows the text as the menu bar title. when you specify a \u003ccode\u003esystemImage\u003c/code\u003e, the text is not displayed and the menu bar only shows the image.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eMenuBarExtra\u003c/code\u003e takes an \u003ccode\u003eisInserted\u003c/code\u003e parameter, so you can turn it off and on. I added this to the app\u0026rsquo;s settings and stored it using \u003ccode\u003e@AppStorage\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eI set up a new SwiftUI view that looped through the HTTP Status data and created a submenu for each category and set this as the \u003ccode\u003eMenuBarExtra\u003c/code\u003e view. This works and my menu bar component was functional. Selecting a status uses \u003ccode\u003eNSWorkspace\u003c/code\u003e to open the relevant documentation page at MDN.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/menu_bar_extra.jpg\" alt=\"MenuBarExtra\"\u003e\u003c/p\u003e\n\u003ch3 id=\"conclusion\"\u003e\n  Conclusion\n  \u003ca href=\"#conclusion\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003e2022 is an exciting year to be a SwiftUI programmer. Apple has made it very clear that this is the way forward and as early adopters, we have the ability to influence how the framework develops, so keep filing those feedback reports! There have been some great new features this year: navigation is better than ever, the platforms are unifying and macOS is not getting left behind.\u003c/p\u003e\n\u003cp\u003eThe project from this article is available on \u003ca href=\"https://github.com/trozware/swiftui-mac-2022\"\u003eGitHub\u003c/a\u003e. And as usual, I\u0026rsquo;d be thrilled to hear any suggestions, corrections or improvements. Please contact me using one of the links below or through the \u003ca href=\"/contact/\"\u003eContact\u003c/a\u003e page. And if you found this article useful, I\u0026rsquo;d love you to \u003ca href=\"https://ko-fi.com/trozware\"\u003ebuy me a coffee\u003c/a\u003e.\u003c/p\u003e"
    },
    {
        "title" : "Writing Setup",
        "date_published" : "2022-06-17T14:08:46+10:00",
        "date_modified" : "2022-06-17T14:08:46+10:00",
        "id" : "https://troz.net/post/2022/setup/",
        "url" : "https://troz.net/post/2022/setup/",
        "content_html" : "\u003cp\u003eIf you read my blog or tweets, you will have detected that I recently wrote a book called \u003ca href=\"https://www.raywenderlich.com/books/macos-by-tutorials\"\u003emacOS by Tutorials\u003c/a\u003e, published by \u003ca href=\"https://www.raywenderlich.com/\"\u003eraywenderlich.com\u003c/a\u003e. in this post, I\u0026rsquo;m going to show you what hardware and software I used to write it.\u003c/p\u003e\n\u003ch2 id=\"hardware\"\u003e\n  Hardware\n  \u003ca href=\"#hardware\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eI use an \u003ca href=\"https://www.apple.com/imac-24/\"\u003e24 inch M1 iMac - yellow\u003c/a\u003e. I\u0026rsquo;ve always loved the form factor of the iMacs. They offer a superb monitor attached to a very good computer and the price is reasonable. My previous iMac used to make a noise like a kettle boiling when Xcode really got going, but this one is totally silent no matter what I do.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m a recent convert to a dual-monitor rig. I\u0026rsquo;ve always been content to use \u003ca href=\"https://support.apple.com/en-au/guide/mac-help/mh14112/mac\"\u003eSpaces\u003c/a\u003e which provides virtual screens, and I still do that. But having the luxury of a second screen is great when you\u0026rsquo;re writing and previewing. My second screen is a \u003ca href=\"https://www.samsung.com/au/monitors/curved/curved-monitor-24-inch-lc24f390fhexxy/\"\u003eSamsung C24F390\u003c/a\u003e - a curved 24 inch display. The resolution isn\u0026rsquo;t anything like as good as the iMac, but I tweaked its settings to give as good a result as possible and I can\u0026rsquo;t imagine going back to a single monitor now.\u003c/p\u003e\n\u003cp\u003eMy keyboard is an \u003ca href=\"https://www.zsa.io/moonlander/\"\u003eErgodox Moonlander\u003c/a\u003e which I love. This is my first mechanical keyboard and I wasn\u0026rsquo;t sure if I\u0026rsquo;d like it, since I appreciated the low travel on my standard Apple keyboard. But I chose the Kailh Silver key switches which have the lowest travel and are the least clicky. It\u0026rsquo;s still quite noisy, but the travel was not an issue. The configuration options are amazing. It took several iterations, but I now have a \u003ca href=\"https://configure.zsa.io/embed/moonlander/layouts/9OwwA/latest/0\"\u003ekeyboard layout\u003c/a\u003e that works really well for me. And I keep my Apple keyboard tucked under my monitor stand so the Touch ID button is in easy reach.\u003c/p\u003e\n\u003cp\u003eFor a pointing device, I have the \u003ca href=\"https://www.logitech.com/en-au/products/mice/mx-vertical-ergonomic-mouse.910-005449.html\"\u003eLogitech MX Vertical Ergonomic Mouse\u003c/a\u003e which is very comfortable to use and charges via USB-C. Just don\u0026rsquo;t install the Logitech Options utility software which is buggy and causes system problems. Use \u003ca href=\"https://folivora.ai\"\u003eBetterTouchTool\u003c/a\u003e instead  if you want to customize the buttons.\u003c/p\u003e\n\u003ch2 id=\"software\"\u003e\n  Software\n  \u003ca href=\"#software\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003ch3 id=\"app-development\"\u003e\n  App Development\n  \u003ca href=\"#app-development\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eFor writing sample apps and code, I use \u003ca href=\"https://apps.apple.com/app/xcode/id497799835\"\u003eXcode\u003c/a\u003e set up in a completely standard way, using the default light scheme. This is so that my screenshots are consistent with what people will see if they are just getting started.\u003c/p\u003e\n\u003cp\u003eI wrote an article about \u003ca href=\"/post/2018/swiftlint/\"\u003eConsistent Swift Style\u003c/a\u003e some years ago. The concepts are still valid but the way you integrate it with Xcode has changed. Add a build phase to your project, move it to before the Compile Scripts phase and set it to this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eexport PATH\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$PATH\u003cspan style=\"color:#e6db74\"\u003e:/opt/homebrew/bin\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e which swiftlint \u0026gt; /dev/null; \u003cspan style=\"color:#66d9ef\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  swiftlint\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  echo \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis will use the default SwiftLint config which you can change in Terminal.\u003c/p\u003e\n\u003cp\u003eIf you\u0026rsquo;ve saved a custom config file, use something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ePATH\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e/opt/homebrew/bin:$PATH\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e -f path/to/your-config-file.yml \u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e which swiftlint \u0026gt;/dev/null; \u003cspan style=\"color:#66d9ef\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    swiftlint --no-cache --config path-to/your-config-file.yml\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003efi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTo make SwiftLint fix what it can automatically, duplicate the \u003ccode\u003eswiftlint\u003c/code\u003e line and add \u003ccode\u003e--fix\u003c/code\u003e as another parameter to the first copy. This will run SwiftLint twice: once to auto-fix what it can, and a second time to supply the warnings and errors about what it couldn\u0026rsquo;t fix.\u003c/p\u003e\n\u003ch3 id=\"writing\"\u003e\n  Writing\n  \u003ca href=\"#writing\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThe text of the book was written in \u003ca href=\"https://www.markdownguide.org\"\u003eMarkdown\u003c/a\u003e which is great for producing formatted text in a totally open and transferable format. I\u0026rsquo;m always on the lookout for a new Markdown editor and there are a lot of them around. In Section 3 of the book, I talk you through creating a Markdown editor for yourself, but it isn\u0026rsquo;t quite ready for full-time use yet. I wrote this book using \u003ca href=\"https://www.foldingtext.com\"\u003eFoldingText\u003c/a\u003e which I was quite happy with. While the folding part was not something I used, I appreciated the outline view. Editing text inside links and image links was difficult and the spell checker sometimes got confused and marked an entire sentence or paragraph as incorrect. But the formatting was good and easy to use with plenty of keyboard shortcuts. Code formatting was also excellent, which is a must.\u003c/p\u003e\n\u003cp\u003eI have a bad habit of using the passive voice, which is not good when trying to teach. I use \u003ca href=\"https://hemingwayapp.com\"\u003eHemingway Editor\u003c/a\u003e to help me detect this, so that the passive voice can be eradicated\u0026hellip; (Passive voice joke there.) You can use it online, but I prefer to use the app.\u003c/p\u003e\n\u003ch3 id=\"screen-shots\"\u003e\n  Screen shots\n  \u003ca href=\"#screen-shots\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eIf you\u0026rsquo;ve read the book, you\u0026rsquo;ll know that it includes a lot of screen shots. There are a lot of third-party utilities for doing this, but the built-in facility gives me everything I need. It\u0026rsquo;s important to memorise the keyboard shortcuts to make this easier:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eShift-Command-3\u003c/strong\u003e: screen shot the entire screen.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eShift-Command-4\u003c/strong\u003e: bring up crosshairs to allow selection of an area:\n\u003cul\u003e\n\u003cli\u003eWhen in this mode:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEscape\u003c/strong\u003e exits without action.\u003c/li\u003e\n\u003cli\u003ePress \u003cstrong\u003eSpace\u003c/strong\u003e to enter window mode. The window under the pointer is selected and will be screen shotted.\u003c/li\u003e\n\u003cli\u003eHold down \u003cstrong\u003eCommand\u003c/strong\u003e to select a dialog box instead of the complete window.\u003c/li\u003e\n\u003cli\u003eHold down \u003cstrong\u003eOption\u003c/strong\u003e to turn off the default shadow.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eShift-Command-5\u003c/strong\u003e: bring up the interface where you set options, take screen recordings and set a delay.\n\u003cul\u003e\n\u003cli\u003eI find this useful when I want to show the custom cursor during a drag operation. I turn on \u003cstrong\u003eShow Mouse Pointer\u003c/strong\u003e, set a 5 second delay and then start dragging before the timer runs out.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnce I have the image, I use Preview to crop and resize as needed.\u003c/p\u003e\n\u003ch2 id=\"and\"\u003e\n  And\u0026hellip;\n  \u003ca href=\"#and\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eFinally, there\u0026rsquo;s my support crew who watch every word I type and listen carefully as I explain my code.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/figures.jpg\" alt=\"Figurines\"\u003e\u003c/p\u003e"
    },
    {
        "title" : "WWDC 2022 Wishlist",
        "date_published" : "2022-04-25T19:00:36+10:00",
        "date_modified" : "2022-04-25T19:00:36+10:00",
        "id" : "https://troz.net/post/2022/wwdc_wishlist/",
        "url" : "https://troz.net/post/2022/wwdc_wishlist/",
        "content_html" : "\u003cp\u003eApple has announced that their 2022 World Wide Developers Conference will again be an online event from June 7 to 11. The poster shows a very dark Swift logo in a coloured circle. While I have long since given up trying the read the tea leaves of Apple\u0026rsquo;s graphics to work out what they will announce, I always enjoy speculating. But this year, I thought that instead of trying to guess what Apple will have for us, I\u0026rsquo;d think about what I would \u003cstrong\u003elike\u003c/strong\u003e them to announce, with my main focus being the Mac.\u003c/p\u003e\n\u003ch3 id=\"hardware\"\u003e\n  Hardware\n  \u003ca href=\"#hardware\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThe Apple hardware teams have been doing amazingly well over the last couple of years. The transition of the Mac lineup to Apple Silicon is almost complete and I would guess that they will complete it at WWDC with a new Mac Pro, but that is outside my budget and requirements.\u003c/p\u003e\n\u003cp\u003eWhile I was glad to see them offer a more reasonably priced monitor with the Studio Display, it\u0026rsquo;s still a bit pricey for me. The desk lamp iMac was one of my all time favourite Mac designs so it was great to see the option for the tilt \u0026amp; height adjustable stand, although the extra price for that option was rather eye-popping.\u003c/p\u003e\n\u003cp\u003eI have long thought that the desktop iMac was terrific value because it attaches a stunningly good monitor to a reasonable computer. I wish Apple would supply an iMac monitor using the exact same design, but without the computer. Imagine how great that would look as a second monitor - two coloured machines side by side.\u003c/p\u003e\n\u003cp\u003eBut really, I\u0026rsquo;m not looking for any new hardware right now.\u003c/p\u003e\n\u003ch3 id=\"services\"\u003e\n  Services\n  \u003ca href=\"#services\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eiCloud needs a lot of love, especially on the Mac side. I was trying to collaborate with a colleague so they shared a folder on iCloud. I was able to access their small set of files (24K total) after about 30 minutes, but my edits never uploaded. In the Finder sidebar, I have a perpetual progress indicator beside my iCloud folder and uploads never complete. The only solution is to reboot my computer, which does a complete sync once. We switched to sharing on our iPads and it all worked immediately, so the problem is not iCloud itself, but the macOS integration.\u003c/p\u003e\n\u003cp\u003eCloudKit has always looked like a great solution for use in apps. It allows public and private data, it syncs between devices, and it doesn\u0026rsquo;t have the potential for unexpected and huge data fees like some other options. But like many developers, I\u0026rsquo;ve tried and failed to get it to work reliably. It appears that the simpler mechanisms work well, but not the more complex options.\u003c/p\u003e\n\u003cp\u003eAnd while I\u0026rsquo;m talking about iCloud sync issues, some apps (Notes, Reminders etc) sync - albeit very slowly, but Messages operates as if it is only partially connected. If I delete a conversation on my iPhone or iPad, I get a warning telling me that this will remove the conversation from my other devices, which is what I would expect. This deletion flows through to my Mac and the conversation is gone everywhere. On my Mac, deleting a conversation only deletes it locally and I have to delete it again on my iPhone or iPad to get it to disappear completely. What is the logic of that?\u003c/p\u003e\n\u003ch3 id=\"software\"\u003e\n  Software\n  \u003ca href=\"#software\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThere are two parts to Apple\u0026rsquo;s software: the operating systems and their own apps. iOS, iPadOS and watchOS seem quite solid in their latest versions. I don\u0026rsquo;t have any particular requests or complaints.\u003c/p\u003e\n\u003cp\u003eWith macOS, apart from the iCloud problems that I mentioned above, my main complaint is with notifications. The user experience is terrible. Notifications popup at the top corner, and then disappear quickly. If they have action buttons, you have to mouse over the notification to see them, and this obscures the text. I have tried using System Preferences to change the way notifications are displayed, but this seems to have no effect. And trying to explain this system to a newcomer is impossible.\u003c/p\u003e\n\u003cp\u003eApart from that, I like macOS 12 (Monterey). I would prefer Apple to go back to using numbers instead of names. Trying to work out what system people are using by the name is very confusing.\u003c/p\u003e\n\u003cp\u003eThe other aspect of software is Apple\u0026rsquo;s in-house apps. Sadly, Apple has decided to use Catalyst to port a lot of apps from the iPad to macOS. For a small software house with very limited resources, I can see the attraction of Catalyst although, in my opinion, it results in a greatly inferior product that gives Mac users an inferior experience. However this is hardly a valid excuse for a company the size of Apple.\u003c/p\u003e\n\u003cp\u003eAs a developer, one of my main tools is Xcode. This is an amazing app and over the past few years it has got a lot of new features that allow it to integrate better with source control and with the app distribution system. But I would love to see Apple open up the extension ecosystem again. For web development, I use Microsoft\u0026rsquo;s Visual Studio Code. Even though this is a cross-platform Electron-based web app, it is a great tool. It doesn\u0026rsquo;t look like a native Mac app but it performs well. But it\u0026rsquo;s major advantage is the huge number and variety of extensions so you can make VSC look and work the way you want. Apple has deliberately closed Xcode off from this sort of community involvement which is great shame.\u003c/p\u003e\n\u003cp\u003eApple will tell you that they do allow Xcode extensions. But these are limited in scope, difficult to install and opaque to use. Xcode extensions used to be great - please bring them back again.\u003c/p\u003e\n\u003ch3 id=\"developer-relations\"\u003e\n  Developer Relations\n  \u003ca href=\"#developer-relations\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThis is where things get nasty. We all know that Tim Cook will bounce on to the WWDC stage saying how much they love their developers and how many billions they\u0026rsquo;ve paid out, but this is really just a smoke screen. Most of the money goes to a few large software houses who basically blackmail users into paying over and over again to make their apps (mostly games) usable. The race to the bottom has resulted in app stores where charging up front for an app is virtually impossible, although the Mac App Store is slightly better in this regard.\u003c/p\u003e\n\u003cp\u003eThe big issue is Apple\u0026rsquo;s extremely erratic policing of the app stores. They allow behaviour in some apps and ban it is others. Big players get different treatment to small. Despite claiming that the app stores are the safe place to buy apps, Apple makes almost no effort to weed out scam apps, copyright infringements or fake reviews even when they are completely obvious to the most casual search.\u003c/p\u003e\n\u003cp\u003eI don\u0026rsquo;t mind paying Apple a cut of my app revenue. They do a lot of work that I would find tedious or difficult to set up for myself. I don\u0026rsquo;t even mind their restrictions. What I mind very deeply is the inconsistent way this is handled. I would love it if the App Stores lived up to Apple\u0026rsquo;s claim as being the safe place to buy apps, but in reality, app buyers are being fooled by purchased reviews, tricked into in-app purchases, and cannot assume that the rules designed to keep them safe have been applied to all apps.\u003c/p\u003e\n\u003ch3 id=\"summary\"\u003e\n  Summary\n  \u003ca href=\"#summary\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eSo what would I really like to see at WWDC 2022?\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eiCloud syncing that works on all Apple platforms.\u003c/li\u003e\n\u003cli\u003eReal Xcode extensions.\u003c/li\u003e\n\u003cli\u003eNew App Store rules to weed out copycat apps and fake reviews and that apply equally to all developers.\u003c/li\u003e\n\u003cli\u003eBetter notifications for macOS - preferably the type we used to have.\u003c/li\u003e\n\u003c/ul\u003e"
    },
    {
        "title" : "macOS Book",
        "date_published" : "2022-04-09T10:53:43+10:00",
        "date_modified" : "2022-04-09T10:53:43+10:00",
        "id" : "https://troz.net/post/2022/macos_book/",
        "url" : "https://troz.net/post/2022/macos_book/",
        "content_html" : "\u003cp\u003eI can finally reveal the reason I have not been blogging. I have been busy writing a book. It\u0026rsquo;s finally out, so here it is: \u003ca href=\"https://www.kodeco.com/books/macos-by-tutorials\"\u003emacOS by Tutorials\u003c/a\u003e, published by \u003ca href=\"https://www.kodeco.com/\"\u003ekodeco.com\u003c/a\u003e (formerly raywenderlich.com).\u003c/p\u003e\n\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n\u003c/style\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/book_cover.png\" alt=\"Book Cover\"\u003e\u003c/p\u003e\n\u003cp\u003eAnyone who reads my posts or tweets will know that I am a passionate advocate for building real native macOS apps. This book is aimed at iOS developers who know some Swift and SwiftUI but don\u0026rsquo;t yet know all the tips and tricks needed to convert that knowledge into a great Mac experience.\u003c/p\u003e\n\u003cp\u003eYou don\u0026rsquo;t need to be a highly experienced developer, but some basic Swift will be useful.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"contents\"\u003e\n  Contents\n  \u003ca href=\"#contents\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThe book consists of five sections. In each of the first four sections, I\u0026rsquo;ll walk you through developing a complete app. Each one is a different type of app using different techniques and different frameworks.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSection 1\u003c/strong\u003e: Use SwiftUI to build a multi-paned window app. Learn how to manage windows, menus and toolbars.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSection 2\u003c/strong\u003e: Build a menu-bar app using AppKit with a bit of SwiftUI.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSection 3\u003c/strong\u003e: Back to SwiftUI to create a document-based app, with a bit of AppKit.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSection 4\u003c/strong\u003e: Use your new skills to make an app that communicates with the macOS Terminal.\u003c/p\u003e\n\u003cp\u003eThe final section deals with app distribution, covering both inside and outside the Mac App Store.\u003c/p\u003e\n\u003cp\u003eYou can read more details of the book contents and why I wanted to write it in the \u003ca href=\"https://www.kodeco.com/books/macos-by-tutorials/v1.0/chapters/v-introduction\"\u003eIntroduction\u003c/a\u003e which is a free section.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"thanks-to\"\u003e\n  Thanks to\u0026hellip;\n  \u003ca href=\"#thanks-to\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eI call this \u003cem\u003emy\u003c/em\u003e book, but of course, it was only made possible by an awesome team. There were a lot of people involved, but I want to give special thanks to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/RayFromVA\"\u003eRay Wenderlich\u003c/a\u003e who always has time for my Mac obsession and who let me write the book I wanted to write.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/mandarazeware\"\u003eManda Frederick\u003c/a\u003e was the book team lead when we started and was a huge source of encouragement.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/rcritz\"\u003eRichard Critz\u003c/a\u003e, the wonderful editor who had the unenviable task of fixing my grammar. He was very supportive and helped me to convince everyone of the merits of this approach.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/mataharimau\"\u003eAudrey Tam\u003c/a\u003e and \u003ca href=\"https://twitter.com/Waheiba\"\u003eEhab Amer\u003c/a\u003e were the amazing tech editors who had to make sure the instructions all worked and made sense. They took what I wrote and made it a lot better.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe whole team at \u003ca href=\"https://twitter.com/rwenderlich\"\u003eKodeco / Ray Wenderlich\u003c/a\u003e was great, so a huge thanks to them all. And I hope they enjoyed working on the book half as much as I did, because I had the best time!\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"where-can-you-read-the-book\"\u003e\n  Where can you read the book?\n  \u003ca href=\"#where-can-you-read-the-book\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eYou can read it online at \u003ca href=\"https://www.kodeco.com/books/macos-by-tutorials\"\u003ekodeco.com\u003c/a\u003e as part of a Kodeco subscription.\u003c/li\u003e\n\u003cli\u003eYou can download an ebook (ePub or pdf) at the same page if you have a subscription or buy one there if you don\u0026rsquo;t.\u003c/li\u003e\n\u003cli\u003eThe paperback is available at \u003ca href=\"https://www.amazon.com/dp/1950325660/\"\u003eAmazon\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAll the code and extra materials for the book can be downloaded or cloned from \u003ca href=\"https://github.com/kodeco/mos-materials/tree/editions/1.0\"\u003eGitHub\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"feedback\"\u003e\n  Feedback\n  \u003ca href=\"#feedback\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eI would love to hear from anyone who read the book, loved it, hated it, found an error or just wanted to say hello.\u003c/p\u003e\n\u003cp\u003eYou can contact me directly using any of the contact links at the bottom of this page or through the \u003ca href=\"/contact/\"\u003eContact\u003c/a\u003e page.\nThere is also an \u003ca href=\"https://forums.kodeco.com/c/books/macos-by-tutorials\"\u003eofficial forum\u003c/a\u003e for the book where you can ask questions and tell us about any errors you find.\u003c/p\u003e"
    },
    {
        "title" : "Site Search",
        "date_published" : "2021-10-25T09:57:12+10:00",
        "date_modified" : "2021-10-25T09:57:12+10:00",
        "id" : "https://troz.net/post/2021/site_search/",
        "url" : "https://troz.net/post/2021/site_search/",
        "content_html" : "\u003cp\u003eNot much action on the site lately as I work on other projects. But I have finally got around to adding a search option to the site.\u003c/p\u003e\n\u003cp\u003eI use \u003ca href=\"https://gohugo.io/\"\u003eHugo\u003c/a\u003e as a static site generator, which is great but Hugo doesn\u0026rsquo;t come with any search facility.\u003c/p\u003e\n\u003cp\u003eToday, I read an article by Jesse Squires on \u003ca href=\"https://www.jessesquires.com/blog/2018/02/25/replacing-google-with-duckduckgo/\"\u003eReplacing Google Search with DuckDuckGo\u003c/a\u003e and while I had already switched to using \u003ca href=\"https://duckduckgo.com\"\u003eDuckDuckGo\u003c/a\u003e for my own web searching, I had not considered it for my site search.\u003c/p\u003e\n\u003cp\u003eIt isn\u0026rsquo;t as good as an in-built search page, which I have considered setting up using \u003ca href=\"https://www.algolia.com\"\u003eAlgolia\u003c/a\u003e, but that requires a lot of setup and I never got round to it. This search takes you out of my site and into a DuckDuckGo page, but it limits the search options to the troz.net domain.\u003c/p\u003e\n\u003cp\u003eTo access the search, go to either the \u003ca href=\"/post/\"\u003eArchives\u003c/a\u003e or the \u003ca href=\"/tags/\"\u003eTags\u003c/a\u003e page, and use the search field at the top of the page.\u003c/p\u003e\n\u003cp\u003eAs a side note, if you are using DuckDuckGo as your regular search engine, read up about their \u003ca href=\"https://duckduckgo.com/bang\"\u003e!bangs\u003c/a\u003e. These are quick and easy ways to target your search. you can prefix your search with \u003ccode\u003e!so\u003c/code\u003e to search Stack Overflow, or \u003ccode\u003e!i\u003c/code\u003e to search for images. Search the \u003ca href=\"https://duckduckgo.com/bang\"\u003e!bangs\u003c/a\u003e page to find the ones that are useful to you.\u003c/p\u003e"
    },
    {
        "title" : "The Apple DTK Gamble",
        "date_published" : "2021-02-04T18:57:21+10:00",
        "date_modified" : "2021-02-04T18:57:21+10:00",
        "id" : "https://troz.net/post/2021/apple_dtk_gamble/",
        "url" : "https://troz.net/post/2021/apple_dtk_gamble/",
        "content_html" : "\u003cp\u003eSo I gambled…\u003c/p\u003e\n\u003cp\u003eI hoped Apple would do the right thing by developers who paid for access to the Developer Transition Kit (DTK) to get the first Apple Silicon Macs, but I was wrong and I lost.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eUPDATE - 6 Feb 2020:\u003c/strong\u003e Apple has responded to feedback from me and other disgruntled developers and so I didn\u0026rsquo;t lose as much as I thought. Apple is now giving US $500 credit, which is what developers in the US paid for the DTK, and they are extending the time limit to the end of the year. I am quite certain they will release a desktop M1 Mac before then, so I will get credit for most of the cost of the DTK (after exchange rate losses) and I will be able to use the credit towards a Mac that I want.\u003c/p\u003e\n\u003cp\u003eThanks Apple for listening and reacting.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cp\u003eI paid Apple AU $779 for a year’s lease on a DTK which was effectively a Mac mini with an iPad CPU.\nI also had to buy a monitor to use with it.\u003c/p\u003e\n\u003cp\u003eThat was in June 2020.\u003c/p\u003e\n\u003cp\u003eIn November 2020, the M1 was released which made the A14Z based DTK totally irrelevant for testing or development, so the lease effectively only lasted for 5 months. At that I was luckier than many devs as a lot of these DTK machines started failing at around the 4 month mark.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eI kept Apple’s secrets.\u003c/li\u003e\n\u003cli\u003eI tested their hardware and software.\u003c/li\u003e\n\u003cli\u003eI filed bug reports, a couple of which even got acknowledged.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAnd in return, I get asked to send back the DTK some months early for which I will get the princely reward of US $200 credit.\u003c/p\u003e\n\u003cp\u003eWhen Apple switched over to Intel CPUs, they gave the DTK buyers a free computer when they returned the DTK, but of course Apple wasn\u0026rsquo;t a trillion dollar company back then so they could afford to be generous. (How does one indicate heavy sarcasm in text?)\u003c/p\u003e\n\u003cp\u003eI don’t want a laptop, I want a desktop Mac, so there is nothing to spend my $200 credit on yet, but as a final sting in the tail, Apple has decreed that the credit expires at the end of May 2021. There is no guarantee that there will be desktop Mac to buy before then. Only Apple knows that and they have made me cynical enough to consider that they might decide not to release any new Macs until after these credits expire.\u003c/p\u003e\n\u003cp\u003eI realize that Apple made no commitment to do anything after the DTK program was over, but history indicated they would.\u003c/p\u003e\n\u003cp\u003eThe smallness of the credit and the short time limit on it seem unnecessarily petty and punitive, especially when the people they are punishing are the ones that add so much value to the Apple platforms.\u003c/p\u003e\n\u003cp\u003eAssuming I have to get a laptop, I will want a high-powered one as it will have to be able to run Xcode. Apple\u0026rsquo;s flagship developer tool is famously demanding.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eIn the US, the one I want costs US $1,899\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eHere in Australia, it is AU $2,899 - 1.53 times the US price.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe US$200 credit will use the exchange rate at 23 December 2020, which for USD - AUD was 1.3218 which is significantly lower than the ratio in Apple’s pricing between the two countries.\u003c/p\u003e\n\u003cp\u003eThis means that I will get AU $264.36 for my credit, which is 9% of the cost of the computer to replace it, even though that is not the computer I actually want.\u003c/p\u003e\n\u003cp\u003eFinancially, I would have been much better off waiting until the M1s were released. But Apple needed the early machines tested, so they suckered us in and then slapped us in the face.\u003c/p\u003e\n\u003cp\u003eI wonder how Tim Cook and the others can stand up again and again and say that they value their developers. Does that not make them feel ashamed? Or maybe they struggle not to laugh while saying it?\u003c/p\u003e\n\u003cp\u003eThanks Apple.\u003c/p\u003e\n\u003cp\u003eAnd good luck finding suckers to test your next round of new hardware.\u003c/p\u003e"
    },
    {
        "title" : "SwifUI Mac Menus",
        "date_published" : "2021-01-24T15:24:17+10:00",
        "date_modified" : "2021-01-24T15:24:17+10:00",
        "id" : "https://troz.net/post/2021/swiftui_mac_menus/",
        "url" : "https://troz.net/post/2021/swiftui_mac_menus/",
        "content_html" : "\u003cp\u003eWith the option to create apps using the \u003cstrong\u003eSwiftUI App\u003c/strong\u003e life cycle, we get a new way to set up menus in Mac apps. This post will explore some of the ways to do this as well as look at the default menu groups that Apple gives us.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eWhen you create a new Mac app, the standard menu items are included for you. Using the \u003ccode\u003ecommands\u003c/code\u003e modifier on the \u003ccode\u003eWindowGroup\u003c/code\u003e allows you to add new menus, add new menu items and to replace or remove existing menu items.\u003c/p\u003e\n\u003ch2 id=\"adding-a-new-menu\"\u003e\n  Adding a New Menu\n  \u003ca href=\"#adding-a-new-menu\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eTo add a completely new menu, you can use \u003ccode\u003eCommandMenu\u003c/code\u003e, supplying it with a title and the contents to display.\u003c/p\u003e\n\u003cp\u003eAfter starting this process, the App.swift file looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@main\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMenuSamplesApp\u003c/span\u003e: App {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some Scene {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tWindowGroup {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tContentView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t.commands {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tCommandMenu(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Custom Menu\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#75715e\"\u003e// no contents yet\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSo what can be put inside the menu? We are used to only being allowed to use \u003ccode\u003eNSMenuItems\u003c/code\u003e but with SwiftUI there are no such things. It turns out that you can put quite a few SwiftUI views into a menu.\u003c/p\u003e\n\u003cp\u003eThe most obvious is a \u003ccode\u003eButton\u003c/code\u003e with an action which appears like any standard menu item.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCommandMenu(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Custom Menu\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tButton(action: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tprint(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Menu Button selected\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}, label: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tText(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Menu Button\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI have found that the easiest way to pass this selection on to other views is via a notification. Buttons can be disabled and enabled just as usual.\u003c/p\u003e\n\u003cp\u003eThe contents of the button will usually be a \u003ccode\u003eText\u003c/code\u003e view, but it can include an \u003ccode\u003eImage\u003c/code\u003e view if you want to use an SFSymbol or any other image in the menu.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eButton(action: {}, label: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tImage(systemName: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;clock\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tText(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Date \u0026amp; Time\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eApart from Buttons, there are several other SwiftUI Views that work in a menu. A very common use case in a menu is to have a switchable boolean setting that is displayed with a leading check mark if it is on.\u003c/p\u003e\n\u003cp\u003eThis can be done using a \u003ccode\u003eToggle\u003c/code\u003e view.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eToggle(isOn: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003etoggleSetting, label: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tText(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Toggle\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI created a variable to hold the setting using \u003ccode\u003e@State\u003c/code\u003e but \u003ccode\u003e@AppStorage\u003c/code\u003e would be better if this setting needed to persist between launches. To respond to changes, you can use an \u003ccode\u003eonChange\u003c/code\u003e modifier.\u003c/p\u003e\n\u003cp\u003eThis demonstrates one of the huge strengths of SwiftUI\u0026rsquo;s declarative approach. You tell the compile you want a \u003ccode\u003eToggle\u003c/code\u003e and it is automatically structured to fit the place and platform where it is being used.\u003c/p\u003e\n\u003cp\u003eA \u003ccode\u003ePicker\u003c/code\u003e is a good choice for allowing a single selection from multiple options. This makes a sub menu with check marks.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ePicker(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Appearance\u0026#34;\u003c/span\u003e, selection: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003epickerChoice) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tText(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Dark\u0026#34;\u003c/span\u003e).tag(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dark\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tText(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Light\u0026#34;\u003c/span\u003e).tag(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;light\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tText(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;System\u0026#34;\u003c/span\u003e).tag(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;system\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTo make a sub-menu with standard menu items like buttons, use \u003ccode\u003eMenu\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eMenu(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Sub Menu\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tButton(action: {}, label: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tText(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Sub Item 1\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tButton(action: {}, label: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tText(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Sub Item 2\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tButton(action: {}, label: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tText(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Sub Item 3\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eMenu items are often best split up with a separator and this is done in SwiftUI by adding a \u003ccode\u003eDivider()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIf you try a UI element in a menu and it doesn\u0026rsquo;t work, it tends to show as disabled text and doesn\u0026rsquo;t break the menu, so experiment. I was surprised to find that \u003ccode\u003eLink\u003c/code\u003e does not work in a menu.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"editing-existing-menus\"\u003e\n  Editing Existing Menus\n  \u003ca href=\"#editing-existing-menus\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eI have covered creating a new menu, but what about adding new items to an existing menu?\u003c/p\u003e\n\u003cp\u003eIn this case, use \u003ccode\u003eCommandGroup\u003c/code\u003e instead of \u003ccode\u003eCommandMenu\u003c/code\u003e. The difference is that instead of setting a title for the menu, you give it a placement option with a reference to an existing standard menu item.\u003c/p\u003e\n\u003cp\u003eStill inside the \u003ccode\u003ecommands\u003c/code\u003e contents, start typing \u003ccode\u003eCommandGroup\u003c/code\u003e to see three options:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eCommandGroup(after:, addition:)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCommandGroup(before:, addition:)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCommandGroup(replacing:, addition:)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn each case, the first parameter is a \u003ccode\u003eCommandGroupPlacement\u003c/code\u003e that specifies one of a limited range of standard menu items.\u003c/p\u003e\n\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n\u003c/style\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/CommandGroupPlacement.png\" alt=\"CommandGroupPlacement\"\u003e\u003c/p\u003e\n\u003cp\u003eThe options for the menu items inside a \u003ccode\u003eCommandGroup\u003c/code\u003e are just the same as when creating your own menu.\u003c/p\u003e\n\u003ch3 id=\"removing-a-standard-menu-item\"\u003e\n  Removing a Standard Menu Item\n  \u003ca href=\"#removing-a-standard-menu-item\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eIf you really want to get rid of one of the default menu items (or groups of items), you can use \u003ccode\u003eCommandGroupPlacement\u003c/code\u003e and replace the existing one with an \u003ccode\u003eEmptyView()\u003c/code\u003e. This is probably not a great idea as regards the Human Interface Guidelines but it is an option if you need it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCommandGroup(replacing: CommandGroupPlacement.appVisibility) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tEmptyView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou can also replace an existing menu item with your own version if you want to be able to respond to it in a more custom way. I can imagine doing this for the Help menu item as I do not like using Apple\u0026rsquo;s Help system and prefer to direct users elsewhere.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"preset-menu-groups\"\u003e\n  Preset Menu Groups\n  \u003ca href=\"#preset-menu-groups\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eIf you watched my \u003ca href=\"https://backtomac.org\"\u003eBack to the Mac\u003c/a\u003e talk called \u003ca href=\"https://www.youtube.com/watch?v=hus2LksB3O4\"\u003eBuild a Mac app inside 30 minutes using nothing but SwiftUI\u003c/a\u003e, you will have seen who I used a rather clunky function to dive into AppKit in order to stop the sidebar disappearing completely and permanently.\u003c/p\u003e\n\u003cp\u003eIf you haven\u0026rsquo;t watched it yet, go and take a look - I\u0026rsquo;ll wait… If you made it this far, I assume you are a Mac app fan like me and I think you will enjoy the talk as it demonstrated a lot of SwiftUI Mac app techniques.\u003c/p\u003e\n\u003cp\u003eSince I recorded that video, I found out that Apple provides preset menu groups for dealing with certain things and one of them is for sidebars. My clunky solution is still useful if you want to have a toolbar button, but I think I would include the menu group as well.\u003c/p\u003e\n\u003cp\u003eThere are five present Commands groups provided by Apple, four of which are useful and the fifth has a purpose that escapes me.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSidebarCommands()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eToolbarCommands()\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eInserting both these into your \u003ccode\u003ecommands\u003c/code\u003e will expand the default View menu, so that it goes from this:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/BasicViewMenu.png\" alt=\"BasicViewMenu\"\u003e\u003c/p\u003e\n\u003cp\u003eTo this:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/SidebarToolbarMenu.png\" alt=\"SidebarToolbarMenu\"\u003e\u003c/p\u003e\n\u003cp\u003eYou do not need to include both, but it was easier to show in one screen shot instead of two.\u003c/p\u003e\n\u003cp\u003eIf your app allows any serious text editing, you are going to want to use:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eTextEditingCommands()\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhich changes the default Edit menu from this:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/BasicEditMenu.png\" alt=\"BasicEditMenu\"\u003e\u003c/p\u003e\n\u003cp\u003eTo this:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/TextEditingMenu.png\" alt=\"TextEditingMenu\"\u003e\u003c/p\u003e\n\u003cp\u003eAnd if you need your users to be able to format text, including:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eTextFormattingCommands()\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eadds in a Format menu.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/TextFormattingMenu.png\" alt=\"TextFormattingMenu\"\u003e\u003c/p\u003e\n\u003cp\u003eAnd finally, there is \u003ccode\u003eEmptyCommands()\u003c/code\u003e which does nothing and has no obvious use.\u003c/p\u003e\n\u003cp\u003eThese are used like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.commands {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tSidebarCommands()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tToolbarCommands()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tTextEditingCommands()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tTextFormattingCommands()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"using-a-separate-file\"\u003e\n  Using a Separate File\n  \u003ca href=\"#using-a-separate-file\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eIf you are adding a lot of menus, you are probably starting to feel that your App.swift file is getting a bit crowded. You can separate out these menu commands into one or more separate files, so long as they are contained in a struct that conforms to the \u003ccode\u003eCommands\u003c/code\u003e protocol and which has a \u003ccode\u003ebody\u003c/code\u003e that also conforms to \u003ccode\u003eCommands\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMenuCommands\u003c/span\u003e: Commands {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t@Binding \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e toggleSetting: Bool\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some Commands {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tCommandMenu(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Custom Menu\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tButton(action: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tprint(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Menu Button selected\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}, label: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tText(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Menu Button\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tDivider()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tToggle(isOn: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003etoggleSetting, label: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tText(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Toggle\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t})\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis struct cannot have its own data or you will get lots of warnings, but it can have bindings to data from its parent. Insert a call to this struct, and any others you have created, in the \u003ccode\u003ecommands\u003c/code\u003e modifier, just like for the Apple presets.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@State \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e toggleSetting = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// ...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e.commands {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tMenuCommands(toggleSetting: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003etoggleSetting)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tSidebarCommands()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"bonus-credits\"\u003e\n  Bonus: Credits\n  \u003ca href=\"#bonus-credits\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eEvery Mac app has an \u0026ldquo;About …\u0026rdquo; menu item which brings up a simple dialog box with basic app information: icon, app name and version number. These will always appear but there is an easy way to add more information underneath this info and it can include formatted text and links.\u003c/p\u003e\n\u003cp\u003eCreate a new file called \u003ccode\u003eCredits.rtf\u003c/code\u003e - the New File dialog has a Rich Text File option. Anything in a file with this exact name will be shown below the standard information in the About box.\u003c/p\u003e\n\u003cp\u003eXcode\u0026rsquo;s RTF editor is not great, but it is good enough for this. There are some basic formatting tools above the text editor, but you can also right-click on text to get more options, including Font and Color panels.\u003c/p\u003e\n\u003cp\u003eTo insert a web link, go to the Editor menu and select Add Link…\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eWell that\u0026rsquo;s it. A quick round-up of the ways to use menus in your SwiftIU Mac apps. I hope you found it useful. If you have any suggestions, comments, corrections or improvements, please contact me using one of the links below or through the \u003ca href=\"/contact/\"\u003eContact\u003c/a\u003e page.\u003c/p\u003e"
    },
    {
        "title" : "SwiftUI Data Flow",
        "date_published" : "2021-01-24T15:17:14+10:00",
        "date_modified" : "2021-01-24T15:17:14+10:00",
        "id" : "https://troz.net/post/2019/swiftui-data-flow/",
        "url" : "https://troz.net/post/2019/swiftui-data-flow/",
        "content_html" : "\u003cp\u003e\u003ca href=\"https://developer.apple.com/xcode/swiftui/\"\u003eSwiftUI\u003c/a\u003e gives us a completely new way to lay out out user interfaces, in a declarative and responsive way. Your data dictates what is displayed. But this leads to a new problem - how should the data models be constructed and how can they be passed around between the various views that make up your app?\u003c/p\u003e\n\u003cp\u003eIn this post, I intend to discuss the possibilities with examples.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUpdate - January 2021:\u003c/strong\u003e I think the information in this post is still all valid except for one change. When you are initializing an ObservableObject, you should use \u003ccode\u003e@StateObject\u003c/code\u003e instead of \u003ccode\u003e@ObservedObject\u003c/code\u003e. Your views can receive objects that are owned by other views as \u003ccode\u003e@ObservedObject\u003c/code\u003e or \u003ccode\u003e@EnvironmentObject\u003c/code\u003e but the owner of the data should always create the data object with \u003ccode\u003e@StateObject\u003c/code\u003e.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eFor a great diagram showing what data object type to use where, check out this image from \u003ca href=\"https://twitter.com/chriseidhof/status/1280433133813456896\"\u003eChris Edihof\u003c/a\u003e - thanks Chris!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/dataflow.png\" alt=\"Data flow\"\u003e\u003c/p\u003e\n\u003cp\u003eIf you read this article before November 18th 2019, please check out \u003ca href=\"/post/2019/swiftui-data-flow/#observable2\"\u003eObservableObject \u0026amp; @ObservedObject - Part 2\u003c/a\u003e again as it has gone through several iterations, which are all shown for comparison.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eAt WWDC 2019, some Apple engineers gave a great presentation on \u003ca href=\"https://developer.apple.com/videos/play/wwdc2019/226/\"\u003eData Flow Through SwiftUI\u003c/a\u003e and I strongly recommend watching the video. But you need to watch it twice. First watch it so that you can get started, and then, when you feel that this is all way too complicated, watch it again and it will start to click into place. The only real difference between then and now is that BindableObject has become ObservableObject.\u003c/p\u003e\n\u003cp\u003eI guess I could stop there, but I will be illustrating my ideas with code examples, which I hope will make things clearer. Some of the examples are rather contrived in order to make a point, but the sample code is also sprinkled with other SwiftUI examples which I hope will prove useful.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/trozware/swiftui-data-flow/tree/master\"\u003eDownload the sample project from GitHub\u003c/a\u003e and open it in Xcode. Go to ContentView.swift and make sure the Canvas is open. Click Resume to make the view appear. Then click the Live Preview button and wait for the view to become active. I recommend clicking the Pin button at the bottom left of the Canvas so that you can investigate the code samples, while still working in the main navigation.\u003c/p\u003e\n\u003ch2 id=\"data-flow-options\"\u003e\n  Data Flow Options\n  \u003ca href=\"#data-flow-options\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eThere are 5 ways to specify data in SwiftUI:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eProperty\u003c/li\u003e\n\u003cli\u003e@State\u003c/li\u003e\n\u003cli\u003e@Binding\u003c/li\u003e\n\u003cli\u003eObservableObject \u0026amp; @ObservedObject\u003c/li\u003e\n\u003cli\u003e@EnvironmentObject\u003c/li\u003e\n\u003c/ul\u003e\n\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n  }\n\u003c/style\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/ContentView.png\" alt=\"Content View\"\u003e\u003c/p\u003e\n\u003ch2 id=\"property\"\u003e\n  Property\n  \u003ca href=\"#property\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eProperty\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Property\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e greeting = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello from SwiftUI!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Using property directly\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         Text(greeting)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e             .font(.title)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn this example, the \u003ccode\u003egreeting\u003c/code\u003e property is used in the view. \u003ccode\u003egreeting\u003c/code\u003e is static, so the view does not need to monitor it for changes. This may seem like a simplistic and obvious example, but separating it out allows for localization or re-usability.\u003c/p\u003e\n\u003cp\u003eThe property could also have been supplied by a parent view and this is a really useful feature of properties. A parent view can have some dynamic data that it can use to set properties in a subview where the subview only needs to display the data statically. This data will change as the parent view changes but the subview will not be able to change the data in the parent view.\u003c/p\u003e\n\u003cp\u003eAnd it is important to remember that not everything needs to be set up with one of these new property wrappers.\u003c/p\u003e\n\u003ch2 id=\"state\"\u003e\n  @State\n  \u003ca href=\"#state\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eThis is where things start to get very interesting in the SwiftUI world. SwiftUI views are contained in structs, so are non-mutable. Also, the views are re-created every time the data changes, so any properties are re-created then too. By marking a property with the \u003ccode\u003e@State\u003c/code\u003e property wrapper, you are telling SwiftUI that you want it to keep this data in a separate portion of memory, allow it to be mutated, and preserve the current value during the view refresh.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUsingState\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @State \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e toggleValue = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Using state with 2-way binding\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         Toggle(isOn: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003etoggleValue) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e             Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Toggle is \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.toggleValue ? \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ON\u0026#34;\u003c/span\u003e : \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;OFF\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         .padding(\u003cspan style=\"color:#ae81ff\"\u003e50\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn this example, \u003ccode\u003etoggleValue\u003c/code\u003e is declared as a \u003ccode\u003eBool\u003c/code\u003e with a property wrapper of \u003ccode\u003e@State\u003c/code\u003e. Inside the \u003ccode\u003eToggle\u003c/code\u003e, the \u003ccode\u003eisOn\u003c/code\u003e value is bound to \u003ccode\u003etoggleValue\u003c/code\u003e by the leading \u003ccode\u003e$\u003c/code\u003e. This allows the variable to set the toggle and the toggle to set the variable - 2-way binding.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Toggle.png\" alt=\"Toggle\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e@State\u003c/code\u003e variables are always value types and are usually local to their view, so Apple recommends marking them as \u003ccode\u003eprivate\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAnd unlike properties, \u003ccode\u003e@State\u003c/code\u003e variables allow you to have data that is dynamic but it can still be passed to subviews as properties for display.\u003c/p\u003e\n\u003ch2 id=\"binding\"\u003e\n  @Binding\n  \u003ca href=\"#binding\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eOne problem with building SwiftUI views is that it is very easy to end up with a gigantic Pyramid of Doom as you embed views within views within views. The solution is to extract subviews, but then you need a way to pass the data to the subview.\u003c/p\u003e\n\u003cp\u003eThis is where \u003ccode\u003e@Binding\u003c/code\u003e comes in as it allows you to tell a view that the data for a property is actually coming from a parent but that the subview is allowed to change that property and that change will flow back to the parent\u0026rsquo;s data.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNumbers\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @State \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e stepperValue = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        NumberChooser(stepperValue: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003estepperValue)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNumberChooser\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Using state from parent with 2-way binding\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Binding \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e stepperValue: Int\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ZStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            VStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Stepper(value: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003estepperValue, \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e0.\u003c/span\u003e..\u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Value = \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003estepperValue\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                NumberBlock(stepperValue: stepperValue)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNumberBlock\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// As this view never changes the value, there is no need to bind it\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e stepperValue: Int\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Image(systemName: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003estepperValue\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e.square\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn this example, I have declared a \u003ccode\u003estepperValue\u003c/code\u003e property and marked it with \u003ccode\u003e@State\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe interface has been extracted into a subview called \u003ccode\u003eNumberChooser\u003c/code\u003e and a \u003ccode\u003eBinding\u003c/code\u003e to the \u003ccode\u003estepperValue\u003c/code\u003e property has been passed to \u003ccode\u003eNumberChooser\u003c/code\u003e using the \u003ccode\u003e$\u003c/code\u003e prefix, which will ensure that changes to the value can come back. Inside \u003ccode\u003eNumberChooser\u003c/code\u003e this property is wrapped in the \u003ccode\u003e@Binding\u003c/code\u003e property wrapper to indicate that it is coming from another source and that changes will be returned.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eNumberChooser\u003c/code\u003e itself has a subview called \u003ccode\u003eNumberBlock\u003c/code\u003e but it is a display view only and never mutates the value itself, so \u003ccode\u003estepperValue\u003c/code\u003e is passed to this subview as a property only, without the \u003ccode\u003e$\u003c/code\u003e prefix. It will still be updated every time the data changes as it is contained by the view with the \u003ccode\u003e@State\u003c/code\u003e property.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/NumberChooser.png\" alt=\"Number Chooser\"\u003e\u003c/p\u003e\n\u003ch2 id=\"state--binding---part-2\"\u003e\n  @State \u0026amp; @Binding - Part 2\n  \u003ca href=\"#state--binding---part-2\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eSo far, the examples have used primitive data types for the @State properties, but given that \u003ccode\u003e@State\u003c/code\u003e properties are value types, any struct can be used. In the next example, I use a struct to hold the properties of a pizza order and use a SwiftUI Form to allow selections.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePizzaView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Using @State for a struct\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @State \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e pizza = Pizza()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            VStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Form {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#75715e\"\u003e// Using 2-way binding but each component\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#75715e\"\u003e// only needs 1 property from the struct\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    PizzaNamePicker(selectedPizzaName: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003epizza.name)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    PizzaSizePicker(selectedPizzaSize: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003epizza.size)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    PizzaCrustPicker(selectedPizzaCrust: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003epizza.crust)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e// Text representation to prove that the\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e// subviews are modifying the parent struct\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Text(pizza.pizzaSelection)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e             }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .navigationBarTitle(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Choose Your Pizza\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eEach subview gets the property it needs using \u003ccode\u003e@Binding\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePizzaNamePicker\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Binding \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e selectedPizzaName: PizzaName\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#75715e\"\u003e// see the GitHub project for more details\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe form consists of 3 subviews - one each for selecting the pizza, size and crust. The Pizza struct holds all three properties, but each subview only needs a \u003ccode\u003eBinding\u003c/code\u003e to the single property that it controls. The Text view after the Form is to prove that all the selections come back to the parent.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/PizzaView.png\" alt=\"Pizza View\"\u003e\u003c/p\u003e\n\u003ch2 id=\"observableobject--observedobject---part-1\"\u003e\n  ObservableObject \u0026amp; @ObservedObject - Part 1\n  \u003ca href=\"#observableobject--observedobject---part-1\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eThese are used if your data model is a class and you want to use reference-based data instead of the struct\u0026rsquo;s value-based system.\u003c/p\u003e\n\u003cp\u003eTo set up a data model to be Observable, it must conform to the \u003ccode\u003eObservableObject\u003c/code\u003e protocol and any property that needs to be observed should have the \u003ccode\u003e@Published\u003c/code\u003e property wrapper. This makes sure that any time this property changes, all the Views that are observing the instance of this data model will be notified to perform the UI updates.\u003c/p\u003e\n\u003cp\u003eFor this example, I have a ColorSet class with six color components that are used to assemble two RGB colors.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eColorSet\u003c/span\u003e: ObservableObject {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// ObservableObject\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// The 6 color components are marked as @Published so any changes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// get published to the views that are observing\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Published \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e foregroundRed = \u003cspan style=\"color:#ae81ff\"\u003e0.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Published \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e foregroundGreen = \u003cspan style=\"color:#ae81ff\"\u003e0.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Published \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e foregroundBlue = \u003cspan style=\"color:#ae81ff\"\u003e0.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Published \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e backgroundRed = \u003cspan style=\"color:#ae81ff\"\u003e1.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Published \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e backgroundGreen = \u003cspan style=\"color:#ae81ff\"\u003e1.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Published \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e backgroundBlue = \u003cspan style=\"color:#ae81ff\"\u003e1.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn the primary view, I set up an instance of this class as an \u003ccode\u003e@ObservedObject\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eColorSetView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @ObservedObject \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e colorSet = ColorSet()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe background of the view and the foreground of a system image are set using these colors. A button presents a sheet with sliders to allow editing these colors. The \u003ccode\u003ecolorSet\u003c/code\u003e is passed to the sheet like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  .sheet(isPresented: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003eshowChooser) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#75715e\"\u003e// notice that this does not use $ as the ColorChooser\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#75715e\"\u003e// will get a reference to the ColorSet object\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      ColorChooser(colorSet: \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.colorSet)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eColorChooser\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @ObservedObject \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e colorSet: ColorSet\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// ...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA sheet is not the ideal way of presenting a view that uses sliders for editing, but I wanted to demonstrate that changing the sliders instantly changes the value of the \u003ccode\u003e@ObservedObject\u003c/code\u003e for the parent view as well as for the subview. Editing the background color components shows the new background color in the back at the top of the sheet.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eColorChooser\u003c/code\u003e itself uses 2 subviews and they get a reference to the \u003ccode\u003eColorSet\u003c/code\u003e in the same manner.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/ColorChooser.png\" alt=\"Color Chooser\"\u003e\u003c/p\u003e\n\u003ch2 id=\"a-nameobservable2observableobject--observedobject---part-2a\"\u003e\n  \u003c!-- raw HTML omitted --\u003eObservableObject \u0026amp; @ObservedObject - Part 2\u003c!-- raw HTML omitted --\u003e\n  \u003ca href=\"#a-nameobservable2observableobject--observedobject---part-2a\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eThis section was that one that caused me the most trouble when writing the example app. I wanted to display a list of data and have each entry link to an editable detail view with the edits flowing back to the parent list.\u003c/p\u003e\n\u003cp\u003eThe initial display of data in a List was straight-forward and I was then able to have the list rows navigate to a detailed view for each entry. The problem was getting the edited data back to the parent List.\u003c/p\u003e\n\u003cp\u003eThe basic data model was an \u003ccode\u003eObservableObject\u003c/code\u003e that publishes an array of \u003ccode\u003ePersonViewModel\u003c/code\u003e objects.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePersonListModel\u003c/span\u003e: ObservableObject {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Published \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e persons: [PersonViewModel] = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efetchData\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// get data from web ...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        DispatchQueue.main.async {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.persons = newData\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSince this data is going to trigger a UI update after a background network call, it is important that changes to the \u003ccode\u003e@Published\u003c/code\u003e property get switched to the main thread.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003ePersonViewModel\u003c/code\u003e also needs to be \u003ccode\u003eObservable\u003c/code\u003e with the editable properties marked as \u003ccode\u003e@Published\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePersonViewModel\u003c/span\u003e: Identifiable, ObservableObject {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Even though this is not observed directly,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// it must be an ObservableObject for the data flow to work\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e id = UUID()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Published \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e first: String = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Published \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e last: String = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Published \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e phone: String = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe odd thing was the way that I had to pass the data to the detail view. This is what I tried initially:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  List {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      ForEach(personList.persons) { person \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          NavigationLink(destination:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              PersonDetailView(person: person)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003eperson.first\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003eperson.last\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd in \u003ccode\u003ePersonDetailView\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @ObservedObject \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e person: PersonViewModel\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis almost worked. The correct data was passed to the detail view, and the data edits changed the data, but the parent list was never re-drawn. If I changed a record\u0026rsquo;s first name then went back to the list, the change was not displayed. But if I then returned to the detail view for the same record, my edits were there, so I could tell that the data was changing correctly. The problem was how to change it in such a way that the parent view was notified of the change.\u003c/p\u003e\n\u003cp\u003eTrying to bind \u003ccode\u003eperson\u003c/code\u003e with \u003ccode\u003ePersonDetailView(person: $person)\u003c/code\u003e gave the error \u003ccode\u003eUse of unresolved identifier '$person'\u003c/code\u003e, so the \u003ccode\u003eForEach\u003c/code\u003e enumeration did not provide a direct connection to the \u003ccode\u003epersonList\u003c/code\u003e object.\u003c/p\u003e\n\u003cp\u003eThe solution I came up with was to switch to enumerating by index in the \u003ccode\u003eForEach\u003c/code\u003e and passing a direct member of the parent list\u0026rsquo;s data to the detail view. And switching the \u003ccode\u003ePersonDetailView\u003c/code\u003e to use \u003ccode\u003e@Binding var person: PersonViewModel\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eForEach(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e ..\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e personList.persons.count, id: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\\\u003c/span\u003e.\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e) { index \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    NavigationLink(destination:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        PersonDetailView(person: \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003epersonList.persons[index])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.personList.persons[index].first\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.personList.persons[index].last\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis works but as well as being hard to read, it has one major flaw. The rows in the table are identified by their row number, rather than by anything in the data like the \u003ccode\u003eperson.id\u003c/code\u003e. This can really mess with how SwiftUI handles the List and how it knows which rows have changed and need to be re-rendered. It is important to identify rows by something unique to the data in each row so that SwiftUI knows that you have deleted the row with the ID \u0026ldquo;abcd-1234\u0026rdquo; and not row #7. Because if you delete row ID \u0026ldquo;abcd-1234\u0026rdquo; there is no longer a row ID \u0026ldquo;abcd-1234\u0026rdquo; but if you delete row #7, there is now a different row #7 and anything could happen.\u003c/p\u003e\n\u003cp\u003e\u003c!-- raw HTML omitted --\u003e\u003cstrong\u003eUpdate 1:\u003c/strong\u003e \u003ca href=\"https://twitter.com/StewartLynch\"\u003e@StewartLynch\u003c/a\u003e contacted me to suggest a much neater way to pass the person data to the PersonDetailView by using a function to get a \u003ccode\u003eBinding\u0026lt;PersonViewModel\u0026gt;\u003c/code\u003e for each \u003ccode\u003eperson\u003c/code\u003e being displayed. This worked perfectly and made for a much cleaner looking bit of code. Thanks Stewart.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eForEach(personList.persons) { person \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    NavigationLink(destination:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        PersonDetailView(person: \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.selectedPerson(id: person.id))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003eperson.first\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003eperson.last\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd outside the \u003ccode\u003ebody\u003c/code\u003e declaration:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eselectedPerson\u003c/span\u003e(id: UUID) -\u0026gt; Binding\u0026lt;PersonViewModel\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eguard\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e index = \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.personList.persons.firstIndex(\u003cspan style=\"color:#66d9ef\"\u003ewhere\u003c/span\u003e: { $0.id == id }) \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        fatalError(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;This person does not exist.\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003epersonList.persons[index]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIf you want to have a look at Stewart\u0026rsquo;s solution, check out \u003ca href=\"https://github.com/trozware/swiftui-data-flow/tree/57f48ea28d1e987566398800e74f12e339eac231\"\u003ethis commit on GitHub\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUpdate 2:\u003c/strong\u003e \u003ca href=\"https://twitter.com/vadimshpakovski\"\u003e@vadimshpakovski\u003c/a\u003e says that creating a binding for every \u003ccode\u003eperson\u003c/code\u003e object is inefficient and that the function to create this binding will slow things down. He suggests using \u003ccode\u003eonReceive\u003c/code\u003e to react to changes to \u003ccode\u003eperson\u003c/code\u003e and trigger an update of \u003ccode\u003epersonList\u003c/code\u003e. In this case, \u003ccode\u003ePersonDetailView\u003c/code\u003e uses \u003ccode\u003e@ObservedObject var person: PersonViewModel\u003c/code\u003e. This also works perfectly.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  ForEach(personList.persons) { person \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      NavigationLink(destination:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          PersonDetailView(person: person)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              .onReceive(person.objectWillChange) { \u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                  \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.personList.objectWillChange.send()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003eperson.first\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003eperson.last\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIf you want to have a look at Vadim\u0026rsquo;s\u0026rsquo;s solution, check out \u003ca href=\"https://github.com/trozware/swiftui-data-flow/tree/093810bab93a984292c4a7b8bf29316a830e9f50\"\u003ethis commit on GitHub\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUpdate 3:\u003c/strong\u003e More suggestions have come in from the community (thanks to everyone who contributed) and it has been pointed out to me that while Vadim\u0026rsquo;s solution does solve a lot of the issues, it means that the entire \u003ccode\u003eForEach\u003c/code\u003e has to be recalculated to check for changes every time a single \u003ccode\u003ePerson\u003c/code\u003e is edited. And it also inserts model management code into the view code, which is not great.\u003c/p\u003e\n\u003cp\u003eSo my next attempt goes back to using \u003ccode\u003e@Binding var person: PersonViewModel\u003c/code\u003e in \u003ccode\u003ePersonDetailView\u003c/code\u003e but instead of \u003ccode\u003ePersonListModel\u003c/code\u003e having an array of \u003ccode\u003ePersonViewModels\u003c/code\u003e, it has an array of \u003ccode\u003eUUIDs\u003c/code\u003e and a dictionary of \u003ccode\u003eUUID: PersonListModel\u003c/code\u003e. The benefit of this is that the UUIDs can be used in the \u003ccode\u003eForEach\u003c/code\u003e as they are unique to each row, and the dictionary can be used to provide a Binding to the \u003ccode\u003eperson\u003c/code\u003e for each \u003ccode\u003eUUID\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis removes the problem of my original solution by identifying each row uniquely, it goes back to Stewart\u0026rsquo;s solution but eliminates the potential slow function to create a binding for the matching person, and eliminates the issue of complete redraws and model management inside views from Vadim\u0026rsquo;s suggestion.\u003c/p\u003e\n\u003cp\u003eBut it was not entirely straight-forward as getting a value from a dictionary by key returns an optional. At first I thought I could use the new \u003ccode\u003edefault\u003c/code\u003e syntax for dictionaries to get a non-optional value for binding but for some reason that couldn\u0026rsquo;t be used to create a \u003ccode\u003eBinding\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe answer was to write an extension on Dictionary with a \u003ccode\u003esubscript\u003c/code\u003e function that returns a non-optional value or gives a fatal error. Since I am in control of the data and set up every UUID with a matching PersonViewModel, this is not dangerous.\u003c/p\u003e\n\u003cp\u003eSo here is what we have now:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePersonListModel\u003c/span\u003e: ObservableObject {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Main list view model\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// ObservableObject so that updates are detected\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Published \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e ids: [UUID] = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Published \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e persons: [UUID : PersonViewModel] = [:]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efetchData\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// get data from web ...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        DispatchQueue.main.async {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e personViewModels = dataArray.map { PersonViewModel(with: $0) }.sorted() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              $0.last \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e $0.first \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e $1.last \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e $1.first\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.ids = personViewModels.map { $0.id }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.persons = Dictionary(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              uniqueKeysWithValues: personViewModels.map { ($0.id, $0) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe incoming data is mapped to a sorted array of \u003ccode\u003ePersonViewModels\u003c/code\u003e before extracting the UUIDs and creating the dictionary. This means that the UUIDs array is in the correct sort order for use in the \u003ccode\u003eForEach\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eHere is the Dictionary extension:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eextension\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDictionary\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ewhere\u003c/span\u003e Key == UUID, Value == PersonViewModel {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003esubscript\u003c/span\u003e(unchecked key: Key) -\u0026gt; Value {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eguard\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e result = \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e[key] \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                fatalError(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;This person does not exist.\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e result\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e[key] = newValue\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd these go together to allow this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eForEach(personList.ids, id: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\\\u003c/span\u003e.\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e) { id \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    NavigationLink(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        destination: PersonDetailView(person: \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003epersonList.persons[unchecked: id])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.personList.persons[unchecked: id].first\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.personList.persons[unchecked: id].last\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"/images/PersonListView.png\" alt=\"Person List View\"\u003e\u003c/p\u003e\n\u003cp\u003eThis ended up a bit more complicated than my original idea, but I think it is now \u003cem\u003egood\u003c/em\u003e SwiftUI, avoiding several problems from the earlier solutions.\u003c/p\u003e\n\u003cp\u003eThanks to \u003ca href=\"https://next.json-generator.com\"\u003eJSON Generator\u003c/a\u003e for the sample data. And if anyone has any other solutions to this problem, I would love to hear it. You can contact me using any of the buttons at the end of this article.\u003c/p\u003e\n\u003ch2 id=\"environmentobject\"\u003e\n  @EnvironmentObject\n  \u003ca href=\"#environmentobject\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eThink of the EnvironmentObject a piece of state that can be used by any view or any descendent of the view once it has been introduced. People who have used React or any of the similar web development technologies will be familiar with the concept of global state and this is similar to that, although not truely global.\u003c/p\u003e\n\u003cp\u003eYou set up a class as an EnvironmentObject model exactly as you would set up an ObservableObject with the same protocol conformance and using the \u003ccode\u003e@Published\u003c/code\u003e property wrapper to mark properties whose changes will trigger UI updates. Here is a very simple example with just one property.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUserSettings\u003c/span\u003e: ObservableObject {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Published \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e isLoggedIn: Bool = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"/images/NestedViews.png\" alt=\"Nested Views\"\u003e\u003c/p\u003e\n\u003cp\u003eIn this example, the yellow view is the parent view - the different views have different brightly colored backgrounds to make them easy to distinguish. The yellow view has access to the \u003ccode\u003eUserSettings\u003c/code\u003e like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNestingViews\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @EnvironmentObject \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e userSettings: UserSettings\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ZStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Color.yellow.edgesIgnoringSafeArea(.all)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            VStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e// UI omitted for space reasons\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e// display first nested view\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                ChildView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003eChildView\u003c/code\u003e contained in this parent - the green view - has no need to access this data and so gets no \u003ccode\u003e@EnvironmentObject\u003c/code\u003e property. But \u003ccode\u003eChildView\u003c/code\u003e contains another subview - the blue one. And this \u003ccode\u003eGrandChildView\u003c/code\u003e does need access to the \u003ccode\u003eUserSettings\u003c/code\u003e so it has the exact same \u003ccode\u003e@EnvironmentObject var userSettings: UserSettings\u003c/code\u003e property as the parent view.\u003c/p\u003e\n\u003cp\u003eIf this was using \u003ccode\u003e@ObservedObject\u003c/code\u003e the data would have to be passed through every view in an un-broken chain, even though \u003ccode\u003eChildView\u003c/code\u003e did not need this data. By using \u003ccode\u003e@EnvironmentObject\u003c/code\u003e the chain can be broken, but any view that needs to, can access and mutate this data. In the example, both the yellow and the blue views display and edit the same data with updates happening in both when either button is pressed.\u003c/p\u003e\n\u003cp\u003eOne key thing to remember about previewing \u003ccode\u003e@EnvironmentObject\u003c/code\u003e in the Canvas is that every view that uses it, or that contains a view that uses it, needs to be supplied with the \u003ccode\u003eObservableObject\u003c/code\u003e in the preview using \u003ccode\u003e.environmentObject()\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNestingViews_Previews\u003c/span\u003e: PreviewProvider {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e previews: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        NestingViews()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .environmentObject(UserSettings())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn the app itself, only the first view to access the \u003ccode\u003e@EnvironmentObject\u003c/code\u003e needs it set. In this example, it is done in the \u003ccode\u003eNavigationLink\u003c/code\u003e that goes to the \u003ccode\u003eNestingViews\u003c/code\u003e example. The \u003ccode\u003e.environmentObject\u003c/code\u003e can be provided to the root view in the \u003ccode\u003eSceneDelegate\u003c/code\u003e if the root view needs it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    NavigationLink(destination: NestingViews().environmentObject(UserSettings())) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ListContents(title: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;@EnvironmentObject\u0026#34;\u003c/span\u003e, imageNumber: \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"summary\"\u003e\n  Summary\n  \u003ca href=\"#summary\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eOr What Should I Use When?\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor value-based data models or data primitives, use \u003ccode\u003e@State\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eFor reference-based data use \u003ccode\u003eObservableObject\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eFor data needed by a lot of views in your app, use \u003ccode\u003e@EnvironmentObject\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003e@Binding\u003c/code\u003e or \u003ccode\u003e@ObservedObject\u003c/code\u003e to pass data to a view that can mutate it.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAnd one final tip: while creating a view from scratch, use \u003ccode\u003e@State\u003c/code\u003e with sample, hard-coded data. Once you have the interface you want, then change it to use real data.\u003c/p\u003e\n\u003cp\u003eI am sure people will develop their own theories and their own ways of using SwiftUI, but those are the guidelines that I intend to follow for now. If you have different views and would like to discuss them, please contact me.\u003c/p\u003e"
    },
    {
        "title" : "Crossfix",
        "date_published" : "2020-11-23T08:59:45+10:00",
        "date_modified" : "2020-11-23T08:59:45+10:00",
        "id" : "https://troz.net/post/2020/crossfix/",
        "url" : "https://troz.net/post/2020/crossfix/",
        "content_html" : "\u003cp\u003eI have just released \u003ca href=\"https://itunes.apple.com/app/crossfix/id1526235954\"\u003eCrossfix\u003c/a\u003e and \u003ca href=\"https://itunes.apple.com/app/crossfix-lite/id1526236100\"\u003eCrossfix Lite\u003c/a\u003e for iPhone. They are both the same anagram assistant solver for crosswords, particularly cryptic crosswords. The Lite version is free but limits you to three solves per day. The full version is unlimited with no ads, no recurring subscriptions and works with family sharing.\u003c/p\u003e\n\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n    max-width: 400px;\n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n\u003c/style\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/Crossfix-anagram.png\" alt=\"Anagram solving\"\u003e\u003c/p\u003e\n\u003cp\u003eFor more details, check out the app page at \u003ca href=\"/crossfix/\"\u003ehttps://troz/net/crossfix/\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAnd if you are interested in the back story and the development process, have a look at \u003ca href=\"/post/2020/name_this_app/\"\u003eName This App\u003c/a\u003e. Thanks to everyone who suggested a name, and special thanks to Jerry who came up with the winning entry.\u003c/p\u003e\n\u003cp\u003eThis is the first app that I have published that is 100% SwiftUI, although as I started it several months ago, it still uses the old App Delegate life cycle.\u003c/p\u003e"
    },
    {
        "title" : "Crossfix",
        "date_published" : "2020-11-22T16:23:09+10:00",
        "date_modified" : "2020-11-22T16:23:09+10:00",
        "id" : "https://troz.net/crossfix/",
        "url" : "https://troz.net/crossfix/",
        "content_html" : "\u003ch4 id=\"now-available-on-the-app-store-for-iphones-also-works-on-apple-silicon-macs\"\u003e\n  Now available on the App Store for iPhones. Also works on Apple Silicon Macs.\n  \u003ca href=\"#now-available-on-the-app-store-for-iphones-also-works-on-apple-silicon-macs\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003ch2 id=\"crossfix\"\u003e\n  Crossfix\n  \u003ca href=\"#crossfix\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\n\n\u003ca href=\"https://apps.apple.com/us/app/crossfix/id1526235954?itsct=apps_box\u0026amp;itscg=30200\" style=\"display: inline-block; overflow: hidden; border-top-left-radius: 13px; border-top-right-radius: 13px; border-bottom-right-radius: 13px; border-bottom-left-radius: 13px; width: 250px; height: 83px;\"\u003e\u003cimg src=\"https://tools.applemediaservices.com/api/badges/download-on-the-app-store/white/en-US?size=250x83\u0026amp;releaseDate=1522281600\u0026h=316183e4d473a49a7fc392abccb65adb\" alt=\"Download on the App Store\" style=\"border-top-left-radius: 13px; border-top-right-radius: 13px; border-bottom-right-radius: 13px; border-bottom-left-radius: 13px; width: 250px; height: 83px; margin: unset; border: unset;\"\u003e\u003c/a\u003e\n\n\n\u003ch2 id=\"crossfix-lite\"\u003e\n  Crossfix Lite\n  \u003ca href=\"#crossfix-lite\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\n\n\u003ca href=\"https://apps.apple.com/us/app/crossfix-lite/id1526236100?itsct=apps_box\u0026amp;itscg=30200\" style=\"display: inline-block; overflow: hidden; border-top-left-radius: 13px; border-top-right-radius: 13px; border-bottom-right-radius: 13px; border-bottom-left-radius: 13px; width: 250px; height: 83px;\"\u003e\u003cimg src=\"https://tools.applemediaservices.com/api/badges/download-on-the-app-store/black/en-US?size=250x83\u0026amp;releaseDate=1522281600\u0026h=316183e4d473a49a7fc392abccb65adb\" alt=\"Download on the App Store\" style=\"border-top-left-radius: 13px; border-top-right-radius: 13px; border-bottom-right-radius: 13px; border-bottom-left-radius: 13px; width: 250px; height: 83px; margin: unset; border: unset;\"\u003e\u003c/a\u003e\n\n\n\u003chr\u003e\n\u003cp\u003eProgrammers are basically puzzlers, and programming is the world\u0026rsquo;s best type of puzzle, but I like to start my day with a cryptic crossword. Like programming, cryptic crossword clues have their own syntax and what seems like gibberish on a first glance, can be parsed into logical parts to take you to the answer. But there are aspects of solving crosswords that were easier with pencil and paper, so I decided to write an app to help fill one of those gaps.\u003c/p\u003e\n\u003cp\u003eThere are sites and apps that offer anagram solvers, but they are just looking through a dictionary and showing you all the possibilities. To me, this feels like cheating, but I don’t have a problem with using an app to emulate the techniques I used to use with pencil and paper.\u003c/p\u003e\n\u003ch3 id=\"anagrams\"\u003e\n  Anagrams\n  \u003ca href=\"#anagrams\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eAnagrams are a very popular clue type but they can be tricky to solve because our brains are too good at discerning patterns. We can recognize words using only the first and last letters if they have the correct number of letters inside. This means that asking our brains to scramble these letters into a completely different word is very difficult. In the olden days, when I used to do crosswords in the newspaper, the best method was to find a space in the margin and write the letters out in a circle which forced my brain to reconsider the options. But I do crosswords on my iPad now and while I could use a notes app and my Apple Pencil to draw the letters out, I don’t always have the Pencil with me and I want to keep looking at the crossword. So I decided that a companion iPhone app was the way that would work best for me.\u003c/p\u003e\n\u003cp\u003eLook at how I use Crossfix to help me solve this clue.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003eUsers rip off revelation (8)\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe word \u0026ldquo;off\u0026rdquo; is a hint that this is an anagram, \u0026ldquo;Users rip\u0026rdquo; has the right number of letters, so the overall clue must be \u0026ldquo;revelation\u0026rdquo;. This is not a very long anagram and I think having two words makes it easier, but even so.\u003c/p\u003e\n\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n    max-width: 400px;\n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n\u003c/style\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/Crossfix-anagram.webp\" alt=\"Anagram solving\"\u003e\u003c/p\u003e\n\u003cp\u003eI knew that the third last letter was \u0026ldquo;I\u0026rdquo; so I locked that in place, then I was able to shuffle the other letters around to find the answer: SURPRISE.\u003c/p\u003e\n\u003ch3 id=\"a-different-type-of-anagram\"\u003e\n  A Different Type of Anagram\n  \u003ca href=\"#a-different-type-of-anagram\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eNow we come to a variation of the anagram clue that is very popular with some crossword creators. I don\u0026rsquo;t know if there is an official name, but I call them \u0026ldquo;subtraction anagrams\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eHere is an example:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003eCreationist has no taste for what\u0026rsquo;s sarcastic (6)\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe idea here is to remove the letters in \u0026ldquo;taste\u0026rdquo; from the letters in \u0026ldquo;Creationist\u0026rdquo; and then unscramble the remaining letters to find a word that means \u0026ldquo;sarcastic\u0026rdquo;. This turned out to be \u0026ldquo;ironic\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Crossfix-sub-anagram.webp\" alt=\"Subraction anagram solving\"\u003e\u003c/p\u003e\n\u003ch3 id=\"using-the-app\"\u003e\n  Using the app\n  \u003ca href=\"#using-the-app\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eType the letters in your anagram word or words in the entry field at the top. Spell checking is turned off so you can add spaces or not, use abbreviations or anything you like. When you have all the letters in, press Return and the letters will be arranged in a circle.\u003c/p\u003e\n\u003cp\u003eTap the arrows in the middle of the circle to shuffle the letters randomly. This can be very useful as sometimes a pattern appears.\u003c/p\u003e\n\u003cp\u003eTap a letter square to select it and tap again to move it, either into an answer square or into the discard tray below. Tap a letter in an answer square or in the discard tray to put it back into the circle.\u003c/p\u003e\n\u003cp\u003eIf you already know some of the cross letters, put them into the answer squares and tap the lock button to freeze them in place.\u003c/p\u003e\n\u003cp\u003eThe up arrow button will move all the unlocked letters out of the answer squares and back into the circle. Reset starts the word again completely and Clear removes everything so you can start again with a new set of letters.\u003c/p\u003e\n\u003cp\u003eTap the gear wheel to see some help and to configure the sound and animation settings. Swipe down to dismiss this display.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Crossfix-settings.webp\" alt=\"Settings\"\u003e\u003c/p\u003e\n\u003ch3 id=\"which-version-to-get\"\u003e\n  Which Version to Get\n  \u003ca href=\"#which-version-to-get\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eI have published two version of this app on the App Store: \u003ca href=\"https://itunes.apple.com/app/crossfix/id1526235954\"\u003eCrossfix\u003c/a\u003e and \u003ca href=\"https://itunes.apple.com/app/crossfix-lite/id1526236100\"\u003eCrossfix Lite\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eCrossfix Lite is free, but you are limited to solving three anagrams per day.\nCrossfix is a paid app that allows unlimited solves.\u003c/p\u003e\n\u003cp\u003eTry out Crossfix Lite and then pay for Crossfix if you need more solves or if you would like to support the development of this app.\u003c/p\u003e\n\u003cp\u003eYou may be wondering why I chose to release two apps instead of using in-app purchases to unlock the full version and there is one big reason: family sharing. I share a family account and it has always really annoyed me that direct app purchases are shared, but in-app purchases are not. So if I used IAPs and more than one member of your family wanted to use the app, you would have to pay twice, which seems unfair. I have deliberately chosen to have two distinct apps so as to allow family members to share all the features of the full app with a single purchase.\u003c/p\u003e\n"
    },
    {
        "title" : "Stats for WoW",
        "date_published" : "2020-10-14T11:43:03+10:00",
        "date_modified" : "2020-10-14T11:43:03+10:00",
        "id" : "https://troz.net/wow-stats/",
        "url" : "https://troz.net/wow-stats/",
        "content_html" : "\u003ch3 id=\"do-you-play-world-of-warcraft4\"\u003e\n  Do you play \u003ca href=\"https://worldofwarcraft.com/\"\u003eWorld of Warcraft\u003c/a\u003e?\n  \u003ca href=\"#do-you-play-world-of-warcraft4\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eHave you ever agonised over a new piece of gear - are those stats better or worse for my class and specialization?\u003c/p\u003e\n\u003cp\u003eIs your computer festooned with sticky notes reminding you that your prot pally needs haste over mastery but the enhancement shaman needs agility?\u003c/p\u003e\n\u003cp\u003eGet rid of the notes and use the \u003ca href=\"https://itunes.apple.com/app/wow-stats/id1364247768\"\u003eStats for WoW\u003c/a\u003e app instead.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://itunes.apple.com/app/wow-stats/id1364247768\"\u003e\u003cimg src=\"/icons/wow-stats128.png\" alt=\"Stats for WoW in the App Store\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eData comes from \u003ca href=\"http://www.noxxic.com/wow/\"\u003eNoxxic\u003c/a\u003e and \u003ca href=\"https://www.icy-veins.com/wow/\"\u003eIcy Veins\u003c/a\u003e and is updated automatically with each new patch.\u003c/p\u003e\n\u003cp\u003eAnd you can follow the direct links to the pages for your class and spec on \u003ca href=\"http://www.noxxic.com/wow/\"\u003eNoxxic\u003c/a\u003e or \u003ca href=\"https://www.icy-veins.com/wow/\"\u003eIcy Veins\u003c/a\u003e for more info from within the app.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/images/wow-stats.png\"\u003e\u003cimg src=\"/images/wow-stats-small.png\" alt=\"Stats for WoW\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eClick for a larger image\u0026hellip;\u003c/p\u003e\n\u003cp\u003eYes, my main is a Beast Master Hunter - Axelady on Khaz\u0026rsquo;goroth if anyone wants to say hello. And if you have to ask why a hunter is called Axelady, you haven\u0026rsquo;t been a hunter for as long as I have!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Axe.png\" alt=\"Axelady\"\u003e\u003c/p\u003e\n"
    },
    {
        "title" : "SwiftUI for Mac on Big Sur",
        "date_published" : "2020-07-08T19:40:16+10:00",
        "date_modified" : "2020-07-08T19:40:16+10:00",
        "id" : "https://troz.net/post/2020/swiftui_mac_big_sur/",
        "url" : "https://troz.net/post/2020/swiftui_mac_big_sur/",
        "content_html" : "\u003cp\u003eIn December 2019, I wrote a \u003ca href=\"/post/2019/swiftui-for-mac-1/\"\u003eseries of articles about using SwiftUI to build a Mac app\u003c/a\u003e. At WWDC 2020, Apple announced macOS 11 Big Sur along with Xcode 12 and a heap of new features for SwiftUI, so I decided to try creating my test app again and seeing how much had changed.\u003c/p\u003e\n\u003cp\u003eYou can read the earlier articles and if you are interested, \u003ca href=\"https://github.com/trozware/swiftui-mac\"\u003edownload the previous project from GitHub\u003c/a\u003e. Usually, when revisiting an old app, I would update the existing project, but this time I want to use the new SwiftUI App so I am going to start from scratch with a new app project, copying in code as required. And I plan to follow the same basic thread as I did in the previous articles. Who knows haw many parts this one will have!\u003c/p\u003e\n\u003cp\u003eFor reference, I am running the beta of macOS 11 Big Sur (20A4299v) and the beta of Xcode 12 (12A6159) on a rather aged MacBook with a dodgy battery. I do not have Xcode 12 installed on my Catalina Mac, so I have no way of telling whether some of the oddities are due to Xcode or Big Sur but I will try to keep this article updated as the new betas improve things.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003eUpdate:\u003c/strong\u003e I have downloaded macOS Big Sur beta 2 (20A4300b) and Xcode 12 beta 2, oddly labelled in the About box as 11.5 (11E608c). I have only found one thing that needs to be changed. I had set the deployment target to 11.0 but the new Xcode does not allow this as an option and the app fails to build. Change the deployment target to 10.16 to make it work.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Xcode_b2_error.png\" alt=\"Xcode 12 beta 6 error\"\u003e\u003c/p\u003e\n\u003cp\u003eIt looks like Apple is having some problems with consistency in the new version numbers in both macOS and Xcode.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"the-new-project\"\u003e\n  The New Project\n  \u003ca href=\"#the-new-project\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eAs before, the first step was to create a new project in Xcode. I chose the macOS App template although the Multiplatform option was intriguing. When setting the options for the new app, I chose SwiftUI for the Interface, SwiftUI App for the Life Cycle and Swift (of course) for the language.\u003c/p\u003e\n\u003cp\u003eOnce I had selected a save location and the project was open, I checked out the file structure. The main difference here was that there is no AppDelegate.swift file. Instead there is a file called \u0026ldquo;SwiftUI_Mac_11App.swift\u0026rdquo; where \u0026ldquo;SwiftUI_Mac_11\u0026rdquo; is the name of my app. This file is vastly simpler than the old AppDelegate but it sets up the app, the scene and the window group, with the expected ContentView as the main content.\u003c/p\u003e\n\u003cp\u003eContentView.swift had a change too. Instead of setting the \u003ccode\u003emaxWidth\u003c/code\u003e and \u003ccode\u003emaxHeight\u003c/code\u003e of the view to \u003ccode\u003e.infinity\u003c/code\u003e, this Content View only adds some padding to the standard \u003ccode\u003eText\u003c/code\u003e view. Time to see what happens when I run\u0026hellip;\u003c/p\u003e\n\u003cp\u003eThe first run took longer than I expected (I told you it was an old MacBook) but then a very small window appeared, just big enough to show the \u0026ldquo;Hello world!\u0026rdquo; text with its padding. The app has all the expected menus although I have no idea where they are set up.\u003c/p\u003e\n\u003cp\u003eClosing the app and using the Canvas preview worked much as before, although the canvas now has additional controls including a button to add another preview and a menu to configure each preview. Oddly, running the preview and clicking \u0026ldquo;Bring Forward\u0026rdquo; displayed two app windows. I presume this is an Xcode 12 beta \u0026ldquo;feature\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eI used the attributes Inspector to edit the \u003ccode\u003eText\u003c/code\u003e view, setting text, font style and weight and color. I had read that Xcode 12 had much better auto-formatting, but when adding modifiers this way, they all ended up on a single line which was not pretty. Manually adding line feeds before each dot did give a very neat structure, so typing in modifiers will be my preferred method.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"editing-the-layout\"\u003e\n  Editing the Layout\n  \u003ca href=\"#editing-the-layout\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eNow on to my own layout. As I did last time, I used a static list to make a \u003ccode\u003eNavigationView\u003c/code\u003e for preliminary testing.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eContentView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        NavigationView {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e             List {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                 ForEach(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e ... \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, id: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\\\u003c/span\u003e.\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e) { index \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                     NavigationLink(destination: Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003eindex\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                         Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Link \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003eindex\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                     }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                 }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e             }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhen I ran the app or looked at it in the Canvas it looked great, but when I clicked a link in the sidebar, the window shrunk to an unusably small size. So I added a \u003ccode\u003eframe\u003c/code\u003e modifier to the destination view. And I also set the \u003ccode\u003eListStyle\u003c/code\u003e to \u003ccode\u003eSidebarListStyle()\u003c/code\u003e which gave the new macOS 11 full height sidebar look.\u003c/p\u003e\n\u003cp\u003eBut here is where I encountered the first major difference. When I selected an item in the sidebar, the app correctly showed the detail view. But if I put the app into the background, this detail view disappeared. It literally disappeared because I was able to track that it was calling its \u003ccode\u003eonDisappear\u003c/code\u003e modifier.\u003c/p\u003e\n\u003cp\u003eAfter a lot of testing, several days of frustration and help from \u003ca href=\"https://twitter.com/jsngr\"\u003eJordan Singer\u003c/a\u003e with his \u003ca href=\"https://github.com/jordansinger/mail-swiftui-sample\"\u003email-swiftui-sample\u003c/a\u003e project, I was finally able to work this out. The difference is that the initial view has to specify what comes next as well as what it is displaying. So in the initial \u003ccode\u003eNavigationView\u003c/code\u003e, I had a \u003ccode\u003eList\u003c/code\u003e, but I also needed some view to show that I was going to show another view in another column. This second column view has to reserve the space for the detail view to come.\u003c/p\u003e\n\u003cp\u003eI have no idea how Jordan worked this out, but I am very grateful. What I ended up with was this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eContentView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        NavigationView {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            List {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                ForEach(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e ... \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, id: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\\\u003c/span\u003e.\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e) { index \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    NavigationLink(destination:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                    Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003eindex\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                    .frame(maxWidth: .infinity, maxHeight: .infinity)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Link \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003eindex\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .listStyle(SidebarListStyle())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Select a link...\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .frame(maxWidth: .infinity, maxHeight: .infinity)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .frame(maxWidth: .infinity, maxHeight: .infinity)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u0026ldquo;Select a link\u0026hellip;\u0026rdquo; text is shown when there is no destination view to display. And when I click one of the entries in the sidebar, its content replaces that \u003ccode\u003eText\u003c/code\u003e view but keeps its frame.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"displaying-data\"\u003e\n  Displaying Data\n  \u003ca href=\"#displaying-data\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eAs with the previous app, I am displaying data from \u003ca href=\"https://http.cat/\"\u003eHTTP Cats\u003c/a\u003e. This part remains the same, so check back to the original article if you want to see how I did this. I did get warnings about the \u003ccode\u003eDecodable\u003c/code\u003e data structs I was using. My normal pattern when I want data to be \u003ccode\u003eIdentifiable\u003c/code\u003e is to use something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eHttpSection\u003c/span\u003e: Identifiable, Decodable {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e id = UUID()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e headerCode: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e headerText: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e statuses: [HttpStatus]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBut with Xcode 12, this gives an error. The error messages seem much more useful than before and they offered two suggestions. I tried what appeared to be the easier one of making the \u003ccode\u003eid\u003c/code\u003e mutable, but that stopped the decoding from working, so I added a \u003ccode\u003eCodingKeys\u003c/code\u003e enum to each struct to restrict the keys that would be included.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eenum\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCodingKeys\u003c/span\u003e: String, CodingKey {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e headerCode\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e headerText\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e statuses\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhen the app ran, I had a sidebar with collapsible sections. I wasn\u0026rsquo;t that happy with the default look of the section headers and the disclosure marker for the first header was positioned beside the text instead of at the right, but I do like the selected item lozenge look. I set a frame height for the section header view and that made the spacing better but the disclosure mark for the first header was still incorrectly positioned.\u003c/p\u003e\n\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n  }\n\u003c/style\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/swiftui-mac-11-BadCollapse.png\" alt=\"Initial collapsible sections\"\u003e\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eDetail\u003c/code\u003e view to be displayed when a status is selected had no major changes, so I dropped in the file from the previous app, without the extra bits to do with notifications and preferences. However since SwiftUI now includes a \u003ccode\u003eProgressView\u003c/code\u003e, I swapped out my \u0026ldquo;Loading\u0026hellip;\u0026rdquo; text for a indeterminate progress twirly.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"three-column-layout\"\u003e\n  Three Column Layout\n  \u003ca href=\"#three-column-layout\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eSince the collapsible sidebar wasn\u0026rsquo;t looking good, I decide to try for a three column layout with the categories in the first column, the codes for the selected category in the second column and the detail view in the third column.\u003c/p\u003e\n\u003cp\u003eThe way I implemented this was to have the first list only show the section headers with \u003ccode\u003eNavigationLinks\u003c/code\u003e to a sub menu. To reserve the column layout, I had an empty submenu after the main list.\u003c/p\u003e\n\u003cp\u003eIn the second column, I showed the sub-headers with \u003ccode\u003eNavigationLinks\u003c/code\u003e to the \u003ccode\u003eDetailView\u003c/code\u003e. This view reserved the space for the third column with a \u003ccode\u003eText\u003c/code\u003e view that changed its text depending on whether that submenu was displaying anything or not.\u003c/p\u003e\n\u003cp\u003eI expanded the menu items to be big and chunky, which I feel fits the new style. The only remaining problem was that with the primary list set to use \u003ccode\u003eSidebarListStyle()\u003c/code\u003e, it only ever showed the first item. I had to change this to \u003ccode\u003eInsetListStyle()\u003c/code\u003e to see all the items! This lost the full height sidebar effect, but I assume this is a temporary bug.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/swiftui-mac-11-ThreeColumns.png\" alt=\"Three column layout\"\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"menus\"\u003e\n  Menus\n  \u003ca href=\"#menus\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eNow I had the layout equivalent to what I ended up with after part 1 of my original series, so it was time to explore menus, which are very different. In the old style SwiftUI apps which were wrapped in AppKit, the menus were in a storyboard that you could edit. Now you add \u003ccode\u003ecommands\u003c/code\u003e to the app\u0026rsquo;s \u003ccode\u003eWindowGroup\u003c/code\u003e to alter the menus.\u003c/p\u003e\n\u003cp\u003eThe easiest way is to add a completely new menu, but it is also possible to insert new menu items after or before certain standard menu items.\u003c/p\u003e\n\u003cp\u003eHere is how to add a new Utilities menu with three items:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@main\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSwiftUI_Mac_11App\u003c/span\u003e: App {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some Scene {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        WindowGroup {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ContentView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .commands {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            CommandMenu(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Utilities\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Button(action: {}) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Dark mode\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Button(action: {}) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Light mode\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Button(action: {}) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;System mode\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA \u003ccode\u003eCommandMenu\u003c/code\u003e adds a new menu and it is always positioned between the standard View and Window menus. To add items to an existing menu, you need to use a \u003ccode\u003eCommandGroup\u003c/code\u003e and tell it where to appear. It can be \u003ccode\u003eafter\u003c/code\u003e or \u003ccode\u003ebefore\u003c/code\u003e various standard menu items. Look up the docs for \u003ca href=\"https://developer.apple.com/documentation/swiftui/commandgroupplacement\"\u003eCommandGroupPlacement\u003c/a\u003e to see which items you can use as positional markers. I used \u003ccode\u003eafter .windowArrangement\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWeirdly, the font, color and spacing of these menu items was different to the standard menu items. I can only assume this is a bug which will be fixed. I faked the proper look with modifiers, but it didn\u0026rsquo;t feel right. This screen shot shows the default look with the three mode items being my additions to the standard Window menu.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/swiftui-mac-11-menus-bad-format.png\" alt=\"Menus with incorrect formatting\"\u003e\u003c/p\u003e\n\u003cp\u003eI tried using \u003ccode\u003eLabels\u003c/code\u003e to add an icon to the menu item. As I was switching between view modes, I wanted to have a checkmark before the selected menu item. This worked when first drawn, but the menus did not refresh when the data changed, so that was no use.\u003c/p\u003e\n\u003cp\u003eI also tested using \u003ccode\u003eDivider()\u003c/code\u003e to get a menu separator. It worked, but the look didn\u0026rsquo;t match the standard dividers. So menus need a lot of work still\u0026hellip;\u003c/p\u003e\n\u003cp\u003eI kept the technique of having menu items publish notifications that other views could pick up. This seems to work well. I would have liked to have certain menus or menu items only appear conditionally or perhaps enable/disable conditionally, but I could not see how to do that. Since menus do not appear to update when data changes, this may not be possible right now.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"preferences\"\u003e\n  Preferences\n  \u003ca href=\"#preferences\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThere was one place where the new app architecture was amazingly good and that was to do with preferences. In my previous attempt at this app, I had a Preferences window and it was a major exercise to stop it opening more than once. This time, it was super easy. In the App.swift file, beside the \u003ccode\u003eWindowGroup\u003c/code\u003e, I added \u003ccode\u003eSettings\u003c/code\u003e which contained a view which had the UI for my app\u0026rsquo;s preferences.\u003c/p\u003e\n\u003cp\u003eThis caused a few errors at first, but I added a \u003ccode\u003e@SceneBuilder\u003c/code\u003e property wrapper to the App\u0026rsquo;s body and that fixed the errors.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@main\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSwiftUI_Mac_11App\u003c/span\u003e: App {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @SceneBuilder \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some Scene {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        WindowGroup {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ContentView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Settings {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            SettingsView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThese three lines of code added a Preferences menu item and hooked it up to my \u003ccode\u003eSettingsView\u003c/code\u003e. This view opens in a new window when the Preferences menu item or keyboard shortcut is used and only one copy of this window ever appears.\u003c/p\u003e\n\u003cp\u003eThen on to the second brilliant thing about preferences: \u003ccode\u003e@AppStorage\u003c/code\u003e. In the previous version, I used a custom property wrapper to wrap settings that I wanted saved into UserDefaults. This is now built into SwiftUI and this was all I had to do:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @AppStorage(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;showCopyright\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e showCopyright: Bool = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow any time that variable was accessed, it was read from UserDefaults and every time it was changed, it was written back into UserDefaults. Instant preferences in a single line!\u003c/p\u003e\n\u003cp\u003eTo pass this setting to a different view, all I had to do was give that view this same declaration. And it just worked!\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"opening-another-window\"\u003e\n  Opening Another Window\n  \u003ca href=\"#opening-another-window\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eLast time, I tried lots of different ways using hosting controllers, storyboards etc. to open secondary windows. This time I decided to stick to using \u003ccode\u003esheet\u003c/code\u003e since it seems to be what works best for SwiftUI apps. So I added my User Interface Elements sample window as a sheet.\u003c/p\u003e\n\u003cp\u003eThe view itself was reasonably similar except that last time, I used an \u003ccode\u003eNSViewRepresentable\u003c/code\u003e to embed an AppKit color well into the view. This time I was able to use the new SwiftUI ColorPicker which made it much easier to get the color back into the main view. I also added the new date and time pickers.\u003c/p\u003e\n\u003cp\u003eThe color picker worked really well except that there is an option to specify whether the picker should support opacity or not. I found that no matter what I chose here, I never got the option to chose a color with opacity.\u003c/p\u003e\n\u003cp\u003eThe date picker was good. It showed the date numerically using my local format - DD/MM/YYY. Clicking on any of the elements popped up a calendar view. The time picker was not so easy to use. Again, it showed the time in my format e.g. 7:53 pm. But there was no graphical entry, you click on an element (hour, minute or am/pm) and type. This would be OK except that every time you type, the focus jumps back to the hour. I found this confusing.\u003c/p\u003e\n\u003cp\u003eOne big improvement is the ability to apply a keyboard shortcut to a button. When I set the keyboard shortcut for the Close button to \u003ccode\u003e.defaultAction\u003c/code\u003e, the button got the default appearance and was triggered by pressing the Return key.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Button(action: {}) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Close\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    .keyboardShortcut(.defaultAction)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI was still unable to work out how to set the focus to a TextField. There are two new property wrappers to do with focus, but I understand they are not yet operational.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"dialogs\"\u003e\n  Dialogs\n  \u003ca href=\"#dialogs\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eI have already used a sheet to display the UI elements and ActionSheets are not available on macOS, so that just leaves Alerts and file dialogs. File dialogs work identically in the app although they look quite different on Big Sur. Alerts look quite different but I think they are nice. Since the app icon is a prominent part of the dialog, I added one to make it look good. I understand that different numbers of buttons will get arranged in different ways.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/swiftui-mac-11-alert.png\" alt=\"Alert dialog\"\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"other-improvements\"\u003e\n  Other Improvements\n  \u003ca href=\"#other-improvements\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003ch4 id=\"self\"\u003e\n  Self\n  \u003ca href=\"#self\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cp\u003eDo a search for \u0026ldquo;self.\u0026rdquo; and get rid of them all. Your code will be much cleaner and easier to read and SwiftUI now understands what you mean. If you want to read more details about this change, check out \u003ca href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0269-implicit-self-explicit-capture.md\"\u003eswift-evolution proposal SE-0269\u003c/a\u003e.\u003c/p\u003e\n\u003ch4 id=\"navigation-titles\"\u003e\n  Navigation Titles\n  \u003ca href=\"#navigation-titles\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cp\u003eiOS had the concept of setting a navigation title but it didn\u0026rsquo;t really work in macOS. Now you can set the \u003ccode\u003enavigationTitle\u003c/code\u003e of a view and this will be the window title.\u003c/p\u003e\n\u003ch4 id=\"toolbars\"\u003e\n  Toolbars\n  \u003ca href=\"#toolbars\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cp\u003eThis was an aspect of macOS apps that I referred to but didn\u0026rsquo;t explore last time mainly because I assumed it would be done through the storyboard, just as with an AppKit app. Now we can add a \u003ccode\u003e.toolbar\u003c/code\u003e modifier to a view and have it include \u003ccode\u003eToolbarItems\u003c/code\u003e. For the first time, we can now use \u003ca href=\"https://developer.apple.com/sf-symbols/\"\u003eSF Symbols\u003c/a\u003e in a macOS app, so that made it easy to add good looking toolbar items.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/swiftui-mac-11-toolbar.png\" alt=\"Toolbar and navigation title\"\u003e\u003c/p\u003e\n\u003cp\u003eI would like to vary the toolbar according to what is being displayed, and the toolbar is also used to show the navigation title, but perhaps that is a topic for another day. There is certainly a lot to explore there.\u003c/p\u003e\n\u003ch4 id=\"pyramid-of-doom\"\u003e\n  Pyramid of Doom\n  \u003ca href=\"#pyramid-of-doom\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cp\u003eWith menus and toolbars, there is a heap of extra code added to certain views. I would love to be able to extract that into its own function or view modifier. I was able to extract the toolbar, but I am not sure how to do this with menus yet. I imagine it will need some specific sort of ViewBuilder but I think this is very necessary. Perhaps the topic for yet another article\u0026hellip;\u003c/p\u003e\n\u003cp\u003eThe project is available on \u003ca href=\"https://github.com/trozware/swiftui-mac-11\"\u003eGitHub\u003c/a\u003e. As always, if you have any comments, suggestions or ideas, I would love to hear from you. Please contact me using one of the links below or through my \u003ca href=\"/contact/\"\u003eContact\u003c/a\u003e page. Thanks for reading.\u003c/p\u003e\n\u003cp\u003eThanks to \u003ca href=\"https://twitter.com/kb091412\"\u003eSungbin Jo (조성빈)\u003c/a\u003e for proof-reading and suggestions.\u003c/p\u003e"
    },
    {
        "title" : "SwiftUI Snapshot Testing",
        "date_published" : "2020-05-17T18:50:09+10:00",
        "date_modified" : "2020-05-17T18:50:09+10:00",
        "id" : "https://troz.net/post/2020/swiftui_snapshots/",
        "url" : "https://troz.net/post/2020/swiftui_snapshots/",
        "content_html" : "\u003cp\u003eSnapshot testing is a technique that has been very popular in the web development world and it seems like a great way to test SwiftUI user interfaces. I read about snapshot tests in a recent blog post and was intrigued, but I had some difficulty getting it to work, so when I finally succeeded, I decided to share my experiences in the hope that others will find them useful.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"what-is-snapshot-testing\"\u003e\n  What is Snapshot Testing\n  \u003ca href=\"#what-is-snapshot-testing\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eUnit testing checks that when you call various functions or methods with certain inputs, you get the output you expect. I use unit tests for testing my models and the methods that change them. But this only tests the logic behind the app, it does nothing to test whether the app is displaying what it should, or whether it is responding correctly to the user\u0026rsquo;s actions.\u003c/p\u003e\n\u003cp\u003eUI testing emulates user actions by faking taps, clicks, text entry and so on and checks that labels, buttons etc are showing the correct information after these fake interactions.\u003c/p\u003e\n\u003cp\u003eSnapshot testing is in between these two as it effectively takes a picture of the interface. The first time you run the test it will store an image and all subsequent test runs will check that the current interface matches this stored image. If there are any differences, the test will fail so you can decide whether to keep the new version or revert to what you had before.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"how-did-i-get-started\"\u003e\n  How did I get started?\n  \u003ca href=\"#how-did-i-get-started\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eI first read about the idea of using snapshot testing for SwiftUI in a blog post by \u003ca href=\"https://www.vadimbulavin.com/snapshot-testing-swiftui-views/\"\u003eVadim Bulavin\u003c/a\u003e. He made a very good argument for this, but I found his instructions assumed more knowledge of the topic than I had at the time and so I discarded the idea after an initial attempt.\u003c/p\u003e\n\u003cp\u003eBut he was suggesting using a \u003ca href=\"https://github.com/pointfreeco/swift-snapshot-testing\"\u003esnapshotting library\u003c/a\u003e published by \u003ca href=\"https://www.pointfree.co\"\u003ePoint-Free\u003c/a\u003e and I later discovered a link to one of their videos where they discuss this exact thing: \u003ca href=\"https://www.pointfree.co/episodes/ep86-swiftui-snapshot-testing\"\u003eSwiftUI Snapshot Testing\u003c/a\u003e. This was enough to get me going with attempt #2.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"setting-up-an-app-for-snapshot-testing\"\u003e\n  Setting up an app for snapshot testing\n  \u003ca href=\"#setting-up-an-app-for-snapshot-testing\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eSince the blog post and video were talking about iOS apps, I decided to start there, but you know me, I will get to macOS apps later\u0026hellip;\u003c/p\u003e\n\u003cp\u003eFirst off, I created a single view iOS app using SwiftUI making sure to check \u0026ldquo;Include Unit Tests\u0026rdquo;, but not \u0026ldquo;Include UI Tests\u0026rdquo;. I created a simple view so I had something to test.\u003c/p\u003e\n\u003cp\u003eIf you want to use this on an app that does not already have a unit tests target, go to the project settings, click the + button to add a new target and choose a Unit Testing Bundle.\u003c/p\u003e\n\u003cp\u003eNext step was to import the snapshot testing library using Swift Package Manager. Go to File \u0026gt; Swift Packages \u0026gt; Add Package Dependency. Paste in the URL below and click Next.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehttps://github.com/pointfreeco/swift-snapshot-testing\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI accepted the default versioning suggestions on the next pane.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Snapshot-AddPackage.png\" alt=\"Adding the snapshot package\"\u003e\u003c/p\u003e\n\u003cp\u003eOn the final pane, it is important to select the correct target for this package. Select the app\u0026rsquo;s test target, not the app itself and not the UI test target if you have one. I made this mistake on my first try as I assumed that snapshot testing would be part of UI testing but it is actually part of unit testing.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Snapshot-SetTarget.png\" alt=\"Setting the package target\"\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"writing-a-snapshot-test\"\u003e\n  Writing a Snapshot Test\n  \u003ca href=\"#writing-a-snapshot-test\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eNow I added a new Unit Test Case Class file to the tests target in my app. I had to import SwiftUI and SnapshotTesting into this test file as well as declaring the app as a testable import. The easiest way to do this is to copy the \u003ccode\u003e@testable import\u003c/code\u003e heading from the sample test file to make sure it is exactly right. The import needs to match the name of your app module.\u003c/p\u003e\n\u003cp\u003eFinally it\u0026rsquo;s time to write the first snapshot test:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eXCTest\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSnapshotTesting\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSwiftUI\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@testable \u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSnapshots\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSnapshotsTests\u003c/span\u003e: XCTestCase {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etestDefaultAppearance\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e contentView = ContentView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        assertSnapshot(matching: contentView, \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e: .image)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis uses the snapshot library\u0026rsquo;s \u003ccode\u003eassertSnapshot\u003c/code\u003e method to save the content view as an image. But unfortunately, this doesn\u0026rsquo;t work. The problem is that the second parameter is a Snapshotting strategy that can convert various UI elements into some form of data or image. But the library doesn\u0026rsquo;t know what a SwiftUI View is, so it needs a way to convert the view into something that can be recognized by the snapshotter.\u003c/p\u003e\n\u003cp\u003eI added this extension to SwiftUI\u0026rsquo;s View that wraps the SwiftUI View in a UIHostingController. It returns this as a UIViewController which is a valid input for a snapshotter and can be converted to an image.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eextension\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSwiftUI\u003c/span\u003e.View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoVC\u003c/span\u003e() -\u0026gt; UIViewController {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e vc = UIHostingController(rootView: \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        vc.view.frame = UIScreen.main.bounds\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e vc\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow my first test became:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etestDefaultAppearance\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e contentView = ContentView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        assertSnapshot(matching: contentView.toVC(), \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e: .image)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd it worked. Or rather it failed as expected because there was no image to compare it with.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/images/Snapshot-Test1Result.png\"\u003e\u003cimg src=\"/images/Snapshot-Test1Result.png\" alt=\"Test result\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eChecking the error message, I was able to see where it had created the snapshot image file which I could look at. And the second time I ran the test, it passed.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Snapshot-TestImage1.png\" alt=\"Test image in Finder\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIf you ever get an error message saying \u0026ldquo;No such module \u0026lsquo;SnapshotTesting\u0026rsquo;\u0026rdquo; use Shift-Command-U to re-build for testing. This usually only happens after you have cleaned your build folder.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003chr\u003e\n\u003ch2 id=\"testing-a-change\"\u003e\n  Testing a Change\n  \u003ca href=\"#testing-a-change\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eNow that I had a passing test, the next thing was to check what happens if the UI changes. This may be due to a deliberate change or because the cat just walked across your keyboard (a not infrequent occurrence around here).\u003c/p\u003e\n\u003cp\u003eWhere I originally had a button with the label \u0026ldquo;Save\u0026rdquo;, I decided to change this to \u0026ldquo;OK\u0026rdquo; (rejecting the cat\u0026rsquo;s suggestion of \u0026ldquo;q2eegrnh\u0026rdquo;).\u003c/p\u003e\n\u003cp\u003eRunning the test again produced this result:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/images/Snapshot-FailedTest.png\"\u003e\u003cimg src=\"/images/Snapshot-FailedTest.png\" alt=\"Failed snapshot test\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eAnd I was then able to compare the 2 images, using the path to the failing image from the error message.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Snapshot-TestResults.png\" alt=\"Test results: success and failure\"\u003e\u003c/p\u003e\n\u003cp\u003eOnce I had confirmed that the new image was what I wanted and not a result of error, either feline or human, I set the test to \u003ccode\u003erecord\u003c/code\u003e a new result so that the new version became the official test version.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etestDefaultAppearance\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e contentView = ContentView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        record = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        assertSnapshot(matching: contentView.toVC(), \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e: .image)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis caused a failing test again as the new version was written to the Snapshots folder, but after removing the \u003ccode\u003erecord = true\u003c/code\u003e line and re-running the test, it passed again, with my new button label now an accepted part of the test.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"using-snapshots-with-state\"\u003e\n  Using Snapshots with State\n  \u003ca href=\"#using-snapshots-with-state\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eIn SwiftUI, the UI displayed is a function of state, so changing state properties changes the UI. This is what makes snapshot testing really good for SwiftUI apps as you can change the state programmatically and confirm that this is reflected in the UI.\u003c/p\u003e\n\u003cp\u003eSo having proved that the snapshot tests worked, I decided to move on and test it with my new \u003ca href=\"/post/2020/name_this_app/\"\u003eanagram assistant app\u003c/a\u003e. This is quite a simple app that has a single \u003ccode\u003eAppState\u003c/code\u003e class that holds all the program data.\u003c/p\u003e\n\u003cp\u003eSo I was able to write a suite of tests that changed the state in various ways and then snap-shotted the UI with that state. Here are a couple of examples:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etestEmptyContentView\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e contentView = ContentView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        assertSnapshot(matching: contentView.toVC(), \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e: .image)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etestAfterLocking\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e contentView = ContentView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e appState = AppState.sampleState()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        appState.availableLetters.sort()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        appState.selectedLetterIndex = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        appState.placeSelectedLetter(at: \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        appState.toggleLockedState()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        appState.availableLetters.sort()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        contentView.appState = appState\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        assertSnapshot(matching: contentView.toVC(), \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e: .image)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis worked really well with only one slight problem. As the state arranges the \u003ccode\u003eavailableLetters\u003c/code\u003e array randomly for display, I had to add a \u003ccode\u003esort\u003c/code\u003e to make sure they always displayed in the same order and made the tests repeatable.\u003c/p\u003e\n\u003cp\u003eAnd as a bonus, I was able to test a screen in dark mode with this test which sets the \u003ccode\u003ecolorScheme\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etestDarkMode\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e contentView = ContentView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        contentView.appState = sampleAppState()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        assertSnapshot(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            matching: contentView.colorScheme(.dark).toVC(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e: .image)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"accessibility-tests\"\u003e\n  Accessibility Tests\n  \u003ca href=\"#accessibility-tests\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eiOS supports dynamic type and if your app uses standard font styles, it will adopt these dynamic sizes automatically. I can\u0026rsquo;t find the link right now, but I remember reading an article that said nearly half of all iPhone users change the default text size, setting it either smaller or larger.\u003c/p\u003e\n\u003cp\u003eWith snapshot testing, it is quick and easy to get a view of how you app looks with different font sizes. Here is my test function for taking a snapshot of every possible font size variation.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etestDynamicFonts\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e contentView = ContentView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        contentView.appState = sampleAppState()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e contentSize \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e ContentSizeCategory.allCases {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            assertSnapshot(matching: contentView.environment(\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\\\u003c/span\u003e.sizeCategory, contentSize).toVC(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                           \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e: .image,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                           named: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003econtentSize\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFor the settings screen, I decided that smaller fonts were not a problem, but I wanted to check the two largest options, so I used this test function:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etestSettingsScreen\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e settingsView = SettingsView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        assertSnapshot(matching: settingsView.toVC(), \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e: .image)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        assertSnapshot(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            matching: settingsView.environment(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\\\u003c/span\u003e.sizeCategory, ContentSizeCategory.accessibilityExtraExtraExtraLarge\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ).toVC(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e: .image,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            named: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;AccessibilityXXXL\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        assertSnapshot(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            matching: settingsView.environment(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\\\u003c/span\u003e.sizeCategory, ContentSizeCategory.extraExtraExtraLarge\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ).toVC(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e: .image,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            named: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;XXXL\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"/images/Snapshot-DynamicFonts.png\" alt=\"Dynamic font tests\"\u003e\u003c/p\u003e\n\u003cp\u003eThis let me quickly see where the problems were and what I needed to adjust.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"snapshot-test-for-mac-apps\"\u003e\n  Snapshot Test for Mac Apps\n  \u003ca href=\"#snapshot-test-for-mac-apps\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eYou knew you weren\u0026rsquo;t going to get through this without me going on about Mac apps\u0026hellip;\u003c/p\u003e\n\u003cp\u003eSnapshot tests for a Mac app work well, with one caveat.\u003c/p\u003e\n\u003cp\u003eFirst I had to change the Swift.View extension so that it returned an NSViewController instead of a UIViewController.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eextension\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSwiftUI\u003c/span\u003e.View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etoVC\u003c/span\u003e() -\u0026gt; NSViewController {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e vc = NSHostingController(rootView: \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        vc.view.frame = CGRect(x: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, y: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, width: \u003cspan style=\"color:#ae81ff\"\u003e1024\u003c/span\u003e, height: \u003cspan style=\"color:#ae81ff\"\u003e768\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e vc\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI chose an arbitrary size for the snapshot, you just need to make sure your UI will fit into whatever size you select.\u003c/p\u003e\n\u003cp\u003eThe real problem was with sand-boxing. The snapshot library was blocked from writing the image files to the project directory if the app was sand-boxed. This seems really peculiar, since Xcode is running the tests and Xcode writes to the project directory all the time!\u003c/p\u003e\n\u003cp\u003eI found two ways around this:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eTurn off sand-box mode temporarily while testing.\u003c/li\u003e\n\u003cli\u003eMake a non-sand-boxed target and use it for testing against.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eNeither of these are particularly great. Option 1 is tedious, although I think it can work if the snapshots remain the same, it only fails if there is a change that it needs to write to disk.\u003c/p\u003e\n\u003cp\u003eOption 2 is tedious to set up (\u003ca href=\"/contact/\"\u003econtact me\u003c/a\u003e if you would like more details) but is more seamless after that.\u003c/p\u003e\n\u003cp\u003eThe best solution would be for Xcode to allow you to turn off sand-boxing for a test target. Maybe Xcode 12\u0026hellip;\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"limitations-of-snapshot-testing\"\u003e\n  Limitations of Snapshot Testing\n  \u003ca href=\"#limitations-of-snapshot-testing\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eIgnoring the Mac and concentrating only on iOS apps for the moment, there were a few issues:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eYou have to run your tests against the same simulator every time, or at least against a simulator with the same screen dimensions. I decided to to use the iPhone SE (2nd generation) as it has a small screen and I find smaller screens to be more of a problem than large ones. You also need to make sure it is always using the same appearance: light or dark, unless you want to specify this for every test.\u003c/p\u003e\n\u003cp\u003eI ended up with this setup function that ran before my snapshot test suite:\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eoverride\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esetUp\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e device = UIDevice.current.name\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e device \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;iPhone SE (2nd generation)\u0026#34;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            fatalError(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Switch to using iPhone SE (2nd generation) for these tests.\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        UIView.setAnimationsEnabled(\u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        UIApplication.shared.windows.first?.layer.speed = \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        record = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis uses a couple of tricks that are supposed to speed up tests and has a \u003ccode\u003erecord\u003c/code\u003e setting that I could set for the entire suite if I wished, and it throws a \u003ccode\u003efatalError\u003c/code\u003e if I select the wrong device or simulator.\u003c/p\u003e\n\u003cp\u003eIt would be neater if Xcode allowed you to select a simulator in the test target build settings, but I think you can only do this if you run tests from the command line.\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e\n\u003cp\u003eSnapshot tests confirm that the UI matches the state, but they do not check to see if the state changes in response to user input. That is the missing link that UI testing provides, but even without that, I believe that snapshot testing is a very useful tool and much better than having no form of UI testing at all.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eYou need to look at your snapshots. This may sound obvious but the snapshot library creates a set of images. These images are then set as the goal for future tests. If you don\u0026rsquo;t check that they are correct, then every test could be confirming that the UI is wrong but unchanged. If the tests report a difference, look at both copies and see which one is right. For the same reason, the snapshot images need to be included in your version control repository.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"summary\"\u003e\n  Summary\n  \u003ca href=\"#summary\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eWill I use snapshot tests for my SwiftUI apps? Yes, definitely. I use unit tests for my model classes but mostly avoid UI tests as they are too clumsy to write and time-consuming to run. Snapshot tests are better for SwiftUI, and very fast.\u003c/p\u003e\n\u003cp\u003eHuge thanks to \u003ca href=\"https://twitter.com/V8tr\"\u003eVadim Bualvin\u003c/a\u003e for the original inspiration for this article. Go and read his \u003ca href=\"https://www.vadimbulavin.com/snapshot-testing-swiftui-views/\"\u003eblog post\u003c/a\u003e for a more detailed look. And thanks to \u003ca href=\"https://www.twitter.com/mbrandonw\"\u003eBrandon Williams\u003c/a\u003e \u0026amp; \u003ca href=\"https://www.twitter.com/stephencelis\"\u003eStephen Celis\u003c/a\u003e at \u003ca href=\"https://www.pointfree.co\"\u003ePoint-Free\u003c/a\u003e for getting me going after my initial discarding of the idea. Any mistakes or errors are mine and not theirs.\u003c/p\u003e\n\u003cp\u003eIf you want to learn about UI testing for SwiftUI apps, I recommend watching \u003ca href=\"https://twitter.com/azamsharp\"\u003eazamsharp\u0026rsquo;s\u003c/a\u003e YouTube video: \u003ca href=\"https://www.youtube.com/watch?v=dFQtFJsvt04\"\u003eUser Interface Testing for SwiftUI Applications\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAs always, if you have any comments, suggestions or ideas, I would love to hear from you. Please contact me using one of the links below or through my \u003ca href=\"/contact/\"\u003eContact\u003c/a\u003e page.\u003c/p\u003e"
    },
    {
        "title" : "Name This App",
        "date_published" : "2020-05-09T11:26:21+10:00",
        "date_modified" : "2020-05-09T11:26:21+10:00",
        "id" : "https://troz.net/post/2020/name_this_app/",
        "url" : "https://troz.net/post/2020/name_this_app/",
        "content_html" : "\u003cp\u003eMy current work in progress is an iPhone app designed to make it easier to solve crossword anagrams by emulating and improving upon an ability that was there when we used to do crosswords on paper, but is missing for digital crosswords.\u003c/p\u003e\n\u003cp\u003eBut I cannot think of a clever name for the app, so please read the story and contact me with your name suggestions or if you would like to test the pre-release version of this app.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"cryptic-crosswords\"\u003e\n  Cryptic Crosswords\n  \u003ca href=\"#cryptic-crosswords\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eProgrammers are basically puzzlers, and programming is the world\u0026rsquo;s best type of puzzle, but I like to start my day with a cryptic crossword. Like programming, cryptic crossword clues have their own syntax and what seems like gibberish on a first glance, can be parsed into logical parts to take you to the answer. But there are aspects of solving crosswords that were easier with pencil and paper, so I decided to write an app to help fill one of those gaps.\u003c/p\u003e\n\u003cp\u003eMy crossword of choice is the \u003ca href=\"https://www.irishtimes.com/games/crosswords/\"\u003eCrosaire\u003c/a\u003e crossword from \u003ca href=\"https://www.irishtimes.com\"\u003eThe Irish Times\u003c/a\u003e. A lot of newspapers have a cryptic crossword and most of them need a subscription, but the Irish Times has a crossword only subscription that I really like. Crosswords also tend to require some local knowledge, but for the Crosaire, if you remember that the Abbey and the Gate are both theatres and that Down is a county, you will have most of what you need. And as an added bonus, the crossword creator later blogs the solutions with explanations so you can learn how the clues were constructed if you are totally mystified.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"anagrams\"\u003e\n  Anagrams\n  \u003ca href=\"#anagrams\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eAnagrams are a very popular clue type but they can be tricky to solve because our brains are too good at discerning patterns. We can recognize words using only the first and last letters if they have the correct number of letters inside. This means that asking our brains to scramble these letters into a completely different word is very difficult. In the olden days, when I used to do crosswords in the newspaper, the best method was to find a space in the margin and write the letters out in a circle which forced my brain to reconsider the options.\u003c/p\u003e\n\u003cp\u003eHere is an example from a recent Crosaire:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003eUsers rip off revelation (8)\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe word \u0026ldquo;off\u0026rdquo; is a hint that this is an anagram, \u0026ldquo;Users rip\u0026rdquo; has the right number of letters, so the overall clue must be \u0026ldquo;revelation\u0026rdquo;. This is not a very long anagram and I think having two words makes it easier, but lets take a look at how I would solve this the old-fashioned way. (And I knew the \u0026ldquo;I\u0026rdquo; was the third last letter.)\u003c/p\u003e\n\u003cp\u003e\u003cscript\u003e\n  window.onload = function (e) {\n    const imgs = document.getElementsByTagName('img')\n    for (i = 0; i \u003c imgs.length; i++) {\n      let src = imgs[i].src\n      if (src.endsWith('.gif')) {\n        imgs[i].src = ''\n        imgs[i].src = src\n      }\n    }\n  }\n\u003c/script\u003e\n\n\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n    max-width: 400px;\n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n\u003c/style\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Anagram1.gif\" alt=\"Anagram solving manually\"\u003e\u003c/p\u003e\n\u003cp\u003eIf you watch this gif and then look at it when it stops repeating, hopefully you will be able to see that the answer is \u0026ldquo;SURPRISE\u0026rdquo;. Refresh the page if you want to start the gif looping again.\u003c/p\u003e\n\u003cp\u003eBut I do crosswords on my iPad now and while I could use a notes app and my Apple Pencil to draw the letters out like I did in the GIF above, I don\u0026rsquo;t always have the Pencil with me and I want to keep looking at the crossword. So I decided that a companion iPhone app was the way that would work best for me.\u003c/p\u003e\n\u003cp\u003eThere are sites and apps that offer anagram solvers, but they are just looking through a dictionary and showing you all the possibilities. To me, this feels like cheating, but I don\u0026rsquo;t have a problem with using an app to emulate the techniques I used to use with pencil and paper.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"app-design\"\u003e\n  App Design\n  \u003ca href=\"#app-design\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eSo I planned out the basic features of the app:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eenter a word\u003c/li\u003e\n\u003cli\u003edisplay the letters in a circle\u003c/li\u003e\n\u003cli\u003eshuffle these letters if needed\u003c/li\u003e\n\u003cli\u003eplace letters in a possible solution\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eArranging the letters in a circle was made relatively easy by using SwiftUI. I placed the letters in a ZStack so they were all piled on the one spot. Then I calculated the X \u0026amp; Y offsets needed to move each letter to the edge of a circle. This involving digging out some long-forgotten trigonometry to convert from polar coordinates to rectangular coordinates. I could calculate the radius of the letter circle based on the screen size and the angle between each letter was 360 degrees divided by the number of letters. So some quick calculations converted these two numbers into X \u0026amp; Y coordinates for each letter, and then I had my circle.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e radiansBetweenLetters: Double {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e degrees = \u003cspan style=\"color:#ae81ff\"\u003e360.0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e Double(anagramLetters.count)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e radians = degrees \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e .pi \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e180\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e radians\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e radiusForCircle: Double {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e screenWidth = UIScreen.main.bounds.width\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e Double(screenWidth \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0.35\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eXoffsetForLetterAt\u003c/span\u003e(index: Int) -\u0026gt; CGFloat {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// x = R cos t\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e totalRadians = radiansBetweenLetters \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e Double(index)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e x = radiusForCircle \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e sin(totalRadians)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e CGFloat(x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eYoffsetForLetterAt\u003c/span\u003e(index: Int) -\u0026gt; CGFloat {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// y = R sin t\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e totalRadians = radiansBetweenLetters \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e Double(index)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e y = radiusForCircle \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e cos(totalRadians)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e CGFloat(y)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe original word was converted into an array for display, so re-arranging the letters was a matter of calling \u003ccode\u003eshuffle()\u003c/code\u003e on the array which automatically triggered a SwiftUI redraw.\u003c/p\u003e\n\u003cp\u003eAnd here is version 1 of the interface running in the SwiftUI Canvas:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/AnagramAssistv1.gif\" alt=\"Anagram app version 1\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eRefresh the page to see the gif play, if it has stopped.\u003c/em\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"a-different-type-of-anagram\"\u003e\n  A Different Type of Anagram\n  \u003ca href=\"#a-different-type-of-anagram\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eNow we come to a variation of the anagram clue that is very popular with the author of the Crosaire crossword. I don\u0026rsquo;t know if there is an official name, but I call them \u0026ldquo;subtraction anagrams\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eHere is an example:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003eCreationist has no taste for what\u0026rsquo;s sarcastic (6)\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe idea here is to remove the letters in \u0026ldquo;taste\u0026rdquo; from the letters in \u0026ldquo;Creationist\u0026rdquo; and then unscramble the remaining letters to find a word that means \u0026ldquo;sarcastic\u0026rdquo;. My first attempt at this used a Trash can button that removed the letter and shortened the space for the solution, but then I decided to have a discard tray at the bottom of the screen to show what had been removed and allow replacing any letters discarded by mistake.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/AnagramDiscard.png\" alt=\"Anagram discard tray\"\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eAfter this, I added a bit of style to make it look nicer and then moved on to the next feature. If I knew some of the cross letters already, I wanted to be able to place them in the solution squares and then lock them in place. This would allow me to shuffle in letters to test and remove all the unlocked ones with a button click. So here is what the app looked like after those changes:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/AnagramLocks.mp4\" alt=\"Anagram with locked letters\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eRefresh the page to see the gif play, if it has stopped.\u003c/em\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"drag--drop\"\u003e\n  Drag \u0026amp; Drop\n  \u003ca href=\"#drag--drop\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eMy next experiment was with drag \u0026amp; drop to place or discard letters. I waited until iOS 13.4 brought drag \u0026amp; drop to SwiftUI but I was not happy with the result. Firstly, there is a big lag on dragging. You have to hold your finger down on a letter for quite a while before it becomes draggable. This was so counter-intuitive that I thought it wasn\u0026rsquo;t working, but occasionally it did work and so I eventually deduced that it was a timing issue.\u003c/p\u003e\n\u003cp\u003eThe second problem was solved thanks to a suggestion by \u003ca href=\"https://twitter.com/luisramos1337\"\u003eLuis Ramos\u003c/a\u003e on \u003ca href=\"https://twitter.com/trozware/status/1254568520295124992\"\u003eTwitter\u003c/a\u003e. When I dragged a letter, the drag preview image was the shuffle button from the middle of the ZStack instead of the selected letter. This was solved by moving the \u003ccode\u003eonDrag\u003c/code\u003e modifier to BEFORE the \u003ccode\u003eoffset\u003c/code\u003e modifier (not AFTER like I said in my original response to Luis). But I was still not happy with it, so I decided to discard this idea and stick to tapping.\u003c/p\u003e\n\u003cp\u003eThere was one side-effect: I wasn\u0026rsquo;t able to get the drag preview to be round - it was a square with opaque corners. As a work-around, I changed the letters to be inside squares and then decided this was a better look anyway, since it was more like what you see in a crossword.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"further-ui-enhancements\"\u003e\n  Further UI Enhancements\n  \u003ca href=\"#further-ui-enhancements\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eI installed a custom font so that it looked more like hand-writing. I wrote about \u003ca href=\"https://troz.net/post/2020/custom-fonts/\"\u003einstalling custom fonts\u003c/a\u003e in a separate article, so if you are interested check that out for details on the multiple steps that you need to take to get them to work. I went through a few different fonts until I found one that I thought worked well and clearly for all the upper case letters but I settled on \u003ca href=\"https://www.fontspace.com/search?q=oregano\"\u003eOregano\u003c/a\u003e. And then I made the app work in dark mode too:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/AnagramDarkMode.png\" alt=\"Custom font and dark mode\"\u003e\u003c/p\u003e\n\u003cp\u003eThe clue for this one is \u003cem\u003e\u0026ldquo;Consumables minus bacon and shellfish (6)\u0026rdquo;\u003c/em\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"animations\"\u003e\n  Animations\n  \u003ca href=\"#animations\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eSwiftUI has animation built in, so I was able to add an \u003ccode\u003eanimation\u003c/code\u003e modifier to the various views to make the transitions look smooth. I particularly liked the way the letters re-arranged themselves around the circle when I removed or replaced a letter.\u003c/p\u003e\n\u003cp\u003eBut to add something extra, I thought it would be fun if the letters all started in the middle and moved outwards to their places on the circle. The way I did this was by using a Boolean to store whether the letters had had their first draw. If not, the radius of the circle was zero, so they all piled in the middle. After a delay, this Boolean was toggled so the radius was changed to the full size and the animation modifier already applied, made the letters smoothly expand outwards.\u003c/p\u003e\n\u003cp\u003eFor the letter shuffle, I did the reverse, moving the letters in, shuffling, then moving them out again.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/AnagramAnimation.mp4\" alt=\"Animations\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eRefresh the page to see the gif play, if it has stopped.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eI also added sound effects and a slide-up sheet view with settings and help. I enjoyed using \u003ca href=\"https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/\"\u003eApple\u0026rsquo;s SF Symbols\u003c/a\u003e to show icons for each paragraph of the help, although I may change the colour of these icons as they look at bit too much like buttons right now.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/AnagramHelp.png\" alt=\"Help \u0026amp; Settings\"\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"next-steps\"\u003e\n  Next Steps\n  \u003ca href=\"#next-steps\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eWell, I am hoping that someone will come up with a good name. I thought of \u0026ldquo;Anagram Assistant\u0026rdquo; but that doesn\u0026rsquo;t fit underneath the home screen icon and it was shortened to \u0026ldquo;Anagram\u0026rdquo;. I don\u0026rsquo;t want people to see it and think it is just one of those dictionary lookup anagram finders, so I would like something more descriptive while still being short, or at least having a short variant.\u003c/p\u003e\n\u003cp\u003eIn honour of P.G.Wodehouse\u0026rsquo;s favourite crossword clue, I thought of calling it \u0026ldquo;E blank U\u0026rdquo; but that isn\u0026rsquo;t an anagram, so it doesn\u0026rsquo;t really work. For people not familiar with that reference, Wodehouse\u0026rsquo;s less quick-witted characters always get stuck on \u0026ldquo;Large flightless Australian bird, 3 letters. E blank U\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eA clever name would be good - perhaps an anagram itself? If you think of anything, please let me know on \u003ca href=\"https://twitter.com/trozware\"\u003eTwitter\u003c/a\u003e, by using the email link below or through the \u003ca href=\"/contact/\"\u003eContact page\u003c/a\u003e. The namer will get full credit in the app. And use one of those methods to contact me if you would like to test the app before it is released.\u003c/p\u003e\n\u003cp\u003eOnce I have a name, I can get to work on the usual secondary tasks which take so much time: App Store set up, screen shots, a support page and so on.\u003c/p\u003e\n\u003cp\u003eI haven\u0026rsquo;t tried an iPad version yet. I got stung once by testing an iPad version of an app, deciding it didn\u0026rsquo;t work well and then running into Apple\u0026rsquo;s ban on dropping a platform from a published app. This has discouraged me from iPad apps ever since, which I doubt was their intention.\u003c/p\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAnd if you are curious about the solutions to the clues I used in the examples:\u003c/p\u003e\n\u003cp\u003eUsers rip off revelation (8) = SURPRISE\u003cbr\u003e\nCreationist has no taste for what\u0026rsquo;s sarcastic (6) = IRONIC\u003cbr\u003e\nConsumables minus bacon and shellfish (6) = MUSSEL\u003c/p\u003e\n\u003c/blockquote\u003e"
    },
    {
        "title" : "SwiftUI Color",
        "date_published" : "2020-05-09T11:26:08+10:00",
        "date_modified" : "2020-05-09T11:26:08+10:00",
        "id" : "https://troz.net/post/2020/swiftui-color/",
        "url" : "https://troz.net/post/2020/swiftui-color/",
        "content_html" : "\u003cp\u003eAs developers, we are used to thinking of color as a numeric way to specify a particular tint. But in SwiftUI, \u003ccode\u003eColor\u003c/code\u003e - like almost everything else - is actually a \u003ccode\u003eView\u003c/code\u003e in its own right. This leads us to two very interesting questions: how do we use a view to specify a color and how can we use the fact that \u003ccode\u003eColor\u003c/code\u003e is \u003ccode\u003eView\u003c/code\u003e?\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"specifying-a-color\"\u003e\n  Specifying a Color\n  \u003ca href=\"#specifying-a-color\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eTo start my investigations of \u003ccode\u003eColor\u003c/code\u003e, I created a new iOS single view app in Xcode. Regular followers will know that I am a passionate advocate of macOS programming, but when experimenting with SwiftUI, I prefer to use an iPhone app as the preview canvas fits very neatly into the main Xcode window.\u003c/p\u003e\n\u003cp\u003eThe default \u003ccode\u003eContentView\u003c/code\u003e contains a single \u003ccode\u003eText\u003c/code\u003e view. To change the color of the text in this view, I added a modifier:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello, World!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .foregroundColor(.red)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003eforegroundColor\u003c/code\u003e modifier expects a \u003ccode\u003eColor\u003c/code\u003e so there was no need to tell it that the parameter is a \u003ccode\u003eColor\u003c/code\u003e and I was able to use the short way of describing one of the standard colors.\u003c/p\u003e\n\u003cp\u003eAdding a background color is a bit different because a background can be any view, not just a color. So the modifier needs to specify that this is a \u003ccode\u003eColor\u003c/code\u003e view, as well as setting the actual color.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello, World!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .padding()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .foregroundColor(.red)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .background(Color.yellow)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cem\u003eI added the padding to make the overall size bigger so that the background color was more obvious.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eCommand-click on \u003ccode\u003e.red\u003c/code\u003e or \u003ccode\u003e.yellow\u003c/code\u003e in the code and select \u0026ldquo;Jump to Definition\u0026rdquo;. This lists the available pre-defined colors. As well a set of basic colors and a clear option, there are two extra entries: primary \u0026amp; secondary. And if you scroll back up the page a bit, you will see another one: accentColor.\u003c/p\u003e\n\u003cp\u003eChoosing one of the preset options is the easiest way to select a color. But try this:\u003c/p\u003e\n\u003cp\u003eIn your code, type \u003ccode\u003elet uiColor = UIColor.\u003c/code\u003e and have a look at the auto-complete suggestions that appear after you type the period. Scrolling past the various \u003ccode\u003einit\u003c/code\u003e methods, you will see that \u003ccode\u003eUIColor\u003c/code\u003e has a lot more options than \u003ccode\u003eColor\u003c/code\u003e. There are a bunch of colors, a section of system colors and a lot of semantic colors like placeholderText, secondarySystemBackground.\u003c/p\u003e\n\u003cp\u003eWhy does UIColor get these other useful looking options and Color does not?\u003c/p\u003e\n\u003cp\u003eWell, I don\u0026rsquo;t have an answer to that except that I hope they will appear over time. But in the meantime, it is easy enough to create a SwiftUI \u003ccode\u003eColor\u003c/code\u003e from a \u003ccode\u003eUIColor\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e backgroundColor = Color(UIColor.secondarySystemBackground)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      VStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello, World!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .background(backgroundColor)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIf you know the RGB values of the color you want to use, it is possible to create a \u003ccode\u003eColor\u003c/code\u003e directly by various methods like this one for setting the color using the RGB values.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e rgbColor = Color(red: \u003cspan style=\"color:#ae81ff\"\u003e1.0\u003c/span\u003e, green: \u003cspan style=\"color:#ae81ff\"\u003e0.5\u003c/span\u003e, blue: \u003cspan style=\"color:#ae81ff\"\u003e0.5\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBut when you get to this stage, I strongly suggest that you start using color assets instead.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"using-color-assets\"\u003e\n  Using Color Assets\n  \u003ca href=\"#using-color-assets\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eGo to Assets.xcassets and click the plus button at the bottom of the list of assets. Select \u0026ldquo;New Color Set\u0026rdquo; and you will get a new asset called \u0026ldquo;Color\u0026rdquo;. You can double-click the name to edit it to something that makes sense to you.\u003c/p\u003e\n\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n\u003c/style\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/swiftui-colors-add-set.png\" alt=\"Add Color Set\"\u003e\u003c/p\u003e\n\u003cp\u003eWhile naming it after the color may seem logical, I prefer to think about the use cases for this color and set the name to something like \u0026ldquo;cardBackground\u0026rdquo; or \u0026ldquo;alertText\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eBy default, your new color set will contains a single color block. Click in the color block itself and then you will be able to edit the color in the Attributes Inspector. If you click the \u0026ldquo;Content\u0026rdquo; popup, you will get access to all the system colors, and you can also select any color space and create a custom color using that color space. Click \u0026ldquo;Color Panel\u0026rdquo; to access a standard color picker if you need it. And change the input method to whatever suits the color information you have.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/swiftui-colors-set.png\" alt=\"Edit Color Set\"\u003e\u003c/p\u003e\n\u003cp\u003eModern apps need to be able to handle light and dark modes, and this is where using a color set really shines. Set the color to what you want to use for light mode and then choose \u0026ldquo;Any, Dark\u0026rdquo; from the Appearances popup menu in the Attributes Inspector.\u003c/p\u003e\n\u003cp\u003eNow your color set has two blocks and you can change the Dark one to whatever color this should be in dark mode. This feature of Color Sets is a very strong argument for using them instead of defining colors using their RGB values.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/swiftui-colors-multi-set.png\" alt=\"Light \u0026amp; Dark Color Set\"\u003e\u003c/p\u003e\n\u003cp\u003eAnd now for the really neat part. To use any of these color sets in your code, add a modifier like \u003ccode\u003eforegroundColor\u003c/code\u003e just the same as usual, but when the placeholder for the color is selected, press Shift-Command-L to bring up the Library palette and choose the Color icon at the right. You will see all your color sets there and you can insert them easily and accurately.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/swiftui-colors-use-color-set.webp\" alt=\"Using a Color Set\"\u003e\u003c/p\u003e\n\u003cp\u003eHere is the code for my \u003ccode\u003eAlertView\u003c/code\u003e using two color sets.\u003c/p\u003e\n\u003cp\u003eSome people may object to using \u0026ldquo;magic strings\u0026rdquo; to specify the color sets but I feel that so long as the Library is used to insert the color names automatically, there is very little chance of error. But you could always make an enum or struct of color name constants and use these instead.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAlertView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e alertText = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Something went wrong!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(alertText)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .padding()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .background(Color(UIColor.secondarySystemBackground))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .cornerRadius(\u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .shadow(color: Color(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;alertShadow\u0026#34;\u003c/span\u003e), radius: \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, x: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, y: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .foregroundColor(Color(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;alertText\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAlertView_Previews\u003c/span\u003e: PreviewProvider {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e previews: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Group {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            AlertView().preferredColorScheme(.light)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            AlertView().preferredColorScheme(.dark)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .previewLayout(.sizeThatFits)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd here is a composite image showing the two versions of the alert with the colors specified by two color sets:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/swiftui-colors-alerts.png\" alt=\"Alerts Using Color Set\"\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"light--dark-mode-system-colors\"\u003e\n  Light \u0026amp; Dark Mode System Colors\n  \u003ca href=\"#light--dark-mode-system-colors\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eColor\u0026rsquo;s preset colors adapt automatically to the environment so that they work with dark mode or light mode just like your own Color Sets can.\u003c/p\u003e\n\u003cp\u003eI wrote a test view to loop through all the preset colors (except clear) and display their descriptions in their own color.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eContentView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e standardColors: [Color] = [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .black, .white, .gray, .red, .green, .blue, .orange,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .yellow, .pink, .purple, .primary, .secondary, .accentColor\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        VStack(alignment: .leading) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ForEach(standardColors, id: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\\\u003c/span\u003e.\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e) { color \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Text(color.description)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    .bold()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    .foregroundColor(color)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .font(.title)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .padding()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eContentView_Previews\u003c/span\u003e: PreviewProvider {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e previews: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Group {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ContentView().preferredColorScheme(.light)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ContentView().preferredColorScheme(.dark)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe canvas shows two previews: one for light mode and one for dark mode.\u003c/p\u003e\n\u003cp\u003eIf you have a color picker app (I use \u003ca href=\"https://github.com/Toinane/colorpicker/releases/tag/2.0.3\"\u003eColorpicker\u003c/a\u003e), you can detect the RGB values in the two previews. I made the font bold to make this easier. Red is \u003ccode\u003ergb(232, 77, 61)\u003c/code\u003e in light mode but \u003ccode\u003ergb(233, 85, 69)\u003c/code\u003e in dark mode. And the others have similar modifications to make them look their best in each environment.\u003c/p\u003e\n\u003cp\u003eTake particular note of the three at the bottom of the list: primary, secondary and accentColor. These are incredibly useful when making a layout that works in both light and dark modes.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/swiftui-colors-light-dark.png\" alt=\"Color previews\"\u003e\u003c/p\u003e\n\u003cp\u003eWhen choosing a UIColor or NSColor, it is best to use the system versions, so \u003ccode\u003e.systemBlue\u003c/code\u003e instead of \u003ccode\u003e.blue\u003c/code\u003e as this gives the dark/light variants that we just saw. And the other semantic colors like \u003ccode\u003eUIColor.secondarySystemBackground\u003c/code\u003e also have dark/light variants automatically.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"color-as-a-view\"\u003e\n  Color as a View\n  \u003ca href=\"#color-as-a-view\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eNow let\u0026rsquo;s consider the effect of \u003ccode\u003eColor\u003c/code\u003e being a view and not just a description of a tint. Imagine you wanted to draw a colored box on the screen. Using UIKit, you would probably think of using a \u003ccode\u003eUIView\u003c/code\u003e. With AppKit, maybe an \u003ccode\u003eNSBox\u003c/code\u003e. Or perhaps you would have jumped straight to a Bezier path.\u003c/p\u003e\n\u003cp\u003eCreate a new SwiftUI view and replace the default \u003ccode\u003eText\u003c/code\u003e with a \u003ccode\u003eColor\u003c/code\u003e, like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eBoxView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Color.blue\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eResume the canvas preview and you will see the color fill the preview iPhone screen, except for the safe areas top and bottom.\u003c/p\u003e\n\u003cp\u003eTo make this into a box, add a \u003ccode\u003eframe\u003c/code\u003e modifier with the required height and width. And now you have a box, far more easily than you could in either UIKit or AppKit.\u003c/p\u003e\n\u003cp\u003eTo be honest, in SwiftUI, you would probably use a \u003ccode\u003eRectangle\u003c/code\u003e instead of a plain \u003ccode\u003eColor\u003c/code\u003e if you wanted a box of a set size but it is interesting to consider how \u003ccode\u003eColor\u003c/code\u003e could be made to work.\u003c/p\u003e\n\u003cp\u003eA more valuable use of \u003ccode\u003eColor\u003c/code\u003e is to set the background.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eBackgroundView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ZStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Color.green\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello, green background\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis makes the entire background green and shows the text centered on it.\u003c/p\u003e\n\u003cp\u003eAnd to make the color extend into the safe areas:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Color.green.edgesIgnoringSafeArea(.all)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI prefer to put the \u003ccode\u003eedgesIgnoringSafeArea\u003c/code\u003e modifier on the \u003ccode\u003eColor\u003c/code\u003e only and not on the entire \u003ccode\u003eZStack\u003c/code\u003e. That way the other contents of the \u003ccode\u003eZStack\u003c/code\u003e will all stay inside the safe area.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eSo in summary, use preset colors or color assets to set your colors. And use the \u003ccode\u003eColor\u003c/code\u003e view to set a background color for a view.\u003c/p\u003e\n\u003cp\u003eI hope you found this article useful, and if you have any suggestions, corrections or improvements, please contact me using one of the links below or through the \u003ca href=\"/contact/\"\u003eContact\u003c/a\u003e page.\u003c/p\u003e"
    },
    {
        "title" : "Custom Fonts in iOS \u0026 macOS apps",
        "date_published" : "2020-04-01T10:27:59+10:00",
        "date_modified" : "2020-04-01T10:27:59+10:00",
        "id" : "https://troz.net/post/2020/custom-fonts/",
        "url" : "https://troz.net/post/2020/custom-fonts/",
        "content_html" : "\u003cp\u003eAs a rule, I prefer to use fonts that come pre-installed with the system. That means that your interface is already familiar to users, you get dynamic font sizing and if Apple updates the fonts, you get the updates without doing anything.\u003c/p\u003e\n\u003cp\u003eBut sometimes, you really need to use a different font in your apps, and as the process of getting a custom font to display in your app can be confusing and tedious, I thought I would go through the steps for both iOS and macOS apps.\u003c/p\u003e\n\u003cp\u003eI probably should have published this on a different day, but it is not a joke\u0026hellip;. really.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"getting-a-font-file\"\u003e\n  Getting a Font File\n  \u003ca href=\"#getting-a-font-file\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eThe first thing is to find a suitable font and make sure that the license for that font matches your use. I wanted a font that looked like it was hand-written, so I went to fontspace and searched the \u003ca href=\"https://www.fontspace.com/category/handwriting\"\u003ehand-writing category\u003c/a\u003e there.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/SelectFont1.png\" alt=\"Fonts\"\u003e\u003c/p\u003e\n\u003cp\u003eSince I wanted to use this in a paid app, I checked the \u0026ldquo;Commercial-use\u0026rdquo; button to limit the search. The one I chose was called \u0026ldquo;\u003ca href=\"https://www.fontspace.com/get/family/4yyjn\"\u003ePainting With Chocolate\u003c/a\u003e\u0026rdquo; by \u0026ldquo;Make mooze\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/SelectFont2.png\" alt=\"Download font\"\u003e\u003c/p\u003e\n\u003cp\u003eI downloaded the font and un-zipped the file which gave me a single file called \u0026ldquo;Paintingwithchocolate-K5mo.ttf\u0026rdquo;. You can use either \u0026ldquo;.ttf\u0026rdquo; or \u0026ldquo;.otf\u0026rdquo; font files.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"using-the-font-in-an-ios-app\"\u003e\n  Using the Font in an iOS App\n  \u003ca href=\"#using-the-font-in-an-ios-app\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eNow to use the font, first in an iOS app. Boot up Xcode and create a new SwiftUI project for iOS.\u003c/p\u003e\n\u003cp\u003eOnce the project is open, drag the font file into the Project Navigator. At this stage there are 2 crucial settings:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCheck \u0026ldquo;Copy files if needed\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eCheck your app in the \u0026ldquo;Add to targets\u0026rdquo; section.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"/images/AddFontToProject.png\" alt=\"Add font to project\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003eIn one of my tests, the file stayed in the Downloads folder even after checking \u0026ldquo;Copy files\u0026rdquo;, so I deleted the reference, manually moved the font file to my project folder and added it again.\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eNow the font file is in the project but there is still more work to do.\u003c/p\u003e\n\u003cp\u003eSelect the font file in the Project Navigator. Press Return as if you are going to edit the name. Select the complete file name, \u003cstrong\u003eincluding the file extension\u003c/strong\u003e and copy it.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/CopyFontName.png\" alt=\"Copy font file name\"\u003e\u003c/p\u003e\n\u003cp\u003eNow go to the Info.plist file. Right-click in the blank space below the existing entries and select \u0026ldquo;Add Row\u0026rdquo; from the popup menu. In the box that appears, start typing \u0026ldquo;Font\u0026rdquo; using an upper-case \u0026ldquo;F\u0026rdquo;. When you see \u0026ldquo;Fonts provided by application\u0026rdquo;, select that.\u003c/p\u003e\n\u003cp\u003eThis entry is an array. Click the disclosure triangle to the left and you should see \u0026ldquo;Item 0\u0026rdquo; appear. Paste the name of your font file, including the file extension, into the value for \u0026ldquo;Item 0\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/FontsProvided.png\" alt=\"Setting Info.plist entry\"\u003e\u003c/p\u003e\n\u003cp\u003eYour app now has a font file and knows to make it available. But you aren\u0026rsquo;t finished yet.\u003c/p\u003e\n\u003cp\u003eTo use a custom font, you need to know its exact name. In SwiftUI, the code will be something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello, World!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .font(.custom(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Font-Name-Goes-Here\u0026#34;\u003c/span\u003e, size: \u003cspan style=\"color:#ae81ff\"\u003e14\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBut the exact name is not always obvious and is rarely the file name. So the best thing to do is to ask the app what fonts it now has available. This will also act as confirmation that the font file is being included correctly in your project.\u003c/p\u003e\n\u003cp\u003eTo get the app to list all its fonts, I used this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eContentView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello, World!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .onAppear { \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.listInstalledFonts() }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elistInstalledFonts\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e fontFamilies = UIFont.familyNames.sorted()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e family \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e fontFamilies {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            print(family)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e font \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e UIFont.fontNames(forFamilyName: family).sorted() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\t\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003efont\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou can run the app in the Simulator or use \u0026ldquo;Debug Preview\u0026rdquo; to make this show up in the console, but once you have the list, scroll through in until you find the font you just added. The headers are the names of font families and the indented entries are the font names themselves.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/FontsList-iOS.png\" alt=\"List of Fonts\"\u003e\u003c/p\u003e\n\u003cp\u003eThis time I found that the name of the font was quite obvious: \u0026ldquo;PaintingWithChocolate\u0026rdquo; but this is not always the case. And if the font has any variants, you will need to use the complete name e.g. \u0026ldquo;Optima-ExtraBlack\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eWith the name of the font, you are finally able to use it in the app, like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eContentView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello, World!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .font(.custom(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;PaintingWithChocolate\u0026#34;\u003c/span\u003e, size: \u003cspan style=\"color:#ae81ff\"\u003e40\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"/images/FontUsed-iOS.png\" alt=\"Font in use - iOS\"\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"using-the-font-in-a-mac-app\"\u003e\n  Using the Font in a Mac App\n  \u003ca href=\"#using-the-font-in-a-mac-app\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eThe process for a Mac app is mostly the same.\u003c/p\u003e\n\u003cp\u003eInstall the font file in your project as before, making sure to copy the file into the project and to add it to the app target.\u003c/p\u003e\n\u003cp\u003eFor a Mac app, you do not need to specify the font file name in your Info.plist file. Instead, you have to tell the Info.plist where to look for custom fonts in your project directory.\u003c/p\u003e\n\u003cp\u003eOpen your Info.plist, right-click in the blank space below the existing entries and select \u0026ldquo;Add Row\u0026rdquo; from the popup menu. Start typing \u0026ldquo;Application\u0026rdquo; using an upper-case \u0026ldquo;A\u0026rdquo;. When you see \u0026ldquo;Application fonts resource path\u0026rdquo;, select that and enter a period as the value. A period or full-stop tells Xcode that you mean the current directory but even if you have your fonts in a sub-directory, this seems to work.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/AppFontPath.png\" alt=\"Application Font Path\"\u003e\u003c/p\u003e\n\u003cp\u003eYou do not need to set \u0026ldquo;Fonts provided by application\u0026rdquo; for a Mac app, although if I had a problem, I would set it as I feel that this is something that Apple may add at some stage.\u003c/p\u003e\n\u003cp\u003eWhile I was using the same font for both apps and so already had the exact name, you may still need to check the list of installed fonts in a Mac app. The function for doing that is quite different:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elistInstalledFonts\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e fontFamilies = NSFontManager.shared.availableFontFamilies.sorted()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e family \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e fontFamilies {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          print(family)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e familyFonts = NSFontManager.shared.availableMembers(ofFontFamily: family)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e fonts = familyFonts {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e font \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e fonts {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\t\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003efont\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe format of the print-out is different too, but you can see where I have selected the exact name to use.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/FontList-Mac.png\" alt=\"List of Fonts - Mac\"\u003e\u003c/p\u003e\n\u003cp\u003eThen the SwiftUI code for using the font was just the same:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eContentView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello, World!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .font(.custom(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;PaintingWithChocolate\u0026#34;\u003c/span\u003e, size: \u003cspan style=\"color:#ae81ff\"\u003e60\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .frame(maxWidth: .infinity, maxHeight: .infinity)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"/images/FontUsed-Mac.png\" alt=\"Font in use in Mac app\"\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"storyboard-apps\"\u003e\n  Storyboard apps\n  \u003ca href=\"#storyboard-apps\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eThe examples above were both SwiftUI projects, but these techniques work much the same in a storyboard project.\u003c/p\u003e\n\u003cp\u003eFollow the same steps to install the font and configure the Info.plist file and use the same functions to list the installed files.\u003c/p\u003e\n\u003cp\u003eTo use the fonts, if you are using a storyboard in an iOS project, select \u0026ldquo;Custom\u0026rdquo; in the font picker and then you will be able to see your custom font listed if it is installed correctly. I could not work out how to get the custom font appearing in this menu for a macOS app.\u003c/p\u003e\n\u003cp\u003eTo apply the font programmatically, you can use something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// iOS\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fontLabel.font = UIFont(name: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;PaintingWithChocolate\u0026#34;\u003c/span\u003e, size: \u003cspan style=\"color:#ae81ff\"\u003e36\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// macOS\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    fontLabel.font = NSFont(name: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;PaintingWithChocolate\u0026#34;\u003c/span\u003e, size: \u003cspan style=\"color:#ae81ff\"\u003e24\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"trouble-shooting\"\u003e\n  Trouble-shooting\n  \u003ca href=\"#trouble-shooting\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eIf you have gone through these steps and the font still isn\u0026rsquo;t working, here are a few things to check:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eIs the font file\u0026rsquo;s target membership set to the app?\n\u003cimg src=\"/images/FontFileTargetSet.png\" alt=\"File target Set\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIs the font file being included in the \u0026ldquo;Copy Bundle Resources\u0026rdquo; build phase? If not, drag it in manually from the Project Navigator.\n\u003cimg src=\"/images/FontInCopyBundleResources.png\" alt=\"Copy Bundle Resources\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eiOS Info.plist - is there a typo in the \u0026ldquo;Fonts provided by application\u0026rdquo; setting? Copy the file name and paste it in directly rather than trying to re-type it.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003emacOS Info.plist- have you put a single period \u0026ldquo;.\u0026rdquo; in the \u0026ldquo;Application fonts resource path\u0026rdquo; setting?\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRun the font name listing utility - does the font show up there?\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eHave you used the font name EXACTLY as shown in the font listing? Copy \u0026amp; paste it from the font list.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003cp\u003eHaving struggled with various of these steps myself recently, I thought it was worth documenting it. I am sure that future me will be grateful, but hopefully others will find it useful also.\u003c/p\u003e\n\u003cp\u003eIf you have any suggestions, corrections or improvements, please contact me using one of the links below or though the \u003ca href=\"/contact/\"\u003eContact\u003c/a\u003e page.\u003c/p\u003e"
    },
    {
        "title" : "SwiftUI for Mac Extras",
        "date_published" : "2020-01-27T11:32:57+10:00",
        "date_modified" : "2020-01-27T11:32:57+10:00",
        "id" : "https://troz.net/post/2020/swiftui_for-mac-extras/",
        "url" : "https://troz.net/post/2020/swiftui_for-mac-extras/",
        "content_html" : "\u003cp\u003eLast year, I wrote a 3 part series of articles on \u003ca href=\"/post/2019/swiftui-for-mac-1/\"\u003eusing SwiftUI to build a Mac\u003c/a\u003e app. I would like to thank everyone who contacted me about this series. It was received very well and revealed that there is still a large amount of interest in programming for the Mac.\u003c/p\u003e\n\u003cp\u003eSome of the responses I got were pointing out different or better ways to do things, so I am going to list them here, adding to this post as I get new information. The relevant sections in the original posts will have links to the fixes suggested here, but I decided it was easier to list the changes in a separate post, rather than asking people to re-read the whole series looking for modifications.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"dismissing-sheets\"\u003e\n  Dismissing sheets\n  \u003ca href=\"#dismissing-sheets\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eI just read your series on writing Mac apps with SwiftUI. Great stuff!\nJust wanted to add that in part 2 when dismissing sheets there are two ways to do that, one of them is the one that you figured out and the other is to have the view dismiss itself by grabbing its PresentationMode from the environment. This way you don’t need to pass presentation bindings to your sheet views.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003ePaul Hudson of Hacking with Swift explains how to use both methods very clearly in his article on \u003ca href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-make-a-view-dismiss-itself\"\u003eHow to make a view dismiss itself\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eMy \u003ca href=\"/post/2019/swiftui-for-mac-3#sheets\"\u003eoriginal technique\u003c/a\u003e passed the Boolean that triggered the sheet to appear, as a Binding to the sheet view. The sheet view could then toggle this to make the parent view dismiss it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  .sheet(isPresented: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003esheetIsShowing) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      SheetView(isVisible: \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003esheetIsShowing)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSheetView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Binding \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e isVisible: Bool\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        VStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;This is a sheet.\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Button(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;OK\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.isVisible = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .frame(width: \u003cspan style=\"color:#ae81ff\"\u003e300\u003c/span\u003e, height: \u003cspan style=\"color:#ae81ff\"\u003e150\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe presentation mode method leaves it up to the sheet to dismiss itself. The parent view shows the sheet but does not pass any binding.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  .sheet(isPresented: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003esheetIsShowing) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      SheetView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe sheet view gets an environment property that it can use to change its presentation mode, dismissing itself that way.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSheetView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Environment(\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\\\u003c/span\u003e.presentationMode) \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e presentationMode\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        VStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;This is a sheet.\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Button(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;OK\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.presentationMode.wrappedValue.dismiss()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .frame(width: \u003cspan style=\"color:#ae81ff\"\u003e300\u003c/span\u003e, height: \u003cspan style=\"color:#ae81ff\"\u003e150\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI guess the presentation mode method is slightly easier to understand and it leaves the caller of the sheet view less cluttered which is a good thing. But the two methods are functionally identical, so use whichever you prefer. The sample project now contains both methods, with one commented out, so you can swap the comments to test.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"subscribing-on-the-main-thread\"\u003e\n  Subscribing on the Main Thread\n  \u003ca href=\"#subscribing-on-the-main-thread\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eIn \u003ca href=\"/post/2019/swiftui-for-mac-2#passing-menu-data-to-a-view\"\u003epart 2 of this series\u003c/a\u003e, I created a menu item caused the downloaded image to be flipped. Selecting the menu item posted a notification:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003e@IBAction\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eflipImage\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e sender: Any) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        NotificationCenter.\u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e.post(name: .flipImage, object: \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ewhich the view showing the image was listening for.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e flipImageMenuItemSelected = NotificationCenter.\u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .publisher(\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e: .flipImage)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe outermost component of the view\u0026rsquo;s body used an \u003ccode\u003eonReceive\u003c/code\u003e modifier to get this notification and react accordingly.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      VStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// layout omitted for brevity\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .onReceive(flipImageMenuItemSelected) { \u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          DispatchQueue.main.async {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.imageIsFlipped.toggle()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSince the notification was triggering a change to the UI, I made sure that this happened on the main thread.\u003c/p\u003e\n\u003cp\u003eBut it was pointed out to me that it would be easier to make sure that the publisher was set up to use the main thread all the time, instead of having to specify the main queue when processing the notification.\u003c/p\u003e\n\u003cp\u003eSo now the publisher is defined like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e flipImageMenuItemSelected = NotificationCenter.\u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .publisher(\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e: .flipImage)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .receive(on: RunLoop.main)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd the \u003ccode\u003eonReceive\u003c/code\u003e modifier can toggle the \u003ccode\u003eimageIsFlipped\u003c/code\u003e flag directly, without having to worry about the thread.\u003c/p\u003e\n\u003cp\u003eThis seems to me a much better solution as it sets the correct thread once when the publisher is created and makes using it much cleaner and easier.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"passing-data-back-from-appkit\"\u003e\n  Passing data back from AppKit\n  \u003ca href=\"#passing-data-back-from-appkit\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eThe previous two changes have been more a matter of style, but this one is a real error that would stop an app working as it should.\u003c/p\u003e\n\u003cp\u003eIn \u003ca href=\"/post/2019/swiftui-for-mac-2#user-interface-elements\"\u003ethe User Interface Elements section of the series\u003c/a\u003e, I used \u003ccode\u003eNSViewRepresentable\u003c/code\u003e to embed a standard \u003ccode\u003eNSColorWell\u003c/code\u003e in a SwiftUI view. I thought this was working properly, but then I got this email:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eI noticed that the selectedColor in the EmbeddedColorWell is not being mutated and is not being used in a two-way manner. The selectedColor is initialized to NSColor.blue and used to set the color in the NSColorWell view. When the NSColorWell color is changed, it does change the color of the EmbeddedColorWell view. However, the actual @State var selectedColor value is never mutated in this process beyond the initialized value of NSColor.blue.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThis is in the Form tab of the UI Samples window. As suggested to me, I added a \u003ccode\u003ebackground\u003c/code\u003e modifier to set the background of a portion of the view to the selected color. And although the NSColorWell showed newly selected colors, the background remained stubbornly blue.\u003c/p\u003e\n\u003cp\u003eThe solution was to add a \u003ccode\u003eCoordinator\u003c/code\u003e to the \u003ccode\u003eNSViewRepresentable\u003c/code\u003e and have it subscribe to any changes in the color and update the embedded view\u0026rsquo;s selected color as needed. I would not have come up with this by myself, so many thanks to the person who sent it to me.\u003c/p\u003e\n\u003cp\u003eHere is the full code for the \u003ccode\u003eEmbeddedColorWell\u003c/code\u003e struct:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eEmbeddedColorWell\u003c/span\u003e: NSViewRepresentable {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Binding \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e selectedColor: NSColor\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCoordinator\u003c/span\u003e: NSObject {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e embedded: EmbeddedColorWell\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e subscription: AnyCancellable?\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003einit\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e embedded: EmbeddedColorWell) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.embedded = embedded\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Observe KVO compliant color property on NSColorWell object.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// Update the selectedColor property on EmbeddedColorWell as needed.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echangeColor\u003c/span\u003e(colorWell: NSColorWell) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            subscription = colorWell\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .publisher(\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\\\u003c/span\u003e.color, options: .new)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .sink { color \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    DispatchQueue.main.async {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.embedded.selectedColor = color\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emakeCoordinator\u003c/span\u003e() -\u0026gt; EmbeddedColorWell.Coordinator {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Coordinator(\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emakeNSView\u003c/span\u003e(context: Context) -\u0026gt; NSColorWell {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e colorWell = NSColorWell(frame: .zero)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        context.coordinator.changeColor(colorWell: colorWell)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e colorWell\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eupdateNSView\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e nsView: NSColorWell, context: Context) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        nsView.color = selectedColor\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn the previous section, I changed the publisher to use the main RunLoop so as to avoid having the use \u003ccode\u003eDispatchQueue.main.async\u003c/code\u003e. In this instance, that did not work so well. It only updated the selected color after the mouse had been released. But using \u003ccode\u003eDispatchQueue.main.async\u003c/code\u003e made the update live.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eAs I explained at the start of these articles, I was documenting my explorations in using SwiftUI for a Mac app and while I hoped there would be some useful examples, this was not intended to be a definitive guide. So I am very grateful to everyone who has contributed to these updates.\u003c/p\u003e\n\u003cp\u003eIf you have anything more that you would like to be included, please contact me using one of the contact buttons below or through the \u003ca href=\"/contact/\"\u003eContact page\u003c/a\u003e on this site.\u003c/p\u003e\n\u003cp\u003eThe edited project is available on \u003ca href=\"https://github.com/trozware/swiftui-mac\"\u003eGitHub\u003c/a\u003e.\u003c/p\u003e"
    },
    {
        "title" : "SwiftUI for Mac - Part 3",
        "date_published" : "2019-12-15T17:28:20+10:00",
        "date_modified" : "2019-12-15T17:28:20+10:00",
        "id" : "https://troz.net/post/2019/swiftui-for-mac-3/",
        "url" : "https://troz.net/post/2019/swiftui-for-mac-3/",
        "content_html" : "\u003cp\u003eIn \u003ca href=\"/post/2019/swiftui-for-mac-1/\"\u003epart 1 of this series\u003c/a\u003e, I created a Mac app using SwiftUI. The app uses a Master-Detail design to list entries in an outline on the left and show details about the selected entry in the detail view on the right. In \u003ca href=\"/post/2019/swiftui-for-mac-2/\"\u003epart 2\u003c/a\u003e I explored using menus, adding all the expected user interface elements and opening secondary windows.\u003c/p\u003e\n\u003cp\u003eIn this third and final part, I want to look at the various ways to present dialogs to the user.\u003c/p\u003e\n\u003cp\u003eThere are four different types of dialog that I want to explore:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAlert\u003c/li\u003e\n\u003cli\u003eAction\u003c/li\u003e\n\u003cli\u003eSheet\u003c/li\u003e\n\u003cli\u003eFile dialogs (open \u0026amp; save)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSo the first thing to do is add a footer to the DetailView to trigger each of these. I am going to separate this out into a new subview for neatness.\u003c/p\u003e\n\u003ch2 id=\"alert\"\u003e\n  Alert\n  \u003ca href=\"#alert\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eTo make an Alert, I need an @State Bool which sets whether the alert is visible or not. All the button has to do is toggle that Bool. Stripping out the extra code and views, this is what I have.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDialogsView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @State \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e alertIsShowing = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @State \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e dialogResult = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Click the buttons above to test the dialogs.\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Button(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Alert\u0026#34;\u003c/span\u003e) { \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.alertIsShowing.toggle() }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTo configure the alert itself, I added an alert modifier to the outmost view in this view. The \u003ccode\u003edialogResult\u003c/code\u003e string is a diagnostic that I can use to confirm that the results of the various dialogs get passed back to the parent view.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Alert(title: Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Alert\u0026#34;\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        message: Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;This is an alert!\u0026#34;\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        dismissButton: .\u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e(Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;OK\u0026#34;\u003c/span\u003e)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.dialogResult = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;OK clicked in Alert\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      })\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThere were a few things that tripped me up in this relatively short chunk of code. Firstly, both title and message must be Text views, not strings. If you get an error message that says \u0026ldquo;Cannot convert value of type \u0026lsquo;String\u0026rsquo; to expected argument type \u0026lsquo;Text\u0026rsquo;\u0026rdquo;, then you have forgotten to use a Text view.\u003c/p\u003e\n\u003cp\u003eThen there is the button which auto-suggest tells me is of type Alert.Button. I couldn\u0026rsquo;t find any documentation for this, but delving into the definition for Alert, I see that there are three pre-defined button types: default, cancel or destructive. Cancel actually has two variants and will use a label appropriate to the user\u0026rsquo;s locale if no label is supplied.\u003c/p\u003e\n\u003cp\u003eAgain, these buttons need a Text view as the label (if supplied) and can take an action closure, which I used to update my \u003ccode\u003edialogResult\u003c/code\u003e string.\u003c/p\u003e\n\u003cp\u003eThis version showed a single \u003ccode\u003edismissButton\u003c/code\u003e but I saw that there was a variation of Alert with \u003ccode\u003eprimary\u003c/code\u003e and \u003ccode\u003esecondary\u003c/code\u003e buttons. It was not obvious that these would also dismiss the alert dialog, but I tried anyway.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Alert(title: Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Alert\u0026#34;\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        message: Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;This is an alert!\u0026#34;\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        primaryButton: .\u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e(Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;OK\u0026#34;\u003c/span\u003e), action: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.dialogResult = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;OK clicked in Alert\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }), secondaryButton: .cancel({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.dialogResult = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Cancel clicked in Alert\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }))\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis worked very nicely and the Esc and Return keys triggered the two buttons as you would expect with both of them closing the dialog.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/SwiftUI-Mac-alert.jpg\" alt=\"Alert\"\u003e\u003c/p\u003e\n\u003cp\u003eI tried using the \u003ccode\u003edestructive\u003c/code\u003e button type, but there was no difference to either the appearance or behavior of the button.\u003c/p\u003e\n\u003cp\u003eSo Alert is a great choice for a text-based dialog, either for informational use or to allow two choices of action.\u003c/p\u003e\n\u003ch2 id=\"action\"\u003e\n  Action\n  \u003ca href=\"#action\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eVery short section here - \u0026lsquo;ActionSheet\u0026rsquo; is unavailable in macOS! I probably should have researched that before I started this section. So use Alerts, I guess or a custom sheet.\u003c/p\u003e\n\u003ch2 id=\"sheets\"\u003e\n  Sheets\n  \u003ca href=\"#sheets\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eWhile Alerts have a very fixed structure, sheets allow us to put any SwiftUI view into a sheet dialog.\u003c/p\u003e\n\u003cp\u003eSo I added another Bool for the Sheet button to toggle, and added this sheet modifier. SheetView right now is simply a TextView.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  .sheet(isPresented: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003esheetIsShowing) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      SheetView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis didn\u0026rsquo;t work so well. It showed the sheet, but the sheet was tiny - only the size of the Text view it contained. And I had no way of dismissing it\u0026hellip;\u003c/p\u003e\n\u003cp\u003eThe size problem was solved by setting a frame on the Text view in SheetView.\u003c/p\u003e\n\u003cp\u003eThe trick to dismissing the sheet is to pass it a Binding to the Bool that triggered it to open in the first place. If a button in the sheet sets this Bool back to false, the parent view will hide the sheet. That sounds confusing, but it works.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  .sheet(isPresented: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003esheetIsShowing) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      SheetView(isVisible: \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003esheetIsShowing)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSheetView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Binding \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e isVisible: Bool\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        VStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;This is a sheet.\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Button(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;OK\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.isVisible = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .frame(width: \u003cspan style=\"color:#ae81ff\"\u003e300\u003c/span\u003e, height: \u003cspan style=\"color:#ae81ff\"\u003e150\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHere is a very bad diagram that tries to explain what is happening:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/SwiftUI-Mac-sheet.png\" alt=\"Sheet\"\u003e\u003c/p\u003e\n\u003cp\u003eThe parent view has an @State Boolean variable called \u003ccode\u003esheetIsShowing\u003c/code\u003e. This is bound to the alert\u0026rsquo;s \u003ccode\u003eisPresented\u003c/code\u003e so it dictates whenever the sheet is visible. When the Sheet button is clicked, this variable is set to \u003ccode\u003etrue\u003c/code\u003e and the sheet opens. But at the same time, a Binding to this variable is passed to the sheet. I deliberately gave this a different name, so as to make it clear which View was changing what variable.\u003c/p\u003e\n\u003cp\u003eWhen the sheet wants to close, it does not close itself. Instead it sets this variable to false. Because it is a Binding, this sets the original \u003ccode\u003esheetIsShowing\u003c/code\u003e variable on the parent view to false and the parent view then closes the sheet.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUPDATE:\u003c/strong\u003e Look at \u003cstrong\u003e\u003ca href=\"/post/2020/swiftui_for-mac-extras#dismissing-sheets\"\u003eDismissing sheets\u003c/a\u003e\u003c/strong\u003e in my post of extras \u0026amp; changes to this series for an alternative way to dismiss a sheet.\u003c/p\u003e\n\u003ch3 id=\"sheets--data\"\u003e\n  Sheets \u0026amp; Data\n  \u003ca href=\"#sheets--data\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eWith this in place, I had the sheet opening and closing perfectly, but I was not yet passing data back \u0026amp; forth between the sheet and its parent view. I decide to put a TextField in the SheetView and bind its contents to the \u003ccode\u003edialogResult\u003c/code\u003e property in the DetailView so that any edits appeared immediately in the DetailView. And while I am there, I might as well add some more decorations to the SheetView since it is a full View and not a restricted Alert.\u003c/p\u003e\n\u003cp\u003eCalling the SheetView changed to this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  .sheet(isPresented: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003esheetIsShowing) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      SheetView(isVisible: \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003esheetIsShowing, enteredText: \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003edialogResult)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd the SheetView itself (not all the interface is listed here for brevity):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSheetView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Binding \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e isVisible: Bool\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Binding \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e enteredText: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        VStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Enter some text below…\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .font(.headline)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .multilineTextAlignment(.center)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            TextField(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Enter the result of the dialog here…\u0026#34;\u003c/span\u003e, text: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003eenteredText)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                 .padding()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            HStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Button(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Cancel\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.isVisible = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.enteredText = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Cancel clicked in Sheet\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Spacer()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Button(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;OK\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.isVisible = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.enteredText = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;OK: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.enteredText\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .frame(width: \u003cspan style=\"color:#ae81ff\"\u003e300\u003c/span\u003e, height: \u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .padding()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"/images/SwiftUI-Mac-sheet-data.png\" alt=\"Sheet with data\"\u003e\u003c/p\u003e\n\u003cp\u003eI only had two issues with this now. I was not able to get the focus into the TextField automatically when the sheet opened and I was not able to assign keyboard shortcuts to the Cancel and OK buttons so that they could be operated without a mouse. And as I mentioned in the previous part, I was not able to make the OK button take on the default styling.\u003c/p\u003e\n\u003cp\u003eOne useful technique that I developed: the SheetView is in the DialogsView.swift file instead of in its own SwiftUI file. It would probably be a good idea to separate it out but I didn\u0026rsquo;t which meant that it had no Canvas preview to look at while I was laying it out.\u003c/p\u003e\n\u003cp\u003eSo I edited the PreviewProvider like this, so that I could change the comments to switch it between showing the DialogsView and showing the SheetView.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDialogsView_Previews\u003c/span\u003e: PreviewProvider {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e previews: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// DialogsView()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        SheetView(isVisible: .constant(\u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e), enteredText: .constant(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"files\"\u003e\n  Files\n  \u003ca href=\"#files\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eAppKit provides NSOpenPanel for selecting a file and NSSavePanel for saving. I will try to implement NSSavePanel to allow saving the current cat image.\u003c/p\u003e\n\u003cp\u003eSince this is an AppKit control rather than a SwiftUI control, I assumed that I would need to use NSViewRepresentable like I did for the NSColorWell in part 2. But while NSColorWell is a descendent of NSView, NSSavePanel is not. So I need a new idea.\u003c/p\u003e\n\u003cp\u003eRather naively, I thought maybe I could just create an NSSavePanel in a function inside DialogsView and see what happened.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esaveImage\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e panel = NSSavePanel()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      panel.nameFieldLabel = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Save cat image as:\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      panel.nameFieldStringValue = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cat.jpg\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      panel.canCreateDirectories = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      panel.begin { response \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e response == NSApplication.ModalResponse.OK, \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e fileUrl = panel.url {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              print(fileUrl)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eCrash \u0026amp; burn\u0026hellip; so what if I made the NSSavePanel an @State property of the View? No, that crashed even faster. Maybe SwiftUI Views don\u0026rsquo;t like this sort of thing, but how about if I get the Application Delegate to handle it? What if I moved the \u003ccode\u003esaveImage\u003c/code\u003e method to the App Delegate and changed the calling function to access it there?\u003c/p\u003e\n\u003cp\u003eStill crashed. At this stage I am beginning to wonder if I know how to use an NSSavePanel. Time to create a simple test app without SwiftUI and see what happens. Well it appears that I no longer know how to use an NSSavePanel. Code from an older project that works fine, will not work in my new sample project!\u003c/p\u003e\n\u003cp\u003eGuess what - it was another macOS Catalina security issue which I would have realised faster I had opened the Console. Back to the Signing \u0026amp; Capabilities section of the target settings and this time I set File Access for User Selected File to Read/Write.\u003c/p\u003e\n\u003cp\u003eNow the NSSavePanel opens when called from DialogsView and prints the selected file URL if one is chosen.\u003c/p\u003e\n\u003cp\u003eBut this is all happening in DialogsView, which is a subview of DetailView. And DetailView is the view that holds the image, not DialogsView. So how can I save the image? Do I pass the URL to DetailView or pass the image to DialogsView? Or do something clever with Notifications and Subscriptions?\u003c/p\u003e\n\u003cp\u003eI really don\u0026rsquo;t know what is best, but I have decided to post a Notification with the URL as its object. DetailView can receive this Notification and save the image whenever it is received.\u003c/p\u003e\n\u003cp\u003eSo I replaced the \u003ccode\u003eprint\u003c/code\u003e line in the \u003ccode\u003esaveImage()\u003c/code\u003e method with:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  NotificationCenter.\u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e.post(name: .saveImage, object: fileUrl)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd in DetailView, I set up the publisher:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e saveImageUrlSelected = NotificationCenter.\u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         .publisher(\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e: .saveImage)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        VStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#75715e\"\u003e// view code removed for brevity\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .onReceive(saveImageUrlSelected) { publisher \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e saveUrl = publisher.object \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e? URL,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e imageData = \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.catImage?.tiffRepresentation {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e imageRep = NSBitmapImageRep(data: imageData) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e saveData = imageRep.representation(using: .jpeg,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                                              properties: [:]) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e? saveData.write(to: saveUrl)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd there we have it. Three types of dialogs demonstrated in a SwiftUI for Mac app:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eAlerts: good for simply text-only dialogs\u003c/li\u003e\n\u003cli\u003eSheets: good for more complex dialogs\u003c/li\u003e\n\u003cli\u003ePanels: AppKit dialogs that can be called from a SwiftUI View.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eI think this time I really am finished. This article has already expanded out into a 3-part monster, so I think it is way past time that I stopped typing. I hope you have enjoyed this series. Please use any of the buttons below to contact me or use the \u003ca href=\"/contact/\"\u003eContact page\u003c/a\u003e on this site. I would love to hear from anyone who found this series useful or who had any suggestions or corrections to make.\u003c/p\u003e\n\u003cp\u003eThe final project is available on \u003ca href=\"https://github.com/trozware/swiftui-mac\"\u003eGitHub\u003c/a\u003e if you would like to download it and take a look.\u003c/p\u003e"
    },
    {
        "title" : "SwiftUI for Mac - Part 2",
        "date_published" : "2019-12-15T17:28:10+10:00",
        "date_modified" : "2019-12-15T17:28:10+10:00",
        "id" : "https://troz.net/post/2019/swiftui-for-mac-2/",
        "url" : "https://troz.net/post/2019/swiftui-for-mac-2/",
        "content_html" : "\u003cp\u003eIn \u003ca href=\"/post/2019/swiftui-for-mac-1/\"\u003epart 1 of this series\u003c/a\u003e, I created a Mac app using SwiftUI. The app uses a Master-Detail design to list entries in an outline on the left and show details about the selected entry in the detail view on the right.\u003c/p\u003e\n\u003cp\u003eNow it is time to explore some more of the features of a Mac app with SwiftUI.\u003c/p\u003e\n\u003ch2 id=\"menus\"\u003e\n  Menus\n  \u003ca href=\"#menus\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eI had already discovered that the menu bar is configured in the Main.storyboard file. As an experiment, I will add new menu items that allows the user to select between dark mode, light mode or the system mode.\u003c/p\u003e\n\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n  }\n\u003c/style\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/SwiftUi-Mac-menus.png\" alt=\"Menus\"\u003e\u003c/p\u003e\n\u003cp\u003eLooking at the possibilities along the top that I could send the menu command to, the App Delegate looks like the best option, especially since these menus will change the entire app.\u003c/p\u003e\n\u003cp\u003eI opened AppDelegate.swift in the Assistant Editor and Control-dragged from each of the new menu items to create the 3 IBActions and added the code to set the mode.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003e@IBAction\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edarkModeSelected\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e sender: Any) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        NSApp.appearance = NSAppearance(named: .darkAqua)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003e@IBAction\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elightModeSelected\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e sender: Any) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        NSApp.appearance = NSAppearance(named: .aqua)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003e@IBAction\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esystemModeSelected\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e sender: Any) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        NSApp.appearance = \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd since I realized that I would want to check or un-check these based on the current settings, I added IBOutlets for each of these menu items too. As a side note, I love how Xcode is now clever enough to decide whether to add an IBOutlet or an IBAction depending on where in the file you Control-drag to.\u003c/p\u003e\n\u003ch2 id=\"using-a-property-wrapper\"\u003e\n  Using a Property Wrapper\n  \u003ca href=\"#using-a-property-wrapper\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eChanging mode worked perfectly in the Xcode Preview and in the built app, but the app was not storing this or displaying the current selection with a check mark in the menu.\u003c/p\u003e\n\u003cp\u003eFor storing the selection, I decided to try another new thing and use a UserDefaults property wrapper, based on \u003ca href=\"https://www.avanderlee.com/swift/property-wrappers/\"\u003ethis post by Antoine van der Lee\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eI configured a UserDefault wrapped variable for the mode, set it whenever the menu items changed it and added a function to read it in and apply it on startup.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @UserDefault(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;system_mode\u0026#34;\u003c/span\u003e, defaultValue: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;system\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e systemMode: String\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIt would be neater to use an enum here instead of strings, but that would have required fiddling with rawValues to save the data, so for this first test, I stuck to strings.\u003c/p\u003e\n\u003cp\u003eThe code to toggle the checkmarks in the menu items is standard stuff and nothing particularly SwiftUI related, so I won\u0026rsquo;t detail it here, but it is in the GitHub project if you are interested.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/SwiftUI-Mac-dark.png\" alt=\"Dark mode\"\u003e\u003c/p\u003e\n\u003ch2 id=\"passing-menu-data-to-a-view\"\u003e\n  Passing menu data to a View\n  \u003ca href=\"#passing-menu-data-to-a-view\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eThis worked fine and the app worked equally as well in dark or light modes, but I wanted to test how to communicate data back from the menus to the SwiftUI views.\u003c/p\u003e\n\u003cp\u003eAs a totally pointless but possibly amusing feature, I decided to add a menu item to flip the cat image and then work out how I could send that to the ContentView.\u003c/p\u003e\n\u003cp\u003eI added the new menu item to the Format menu and as a first attempt, I tried to Control-drag from there into the ContentView. It didn\u0026rsquo;t take, so I guess I need to send the message to the AppDelegate as before and then pass it on to the ContentView. I feel like this might be a good place to use a Publisher although so far I have only used the built-in ObservableObject type publishers.\u003c/p\u003e\n\u003cp\u003eIn this case, it would make more sense to have the DetailView respond to the menu, since it contains the image. But trying to add an @IBAction to a SwiftUI View struct gives this error: \u003ccode\u003eOnly instance methods can be declared @IBAction\u003c/code\u003e so I am using the App Delegate instead. I feel like this is a problem I need to solve, or the AppDelegate is going to end up filled with @IBActions, but for now, let\u0026rsquo;s keep going.\u003c/p\u003e\n\u003cp\u003eIn AppDelegate.swift, I added the IBAction for the Flip Image menu item and had it issue a Notification, after setting up an extension on Notification.Name to de-stringify the name of the notification.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003e@IBAction\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eflipImage\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e sender: Any) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        NotificationCenter.\u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e.post(name: .flipImage, object: \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn DetailView.swift, I set up a Boolean @State property to store whether the image was flipped or not and added an onReceive handler to toggle it. Since this is updating the UI, I made sure that it happened on the main thread, but I am not sure whether this is necessary, or whether onReceive uses the main thread automatically.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUPDATE:\u003c/strong\u003e Check out \u003cstrong\u003e\u003ca href=\"/post/2020/swiftui_for-mac-extras#subscribing-on-the-main-thread\"\u003eSubscribing on the Main Thread\u003c/a\u003e\u003c/strong\u003e in my post of extras \u0026amp; changes to this series for an alternative way to make sure the updates happen on the correct thread.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @State \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e imageIsFlipped = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// ...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  .onReceive(flipImageMenuItemSelected) { \u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    DispatchQueue.main.async {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.imageIsFlipped.toggle()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOnce I had that Boolean property, I added two more modifiers to the image. Don\u0026rsquo;t hate me for the force un-wrapping. I tried using if-let but it wouldn\u0026rsquo;t compile so I check for \u003ccode\u003ecatImage != nil\u003c/code\u003e before using this force-unwrap.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Image(nsImage: catImage!)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .resizable()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .aspectRatio(contentMode: .fit)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .rotation3DEffect(Angle(degrees: imageIsFlipped ? \u003cspan style=\"color:#ae81ff\"\u003e180\u003c/span\u003e : \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        axis: (x: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, y: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, z: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      .animation(.\u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow the image can be flipped from the menu item or even by using the keyboard shortcut. And with a smooth animation (smoother in the app than in this gif).\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/SwiftUI-Mac-Flip.mp4\" alt=\"Flipping the image\"\u003e\u003c/p\u003e\n\u003ch2 id=\"opening-another-window\"\u003e\n  Opening another window\n  \u003ca href=\"#opening-another-window\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eFor my next challenge, I want to open a second window that I can use to show samples of various UI elements. As I want to open it from a menu command, my first thought was to add a Window Controller to the Main storyboard and open it that way. I replaced the default View Controller with a Hosting Controller so that I could insert my SwiftUI View into it.\u003c/p\u003e\n\u003cp\u003eI had great trouble finding any documentation or examples of how to implement this, but after a lot of trial and error, here is what I got to work:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eDrag a Hosting View Controller into the storyboard and connect it to the menu item with a segue.\u003c/li\u003e\n\u003cli\u003eSet the Presentation property for the window controller to Single so that multiple copies of the window are not created.\u003c/li\u003e\n\u003cli\u003eCreate a new Swift file and subclass NSHostingController. Don\u0026rsquo;t bother using a Cocoa class file - the template doesn\u0026rsquo;t work. Use the code below, replacing SamplesView with the name of the SwiftUI view you want to display.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSwiftUI\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSamplesHostingController\u003c/span\u003e: NSHostingController\u0026lt;PrefsView\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003e@objc\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erequired\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edynamic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einit\u003c/span\u003e?(coder: NSCoder) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#66d9ef\"\u003esuper\u003c/span\u003e.\u003cspan style=\"color:#66d9ef\"\u003einit\u003c/span\u003e(coder: coder, rootView: SamplesView())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003eBack in the storyboard, set the class of the HostingController to this sub-class: SamplesHostingController in my case.\u003c/li\u003e\n\u003cli\u003eSet a minimum size for the new Window Controller, otherwise it shrinks to a very small stripe on the screen.\u003c/li\u003e\n\u003cli\u003eAdd the \u003ccode\u003e.frame(maxWidth: .infinity, maxHeight: .infinity)\u003c/code\u003e modifier to the root view in the view you are displaying - my SamplesView.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWith all these in place, I was able to open and close a Samples window that was displaying my SwiftUI content.\u003c/p\u003e\n\u003ch2 id=\"user-interface-elements\"\u003e\n  User Interface Elements\n  \u003ca href=\"#user-interface-elements\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eNot all the expected user interface elements are available in SwiftUI and some of the ones that are implemented are using different names. Again this is a point at which iOS development has got all the attention, so there are conversion tables out there listing UIKit elements and their SwiftUI equivalents, but I was not able to find a similar listing for AppKit. If you find one, please let me know.\u003c/p\u003e\n\u003cp\u003eAnyway, I experimented and got most of what I wanted as you can see below. The \u003ca href=\"https://github.com/trozware/swiftui-mac\"\u003esample app on GitHub\u003c/a\u003e shows the SwiftUI code for these samples, but the main advice I would give is firstly to use the Object Browser to look for what is available and then to check out the styles that can be applied to the element you have chosen.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/SwiftUI-Mac-UI.png\" alt=\"UI elements\"\u003e\u003c/p\u003e\n\u003cp\u003eMostly, I managed to achieve what I wanted but there were a few exceptions.\u003c/p\u003e\n\u003cp\u003eButtons were a bit odd as there are multiple button styles listed, but I found that they either all looked the same or they disappeared completely. I was not able to style a button with an image and text which is now easy to do in iOS. And I was not able to set a button as the default button and I could not work out how to set a keyboard equivalent for a button. (Setting the keyboard equivalent to Return or Enter might set it to the default style automatically.)\u003c/p\u003e\n\u003cp\u003eOf the other UI elements that I wanted to use, a color picker was the main one missing. So I decided to embed an NSColorWell from AppKit into my SwiftUI view.\u003c/p\u003e\n\u003cp\u003eThe process for embedding a UIKit view is quite well documented elsewhere and the AppKit equivalent was not significantly different. Replace every \u0026ldquo;UI\u0026rdquo; with \u0026ldquo;NS\u0026rdquo; and you are nearly there.\u003c/p\u003e\n\u003cp\u003eFirst I made a struct that conformed to \u003ccode\u003eNSViewRepresentable\u003c/code\u003e and had the required two functions: \u003ccode\u003emakeNSView(context:)\u003c/code\u003e and \u003ccode\u003eupdateNSView(_:context:)\u003c/code\u003e. I supplied an @Binding variable to hold the selected color as an NSColor since that is what the NSColorWell uses.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eEmbeddedColorWell\u003c/span\u003e: NSViewRepresentable {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Binding \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e selectedColor: NSColor\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emakeNSView\u003c/span\u003e(context: Context) -\u0026gt; NSColorWell {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        NSColorWell(frame: .zero)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eupdateNSView\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e nsView: NSColorWell, context: Context) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        nsView.color = selectedColor\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBack in my SwiftUI view, I was then able to use \u003ccode\u003eEmbeddedColorWell\u003c/code\u003e just like any other SwiftUI view, passing it a binding to an @State variable to set and get the selected color.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  EmbeddedColorWell(selectedColor: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$\u003c/span\u003eselectedColor)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eUPDATE:\u003c/strong\u003e Be sure to read \u003cstrong\u003e\u003ca href=\"/post/2020/swiftui_for-mac-extras#passing-data-back-from-appkit\"\u003ePassing data back from AppKit\u003c/a\u003e\u003c/strong\u003e in my post of extras \u0026amp; changes to this series. This is an important fix that is needed to make this embedded control pass data back properly.\u003c/p\u003e\n\u003cp\u003eThe other stumbling block that I encountered was that I had no way to close the window programmatically, in response to a button click or some other interaction. Maybe this was not the best way to open a fully SwifUI window, but it was still an interesting experiment.\u003c/p\u003e\n\u003cp\u003eOne thing I learned while working on this project was that SwiftUI can be a bit too clever about working out what needs to be redrawn in the previews. If you edit something in an separate file to the View, you may need to force a re-build to get the updates to show.\u003c/p\u003e\n\u003ch2 id=\"communicating-between-windows\"\u003e\n  Communicating Between Windows\n  \u003ca href=\"#communicating-between-windows\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eThe last feature that I need to explore is transferring data between two windows. I tested using a \u003ccode\u003e.sheet\u003c/code\u003e modifier to open a dialog and that worked exactly as it would in an iOS app - I was able to pass an @Binding variable to the sheet window and any changes made to that in the sheet window flowed back to the calling view.\u003c/p\u003e\n\u003cp\u003eBut I want to set up a Preferences window which will be opened from the menu bar and not directly from the ContentView or any of its sub-views.\u003c/p\u003e\n\u003cp\u003eI started out by using the same technique as before with a Hosting View Controller. And here is where I came mightily unstuck as I could not make a data connection. I had hoped an EnvironmentObject would work, but I could not get an EnvironmentObject through to the HostingController as it was not in the same view hierarchy.\u003c/p\u003e\n\u003cp\u003eSo instead of trying to use the storyboard, I decide to see if I could use something similar to the initial window creation and call that new window from my ContentView so that it was part of the view and therefore the data hierarchy.\u003c/p\u003e\n\u003cp\u003eAs usual, there was a lot of trial and error involved here, but I came up with a workable solution.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePrefsView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello, Prefs!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .frame(maxWidth: .infinity, maxHeight: .infinity)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e window: NSWindow!\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einit\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        window = NSWindow.createStandardWindow(withTitle: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Preferences\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                               width: \u003cspan style=\"color:#ae81ff\"\u003e300\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                               height: \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        window.contentView = NSHostingView(rootView: \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        window.makeKeyAndOrderFront(\u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFor convenience and reusability, I made an extension on NSWindow that created a window with the basic properties configured, much like they are in AppDelegate. I temporarily added a Button to ContentView like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Button(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Prefs\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e _ = PrefsView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis opened the window perfectly, but it had a problem: repeatedly clicking the button kept opening a new window instead of bringing the existing one to the front.\u003c/p\u003e\n\u003cp\u003eAfter a lot more trial and error, this is what I ended up with for my \u003ccode\u003ePrefsView\u003c/code\u003e struct:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePrefsView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @State \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e prefsWindowDelegate = PrefsWindowDelegate()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello, Prefs!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          .frame(maxWidth: .infinity, maxHeight: .infinity)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e window: NSWindow!\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einit\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        window = NSWindow.createStandardWindow(withTitle: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Preferences\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                               width: \u003cspan style=\"color:#ae81ff\"\u003e300\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                               height: \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        window.contentView = NSHostingView(rootView: \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        window.delegate = prefsWindowDelegate\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        prefsWindowDelegate.windowIsOpen = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        window.makeKeyAndOrderFront(\u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePrefsWindowDelegate\u003c/span\u003e: NSObject, NSWindowDelegate {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e windowIsOpen = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewindowWillClose\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e notification: Notification) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            windowIsOpen = \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSo my PrefsView opens its own window and sets a window delegate that records when the window is closed.\u003c/p\u003e\n\u003cp\u003eI removed my temporary button and back in AppDelegate.swift, I added an IBAction called by the Preferences menu item:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e prefsView: PrefsView?\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003e@IBAction\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eopenPrefsWindow\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e sender: Any) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e prefsView = prefsView, prefsView.prefsWindowDelegate.windowIsOpen {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            prefsView.window.makeKeyAndOrderFront(\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            prefsView = PrefsView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd this gave me what I was after - a view that opened from a menu item but that knew itself whether it still had a window so could decide whether to open a new one or bring the existing one to the front. This looks a bit convoluted, but it doesn\u0026rsquo;t appear to cause any memory leaks and the responsibility for the window rests on the view that uses it, which feels right to me.\u003c/p\u003e\n\u003cp\u003eAfter I had this working, getting the data passing around was quite simple. I created a Prefs class to store the preference data. I wanted this data stored in UserDefaults, but since I also wanted to use an ObservableObject with the @Published property wrapper, I was not able to use the @UserDefaults property wrapper that I had used for the app mode.\u003c/p\u003e\n\u003cp\u003eSo instead I used @Published with a \u003ccode\u003edidSet\u003c/code\u003e that saved the changed data to UserDefaults. Thanks to \u003ca href=\"https://twitter.com/azamsharp\"\u003e@azamsharp\u003c/a\u003e for this technique.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePrefs\u003c/span\u003e: ObservableObject {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @Published\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e showCopyright: Bool = UserDefaults.standard.bool(forKey: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;showCopyright\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003edidSet\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            UserDefaults.standard.\u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.showCopyright, forKey: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;showCopyright\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis preference will dictate whether a copyright notice is shown on every cat image, so it needs to be available to DetailView and to PrefsView. Since I did not want to pass it through every view on the way to DetailView, I decided to use an EnvironmentObject. But I was not able to work out how to set the environmentObject for the PrefsView as I created it, so I ended up sending an @ObservedObject to PrefsView but using an @EnvironmentObject for DetailView. (Actually for CatImageView as I had extracted the image from DetailView as a subview.)\u003c/p\u003e\n\u003cp\u003eIn AppDelegate.swift:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e prefs = Prefs()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// and in the openPrefsWindow IBAction:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    prefsView = PrefsView(prefs: prefs)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn PrefsView.swift:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @ObservedObject \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e prefs: Prefs\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn CatImageView (a subview of DetailView):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCatImageView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    @EnvironmentObject \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e prefs: Prefs\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e catImage: NSImage\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e imageIsFlipped: Bool\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Image(nsImage: catImage)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#75715e\"\u003e// modifiers as before\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         .overlay(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e             Text(prefs.showCopyright ? \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Copyright © https://http.cat\u0026#34;\u003c/span\u003e : \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                 .padding(\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                 .font(.caption)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                 .foregroundColor(.white)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                 .shadow(radius: \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e             ,alignment: .bottomTrailing)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd that is that! I have shown how it is possible to create an entire Mac app using SwiftUI.\u003c/p\u003e\n\u003cp\u003eI am sure that there are numerous ways that this could be improved, so if you have any ideas or suggestions, please use one of the buttons below to contact me.\u003c/p\u003e\n\u003cp\u003eIf you want to check out the project at this stage, here is a link to the \u003ca href=\"https://github.com/trozware/swiftui-mac/tree/0ea77f80832e0f32e477ce89ac57d8a95f45f035\"\u003erelevant GitHub commit\u003c/a\u003e. Or if you would prefer, here is a link to the \u003ca href=\"https://github.com/trozware/swiftui-mac\"\u003efinal version\u003c/a\u003e of the project.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eMoving on to an unplanned \u003ca href=\"/post/2019/swiftui-for-mac-3/\"\u003epart 3 of this series\u003c/a\u003e, I am going to experiment with various forms of dialog.\u003c/p\u003e"
    },
    {
        "title" : "SwiftUI for Mac - Part 1",
        "date_published" : "2019-12-15T17:28:00+10:00",
        "date_modified" : "2019-12-15T17:28:00+10:00",
        "id" : "https://troz.net/post/2019/swiftui-for-mac-1/",
        "url" : "https://troz.net/post/2019/swiftui-for-mac-1/",
        "content_html" : "\u003cp\u003eSo far, nearly all the articles I have seen about SwiftUI show it being used for iOS, more particularly for iPhone.\nBut SwiftUI works on all Apple\u0026rsquo;s platforms, and as I am primarily a Mac developer, I decided to try out a Mac app and see what happened.\u003c/p\u003e\n\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n  }\n\u003c/style\u003e\n\n\u003ch2 id=\"setup\"\u003e\n  Setup\n  \u003ca href=\"#setup\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eI opened up Xcode and created a new project selecting the macOS App template. The project opened at the usual ContentView.swift but there were a few differences in the project structure as well as one in the ContentView struct.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/SwiftUI-Mac-project.png\" alt=\"New Mac project\"\u003e\u003c/p\u003e\n\u003cp\u003eThe first thing to notice is that the default \u0026ldquo;Hello, World!\u0026rdquo; Text view has a frame set:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  .frame(maxWidth: .infinity, maxHeight: .infinity)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIf I removed this frame modifier, the preview display in the Canvas changed so that the view was only the size of the text instead of being a standard window size. I guess an iOS device always knows what size it is, but a Mac window can be any size, so you have to be more explicit to stop SwiftUI shrinking the container view to the minimum size possible.\u003c/p\u003e\n\u003cp\u003eThe next thing is to look at the files that are included in the project. There is no SceneDelegate.swift as you would see in an iOS project. And to my surprise, there was still a Main.storyboard file! And going to the General settings for the app target, I could see that this storyboard was selected as the Main Interface.\u003c/p\u003e\n\u003cp\u003eOpening it up reveals that this is where the application menu is configured. I had wondered where the menus were configured in Mac SwiftUI apps.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/SwiftUI-Mac-Storyboard.png\" alt=\"Main storyboard\"\u003e\u003c/p\u003e\n\u003cp\u003eThe AppDelegate was the next thing I looked at and here I found some of the code that I would have expected to find in a SceneDelegate. The \u003ccode\u003eapplicationDidFinishLaunching(_:)\u003c/code\u003e method creates an instance of ContentView, creates an NSWindow and uses an NSHostingView to display the ContentView inside the window. At this stage, running the app gives me what I would expect: a fully-fledged Mac app with a window and a menu, both with all the functions you would expect in any standard Mac app.\u003c/p\u003e\n\u003ch2 id=\"the-canvas\"\u003e\n  The Canvas\n  \u003ca href=\"#the-canvas\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eI was not expecting the Canvas to be much use when it came to previewing a Mac app. It works so well with an iPhone app because the iPhone is tall and thin and fits neatly into one side of the code window. But a Mac view is likely to be much bigger, so it would have to be scaled down a lot to avoid talking up too much precious space in my Xcode window.\u003c/p\u003e\n\u003cp\u003eBut it works as expected, and even scaled down, you get a good idea of the layout while still getting the live reloading that is part of what makes developing in SwiftUI so much fun.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/SwiftUI-Mac-Canvas.png\" alt=\"Canvas\"\u003e\u003c/p\u003e\n\u003cp\u003eBut here is where I got my first real surprise, with a feature that I had not seen yet in any SwiftUI tutorial or article. Click the Live Preview button and see what happens\u0026hellip;\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/SwiftUI-Mac-LivePreview.png\" alt=\"Live Preview\"\u003e\u003c/p\u003e\n\u003cp\u003eOf course I clicked \u0026ldquo;Bring Forward\u0026rdquo; and there was my app running in a window called \u0026ldquo;Xcode Preview\u0026rdquo;. There was an app in my Dock and when I chose \u0026ldquo;Show in Finder\u0026rdquo;, I found that the app is buried deep in DerivedData. Positioning my windows so I could type in Xcode while watching this preview window, I saw that it instantly updated my view as I typed, just like an iPhone in the Canvas.\u003c/p\u003e\n\u003cp\u003eIf I changed the structure of the view, the app closed and re-opened immediately with the new content. This is amazing and shows that the Xcode \u0026amp; SwiftUI teams really thought about how to use these new features in Mac apps as well as iOS.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIn Xcode 11.3, I found that I was having trouble with the previews. They would not display and above the Canvas, I got the super helpful message \u0026ldquo;Cannot preview in this file \u0026mdash; SwiftUI-Mac.app may have crashed.\u0026rdquo;. It turned out that this was a signing issue. If you go to the app target and look in the Signing and Capabilities section, check that Signing Certificate is not set to \u0026ldquo;Sign to Run Locally\u0026rdquo;. If it is, switch to \u0026ldquo;Development\u0026rdquo; and the previews will start working again.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/SwiftUI-Mac-signing.png\" alt=\"Code signing\"\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"laying-out-the-view\"\u003e\n  Laying out the View\n  \u003ca href=\"#laying-out-the-view\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eNow that I have the project and I know how to preview it, it\u0026rsquo;s time to work out what to display in the app. The next real app I want to work on will use a master-detail layout, so that is what I decided to try here.\u003c/p\u003e\n\u003cp\u003eBefore worrying about the data, I decided to try populating the master view with a static list and using that to navigate to a detail view that was simply a Text view.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eContentView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        NavigationView {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e             List {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                 ForEach(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e ... \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, id: \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\\\u003c/span\u003e.\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e) { index \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                     NavigationLink(destination: Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003eindex\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                         Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Link \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003eindex\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                     }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                 }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e             }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis worked, except that the left column was only about 20 pixels wide. But I was able to use the mouse to drag it wider and there were my List entries. Clicking on one did indeed show the detail I wanted, but it shrunk the window to one line high!\u003c/p\u003e\n\u003cp\u003eThe first thing I did was to apply a \u003ccode\u003elistStyle\u003c/code\u003e modifier to make it show the semi-transparent Mac sidebar. This fixed the width of the sidebar. But the whole window still shrunk when I selected an item.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  .listStyle(SidebarListStyle())\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI tried applying the frame modifier to the NavigationView and that made the window stay the same size, but the content still shrunk into a tiny section in the middle. It looks like I need to apply that frame modifier to the detail view as well.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  .frame(maxWidth: .infinity, maxHeight: .infinity)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd as you can see from this gif, I then had a full functional master-detail view with a collapsible and expandable semi-transparent sidebar.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/SwiftUI-Mac-master-detail.gif\" alt=\"Master detail view\"\u003e\u003c/p\u003e\n\u003ch2 id=\"adding-data\"\u003e\n  Adding Data\n  \u003ca href=\"#adding-data\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eAfter some scouting around for a free API that I could hook into, I came across \u003ca href=\"https://http.cat\"\u003eHTTP Cats\u003c/a\u003e which is a site that serves up a cat image to match almost every HTTP status code.\u003c/p\u003e\n\u003cp\u003eThis sounded ideal: I can list the codes in the master view on the left and display the image in the detail view on the right.\u003c/p\u003e\n\u003cp\u003eFirst I created a JSON file to list all the HTTP status codes so that I could put them into a List view. This was a very simple array with each entry having a code and a title:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;code\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;100\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Continue\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;code\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;101\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Switching Protocols\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI created an HttpStatus struct with these 2 properties and I borrowed \u003ca href=\"https://www.hackingwithswift.com/example-code/system/how-to-decode-json-from-your-app-bundle-the-easy-way\"\u003ePaul Hudson\u0026rsquo;s excellent Helper Bundle extension\u003c/a\u003e to decode the JSON file. For a first attempt, I used the numeric codes to build the list and showed the title of the selected one in the detail view. But one of the best things about SwiftUI is that it makes it so easy to configure table rows, so it is time to create a new View to do this.\u003c/p\u003e\n\u003cp\u003eAfter some experimentation, I had a TableRowView that I liked the look of, but the default sidebar width was too narrow and truncated the status code titles, so I added a frame modifier to the List to set a minimum and maximum width for the sidebar.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/SwiftUI-Mac-Master.png\" alt=\"Master view\"\u003e\u003c/p\u003e\n\u003ch2 id=\"outline-list\"\u003e\n  Outline List\n  \u003ca href=\"#outline-list\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eAt this point I decided that it would be more useful to have a outline list with the status codes grouped by their category.\u003c/p\u003e\n\u003cp\u003eSo I re-did the JSON file to show this, added an HttpSection struct and a SectionHeaderView and modified the data loading method and @State variable.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;headerCode\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1xx\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;headerText\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Informational\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;statuses\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026#34;code\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;100\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Continue\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026#34;code\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;101\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Switching Protocols\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;headerCode\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;2xx\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;headerText\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Success\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;statuses\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026#34;code\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;200\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;OK\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      },\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis worked really well and I was thrilled to find that the sections automatically had Show/Hide toggles!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/SwiftUI-Mac-outline.png\" alt=\"Outline view\"\u003e\u003c/p\u003e\n\u003ch2 id=\"detail-view\"\u003e\n  Detail View\n  \u003ca href=\"#detail-view\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eUp until now, I had been using a standard Text view as the destination for my navigation. This is a really useful technique as you can build the interface gradually but have it work from the beginning. But now it was time to create a new view for the details.\u003c/p\u003e\n\u003cp\u003eI set up the view and added a method that would download the correct cat image when the view appeared but there was no image. After some digging, I realised that sand-boxed Mac apps do not allow network access by default. I went to the Signing \u0026amp; Capabilities section of the target settings and turned on \u0026ldquo;Outgoing Connections (Client)\u0026rdquo;. And then I had my cat pictures.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/SwiftUI-Mac-detail.png\" alt=\"Detail view\"\u003e\u003c/p\u003e\n\u003cp\u003eIt really should have a loading image to display while the cat image is being downloaded, but to my disappointment, I found that the SF Symbols are not available to a Mac app! But I added a Text view to say \u0026ldquo;Loading\u0026hellip;\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eNow that I have a functioning Mac app with a Master-Detail view, the next thing is to explore some more of the challenges that will need to be solved before I can write a Mac app completely using SwiftUI.\u003c/p\u003e\n\u003cp\u003eIf you want to check out the project at this stage, here is a link to the \u003ca href=\"https://github.com/trozware/swiftui-mac/tree/8ebeb615db81f9d7b6489a1920ebb08d07131ebb\"\u003erelevant GitHub commit\u003c/a\u003e. Or if you would prefer, here is a link to the \u003ca href=\"https://github.com/trozware/swiftui-mac\"\u003efinal version\u003c/a\u003e of the project.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eIn \u003ca href=\"/post/2019/swiftui-for-mac-2/\"\u003epart 2 of this series\u003c/a\u003e, I will look into:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ehow to interact with the menus\u003c/li\u003e\n\u003cli\u003ehow to open a secondary window\u003c/li\u003e\n\u003cli\u003emore user interface controls\u003c/li\u003e\n\u003cli\u003ehow to pass data around between windows\u003c/li\u003e\n\u003c/ul\u003e"
    },
    {
        "title" : "SwiftUI First Thoughts",
        "date_published" : "2019-08-18T15:00:05+10:00",
        "date_modified" : "2019-08-18T15:00:05+10:00",
        "id" : "https://troz.net/post/2019/swiftui_first-thoughts/",
        "url" : "https://troz.net/post/2019/swiftui_first-thoughts/",
        "content_html" : "\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n  }\n\u003c/style\u003e\n\n\u003cp\u003eAt WWDC 2019, Apple surprised us all by announcing a completely new declarative UI framework called \u003ca href=\"https://developer.apple.com/xcode/swiftui/\"\u003eSwiftUI\u003c/a\u003e. Quoting snippets from the Apple announcements, \u0026ldquo;SwiftUI is an innovative, exceptionally simple way to build user interfaces across all Apple platforms with the power of Swift\u0026rdquo; and \u0026ldquo;SwiftUI uses a declarative syntax so you can simply state what your user interface should do.\u0026rdquo; But what does this mean and should we all adopt it now?\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://developer.apple.com/assets/elements/icons/swift/swift-96x96_2x.png\" alt=\"Swift\"\u003e\u003c/p\u003e\n\u003ch2 id=\"swift\"\u003e\n  Swift\n  \u003ca href=\"#swift\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eBefore discussing whether to adopt SwiftUI, we need to consider Swift itself, since you cannot use SwiftUI without Swift.\u003c/p\u003e\n\u003cp\u003eThe announcement of Swift at WWDC 2014 was a complete bombshell. Here in Australia, I watch the keynote every year while half asleep since it starts at 3 am. That announcement had me wide awake and bouncing out of my seat with excitement. I was an early adopter and have never regretted that decision.\u003c/p\u003e\n\u003cp\u003eMany well-respected developers have decided to ignore Swift and they have their various reasons, so let\u0026rsquo;s go through the ones I have heard:\u003c/p\u003e\n\u003ch4 id=\"1-im-very-comfortable-and-productive-in-objective-c\"\u003e\n  1. I\u0026rsquo;m very comfortable and productive in Objective-C\n  \u003ca href=\"#1-im-very-comfortable-and-productive-in-objective-c\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cp\u003eThis is not a bad reason and for many people, their employer may insist on the language anyway, but this argument doesn\u0026rsquo;t work for me. Firstly, I think that there is never going to be the One Perfect Language (with apologies to \u003ca href=\"https://oleb.net/blog/2017/06/chris-lattner-wwdc-swift-panel/#in-which-fields-would-you-like-to-see-swift-in-the-future\"\u003eChris Lattner\u003c/a\u003e) so I am always open to new ideas. And personally, I love learning new languages even if I am never going to use them in production. I feel that this makes me a better programmer overall. And there are vast benefits to Swift - it is a much safer language to write it, it is easier to read and more concise to write, it is just a much more modern language.\u003c/p\u003e\n\u003ch4 id=\"2-swift-is-too-new-and-changes-too-much-between-versions\"\u003e\n  2. Swift is too new and changes too much between versions\n  \u003ca href=\"#2-swift-is-too-new-and-changes-too-much-between-versions\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cp\u003eSwift was new. It is now 5 years old and we are into version 5.2. Undeniably, there have been a lot of changes since 1.0 and many of them have been breaking changes. Swift 3 was especially bad in this respect. But this came with advantages too. As early adopters, we were able to influence the direction of the language. And Xcode was always pretty good about providing a converter to the next version. But either way, since Swift 4, there are supposed to be no more breaking changes, so this is an argument whose time has passed.\u003c/p\u003e\n\u003ch4 id=\"3-no-abi-stability\"\u003e\n  3. No ABI stability\n  \u003ca href=\"#3-no-abi-stability\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cp\u003eABI stability was a crutch that many people clung to as an excuse to avoid Swift. But unless you were building frameworks for distribution, I don\u0026rsquo;t see that it was ever a complete deal-breaker. The \u003ca href=\"https://github.com/apple/swift/blob/master/docs/ABIStabilityManifesto.md#what-does-abi-stability-enable\"\u003eSwift ABI Stability Manifesto\u003c/a\u003e has a good review of what ABI stability is and what it will allow. As app developers, the main advantage is that the Swift libraries will no longer need to be bundled with each app. This will decrease app sizes dramatically. But either way, we now have ABI stability, so again, this argument is finished.\u003c/p\u003e\n\u003ch4 id=\"4-apple-may-not-be-serious-about-swift-and-it-may-not-last\"\u003e\n  4. Apple may not be serious about Swift and it may not last\n  \u003ca href=\"#4-apple-may-not-be-serious-about-swift-and-it-may-not-last\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cp\u003eI think there was a certain amount of wishful thinking here. The main data behind this theory seemed to be that very few of the Apple apps included any Swift. And in the beginning this was true. I expect Apple\u0026rsquo;s apps have a rather longer development time-frame than apps produced by independents. However over the last few years, more and more of Apple\u0026rsquo;s own apps have started to use Swift, either completely or partially. And any doubt about Apple\u0026rsquo;s commitment to Swift should have been permanently laid to rest by the announcement of SwiftUI.\u003c/p\u003e\n\u003ch4 id=\"5-its-too-complicated\"\u003e\n  5. It\u0026rsquo;s too complicated\n  \u003ca href=\"#5-its-too-complicated\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cp\u003eOK, this one has some validity, but then again, if Swift is to rule the world, it needs to be able to do a lot of things. I love Swift, I love writing in it and I am very productive when using it. But then I see a chunk of code sprinkled with generics and unsafe pointers and I can\u0026rsquo;t make head nor tail of it. However, I think that if you are writing any standard, non-arcade-game app, you can write very good Swift using just the basics.\u003c/p\u003e\n\u003ch2 id=\"why-did-apple-make-swiftui\"\u003e\n  Why did Apple make SwiftUI?\n  \u003ca href=\"#why-did-apple-make-swiftui\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eHaving demolished the arguments against using Swift, it\u0026rsquo;s time to move on to SwiftUI. Let\u0026rsquo;s start with the reasons why something like this had to happen.\u003c/p\u003e\n\u003cp\u003eApple now has 5 or possibly 6 user platforms: macOS, iOS, iPadOS, tvOS, watchOS and maybe CarPlay. (I\u0026rsquo;ve never considered any CarPlay development so I have no idea how it works.) The screen sizes range from 38mm for the smallest watch to over 75\u0026quot; to large screen TVs (apologies for mixing my units there, but it seems that TVs have not gone metric yet). As far as user interface frameworks go, we have had AppKit, UIKit and WatchKit. AppKit is the venerable old member of this team, descended from NextStep (which is why every element name has the NS prefix) and is used to make macOS apps. UIKit was built from scratch for the iPhone and so is a lot newer and neater than AppKit, but at the same time it is more limited. It has never had to deal with the vast variability and complexity of a Mac app\u0026rsquo;s interface. WatchKit is an even more slimmed down framework with a relatively small number of interface elements.\u003c/p\u003e\n\u003cp\u003eNow imagine that you are trying to write a multi-platform app. You have to learn at least 3 different ways of doing everything. And there are differences that always catch me out. For example, in AppKit, to set the text in a text field, you set the field\u0026rsquo;s \u003ccode\u003estringValue\u003c/code\u003e but in iOS, you can set the field\u0026rsquo;s \u003ccode\u003etext\u003c/code\u003e property. And in WatchKit, you call the \u003ccode\u003esetText()\u003c/code\u003e method.\u003c/p\u003e\n\u003cp\u003eWant to change the background color of a view? UIView - no problem, set \u003ccode\u003ebackgroundColor\u003c/code\u003e. NSView - nope - do something weird with layers. I forget what, I have to look it up every time.\u003c/p\u003e\n\u003cp\u003eThese inconsistencies are annoying, time-consuming and a huge barrier to cross-platform development. It really annoys me when I read articles or tweets that assume Swift programming = iOS programming when it is so much more. But before SwiftUI, it was not easy to jump between the platforms.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/ipad-apps-for-mac/\"\u003eCatalyst\u003c/a\u003e, previously code-named Marzipan, was supposed to be the answer. And it is a partial answer. It allows iPad apps to be ported to the Mac and that\u0026rsquo;s great for iPad developers who want to expand their reach. But it isn\u0026rsquo;t the answer for everybody.\u003c/p\u003e\n\u003ch3 id=\"interface-builder\"\u003e\n  Interface Builder\n  \u003ca href=\"#interface-builder\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eBefore I go further into what I think is so great about SwiftUI, I would like to take a moment to discuss Interface Builder. Xcode is a brilliant tool that gets better with every release, but its weak point has always been Interface Builder. I am old enough to remember when Interface Builder was a separate app (not that we called them \u0026ldquo;apps\u0026rdquo; in those days) and although it has been folded into Xcode for many years now, the connection between interface and code has always been clunky and un-intuitive. Control-dragging from interface to code and then remembering to switch between Action and Outlet so that you don\u0026rsquo;t end up naming your button \u0026ldquo;doneButtonWasTapped\u0026rdquo;. And if you get the modifier key wrong, who knows what weird stuff will happen.\u003c/p\u003e\n\u003cp\u003eAnd then came Auto Layout\u0026hellip; It was vastly more flexible than the old school springs \u0026amp; struts and with the ever increasing number of iPhone \u0026amp; iPad models something had to be done, but if you have never ended up swearing at Auto Layout and reverting to a previous commit or mashing Undo repeatedly, then you can\u0026rsquo;t have used Auto Layout very much!\u003c/p\u003e\n\u003cp\u003eWatchKit had an entirely different approach to layout and it was easy, intuitive and very refreshing. You drag in objects, they go one under another. You can group them horizontally or vertically, you can make them into table cells. WatchKit has a much more limited set of interface elements and a much more limited set of device sizes to deal with, but I think we can clearly see the origins of SwiftUI in the way it worked. Even if you still had to use Interface Builder to do it.\u003c/p\u003e\n\u003cp\u003eInterface Builder\u0026rsquo;s quirks lead to a category of programmers who felt the need to write all their interface in code. To my way of thinking, this is a huge waste of time and you still had to wrestle with Auto Layout, but without the visual clues! But if it makes them happy\u0026hellip;\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/xcode/swiftui/\"\u003e\u003cimg src=\"https://developer.apple.com/assets/elements/icons/swiftui/swiftui-96x96_2x.png\" alt=\"SwiftUI\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"what-is-swiftui\"\u003e\n  What Is SwiftUI?\n  \u003ca href=\"#what-is-swiftui\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eA \u0026ldquo;declarative UI framework\u0026rdquo; - what does that mean? Basically, declarative programming is a way of specifying what a program should do, rather than specifying how to do it. A common example is making a sandwich. If you want a sandwich, you say to the sandwich maker, \u0026ldquo;Please can I have a ham, cheese and tomato sandwich\u0026rdquo;. You don\u0026rsquo;t say \u0026ldquo;Get two pieces of bread, butter both of them, cut 3 slices of ham and 2 slices of cheese\u0026hellip;\u0026rdquo;. They know how to make a sandwich so you only have to ask for what you want.\u003c/p\u003e\n\u003cp\u003eBack in the Apple UI world, what if you want a button? Is it for an iPhone app? Then you need an UIButton with a certain type. Set its title, size, location, layout constraints. What are the default sizes for an iPhone button? What is the default font? What color should the text be? Now make a button for a tvOS app? That has to be huge! And what other settings does it have? But the thing is, iOS, macOS, tvOS etc. already \u003cstrong\u003eKNOW\u003c/strong\u003e what their buttons should look like. So why not just tell the system \u0026ldquo;I want a button\u0026rdquo;? Let the system work out the details and you can get on with the cool app ideas.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m not going to turn this post into a SwiftUI tutorial, but I would like to thank and recommend the people that have really helped me get to grips with it, especially \u003ca href=\"https://www.hackingwithswift.com/articles/196/learn-swiftui-with-free-tutorials\"\u003ePaul Hudson of Hacking with Swift with his Learn SwiftUI tutorials\u003c/a\u003e, \u003ca href=\"https://www.youtube.com/user/azamsharp/videos\"\u003eMohammad Azam\u0026rsquo;s great YouTube series\u003c/a\u003e, and \u003ca href=\"https://designcode.io/swiftui-course\"\u003eMeng To\u0026rsquo;s SwiftUI course at Design+Code\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe other great benefit of SwiftUI is that when used with the Combine framework, it gives you a reactive interface. There have been various third-party libraries for doing this: RxSwift, ReactiveSwift, ReactiveCocoa, Bond etc, but with Combine, Apple is baking this into the ecosystem, which makes it a lot easier to set up and means that it will stay up-to-date with the operating systems. A reactive interface is one where you can bind a UI element to a piece of data and then when the data changes, the user interface updates automatically. You can even bind both ways so that the user interface updates the data without you having to do a thing. Imagine how much boiler-plate code that can eliminate?\u003c/p\u003e\n\u003ch2 id=\"the-good-the-bad-and-the-ugly\"\u003e\n  The Good, The Bad and The Ugly\n  \u003ca href=\"#the-good-the-bad-and-the-ugly\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003ch3 id=\"1-the-good\"\u003e\n  1. The Good\n  \u003ca href=\"#1-the-good\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eYou get a lot of interface for very little code. Making tables is a joy without the masses of boilerplate code needed to set up data sources and delegates. The instant preview in the canvas makes iteration much easier. Being able to create something like a Picker and having SwiftUI render it in one of multiple different styles depending on the platform is magical.\u003c/p\u003e\n\u003ch3 id=\"2-the-bad\"\u003e\n  2. The Bad\n  \u003ca href=\"#2-the-bad\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eIt\u0026rsquo;s early days yet and SwiftUI has some quirks and bugs. Sometimes the canvas just stops responding, switching into live mode in the canvas can take a while and of course it is still in beta, so there will be breaking changes to come.\u003c/p\u003e\n\u003ch3 id=\"3-the-ugly\"\u003e\n  3. The Ugly\n  \u003ca href=\"#3-the-ugly\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eIt is very easy to build up the Pyramid of Doom where you have multiple levels of nesting leading to the end of your code being a seemingly endless stream of closing curly braces. In SwiftUI, one tends to build from the inside out: make a Text view, embed it in a VStack so you can add another one, embed that stack in an HStack so you can add an Image and so on\u0026hellip; But there is an answer: Command-click on one of your outer layers and select \u0026ldquo;Extract Subview\u0026rdquo;.\u003c/p\u003e\n\u003ch2 id=\"coding-the-layout\"\u003e\n  Coding the Layout\n  \u003ca href=\"#coding-the-layout\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eEarlier in the article, I spoke about programmers ignoring Interface Builder and laying out the interface in code. I don\u0026rsquo;t think this is a good approach, so how is SwiftUI different? Firstly, you get immediate feedback of the UI you are coding, so you are not losing that visual benefit of using Interface Builder. Secondly, SwiftUI does much of the layout for you, so you are not hand-coding auto layouts or every last detail of every UI element. So as far as SwiftUI is concerned, I am a convert to programmatic layouts. But if not using SwiftUI, I would still stick to Interface Builder.\u003c/p\u003e\n\u003cp\u003eAnother point to consider here is that developers have long argued that if Apple wants the iPad to be seen as a \u0026ldquo;Pro\u0026rdquo; device, there should be a version of Xcode for iPad. One of the problems with this was Interface Builder - it is difficult to see how it could be made to work with a touch interface. But with SwiftUI and iPadOS, is it possible that Apple can make an iPad version of Xcode?\u003c/p\u003e\n\u003ch2 id=\"should-you-use-swiftui\"\u003e\n  Should you use SwiftUI?\n  \u003ca href=\"#should-you-use-swiftui\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eI hope that from my previous paragraphs, you have come away with a good feeling for why Apple made SwiftUI and why it is good for us as developers. Personally, I find it a joy to use even in these early beta stages, but some of the arguments against using Swift, can now be applied again to SwiftUI.\u003c/p\u003e\n\u003cp\u003eThat SwiftUI is very new cannot be debated. It is extremely new and even in the handful of betas released since WWDC, we have seen some breaking changes. It feels quite buggy still but as I am running it in a beta operating system with a beta version of Xcode, it would be unfair to blame all the instability on SwiftUI.\u003c/p\u003e\n\u003cp\u003eSwiftUI is not yet a complete replacement for UIKit/AppKit/WatchKit etc. There are SwiftUI equivalents for many of the interface elements and I recommend the \u003ca href=\"https://goshdarnswiftui.com\"\u003eGosh Darn SwiftUI site\u003c/a\u003e which maintains a list of UIKit equivalents as well as really useful snippets of SwiftUI code. But even when SwiftUI does not have the UI element you want, there are two easy options: use UIKit/AppKit or build your own. Apple has made sure that there is no problem about mixing and matching UIKIt/AppKit code with SwiftUI. And maybe the SwiftUI tools would allow you to build your own version of the missing element. I needed a progress bar and I built one myself with not much code and ended up with what I think is a better look than the standard one.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/trozware/swiftui_progressbar\"\u003e\u003cimg src=\"/images/SwiftUi_progressbar.png\" alt=\"Progress Bar\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eClick the image for a link to the GitHub repository.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eFor years, Apple has been telling us to use standard interface elements in our apps and if we did this, when system updates changed the look and feel, we mostly got that change for free. Now they are giving us even more for free by saying effectively, tell us what UI element you want and we will do all the work of configuring it for the platform and for the user\u0026rsquo;s settings.\u003c/p\u003e\n\u003cp\u003eBut with this, Apple has given us a lot of modifiers we can apply to elements as well as a great animation suite, so I expect to see a lot of more interesting design choices being made in apps, while they are still adhering to all the standard human interface guidelines for the various platforms.\u003c/p\u003e\n\u003cp\u003eApple does not promote SwiftUI as \u0026ldquo;write once, run everywhere\u0026rdquo; but as \u0026ldquo;learn once, apply everywhere\u0026rdquo; and that is an important distinction. It seems at first glance that we can write once but only on a basic level. You are still going to need to design the appropriate UI for a platform, but it will be able to re-use components from the other versions of the same app.\u003c/p\u003e\n\u003cp\u003eDo I intend to use SwiftUI in my next app - YES. If I was writing code for NASA, I wouldn\u0026rsquo;t, but my apps are rarely mission-critical, so I can indulge myself and learn as I go. It will be frustrating when there are breaking changes, but at the same time, my bug reports are going to make it better.\u003c/p\u003e\n\u003cp\u003eOne caveat is that SwiftUI apps will require the latest operating systems, iOS 13 and macOS 10.15 so if your app has to support older versions of the systems, you will have to wait until next year. But there is nothing to stop you building some test components and starting the learning process.\u003c/p\u003e"
    },
    {
        "title" : "Marktime",
        "date_published" : "2019-02-04T14:48:53+10:00",
        "date_modified" : "2019-02-04T14:48:53+10:00",
        "id" : "https://troz.net/marktime/",
        "url" : "https://troz.net/marktime/",
        "content_html" : "\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003eMark Time is now available now from the \u003ca href=\"https://itunes.apple.com/us/app/mark-time/id1305580742?mt=8\"\u003eiTunes App Store\u003c/a\u003e for iPhone and\niPad as an assistant for celestial navigators.\u003c/p\u003e\n\u003cp\u003eMark Time is an application for Celestial Navigation that solves the problem of\nhow to take an accurate time reading to go with each sextant sighting.\u003c/p\u003e\n\u003cp\u003eBy simply tapping the screen you can record the exact time UTC as you take your\nsight, so you have no chance of making an error with the conversion, and this\ntime is stored in one of five registers.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/MarkTime1.png\" alt=\"Mark Time\"\u003e\u003c/p\u003e\n\u003cp\u003eVery useful when you have an assistant, and ideal for taking readings when you\nare on your own.\u003c/p\u003e\n\u003cp\u003eAs you record a time you hear a confirmation sound and feel a vibration, so\nthere is no need even to look at the screen. In addition the actual latitude and\nlongitude at each time can be accessed later to verify your calculations. These\noptions are all configurable in Settings to suit your own preferences.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/MarkTime2.png\" alt=\"Mark Time\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLocation permissions:\u003c/strong\u003e On startup, the app will request permission to access\nyour location. This is how the latitude and longitude data is gathered to\nprovide this data if you wish.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSupport:\u003c/strong\u003e If you have any questions about this app, please use the Contact\nlink above to get in touch.\u003c/p\u003e"
    },
    {
        "title" : "Learning Swift  - Tuples",
        "date_published" : "2019-02-03T19:48:51+10:00",
        "date_modified" : "2019-02-03T19:48:51+10:00",
        "id" : "https://troz.net/post/2019/learning-swift-tuples/",
        "url" : "https://troz.net/post/2019/learning-swift-tuples/",
        "content_html" : "\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n\u003c/style\u003e\n\n\u003cp\u003eI sometimes like to focus on aspects of the Swift language that get less publicity, but that I think are really useful without adding a lot of complexity. This time I am looking at tuples.\u003c/p\u003e\n\u003cp\u003eThere are many different ways of collecting data together in Swift, but for small amounts of transitory data, I find tuples to be an extremely convenient data structure.\u003c/p\u003e\n\u003ch2 id=\"what-is-a-tuple\"\u003e\n  What is a Tuple?\n  \u003ca href=\"#what-is-a-tuple\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eA tuple is basically an array with a pre-determined length and unlike normal Swift arrays, it can hold a mix of data types.\u003c/p\u003e\n\u003cp\u003eHere are some examples:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e pair = (\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Jessie\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Woody\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e coords = (\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e pet = (type: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cat\u0026#34;\u003c/span\u003e, trained: \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e, age: \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTo define a tuple, you enclose the data elements in parentheses - normal brackets, not curly or square. Optionally, the elements can have a label attached as shown in the \u003ccode\u003epet\u003c/code\u003e example.\u003c/p\u003e\n\u003cp\u003eTuples can have any number of components, but if they get too long, a struct might be a better option. \u003ca href=\"https://github.com/realm/SwiftLint\"\u003eSwiftLint\u003c/a\u003e will complain if you use tuples with more than 3 elements and usually I go along with that.\u003c/p\u003e\n\u003cp\u003eThere are various ways to access the parts of a tuple. The first way is using index numbers which works but isn\u0026rsquo;t very intuitive and could be hard to decipher when you come back to a project after some time.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(pair.\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(pair.\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe next way is if the tuple has used labels for the elements as in the \u003ccode\u003epet\u003c/code\u003e example above:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(pet.type)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(pet.trained)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(pet.age)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBut the way I prefer to use them is by deconstructing the parts into separate variables in a single statement:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e (x, y, z) = coords\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(x, y, z)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe elements of a tuple can be of different types but once a tuple has been defined, that type of each element is fixed, so you still get all the benefits of Swift\u0026rsquo;s type safety.\u003c/p\u003e\n\u003cp\u003eOption-clicking on the variable name shows the inferred type of the tuple:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Tuple_type.png\" alt=\"The type of a tuple.\"\u003e\u003c/p\u003e\n\u003cp\u003eTrying to re-assign the tuple or any elements of the tuple will only work if the new assignments match the initial types for each element:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Tuple_errors.png\" alt=\"Errors when mutating a tuple.\"\u003e\u003c/p\u003e\n\u003ch2 id=\"where-could-you-use-a-tuple-and-why\"\u003e\n  Where could you use a tuple and why?\n  \u003ca href=\"#where-could-you-use-a-tuple-and-why\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s imagine you have a function that checks a database or web service and comes back with the title of a movie and its rating.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetMovieInfo\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e movieTitle: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e rating: Int\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// get the data from somewhere\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// now return both movieTitle and rating\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHaving got the data, this function needs to return two pieces of data: \u003ccode\u003emovieTitle\u003c/code\u003e and \u003ccode\u003erating\u003c/code\u003e - one \u003ccode\u003eString\u003c/code\u003e and one \u003ccode\u003eInt\u003c/code\u003e. How could this be done?\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eArray\u003c/strong\u003e: since there are 2 different data types, the array would have to be of type \u003ccode\u003e[Any]\u003c/code\u003e or the \u003ccode\u003eInt\u003c/code\u003e could be converted to a \u003ccode\u003eString\u003c/code\u003e before returning. Neither of these are good options. Using \u003ccode\u003eAny\u003c/code\u003e removes the protection of Swift\u0026rsquo;s type safety and converting the \u003ccode\u003eInt\u003c/code\u003e to and from a \u003ccode\u003eString\u003c/code\u003e may fail, so then you have to deal with optionals.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDictionary\u003c/strong\u003e: the same arguments hold true. The dictionary would have to be of type \u003ccode\u003e[String: Any]\u003c/code\u003e or the rating would have to be converted to a \u003ccode\u003eString\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eStruct or Class\u003c/strong\u003e: either of these would be fine but unless this is a data structure that is going to be re-used, it seems like overkill.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eTuple\u003c/strong\u003e: this would get my vote, so let\u0026rsquo;s see how that would work.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetMovieInfo\u003c/span\u003e() -\u0026gt; (String, Int) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e movieTitle: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e rating: Int\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// get the data from somewhere\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e (movieTitle, rating)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTwo main things to notice here:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eThe return type of the function lists the data types of both the elements being returned, enclosed in parentheses.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThe returning tuple is created by wrapping the elements inside parentheses, just like in the examples above.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eAnd then in the calling function, you can access the parts of the returned data like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e (returnedMovieTitle, returnedRating) = getMovieInfo()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe tuple is being returned and immediately deconstructed to give 2 new variables so accessing the parts of the tuple is easy and type-safe.\u003c/p\u003e\n\u003cp\u003eA function returning a tuple can also be configured to use named elements by specifying the names in the return type declaration.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetMovieInfo\u003c/span\u003e() -\u0026gt; (name: String, score: Int) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e movieTitle: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e rating: Int\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// get the data from somewhere\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e (movieTitle, rating)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e result = getMovieInfo()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e returnedMovieTitle = result.name\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e returnedRating = result.score\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eMy feeling is that once a tuple is complex enough to need names, you should really consider using a class or a struct, but for returning 2 or 3 chunks of data from a function, this is a very useful technique, espeicialy if the data types are different.\u003c/p\u003e\n\u003ch2 id=\"looping-through-tuples\"\u003e\n  Looping through tuples\n  \u003ca href=\"#looping-through-tuples\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eIf you have an array of tuples, looping through the tuples is made very convenient if you use the deconstruction method of accessing the parts.\u003c/p\u003e\n\u003cp\u003eAs an example, suppose you are dealing with some 3D coordinate system and you want to perform an operation on each location.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e coords_array = [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    (\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    (\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    (\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    (\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (x, y, z) \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e coords_array {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e distanceFromOrigin = abs(x) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e abs(y) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e abs(z)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(distanceForOrigin)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou can deconstruct the tuple each time through the loop, assigning temporary variables so you can act on them.\u003c/p\u003e\n\u003ch2 id=\"wrapping-up\"\u003e\n  Wrapping Up\n  \u003ca href=\"#wrapping-up\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eSo those are the basics of tuples: how to create them, how to use them and where they might be useful. My main use is as a light-weight alternative to a struct for returning multi-part data from a function. But hopefully after reading this article, they have become another tool in your Swift tool belt that you can consider using in certain circumstances.\u003c/p\u003e\n\u003ch3 id=\"that-leaves-only-one-important-question-how-do-you-pronounce-tuple\"\u003e\n  That leaves only one important question: how do you pronounce \u0026rsquo;tuple'?\n  \u003ca href=\"#that-leaves-only-one-important-question-how-do-you-pronounce-tuple\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eI have heard two variations: \u0026rsquo;toople\u0026rsquo; using a long U as in universe or \u0026rsquo;tupple\u0026rsquo; using a short U as in cup. There does not appear to be any strict geographical differentiation, so take your pick. I prefer \u0026rsquo;toople\u0026rsquo; myself, but if somebody says \u0026rsquo;tupple\u0026rsquo;, I know what they mean.\u003c/p\u003e"
    },
    {
        "title" : "Thanks",
        "date_published" : "2019-01-16T10:59:13+10:00",
        "date_modified" : "2019-01-16T10:59:13+10:00",
        "id" : "https://troz.net/thanks/",
        "url" : "https://troz.net/thanks/",
        "content_html" : ""
    },
    {
        "title" : "The End of Pic-a-POD",
        "date_published" : "2018-10-06T09:38:20+10:00",
        "date_modified" : "2018-10-06T09:38:20+10:00",
        "id" : "https://troz.net/post/2018/the-end-of-picapod/",
        "url" : "https://troz.net/post/2018/the-end-of-picapod/",
        "content_html" : "\u003cp\u003eI think I wrote the first version of \u003ca href=\"https://picapod.com\"\u003ePic-a-POD\u003c/a\u003e in 2003 and have been updating and maintaining it ever since, but the time has come to shut it down.\u003c/p\u003e\n\u003cp\u003eI haven\u0026rsquo;t been able to find a picture of the original version, but here is one from 2005:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/POD2005.png\" alt=\"Pic-a-POD 2005\"\u003e\u003c/p\u003e\n\u003cp\u003eAnd here it is today:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/POD2018.webp\" alt=\"Pic-a-POD 2018\"\u003e\u003c/p\u003e\n\u003cp\u003eIt was written originally as a convenient way to download the daily picture-of-the-day from \u003ca href=\"https://www.nationalgeographic.com/photography/photo-of-the-day/\"\u003eNational Geographic\u003c/a\u003e and use it to set the Mac\u0026rsquo;s Desktop Picture automatically. From there is just grew with more sites added (9 at the moment although I think there have been up to 12 at certain times).\u003c/p\u003e\n\u003cp\u003eThe main issue was keeping up with the site changes of the various sources. Early versions had each copy of the app interrogate the sites directly which meant that any change to the site broke the app until an update could be released. And without the App Store making updates easy to distribute, this was a problem. Later I switched to having PHP scripts on my server do the data retrieval and store the results in a database. The app then just had to request the data from my server. That way if there was a change, I could react quickly and a fix to the server-side scripts allowed all users to get the new data.\u003c/p\u003e\n\u003cp\u003eAs my first Objective-C app and my first app on the Mac App Store, Pic-a-POD has always held a place in my affections, and until last week, it was the one app that was always running on my Mac. So what changed? macOS Mojave\u0026rsquo;s dynamic desktops! I turned off Pic-a-POD, and set the Desktop picture to change dynamically through the day and I loved it.\u003c/p\u003e\n\u003cp\u003eOn the server, I have kept Pic-a-POD updated regularly, adding and removing sites, fixing the scripts to accommodate changes and so on. But the desktop app has languished and has needed an update for many years now. It\u0026rsquo;s networking is primitive and I know so much more about programming for the Mac now that looking at the code is positiviely embarrassing! But it has never been a big seller so a re-write is definitely not economically viable, it would only be for my satisfaction. And if even I am not using it any more, what is the point?\u003c/p\u003e\n\u003cp\u003eSo I have made the sad decision to shut it down. But what does this mean for users of Pic-a-POD right now?\u003c/p\u003e\n\u003cp\u003eFirstly, it is not going away immediately. I will remove it from the App Store, but existing copies are still going to work. If any of the source sites change their data structure, I will not be monitoring this and I will not update the server-side scripts - just turn off that source and carry on with whatever still works. And finally, when the picapod.com domain name expires in 2021, I will not renew it and the app will cease to operate.\u003c/p\u003e\n\u003cp\u003eWhat can you use instead? The default dynamic desktops in Mojave are great although there are only two of them, but I have bought myself an app called \u003ca href=\"https://itunes.apple.com/au/app/24-hour-wallpaper/id1226087575?mt=12\"\u003e24 Hour Wallpaper\u003c/a\u003e which includes a great range of dynamic desktop pictures.\u003c/p\u003e\n\u003cp\u003eSo thank you to everyone who has used Pic-a-POD over the years and especially those of you who took the time and trouble to contact me. It has been a fun journey, but there are other apps in my future now.\u003c/p\u003e"
    },
    {
        "title" : "Moving to the Dark Side - Part 2",
        "date_published" : "2018-10-06T08:29:35+10:00",
        "date_modified" : "2018-10-06T08:29:35+10:00",
        "id" : "https://troz.net/post/2018/moving-to-the-dark-side-2/",
        "url" : "https://troz.net/post/2018/moving-to-the-dark-side-2/",
        "content_html" : "\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n\u003c/style\u003e\n\n\u003cp\u003eNow that most of my Mac apps have been updated to support macOS Mojave\u0026rsquo;s dark mode, it was time to turn my attention to this web site.\u003c/p\u003e\n\u003cp\u003eI build this site using \u003ca href=\"https://gohugo.io/\"\u003eHugo\u003c/a\u003e and up until recently I used a theme called \u003ca href=\"https://github.com/olOwOlo/hugo-theme-even\"\u003eEven\u003c/a\u003e which I had been able to modify to suit my requirements. The story of how I switched to Hugo, what I wanted in a theme and how I went about, is in a \u003ca href=\"/post/2017/moving-to-hugo/\"\u003epost from last year\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eBut Evan is a theme with a white background and dark text, which looked great in light mode, but rather glaring in dark mode. So it was time to head for the \u003ca href=\"https://themes.gohugo.io\"\u003eHugo Themes page\u003c/a\u003e to look for an alternative.\u003c/p\u003e\n\u003cp\u003eBut which way to go? In my opinion, dark themes look better in Mojave\u0026rsquo;s light mode than light themes look in dark mode, so I decided to go with a dark theme. But to my delight, I found a theme that allowed users to switch between light and dark modes: \u003ca href=\"https://themes.gohugo.io/hugo-theme-hello-friend/\"\u003eHello Friend\u003c/a\u003e by \u003ca href=\"https://twitter.com/panr\"\u003epanr\u003c/a\u003e. Click the light bulb icon in the top right and the web site instantly toggles between modes.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Dark_Light_web.png\" alt=\"Dark and light versions of homepage\"\u003e\u003c/p\u003e\n\u003cp\u003eWith the spread of dark mode, I would expect more web sites and themes to implement this sort of switching in the future. Thanks to \u003ca href=\"https://twitter.com/panr\"\u003epanr\u003c/a\u003e for being an early adopter.\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003eAs I said in my \u003ca href=\"/post/2018/moving-to-the-dark-side/\"\u003eprevious post\u003c/a\u003e, I have already updated several of my macOS apps to support dark mode. But after reading some comments on Twitter, I have updated \u003ca href=\"https://itunes.apple.com/app/apple-store/id552293482\"\u003eIcon Builder\u003c/a\u003e and \u003ca href=\"https://itunes.apple.com/app/apple-store/id997688302\"\u003eDice Pass\u003c/a\u003e to allow the user to decide which mode to use. Make your choice in the Window menu as to whether these apps use whatever mode is set for the system, or select your preferred mode.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/SelectMode.png\" alt=\"Select mode in Window menu\"\u003e\u003c/p\u003e"
    },
    {
        "title" : "Moving to the Dark Side",
        "date_published" : "2018-09-26T16:49:43+10:00",
        "date_modified" : "2018-09-26T16:49:43+10:00",
        "id" : "https://troz.net/post/2018/moving-to-the-dark-side/",
        "url" : "https://troz.net/post/2018/moving-to-the-dark-side/",
        "content_html" : "\u003cstyle\u003e\n  img {\n    margin: 10px auto;\n    border: 0.5rem #dfe7f0 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .dark-theme img {\n    margin: 10px auto;\n    border: 0.5rem #4a4d50 solid;\n    border-radius: 0.5rem;\n     \n  }\n\n  .social_footer img {\n    border: none;\n    box-shadow: none;\n  }\n\u003c/style\u003e\n\n\u003cp\u003eWith the release of macOS Mojave on 24th September 2018, I have started updating my Mac apps, mainly to enable support for dark mode if appropriate.\u003c/p\u003e\n\u003cp\u003eAnd now I have updated this site too. Click the light bulb icon at the top right of the page to toggle between light and dark modes for this site.\u003c/p\u003e\n\u003cp\u003eAnd with my apps, so far (1 st October 2018), I have updated \u003ca href=\"https://itunes.apple.com/app/apple-store/id552293482\"\u003eIcon Builder\u003c/a\u003e, \u003ca href=\"https://itunes.apple.com/app/apple-store/id509085586\"\u003eWorld Time in Words\u003c/a\u003e, \u003ca href=\"https://itunes.apple.com/app/apple-store/id997688302\"\u003eDice Pass\u003c/a\u003e and \u003ca href=\"https://itunes.apple.com/app/apple-store/id533321133\"\u003eA Knight\u0026rsquo;s Move\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/icon-builder/\"\u003e\u003cimg src=\"/images/IconBuilder5.1.png\" alt=\"Icon Builder 5.1\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/time-in-words-for-mac/\"\u003e\u003cimg src=\"/images/WTiW_dark.png\" alt=\"World Time in Words 3.2\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/dicepass/\"\u003e\u003cimg src=\"/images/DicePass1.5.png\" alt=\"Dice Pass 3.2\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/knightsmove/\"\u003e\u003cimg src=\"/images/KnightsMoveMac1.png\" alt=\"Knights Move 1.6\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eFor A Knight\u0026rsquo;s Move, I wanted to make sure the wood-look background didn\u0026rsquo;t change, so I actually disabled dark mode.\nFor any developers looking for the way to do that, I added the following chunk to the \u003ccode\u003eapplicationDidFinishLaunching(_:)\u003c/code\u003e method:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e#available\u003c/span\u003e(\u003cspan style=\"color:#75715e\"\u003eOSX\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10.14\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        NSApp.appearance = NSAppearance(named: .aqua)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSimilar code could presumably be used to change the appearance of a running app. I may add the ability to switch to my apps later.\u003c/p\u003e"
    },
    {
        "title" : "Swift Strings Helper",
        "date_published" : "2018-06-21T14:45:59+10:00",
        "date_modified" : "2018-06-21T14:45:59+10:00",
        "id" : "https://troz.net/post/2018/swift-strings-helper/",
        "url" : "https://troz.net/post/2018/swift-strings-helper/",
        "content_html" : "\u003cp\u003eHands up everyone who can remember how to work with Swift strings, especially when it comes to substrings and ranges? \u0026hellip;.\u003c/p\u003e\n\u003cp\u003eNobody?\u003c/p\u003e\n\u003cp\u003eMe neither. So I decided that I would work it out once and create myself a library to make it easy for myself in the future. And then I thought that other people might like it too. So I have created my first open sourced project.\u003c/p\u003e\n\u003ch2 id=\"strings-in-swift\"\u003e\n  Strings in Swift\n  \u003ca href=\"#strings-in-swift\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eSwift\u0026rsquo;s string handling is amazing. It is truly Unicode-compliant, so a Swift \u003ccode\u003eString\u003c/code\u003e doesn\u0026rsquo;t care whether your string is made up of basic alphanumerics, accented characters, or emojis that might be composed of several different emojis joined together.\u003c/p\u003e\n\u003cp\u003eBut this power comes at a price, and every version of Swift has changed the way we interact with strings, seemingly making it more and more confusing for the poor programmers trying to stay current. I have got to the stage where each year I read up on the new String features and then promptly forget them. For every use, I have to go back and search how to do what should be simple.\u003c/p\u003e\n\u003ch2 id=\"the-problems\"\u003e\n  The Problems\n  \u003ca href=\"#the-problems\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eTo my mind, there are two main problems: indexes and substrings.\u003c/p\u003e\n\u003cp\u003eIn most languages, you can get the n-th character of a string, but not in Swift. In Swift, you have to ask the string for its startIndex (or endIndex), then use an offset to adjust that index by a certain number to give you a \u003ccode\u003eString.Index\u003c/code\u003e. Do much the same to get a second index and then you can grab the string between those two indices.\u003c/p\u003e\n\u003cp\u003eTo get a sub-string from the 7th up to the 11th character of a string, this is what you have to do:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e str = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello, playground\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e subStart = str.index(str.startIndex, offsetBy: \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e subEnd = str.index(str.startIndex, offsetBy: \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e subStr = str[subStart ..\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e subEnd]       \u003cspan style=\"color:#75715e\"\u003e// \u0026#34;play\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSplitting the lines up like that at least helps to show what is happening, but then you see abominations like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e sub = str[str.index(str.startIndex, offsetBy: \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e)..\u0026lt;str.index(str.startIndex, offsetBy: \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e)]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd how anyone is supposed to read that, I really do not know.\u003c/p\u003e\n\u003cp\u003eAnd now here is the kicker: the results (\u003ccode\u003esubStr\u003c/code\u003e and \u003ccode\u003esub\u003c/code\u003e in the examples above) are not of type \u003ccode\u003eString\u003c/code\u003e! They are of type \u003ccode\u003eSubstring\u003c/code\u003e so when you go to use them, they don\u0026rsquo;t work as expected.\u003c/p\u003e\n\u003cp\u003eI guess there are cases for using \u003ccode\u003eSubstring\u003c/code\u003e but I always just end up casting to \u003ccode\u003eString\u003c/code\u003e to solve this, but only after the compiler has choked on what I thought was a \u003ccode\u003eString\u003c/code\u003e all along.\u003c/p\u003e\n\u003ch2 id=\"the-solution\"\u003e\n  The Solution\n  \u003ca href=\"#the-solution\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eTo make my life easier, I worked out all the ways that I wanted to be able to split up strings. Basically just two ways: by character number or by substring. Swift already has a \u003ccode\u003esubstring\u003c/code\u003e method but it uses \u003ccode\u003eString.Index\u003c/code\u003e as shown above. To avoid confusion, I named my functions all \u003ccode\u003esub\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eBut now I can do the following to split strings by character number:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e subStr = startingString.sub(from: \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e subStr = startingString.sub(from: \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e subStr = startingString.sub(upTo: \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e subStr = startingString.sub(upTo: \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e subStr = startingString.sub(from: \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, upTo: \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e subStr = startingString.sub(from: \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, upTo: \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNegative numbers count back from the end of the string. And they all return \u003ccode\u003eString\u003c/code\u003e objects!\u003c/p\u003e\n\u003cp\u003eOr to split strings by their own sub-strings, I can do this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e subStr = startingString.sub(from: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;abc\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e subStr = startingString.sub(upTo: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;xyz\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e subStr = startingString.sub(from: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;abc\u0026#34;\u003c/span\u003e, upTo: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;xyz\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"extras\"\u003e\n  Extras\n  \u003ca href=\"#extras\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eOnce I had created a string helper library, I started thinking about all the other string utilities that would be useful. So I started adding all sorts of facilities:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eComputed properties:\n\u003cul\u003e\n\u003cli\u003elength (why should the length of a string be called count - that makes no sense)\u003c/li\u003e\n\u003cli\u003ewords\u003c/li\u003e\n\u003cli\u003elines\u003c/li\u003e\n\u003cli\u003eword count\u003c/li\u003e\n\u003cli\u003eline count\u003c/li\u003e\n\u003cli\u003etitle case\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eEncoding:\n\u003cul\u003e\n\u003cli\u003eURL encoding \u0026amp; decoding for queries or forms\u003c/li\u003e\n\u003cli\u003ebase64 encoding \u0026amp; decoding\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eTrim:\n\u003cul\u003e\n\u003cli\u003etrim\u003c/li\u003e\n\u003cli\u003etrim left\u003c/li\u003e\n\u003cli\u003etrim right\u003c/li\u003e\n\u003cli\u003etrim using extra characters\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ePad:\n\u003cul\u003e\n\u003cli\u003epad left\u003c/li\u003e\n\u003cli\u003epad right\u003c/li\u003e\n\u003cli\u003ewith default space or specified other character\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThat\u0026rsquo;s as far as I have got so far, but I am hoping for some community involvement that will expand or edit this library to make it more broadly applicable.\u003c/p\u003e\n\u003ch2 id=\"open-source\"\u003e\n  Open Source\n  \u003ca href=\"#open-source\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eI have never created an open source project before and I have rarely contributed to open source. But I have now published this library on GitHub under an MIT license. Please check it out at \u003ca href=\"https://github.com/trozware/swift-strings-helper\"\u003ehttps://github.com/trozware/swift-strings-helper\u003c/a\u003e. The GitHub repo contains an Xcode project with all the source files, plus the targets to build frameworks for macOS or iOS, and a playground as documentation and to test it all out.\u003c/p\u003e\n\u003cp\u003eI would love to get as many stars as possible and it would be fantastic if anyone wanted to log an issue or contribute directly. As someone who finds the whole open source world rather intimidating, I would like to assure everyone that there will be no flaming and no shooting down of ANY ideas. I look forward to hearing from you.\u003c/p\u003e\n\u003cp\u003eI am sure there are other Swift libraries out there dedicated to solving the same problems, but I hope that mine can prove useful to some. And if you just want to use it without contributing, feel free. The usage instructions are all in the ReadMe on the GitHub page.\u003c/p\u003e"
    },
    {
        "title" : "Functional Programming in Swift",
        "date_published" : "2018-06-14T14:18:53+10:00",
        "date_modified" : "2018-06-14T14:18:53+10:00",
        "id" : "https://troz.net/post/2018/functional-programming/",
        "url" : "https://troz.net/post/2018/functional-programming/",
        "content_html" : "\u003cp\u003eWhat is Functional Programming and how can we use it in Swift?\u003c/p\u003e\n\u003cp\u003eSearch online for any definition of functional programming and you will find many different definitions, few of which are practically helpful. I have no claim to be an expert, but as a Swift enthusiast, this is what I have distilled out of the morass.\u003c/p\u003e\n\u003ch2 id=\"what-is-functional-programming\"\u003e\n  What is Functional Programming?\n  \u003ca href=\"#what-is-functional-programming\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eWithout providing a concrete definition, here are what I see as the 3 main goals of functional programming:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003euse pure functions where possible\u003c/li\u003e\n\u003cli\u003eavoid mutability where possible\u003c/li\u003e\n\u003cli\u003euse functions as the basic building blocks\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSo let\u0026rsquo;s go through those one by one and see how they fit into the Swift language.\u003c/p\u003e\n\u003ch2 id=\"functional-programming-in-swift\"\u003e\n  Functional Programming in Swift\n  \u003ca href=\"#functional-programming-in-swift\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eYou can \u003ca href=\"https://github.com/trozware/functional-programming\"\u003edownload a playground containing all these examples from GitHub\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"pure-functions\"\u003e\n  Pure functions\n  \u003ca href=\"#pure-functions\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eA function is considered pure if it will always produce the same result for the same input, regardless of where it is and what calls it.\u003c/p\u003e\n\u003cp\u003eImagine you are writing a role-playing game and for a given fight, you need to be able to calculate the damage per second caused by a character.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDamageDealer\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e damageDone: Int = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e timeTaken: TimeInterval = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edamagePerSecond\u003c/span\u003e() -\u0026gt; Double {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e timeTaken == \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e dps = Double(damageDone) \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e timeTaken\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e dps \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e dps\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e mage = DamageDealer()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emage.damageDone = \u003cspan style=\"color:#ae81ff\"\u003e32\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emage.timeTaken = \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emage.damagePerSecond()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003edamagePerSecond\u003c/code\u003e function takes no parameters but uses the properties of its containing object. This works in this class, but there are 3 big problems:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThe function is not transportable - you cannot copy it into another class as it is totally dependent on the structure of the properties in the containing class.\u003c/li\u003e\n\u003cli\u003eWhen calling the function, it is not clear what data it is going to use.\u003c/li\u003e\n\u003cli\u003eThis function is difficult to test as calling the function with the same parameters (none) will produce different results depending on the setup.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eSo for a version that uses a pure function, we could replace \u003ccode\u003edamagePerSecond()\u003c/code\u003e with this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edamagePerSecondPure\u003c/span\u003e(damage: Int, time: TimeInterval) -\u0026gt; Double {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e time == \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e dps = Double(damage) \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e time\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e dps \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e dps\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emage.damagePerSecondPure(damage: mage.damageDone, time: mage.timeTaken)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eCalling the function is now more verbose, but reading the call gives you much more information about what is going to happen. Testing is easy, and the function is completely self-contained so can be copied into any class or struct.\u003c/p\u003e\n\u003ch3 id=\"avoid-mutability\"\u003e\n  Avoid mutability\n  \u003ca href=\"#avoid-mutability\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThis one has become the poster child of Swift Functional Programming as Swift provides some very convenient ways to avoid mutability.\u003c/p\u003e\n\u003cp\u003eThe first is \u003ccode\u003elet\u003c/code\u003e versus \u003ccode\u003evar\u003c/code\u003e. My rule is always to start defining any variable/constant with \u003ccode\u003elet\u003c/code\u003e and only changing to \u003ccode\u003evar\u003c/code\u003e if the compiler raises an error. In the current versions of Xcode, it will give a warning if you use \u003ccode\u003evar\u003c/code\u003e unnecessarily which is great, but I still stick to using \u003ccode\u003elet\u003c/code\u003e first.\u003c/p\u003e\n\u003cp\u003eThe most powerful way Swift lets us avoid mutability with Functional Programming is with \u003ccode\u003emap\u003c/code\u003e, \u003ccode\u003efilter\u003c/code\u003e and \u003ccode\u003ereduce\u003c/code\u003e.\u003c/p\u003e\n\u003ch4 id=\"filter\"\u003e\n  Filter\n  \u003ca href=\"#filter\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cp\u003eConsider this function that checks possible player names:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echeckPlayerNames\u003c/span\u003e(names: [String]) -\u0026gt; [String] {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e validNames: [String] = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e name \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e names {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e name.count \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003ename.contains(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            validNames.append(name)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e validNames\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e allNames = [ \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Woody\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Rex\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Slinky\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Buzz Lightyear\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hamm\u0026#34;\u003c/span\u003e ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e checkedNames = checkPlayerNames(names: allNames)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOnly names with more than 3 characters and no spaces are considered valid. So this function creates an empty array and then loops through each member of the supplied array and appends any valid names to the new array before returning it.\u003c/p\u003e\n\u003cp\u003eThis function is a pure function and it works as expected. But the \u003ccode\u003evalidNames\u003c/code\u003e array is mutable and there is no need for it to be.\u003c/p\u003e\n\u003cp\u003eConverting this to avoid mutability, we get:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echeckPlayerNamesUsingFilter\u003c/span\u003e(names: [String]) -\u0026gt; [String] {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e validNames = names.filter { name \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        name.count \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003ename.contains(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e validNames\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eInside the \u003ccode\u003efilter\u003c/code\u003e closure delimited by the curly braces after the word \u003ccode\u003efilter\u003c/code\u003e, (more about closures below), the element in the array being evaluated is stored in the \u003ccode\u003ename\u003c/code\u003e constant. The checks are done and this implicitly returns a \u003ccode\u003eBool\u003c/code\u003e - true if the checks pass, false if they do not. If the closure returns true, the name is valid and will be part of the validNames array.\u003c/p\u003e\n\u003cp\u003eAnd if you really want to be concise:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echeckPlayerNamesUsingFilterShort\u003c/span\u003e(names: [String]) -\u0026gt; [String] {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e names.filter { $0.count \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e$0.contains(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI recommend the first method even if it is a bit more verbose. Storing the result in a constant before returning it makes debugging much easier. Using $0 instead of using a named parameter is convenient, but I prefer not to do this unless the closure is very simple.\u003c/p\u003e\n\u003ch4 id=\"map\"\u003e\n  Map\n  \u003ca href=\"#map\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003efilter\u003c/code\u003e takes an array of objects and returns a sub-array containing every element which returned true for the checks inside the filter body.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003emap\u003c/code\u003e changes the elements in an array and can return an array of the same type or an array of different types.\u003c/p\u003e\n\u003cp\u003eHere is a function to square every integer in an array in the old style, using a mutable array to accumulate the result:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esquareNumbers\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e numbers: [Int]) -\u0026gt; [Int] {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e squares: [Int] = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e number \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e numbers {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        squares.append(number \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e number)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e squares\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e numbers = [ \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esquareNumbers(numbers)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd doing the same thing using \u003ccode\u003emap\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esquareNumbersUsingMap\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e numbers: [Int]) -\u0026gt; [Int] {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e squares = numbers.map { $0 \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e $0 }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e squares\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn this case, the type of the data did not change: integers went in, integers came out.\nBut \u003ccode\u003emap\u003c/code\u003e can change the type as well.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esquareRoots\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e numbers: [Int]) -\u0026gt; [Double] {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e roots = numbers.map { number \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        sqrt(Double(number))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e roots\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esquareRoots(numbers)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd there is a final twist to \u003ccode\u003emap\u003c/code\u003e that used to be called \u003ccode\u003eflatMap\u003c/code\u003e but is now called \u003ccode\u003ecompactMap\u003c/code\u003e and that allows us to get rid of optionals as we map through an array.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econvertStringsToInts\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e strings: [String]) -\u0026gt; [Int] {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e ints = strings.compactMap { \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e Int($0) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e ints\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e strings = [ \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;two\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;0.34\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;65\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;-93\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;4e8\u0026#34;\u003c/span\u003e ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econvertStringsToInts(strings)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe conversion of \u003ccode\u003eString\u003c/code\u003e to \u003ccode\u003eInt\u003c/code\u003e may fail and so returns an optional. If this function had used \u003ccode\u003emap\u003c/code\u003e instead of \u003ccode\u003ecompactMap\u003c/code\u003e, the result would have been an array of optional Ints: \u003ccode\u003e[Int?]\u003c/code\u003e. By using \u003ccode\u003ecompactMap\u003c/code\u003e, every \u003ccode\u003enil\u003c/code\u003e value was dropped and only valid integers are included.\u003c/p\u003e\n\u003ch4 id=\"reduce\"\u003e\n  Reduce\n  \u003ca href=\"#reduce\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cp\u003eThe final tool in the immutability toolbox is \u003ccode\u003ereduce\u003c/code\u003e and this is one that took me a while to wrap my head around.\u003c/p\u003e\n\u003cp\u003eImagine that you wanted to add up all the integers in an array. Here is a way to do it using a mutable variable and a loop:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esumNumbers\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e numbers: [Int]) -\u0026gt; Int {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e total = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e num \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e numbers {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        total \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e num\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e total\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e numbers = [ \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esumNumbers(numbers)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI can\u0026rsquo;t use \u003ccode\u003efilter\u003c/code\u003e or \u003ccode\u003emap\u003c/code\u003e here because I want to end up with a single value after applying some logic to every item in the array. So here is where I use \u003ccode\u003ereduce\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esumNumbersUsingReduce\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e numbers: [Int]) -\u0026gt; Int {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e total = numbers.reduce(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) { (cumulativeTotal, nextValue) \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e cumulativeTotal \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e nextValue\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e total\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esumNumbersUsingReduce(numbers)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003ereduce\u003c/code\u003e function takes 2 parameters. The first is the starting value - in this case it is zero. The second paramter is a function (I am using a closure) this in turn takes 2 parameters and here is where it gets complicated. Inside the closure function, the 2 parameters are the current result and the next value from the loop. And what you return from this closure is going to be the new cumulative value which will either be fed back into the loop, or returned as the final result. The first time through the loop, the first parameter will be the initial value as set in the reduce function call.\u003c/p\u003e\n\u003cp\u003eTo see how this happens, here is a version sprinkled with \u003ccode\u003eprint\u003c/code\u003e statements showing what happens each time through the loop:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esumNumbersReduceDebug\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e numbers: [Int]) -\u0026gt; Int {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e total = numbers.reduce(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) { (cumulativeTotal, nextValue) \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cumulativeTotal = \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003ecumulativeTotal\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;nextValue = \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003enextValue\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;about to return \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003ecumulativeTotal\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e + \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003enextValue\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e = \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003ecumulativeTotal \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e nextValue\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e which will become the next culmulative or the final value\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e cumulativeTotal \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e nextValue\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;final result = \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003etotal\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e total\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e shortNumbers = [ \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esumNumbersReduceDebug(shortNumbers)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis produces a log showing:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecumulativeTotal = 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enextValue = 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eabout to return 0 + 5 = 5 which will become the next culmulative or the final value\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecumulativeTotal = 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enextValue = 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eabout to return 5 + 3 = 8 which will become the next culmulative or the final value\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecumulativeTotal = 8\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enextValue = 8\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eabout to return 8 + 8 = 16 which will become the next culmulative or the final value\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efinal result = 16\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"using-functions-as-building-blocks\"\u003e\n  Using functions as building blocks\n  \u003ca href=\"#using-functions-as-building-blocks\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThis one is more a matter of style than of any particular programming technique. Basically, keep each function small and break your code into small chunks with obvious naming. This makes your code easier to read, test and debug and it beomes vastly more reusable.\u003c/p\u003e\n\u003cp\u003eConsider this totally made-up function:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econfigureDisplay\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e userId: String?) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eguard\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e userId = userId \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        showLoginScreen()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    displayUserData(\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e: userId)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e userType = getPermissions(\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e: userId)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    populateMenus(\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e: userType)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    loadInitialData(\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e: userId)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    playSound(.welcome)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econfigureDisplay(\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;abc123\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econfigureDisplay(\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIs it easy to read?\nCan you work out what it does? Now imagine all that functionality in a single huge function - would that be as good to use?\u003c/p\u003e\n\u003cp\u003eAs a way of encouraging shorter functions, which leads inevitably to this sort of structured code, I strongly recommend using SwiftLint to check your code. I wrote a \u003ca href=\"/post/2018/swiftlint/\"\u003epost about this\u003c/a\u003e a while ago which you might find useful.\u003c/p\u003e\n\u003ch4 id=\"naming\"\u003e\n  Naming\n  \u003ca href=\"#naming\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cp\u003eThe other key thing to mention and it is a point that Apple makes very strongly, is to name your functions and their parameters so as to make them as readable as possible from the calling site. You write a function once, but you most likely call it multiple times, so it is the calling site that needs to be really easy to read.\u003c/p\u003e\n\u003cp\u003eReturning to the game example, here is a dummy function to show damage caused to a target:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edisplayDamage\u003c/span\u003e(damage: Int, target: String) {}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edisplayDamage(damage: \u003cspan style=\"color:#ae81ff\"\u003e31\u003c/span\u003e, target: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Ogre\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThere is nothing really wrong with the function, but calling it is a bit clunky and doesn\u0026rsquo;t read well with the repeated use of the word \u0026lsquo;damage\u0026rsquo;.\u003c/p\u003e\n\u003cp\u003eWhat about this version?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edisplay\u003c/span\u003e(damage: Int, doneTo target: String) {}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edisplay(damage: \u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e, doneTo: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Wolf\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThere are no repeated words in the caller and by using two labels for the second parameter, the calling site can read almost like a sentence, but inside the function, \u003ccode\u003etarget\u003c/code\u003e is still a more logical name.\u003c/p\u003e\n\u003cp\u003eA third alternative is to use an un-named parameter if the naming logic is implicit in the function name itself:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edisplayDamage\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e damage: Int, doneTo target: String) {}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edisplayDamage(\u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e, doneTo: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Orc\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"closures\"\u003e\n  Closures\n  \u003ca href=\"#closures\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eAs promised above, a very quick explanation of closures, which really deserve their own post\u0026hellip;\u003c/p\u003e\n\u003cp\u003eIn Swift, as in many languages, functions can be passed as parameters to other functions. As an example, I have set up 2 functions to perform a simple calculation on a given integer:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecube\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e number: Int) -\u0026gt; Int {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e number \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e number \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e number\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecube(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esquare\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e number: Int) -\u0026gt; Int {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e number \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e number\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esquare(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow imagine that you wanted to create a more general function that could call either one of these functions with any number:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edoCalculation\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e number: Int, calculation: (Int) -\u0026gt; Int) -\u0026gt; Int {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e calculation(number)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003edoCalculation\u003c/code\u003e takes 2 parameters. The first one is easy - it is just an integer. The second one is weird! For every parameter of a function, you have to supply the type of that parameter. Usually this is quite straight-forward: Int, String, MyCustomClass etc. But what is the \u003ccode\u003etype\u003c/code\u003e of a function? Option-clicking on the word \u003ccode\u003ecube\u003c/code\u003e in my function definition, I see this:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/FunctionType.png\" alt=\"Function type\"\u003e\u003c/p\u003e\n\u003cp\u003eAnd ignoring the parameter labels, this basically provides the function type: Int inside parentheses for the input, then the arrow, then Int again for the return type. So the type definition for the \u003ccode\u003ecube\u003c/code\u003e function is \u003ccode\u003e(Int) -\u0026gt; Int\u003c/code\u003e. And when I define the type for the calculation parameter in the \u003ccode\u003edoCalculation\u003c/code\u003e function, this is exactly what I put. The last part of the function definition is specifiying the overall return type as an Int.\u003c/p\u003e\n\u003cp\u003eUsing the \u003ccode\u003ecube\u003c/code\u003e and \u003ccode\u003esquare\u003c/code\u003e functions inside \u003ccode\u003edoCalculation\u003c/code\u003e works like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edoCalculation(\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e, calculation: square)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edoCalculation(\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, calculation: cube)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBut what if I didn\u0026rsquo;t want to define all the functions I might call in advance? Then I can send the function body to the \u003ccode\u003edoCalculation\u003c/code\u003e function instead of using a pre-built function. This way of using a function inside another function is referred to as a closure.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edoCalculation(\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e, calculation: { number \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e number \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e})\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003edoCalculation\u003c/code\u003e function in unchanged, but instead of passing it a reference to a function, I am directly passing it the instructions it should use to get the result. As with any function, the instructions are contained within a set of curly braces. The input to this function is listed after the opening curly brace followed by the keyword \u003ccode\u003ein\u003c/code\u003e. Then the function body does whatever it needs to and returns the result.\u003c/p\u003e\n\u003cp\u003eYou may have heard the term \u003ccode\u003etrailing closure\u003c/code\u003e. This refers to a function where the last parameter is a function. If that function is called using a closure, there is a short-hand way of writing this, omitting the closure\u0026rsquo;s parameter name and moving the closing parenthesis to before the opening curly brace.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edoCalculation(\u003cspan style=\"color:#ae81ff\"\u003e16\u003c/span\u003e) { number \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e number \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWith the \u003ccode\u003efilter\u003c/code\u003e, \u003ccode\u003emap\u003c/code\u003e and \u003ccode\u003ereduce\u003c/code\u003e functions I showed above, this is the way their logic was supplied but here is how the filter example would look without using a closure:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echeckName\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e name: String) -\u0026gt; Bool {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e name.count \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003ename.contains(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echeckPlayerNamesUsingFunction\u003c/span\u003e(names: [String]) -\u0026gt; [String] {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e validNames = names.filter(checkName)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e validNames\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e allNames = [ \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Woody\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Rex\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Slinky\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Buzz Lightyear\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hamm\u0026#34;\u003c/span\u003e ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e checkedNames = checkPlayerNamesUsingFunction(names: allNames)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhich methods you use are up to you - they all work. If you have a function that will be called in many different places, maybe it makes more sense to define it once and pass around a reference to that function. If not, a closure has the advantage that it keeps everything together. There is more to closures, particularly to do with variable scope, but I think this post has gone on long enough already\u0026hellip;. maybe next time.\u003c/p\u003e"
    },
    {
        "title" : "World Time in Words iOS Update",
        "date_published" : "2018-06-14T10:41:46+10:00",
        "date_modified" : "2018-06-14T10:41:46+10:00",
        "id" : "https://troz.net/post/2018/world-time-in-words-ios-update/",
        "url" : "https://troz.net/post/2018/world-time-in-words-ios-update/",
        "content_html" : "\u003cp\u003eIts been a long time since the last update to Time In Words for iOS but after prompting by Apple (\u003cem\u003eupdate or we will remove it from the App Store\u003c/em\u003e), I finally did it. I was never really happy with the last design of Time in Words for iOS, particularly for the iPad, so this was a good opportunity to do a complete re-design, bringing the app more into alignment with its Mac counterpart. And it got a new name to match its new direction and is now called World Time in Words.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://itunes.apple.com/app/time-in-words/id498403851\"\u003eWorld Time in Words v 5.0\u003c/a\u003e is available from the App Store.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eIn 2015, I released \u003ca href=\"/post/2015/time-in-words-4.0/\"\u003eTime In Words v 4.0\u003c/a\u003e for iOS. This was a big change as I had dropped the original QlockTwo concept and switched the emphasis to world time conversions that would be easy to read and understand. This bit worked out well, but the paging interface was not a great success - it made it too tedious to find the zone you were interested in.\u003c/p\u003e\n\u003cp\u003eThe \u003ca href=\"/time-in-words-for-mac/\"\u003eMac version\u003c/a\u003e is a menu bar app that shows the selected time zones as separate menu items. iOS apps don\u0026rsquo;t have menus, but the closest thing to this is a table, so that is what I went with.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/WTiW-iOS.jpg\" alt=\"Basic display\"\u003e\u003c/p\u003e\n\u003cp\u003eAs before, you can add, remove or re-order the time zones and the top three zones can be shown in your Today widgets.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/WTiW-iOS-1.jpg\" alt=\"Edit zones\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/WTiW-iOS-4.jpg\" alt=\"Today widget\"\u003e\u003c/p\u003e\n\u003cp\u003eBut the feature that I use most in the Mac app is \u0026ldquo;What time will it be when\u0026hellip;\u0026rdquo;. In the iOS app, for reasons of space, the button is labelled \u0026ldquo;What time will it be?\u0026rdquo; but the functionality is the same: drag the slider to adjust the hour in your local time zone and see what that hour will be in your selected world zones. This is incredibly useful when you have family, friends and colleagues all over the world and really don\u0026rsquo;t want to call them at the wrong time of day.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/WTiW-iOS-2.jpg\" alt=\"What time will it be\"\u003e\u003c/p\u003e\n\u003cp\u003eThe iPad version of the app is identical at this stage, but I am thinking of adjusting the interface so as to take advantage of the increased real estate. If other work doesn\u0026rsquo;t get in the way, this may happen\u0026hellip;\u003c/p\u003e"
    },
    {
        "title" : "Privacy Policy",
        "date_published" : "2018-05-26T09:51:56+10:00",
        "date_modified" : "2018-05-26T09:51:56+10:00",
        "id" : "https://troz.net/post/2018/privacy-policy/",
        "url" : "https://troz.net/post/2018/privacy-policy/",
        "content_html" : "\u003cp\u003eTL;DR: I don\u0026rsquo;t track you either on my web site or through my apps. If you want to contact me, please do so but I will not initiate any contacts.\u003c/p\u003e\n\u003cp\u003eAs anyone who gets email would realise by now, the EU has introduced a \u003ca href=\"https://www.eugdpr.org\"\u003eGeneral Data Protection Regulation\u003c/a\u003e designed to enhance online privacy. You will have been getting lots of emails announcing new privacy policies or asking you to opt-in to existing arrangements.\u003c/p\u003e\n\u003cp\u003eSo here is my version of those emails (which you will not get by email because I do not store any user data):\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNone of my apps store data off your device.\u003c/li\u003e\n\u003cli\u003eI do not have any user data except for data specifically sent to me via web forms, direct email or in-app email.\u003c/li\u003e\n\u003cli\u003eIf you have signed up to beta test one of my apps, you did give me your email address. No tests are currently on-going, but please contact me if you would rather I removed you from any future beta tests.\u003c/li\u003e\n\u003cli\u003eMy web sites are now totally free of trackers and analytics software.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMost of my apps have a \u0026ldquo;Contact the Developer\u0026rdquo; button that creates an email that I will answer. If you do not want me to have your name and email address, do not use these buttons.\u003c/p\u003e\n\u003cp\u003eMy web site has a \u003ca href=\"http://localhost:1313/contact/\"\u003econtact page\u003c/a\u003e - if you use it, I will see your name and email address and I will respond. Again, if you do not want me to have this data, do not use this page.\u003c/p\u003e\n\u003cp\u003eSince I no longer have any analytics, I would really appreciate hearing if you find any of my posts useful or interesting.\u003c/p\u003e"
    },
    {
        "title" : "App Updates",
        "date_published" : "2018-05-26T09:22:57+10:00",
        "date_modified" : "2018-05-26T09:22:57+10:00",
        "id" : "https://troz.net/post/2018/app-updates/",
        "url" : "https://troz.net/post/2018/app-updates/",
        "content_html" : "\u003cp\u003eJust a quick post to let you know about some recent app updates\u0026hellip;\u003c/p\u003e\n\u003ch2 id=\"man-reader\"\u003e\n  Man Reader\n  \u003ca href=\"#man-reader\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\"\u003eMan Reader v 1.10\u003c/a\u003e was released on 11 May 2018.\u003c/p\u003e\n\u003cp\u003eI had to update \u003ca href=\"/manreader/\"\u003eMan Reader\u003c/a\u003e in November 2017 because of a really strange \u0026ldquo;feature\u0026rdquo; that arrived with macOS High Sierra. Man Reader displays the man pages as HTML which allows the tabs and internal links to work using anchor tags. These had worked for years, but under High Sierra, they just stopped working.\u003c/p\u003e\n\u003cp\u003eI eventually discovered that it was because I was loading the text directly into the WebView using:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-objectivec\" data-lang=\"objectivec\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[self.web.mainFrame loadHTMLString:manText baseURL:nil];\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWith no baseURL, the anchor links were all defaulting to \u003ccode\u003eabout:blank\u003c/code\u003e and going nowhere. The solution was to save the text to a temporary file and then load using:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-objectivec\" data-lang=\"objectivec\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNSURLRequest \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003erequest \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [NSURLRequest requestWithURL: tempFile];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[self.web.mainFrame loadRequest: request];\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNeedless to say, this took me ages to work out, including a lengthy excursion into using \u003ccode\u003eWKWebView\u003c/code\u003e to see if the more modern web view would solve the problem.\u003c/p\u003e\n\u003cp\u003eThe second update (May 2018) was in response to a crash report from a user. I had great difficulty tracking this one down and even now, I cannot see how it can have happened, but it was in relation to the utility apps that are displayed in the toolbar.\u003c/p\u003e\n\u003cp\u003eFor each app, Man Reader checks to see if the app bundle exists, then it checks for a bundle identifier. It appears that this can come back as nil which I had not realised. And trying to insert an item with a identifier of \u003ccode\u003enil\u003c/code\u003e into the toolbar caused a crash.\u003c/p\u003e\n\u003cp\u003eAs you can see from the code, ManReader is written in Objective-C. Going back to Objective-C from Swift is painful! And I know that this crash could not have happened if the app had been written in Swift as the identifier would have been an optional and I would have been forced to check that it was not nil before using.\u003c/p\u003e\n\u003cp\u003eOn the plus side, Objective-C apps are tiny in comparison to Swift apps. And the Mac App Store review process set a new record for me. I submitted the app at 10:58 am and it was on sale at 12:03 pm the same day - 66 minutes from start to finish.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"sequenza-vii\"\u003e\n  Sequenza VII\n  \u003ca href=\"#sequenza-vii\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eThe other app that I updated recently is \u003ca href=\"https://itunes.apple.com/us/app/sequenza-vii/id730234638?mt=8\u0026amp;uo=4\"\u003eSequenza VII\u003c/a\u003e. Version 1.2 was released on 23 April 2018.\u003c/p\u003e\n\u003cp\u003eThis is an app with a very limited audience - specifically oboe players who want to learn to play Berio\u0026rsquo;s weird music. However Apple sent me a notice saying that as it hadn\u0026rsquo;t been updated for ages, it would be removed from the store within 30 days unless I did something.\u003c/p\u003e\n\u003cp\u003eUpdating it to use the iPhone X display was surprisingly difficult. I set the minimum system version to 11.0 and changed the storyboards to use the latest Xcode but the horns on either side of the notch were still being left blank. In the end, the trick I found was to create a new Launch storyboard - that seemed to fool the system into re-considering all the layouts.\u003c/p\u003e"
    },
    {
        "title" : "Man Reader",
        "date_published" : "2018-05-11T00:00:00Z",
        "date_modified" : "2018-05-11T00:00:00Z",
        "id" : "https://troz.net/manreader1/",
        "url" : "https://troz.net/manreader1/",
        "content_html" : "\u003cp\u003eMan Reader is a utility app for reading macOS\u0026rsquo;s man pages. Man Reader allows\nquick, convenient and easy access to the man pages on your system, useful for\nprogrammers, system administrators and tweakers.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/images/MR_Start.png\"\u003e\u003cimg src=\"/images/MR_Start_small.png\" alt=\"MR\" title=\"Man Reader\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\"\u003eBuy Man Reader from the Mac App Store\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMan pages are available for the Unix commands used mostly in Terminal or when\nshell scripting. These man pages are normally displayed in Terminal using the\n\u0026ldquo;man\u0026rdquo; command e.g. \u0026ldquo;man man\u0026rdquo; gives you the man page for the man command.\u003c/p\u003e\n\u003cp\u003eHowever there are problems with this: the man page is displayed to you in your\nTerminal window page by page and when you have got to the bottom, you have to\nknow to press \u0026lsquo;q\u0026rsquo; to get out of the man page display, at which point it\ndisappears completely. Hope you have a good memory!\u003c/p\u003e\n\u003cp\u003eThere are various tricks to get around this: opening it in a separate window,\npiping it to Preview as a PDF, listing it as a single page etc, but none of\nthese are really convenient, which is why I wrote Man Reader. Basically, I\nreckon that if I want a utility, then there must be other people who would want\nthe same thing.\u003c/p\u003e\n\u003cp\u003eMan Reader assembles a list of the commands with available man pages on your\nsystem - this will vary according to what developer tools you have installed.\nThese commands are listed for you and you can click on any one to display the\nman page for that command.\u003c/p\u003e\n\u003ch2 id=\"man-reader-features\"\u003e\n  Man Reader Features:\n  \u003ca href=\"#man-reader-features\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eList of all available man pages on your system.\u003c/li\u003e\n\u003cli\u003eShow only a section of the pages.\u003c/li\u003e\n\u003cli\u003eSearch for a man page by name.\u003c/li\u003e\n\u003cli\u003eDisplay man page in text or HTML (different pages look best in different\nformats).\u003c/li\u003e\n\u003cli\u003eStep back \u0026amp; forward through recently viewed man pages.\u003c/li\u003e\n\u003cli\u003eLive links to \u0026lsquo;See Also\u0026rsquo; entries.\u003c/li\u003e\n\u003cli\u003e\u0026lsquo;Sticky notes\u0026rsquo; at the side to jump to sub-sections in a page.\u003c/li\u003e\n\u003cli\u003eChoose a font and size for the display.\u003c/li\u003e\n\u003cli\u003eConvenient buttons in the toolbar allow quick access to commonly used\nutilities.\u003c/li\u003e\n\u003cli\u003eSand-boxed for OS X Lion \u0026amp; later.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch4 id=\"man-reader-version-113-changes-26-may-2021\"\u003e\n  Man Reader version 1.13 changes (26 May 2021):\n  \u003ca href=\"#man-reader-version-113-changes-26-may-2021\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAdd missing links for non-standard man pages.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-112-changes-17-may-2021\"\u003e\n  Man Reader version 1.12 changes (17 May 2021):\n  \u003ca href=\"#man-reader-version-112-changes-17-may-2021\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eFixes issues with crashing on first run and with dark mode over-riding the user preferences.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-111-changes-16-may-2021\"\u003e\n  Man Reader version 1.11 changes (16 May 2021):\n  \u003ca href=\"#man-reader-version-111-changes-16-may-2021\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eI am working on a major update to Man Reader, but this is taking longer than expected due to other commitments, so this is an interim release to fix some of the UI problems with the current version.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-110-changes-11-may-2018\"\u003e\n  Man Reader version 1.10 changes (11 May 2018):\n  \u003ca href=\"#man-reader-version-110-changes-11-may-2018\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eFix for possible crash if toolbar apps are not available.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-19-changes-27-nov-2017\"\u003e\n  Man Reader version 1.9 changes (27 Nov 2017):\n  \u003ca href=\"#man-reader-version-19-changes-27-nov-2017\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eFix for High Sierra problem where page navigation had stopped working.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-18-changes-23-oct-2016\"\u003e\n  Man Reader version 1.8 changes (23 Oct 2016):\n  \u003ca href=\"#man-reader-version-18-changes-23-oct-2016\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eMore complete search for man pages, including in third-party IDEs.\u003c/li\u003e\n\u003cli\u003eFix for glitch when displaying previously selected page on launch.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-17-changes-10-oct-2016\"\u003e\n  Man Reader version 1.7 changes (10 Oct 2016):\n  \u003ca href=\"#man-reader-version-17-changes-10-oct-2016\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eUpdated for macOS Sierra.\u003c/li\u003e\n\u003cli\u003eList of pages now uses alternating colors even if not using the defaults.\u003c/li\u003e\n\u003cli\u003eMinimum supported system version raised to 10.11.\u003c/li\u003e\n\u003cli\u003eMinor display glitches fixed.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-16-changes-13-jul-2016\"\u003e\n  Man Reader version 1.6 changes (13 Jul 2016):\n  \u003ca href=\"#man-reader-version-16-changes-13-jul-2016\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eMuch improved searching for available man pages, including permissions fix for\nsome pages.\u003c/li\u003e\n\u003cli\u003eFixed error with new search term being over-written.\u003c/li\u003e\n\u003cli\u003eSand-boxed version now works just as well as the non-sand-boxed so please\nswitch back to this version.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-15-changes\"\u003e\n  Man Reader version 1.5 changes:\n  \u003ca href=\"#man-reader-version-15-changes\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eMuch improved searching for available man pages.\u003c/li\u003e\n\u003cli\u003eSand-boxed version now works just as well as the non-sand-boxed.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-14-changes\"\u003e\n  Man Reader version 1.4 changes:\n  \u003ca href=\"#man-reader-version-14-changes\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eFix for plain text view not wrapping correctly for odd-sized fonts.\u003c/li\u003e\n\u003cli\u003eFix for HTML text view over-riding font colors that may be invisible.\u003c/li\u003e\n\u003cli\u003eSearch for missing entry (e.g. g++) no longer requires Enter or Return.\u003c/li\u003e\n\u003cli\u003eBetter automatic selection of matching entries while searching.\u003c/li\u003e\n\u003cli\u003eFix for animation warning message appearing in Console.\u003c/li\u003e\n\u003cli\u003eStatus display shows when man page list is being updated.\u003c/li\u003e\n\u003cli\u003eSearching inside a page now allows a minimum of 2 characters (was 3), so flags\ne.g. \u0026lsquo;-b\u0026rsquo; do not need to be escaped.\u003c/li\u003e\n\u003cli\u003eFixed path for Network Utility in tool bar (moved in OS X 10.9).\u003c/li\u003e\n\u003cli\u003eMore information available about the effects of sand-boxing for this app.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-13-changes\"\u003e\n  Man Reader version 1.3 changes:\n  \u003ca href=\"#man-reader-version-13-changes\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eBetter formatting of plain text to allow for HTML entities.\u003c/li\u003e\n\u003cli\u003eFix for font in some HTML pages getting bigger \u0026amp; bigger.\u003c/li\u003e\n\u003cli\u003eFailed search for page will search for a matching man page anyway.\u003c/li\u003e\n\u003cli\u003eEditable apps in toolbar (see Preferences \u0026amp; View menu).\u003c/li\u003e\n\u003cli\u003eFixed bug when setting custom colors for marker tabs.\u003c/li\u003e\n\u003cli\u003eChanged shortcuts for Find (see Edit menu).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-12-changes\"\u003e\n  Man Reader version 1.2 changes:\n  \u003ca href=\"#man-reader-version-12-changes\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eCustomizable colors for text, background, links, found text.\u003c/li\u003e\n\u003cli\u003eSearching for text within pages marks all matches.\u003c/li\u003e\n\u003cli\u003ePages will adjust line width to suit window size, even in plain text mode.\u003c/li\u003e\n\u003cli\u003eIf a search only results in a single page, press Return to display it.\u003c/li\u003e\n\u003cli\u003eMore man pages should be located on your system.\u003c/li\u003e\n\u003cli\u003eFix for bug where app did not always remember full screen setting.\u003c/li\u003e\n\u003cli\u003eFix for bug where some pages were being added to the history list twice.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"man-reader-version-11-changes\"\u003e\n  Man Reader version 1.1 changes:\n  \u003ca href=\"#man-reader-version-11-changes\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eSearch for text within a man page.\u003c/li\u003e\n\u003cli\u003eBookmark frequently visited pages.\u003c/li\u003e\n\u003cli\u003eSearch man page list using \u0026ldquo;Starts with\u0026rdquo; or \u0026ldquo;Contains\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003ePreferences for the marker tabs: choose a pre-made color set or design your\nown.\u003c/li\u003e\n\u003cli\u003eFull screen mode now supported.\u003c/li\u003e\n\u003cli\u003eCustom toolbar configurations now saved \u0026amp; restored correctly.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cp\u003eIf you have any problems with Man Reader, any suggestions for future versions or\nencounter any bugs, please \u003ca href=\"mailto:sarah@troz.net?subject=Man%20Reader\"\u003econtact me\u003c/a\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "Berio's Sequenza VII",
        "date_published" : "2018-04-23T00:00:00Z",
        "date_modified" : "2018-04-23T00:00:00Z",
        "id" : "https://troz.net/berio/",
        "url" : "https://troz.net/berio/",
        "content_html" : "\u003cp\u003e\u003c!-- raw HTML omitted --\u003eLuciano\nBerio\u003c!-- raw HTML omitted --\u003e wrote a series of Sequenzas for various instruments with Sequenza VII\nbeing the one for oboe.\u003cbr\u003e\n\u003c!-- raw HTML omitted --\u003e\u003c/p\u003e\n\u003cp\u003ePreparing this work creates some unique problems for the oboist as Berio did not\nadhere to any time signature that could be indicated by a metronome. Instead,\neach line consists of\n\u003c!-- raw HTML omitted --\u003e13\nbars (measures) with each bar\u0026rsquo;s length specified in exact seconds\u003c!-- raw HTML omitted --\u003e.\u003c/p\u003e\n\u003cp\u003eWhen my son (an oboist currently studying in Melbourne, Australia) started\ntrying to learn this piece, it occurred to him that having an iOS app developer\nin the family could be of some assistance. So with instructions from him and\nwith suggestions from other oboists, I have developed the\n\u003c!-- raw HTML omitted --\u003eBerio\nSequenza VII app for iPhone or iPod Touch\u003c!-- raw HTML omitted --\u003e.\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003eWith the default settings it will count the bar lengths, using metronome-like\nsounds to mark the starts of bars and lines. The player who needs to practice a\nspecific bar can easily set the app to start at that bar and even to repeat that\nbar length continuously.\u003c/p\u003e\n\u003cp\u003eTapping the \u0026ldquo;i\u0026rdquo; button at the bottom right of the screen takes you to the more\nadvanced options.\u003c/p\u003e\n\u003cp\u003eThe \u0026ldquo;Settings\u0026rdquo; section deals primarily with the B4 drone that is supposed to\naccompany the performance of this piece. While in an actual performance, the\ndynamics of this drone would vary, for this practice app it remains at a\nconstant volume as specified by you. The volume can be set to a percentage of\nthe iPhone\u0026rsquo;s current volume setting. If it is still too quiet, plug your iPhone\ninto a speaker or use some sort of physical amplification. If you prefer to play\nwith an A other than 440 Hz, that can be adjusted. And finally, the wave form\nused to generate this drone sound can be switched between a sine wave or a\ntriangle wave. Disclaimer: excessive use of this drone may cause loss of\nfriends!\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003eThe Settings page also includes an option to slow down the times for practice.\nAt 100% speed, bar 1 on each line will last for 3 seconds. The speed can be\nreduced to allow each bar to last longer, for use during the learning process.\u003c/p\u003e\n\u003cp\u003eThe \u0026ldquo;Bars \u0026amp; Sounds\u0026rdquo; section allows you to customise the various options marking\nthe start of each new bar. You can specify the number of seconds \u0026amp; the sound\nused to count you in after tapping the Start button. You can also select which\nof the metronome sounds to use to mark the start of each bar, making the first\nbar of each line use a different sound if you prefer. Finally, in case you are\nplaying so loudly that you are unable to hear the iPhone, you can set the screen\nto flash a different color at the start of each new bar.\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003eJacqueline Leclair wrote a\n\u003c!-- raw HTML omitted --\u003esupplementary\nedition\u003c!-- raw HTML omitted --\u003e of this work in 2000 using traditional time signatures in a way that\nalmost exactly duplicates the original timings. This app is designed for use\nwith the original score using Berio\u0026rsquo;s real time bar lengths.\u003c/p\u003e\n"
    },
    {
        "title" : "Consistent Swift Style",
        "date_published" : "2018-03-31T09:35:21+10:00",
        "date_modified" : "2018-03-31T09:35:21+10:00",
        "id" : "https://troz.net/post/2018/swiftlint/",
        "url" : "https://troz.net/post/2018/swiftlint/",
        "content_html" : "\u003cul\u003e\n\u003cli\u003eWhy is important to style your code?\u003c/li\u003e\n\u003cli\u003eHow do you decide on a style?\u003c/li\u003e\n\u003cli\u003eIs there a way to enforce this style automatically?\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"what-is-style-in-swift\"\u003e\n  What is style in Swift?\n  \u003ca href=\"#what-is-style-in-swift\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eStyle applies to writing in any programming language and refers to the way you structure your code.\u003c/p\u003e\n\u003cp\u003eFor example, how to you arrange braces?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e theValue \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// do one thing\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// do the other thing\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e theValue \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// do one thing\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// do the other thing\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor anything in between?\u003c/p\u003e\n\u003cp\u003eDo you use camelCase or snake_case?\u003c/p\u003e\n\u003cp\u003eDo you always start class names with an uppercase letter?\u003c/p\u003e\n\u003cp\u003eAnd of course there is the Great Debate: tabs or spaces? And how many?\u003c/p\u003e\n\u003ch2 id=\"why-is-important-to-style-your-code\"\u003e\n  Why is important to style your code?\n  \u003ca href=\"#why-is-important-to-style-your-code\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eYou only write code once, but you \u0026amp; others will read it many times.\u003c/p\u003e\n\u003cp\u003eAs I tell students, in six months time some poor sucker is going to have to read this code, and worse still, that poor sucker might be you, so make it readable.\u003c/p\u003e\n\u003cp\u003eThere is a cognitive load involved in reading code but you can lighten that load by using consistent patterns that your brain can recognise quickly without having to re-analyse them each time.\u003c/p\u003e\n\u003ch2 id=\"how-do-you-decide-on-a-style\"\u003e\n  How do you decide on a style?\n  \u003ca href=\"#how-do-you-decide-on-a-style\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eDo a search online for \u003ca href=\"https://encrypted.google.com/search?hl=en\u0026amp;q=Swift%20style%20guide\"\u003eSwift style guide\u003c/a\u003e and you will get numerous results, although you do have to dodge the sites dedicated to Taylor Swift\u0026rsquo;s dress sense! I like the \u003ca href=\"https://github.com/raywenderlich/swift-style-guide\"\u003eRay Wenderlich guide\u003c/a\u003e although its emphasis is on styles that read well in print and in web pages. The \u003ca href=\"https://github.com/linkedin/swift-style-guide\"\u003eLinkedIn guide\u003c/a\u003e is also good. \u003ca href=\"https://github.com/github/swift-style-guide\"\u003eGitHub\u003c/a\u003e also has a style guide but it hasn\u0026rsquo;t been updated recently. However it contains some good general advice.\u003c/p\u003e\n\u003cp\u003eBut in the end, you have to decide your own style. The important thing then is to be consistent. I don\u0026rsquo;t care whether you use camelCase or snake_case, tabs or spaces, but if you use a mixture your code will be harder to read, so pick a style and stick to it.\u003c/p\u003e\n\u003ch2 id=\"is-there-a-way-to-enforce-this-style-automatically\"\u003e\n  Is there a way to enforce this style automatically?\n  \u003ca href=\"#is-there-a-way-to-enforce-this-style-automatically\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eThis is where \u003ca href=\"https://github.com/realm/SwiftLint\"\u003eSwiftLint\u003c/a\u003e comes into the picture. SwiftLint is a tool that can check your code and look for style violations. While it comes with a default set of rules, you can configure these rules to suit your own style.\u003c/p\u003e\n\u003ch3 id=\"installing-and-running-swiftlint\"\u003e\n  Installing and Running SwiftLint\n  \u003ca href=\"#installing-and-running-swiftlint\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eTo install SwiftLint, I recommend using \u003ca href=\"https://brew.sh\"\u003eHomeBrew\u003c/a\u003e. Once you have HomeBrew installed, open Terminal and type \u003ccode\u003ebrew install swiftlint\u003c/code\u003e. You can update it any time using \u003ccode\u003ebrew upgrade swiftlint\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eYou can run SwiftLint directly from the Terminal. \u003ccode\u003ecd\u003c/code\u003e to the folder containing your Xcode project and type \u003ccode\u003eswiftlint\u003c/code\u003e. For a brand new iOS project, you will probably get a result similar to this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eLinting Swift files in current working directory\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eLinting \u0026#39;ViewController.swift\u0026#39; (1/2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eLinting \u0026#39;AppDelegate.swift\u0026#39; (2/2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eViewController.swift:23: warning: Vertical Whitespace Violation: Limit vertical whitespace to a single empty line. Currently 2. (vertical_whitespace)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eViewController.swift:25: warning: Trailing Newline Violation: Files should have a single trailing newline. (trailing_newline)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAppDelegate.swift:16: warning: Vertical Whitespace Violation: Limit vertical whitespace to a single empty line. Currently 2. (vertical_whitespace)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAppDelegate.swift:44: warning: Vertical Whitespace Violation: Limit vertical whitespace to a single empty line. Currently 2. (vertical_whitespace)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAppDelegate.swift:46: warning: Trailing Newline Violation: Files should have a single trailing newline. (trailing_newline)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAppDelegate.swift:17: warning: Line Length Violation: Line should be 120 characters or less: currently 144 characters (line_length)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAppDelegate.swift:23: error: Line Length Violation: Line should be 120 characters or less: currently 285 characters (line_length)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAppDelegate.swift:24: warning: Line Length Violation: Line should be 120 characters or less: currently 159 characters (line_length)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAppDelegate.swift:28: error: Line Length Violation: Line should be 120 characters or less: currently 218 characters (line_length)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAppDelegate.swift:29: warning: Line Length Violation: Line should be 120 characters or less: currently 141 characters (line_length)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAppDelegate.swift:33: warning: Line Length Violation: Line should be 120 characters or less: currently 155 characters (line_length)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAppDelegate.swift:37: warning: Line Length Violation: Line should be 120 characters or less: currently 194 characters (line_length)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAppDelegate.swift:41: warning: Line Length Violation: Line should be 120 characters or less: currently 128 characters (line_length)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eDone linting! Found 13 violations, 2 serious in 2 files.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cem\u003eI have removed the full path that will be listed for each file just to make this fit better.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThese reports show the file and line number, whether this is an error or a warning, a description of the error and the name of the SwiftLint rule that caused the warning or error.\u003c/p\u003e\n\u003cp\u003eYou could now go through and fix each of these but there are 2 solutions to make things easier:\nTry entering this in the Terminal window: \u003ccode\u003eswiftlint autocorrect\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCorrecting Swift files in current working directory\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCorrecting \u0026#39;ViewController.swift\u0026#39; (1/2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCorrecting \u0026#39;AppDelegate.swift\u0026#39; (2/2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eViewController.swift:22:1 Corrected Vertical Whitespace\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eViewController.swift:23 Corrected Trailing Newline\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAppDelegate.swift:15:1 Corrected Vertical Whitespace\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAppDelegate.swift:43:1 Corrected Vertical Whitespace\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAppDelegate.swift:43 Corrected Trailing Newline\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eDone correcting 2 files!\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd now if you run \u003ccode\u003eswiftlint\u003c/code\u003e again you will only get \u003ccode\u003eDone linting! Found 8 violations, 2 serious in 2 files.\u003c/code\u003e and all the remaining issues are for \u003ccode\u003eLine Length Violation\u003c/code\u003e This shows that autocorrect cannot fix everything and while it is good on spacing, it has trouble with more complex issues. But it is still worth doing as it can do a lot of the tedious fixes that creep into Xcode projects.\u003c/p\u003e\n\u003ch3 id=\"incorporating-swiftlint-into-xcode\"\u003e\n  Incorporating SwiftLint into Xcode\n  \u003ca href=\"#incorporating-swiftlint-into-xcode\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThe next thing to do to make your life easier is to add SwiftLint to your Xcode project so that it can run automatically whenever you do a build.\u003c/p\u003e\n\u003cp\u003eOpen your project in Xcode and select the project itself at the top of the Navigator on the left. Select the target for the main app and click the Build Phases tab along the top. Click the + button at the top left of the existing build phases and choose \u0026lsquo;New Run Script Phase\u0026rsquo;. Expand the newly added phase and paste in the following script:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e which swiftlint \u0026gt;/dev/null; \u003cspan style=\"color:#66d9ef\"\u003ethen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  swiftlint autocorrect\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  swiftlint\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  echo \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYour Xcode window should look something like this:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/images/SwiftLineRunScript.png\"\u003e\u003cimg src=\"/images/SwiftLineRunScript.png\" alt=\"SwiftLint Run Script phase\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eIf you think this looks like it is running SwiftLint twice, you are correct. The first time through it corrects what it can and the second pass reports all remaining issues. This is still faster than manually correcting the easy stuff. So now you will see any violations in the Xcode issue navigator when you do a build and you can click the entry to go directly to the code.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/IssuesNavigator.png\" alt=\"SwiftLint errors \u0026amp; warnings in Xcode issues navigator\"\u003e\u003c/p\u003e\n\u003ch3 id=\"configuring-swiftlint\"\u003e\n  Configuring SwiftLint\n  \u003ca href=\"#configuring-swiftlint\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eNow you are all set to SwiftLint all your code, but how do you decide what styles SwiftLint should enforce? Go back to Terminal, make the Terminal window as wide as possible and run \u003ccode\u003eswiftlint rules\u003c/code\u003e which will return a table like this (click to see full-sized image):\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/images/swiftlint_rules.png\"\u003e\u003cimg src=\"/images/swiftlint_rules.png\" alt=\"SwiftLint Rules\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eFor details on what each rule does, check out the entries in \u003ca href=\"https://github.com/realm/SwiftLint/blob/master/Rules.md\"\u003eRules.md\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eAs an example, look at the rules for line_length:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e+------------------------------------------+--------+-------------+------------------------+-------------+---------------------+\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e| identifier                               | opt-in | correctable | enabled in your config | kind        | configuration       |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e+------------------------------------------+--------+-------------+------------------------+-------------+---------------------+\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e| line_length                              | no     | no          | yes                    | metrics     | warning: 120, er... |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e+------------------------------------------+--------+-------------+------------------------+-------------+---------------------+\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd by making my Terminal window full width, I can see the configuration column contains \u003ccode\u003ewarning: 120, error: 200, ignores urls: false, ignores function declarations: false, ignores comments: false\u003c/code\u003e.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe rule name (identifier) is line_length - this is what appears in the issue navigator or Terminal.\u003c/li\u003e\n\u003cli\u003eIt is not an opt-in rule, meaning that it is enabled by default.\u003c/li\u003e\n\u003cli\u003eIt is not correctable by autocorrect.\u003c/li\u003e\n\u003cli\u003eIt is enabled in this configuration.\u003c/li\u003e\n\u003cli\u003eAnd then comes the configuration:\n\u003cul\u003e\n\u003cli\u003ea line of more than 120 characters will generate a warning\u003c/li\u003e\n\u003cli\u003ea line with more than 200 characters will generate an error and stop the build\u003c/li\u003e\n\u003cli\u003ethis rule will not ignore URLs, function declarations or comments\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo set your own configurations, you need to create a \u003ccode\u003e.swiftlint.yml\u003c/code\u003e file in the same folder as your Xcode project. The leading period makes the file invisible, so you will need to create and edit it using Terminal.\u003c/p\u003e\n\u003cp\u003eIn the Terminal, \u003ccode\u003ecd\u003c/code\u003e to the folder containing your Xcode project file and run \u003ccode\u003etouch .swiftlint.yml\u003c/code\u003e to create the invisible file. You can edit the file in Terminal using \u003ccode\u003enano\u003c/code\u003e, \u003ccode\u003evim\u003c/code\u003e or whatever you prefer, but you can also open it in any text editor. I prefer to use Atom so I open the file by running this command: \u003ccode\u003eatom .swiftlint.yml\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe SwiftLint ReadMe has a section about \u003ca href=\"https://github.com/realm/SwiftLint#configuration\"\u003econfiguration\u003c/a\u003e which shows the format and the various general headings you can use, as well as how to configure an individual rule.\u003c/p\u003e\n\u003cp\u003eHere is my .swiftlint.yml file:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yml\" data-lang=\"yml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003edisabled_rules\u003c/span\u003e: \u003cspan style=\"color:#75715e\"\u003e# rule identifiers to exclude from running\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eincluded\u003c/span\u003e: \u003cspan style=\"color:#75715e\"\u003e# paths to include during linting. `--path` is ignored if present. takes precendence over `excluded`.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eexcluded\u003c/span\u003e: \u003cspan style=\"color:#75715e\"\u003e# paths to ignore during linting. overridden by `included`.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#ae81ff\"\u003eCarthage\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#ae81ff\"\u003ePods\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eopt_in_rules\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#ae81ff\"\u003eclosure_end_indentation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#ae81ff\"\u003eclosure_spacing\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#ae81ff\"\u003econtains_over_first_not_nil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#ae81ff\"\u003eempty_count\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#ae81ff\"\u003eexplicit_init\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#ae81ff\"\u003efatal_error_message\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#ae81ff\"\u003eforce_unwrapping\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#ae81ff\"\u003eliteral_expression_end_indentation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#ae81ff\"\u003emultiline_arguments\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#ae81ff\"\u003emultiline_parameters\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#ae81ff\"\u003eoperator_usage_whitespace\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#ae81ff\"\u003eoverridden_super_call\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#ae81ff\"\u003eprivate_outlet\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#ae81ff\"\u003eprohibited_super_call\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#ae81ff\"\u003etrailing_closure\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#ae81ff\"\u003eunneeded_parentheses_in_closure_argument\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efunction_body_length\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#ae81ff\"\u003e60\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# warning\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# error\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eline_length\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#ae81ff\"\u003e150\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# warning\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  - \u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e# error\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003ecyclomatic_complexity\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003eignores_case_statements\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eNo rules are disabled by default.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eincluded\u003c/code\u003e is blank which means it checks every folder\u0026hellip;\u003c/li\u003e\n\u003cli\u003e\u0026hellip; except for the ones listed in the \u003ccode\u003eexcluded\u003c/code\u003e section.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eopt-in-rules\u003c/code\u003e: I went through the list of rules with \u003ccode\u003eopt-in\u003c/code\u003e equal to \u003ccode\u003eyes\u003c/code\u003e and enabled all I thought useful.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efunction_body_length\u003c/code\u003e - the default warning length is 40 but I allow myself 60 as that fits on my screen so I can always see the entire function without scrolling.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eline_length\u003c/code\u003e - with a bigger screen, I lengthen both the warning and error lengths.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecyclomatic_complexity\u003c/code\u003e checks for functions that are getting so complex that the compiler might run into trouble. I have this on with the default warning \u0026amp; error limits, but I set it to ignore \u003ccode\u003ecase\u003c/code\u003e statements as they can often trigger this without really being too complex.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNow that my .swiftlint.yml file is edited, doing a build uses those settings and for a new iOS project, I am now down to 2 errors and 3 warnings, all due to long lines in AppDelegate.swift.\u003c/p\u003e\n\u003cp\u003eThe other main way to configure SwiftLint is by disabling specific rules in my code.\u003c/p\u003e\n\u003cp\u003eAs an example, I have an \u003ccode\u003eenum\u003c/code\u003e for direction:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eenum\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDirection\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e up, down, \u003cspan style=\"color:#66d9ef\"\u003eleft\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eright\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhen I build this, SwiftLint gives a warning:\n\u003ccode\u003eIdentifier Name Violation: Enum element name should be between 3 and 40 characters long: 'up' (identifier_name)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThis tells me that \u003ccode\u003eup\u003c/code\u003e is too short a word to use as an identifier according to the \u003ccode\u003eidentifier_name\u003c/code\u003e rule. In this case, \u003ccode\u003eup\u003c/code\u003e is the obvious identifier to use, so I want SwiftLint to let it pass. But I don\u0026rsquo;t want to check my configuration file, because I want it to catch other short identifier names.\u003c/p\u003e\n\u003cp\u003eThe solution is to add this comment to my code, before the \u003ccode\u003ecase\u003c/code\u003e line:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e// swiftlint:disable next identifier_name\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThis tells SwiftLint to ignore the next \u003ccode\u003eidentifier_name\u003c/code\u003e warning or error it sees and now my code builds without error.\u003c/p\u003e\n\u003cp\u003eRules can also be disabled or enabled by file. Check out the \u003ca href=\"https://github.com/realm/SwiftLint#disable-rules-in-code\"\u003eDisable rules in code\u003c/a\u003e section of the SwiftLint ReadMe for more details.\u003c/p\u003e\n\u003ch2 id=\"what-are-the-benefits\"\u003e\n  What are the benefits?\n  \u003ca href=\"#what-are-the-benefits\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eFor me, SwiftLint enforces a number of good habits:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFiles are kept relatively short.\u003c/li\u003e\n\u003cli\u003eFunctions are always small enough to fit on a single screen.\u003c/li\u003e\n\u003cli\u003eVariable names \u0026amp; function names cannot be too short and non-descriptive.\u003c/li\u003e\n\u003cli\u003eBraces, indentation and white-space are always consistent.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAnd sometimes the warnings make me think of a better way to do things.\u003c/p\u003e"
    },
    {
        "title" : "Icon Builder 5",
        "date_published" : "2018-02-18T10:19:18+10:00",
        "date_modified" : "2018-02-18T10:19:18+10:00",
        "id" : "https://troz.net/post/2018/icon-builder-5/",
        "url" : "https://troz.net/post/2018/icon-builder-5/",
        "content_html" : "\u003cp\u003e\u003ca href=\"/icon-builder/\"\u003eIcon Builder 5.0\u003c/a\u003e is now available from the \u003ca href=\"http://itunes.apple.com/app/icon-builder/id552293482\"\u003eMac App Store\u003c/a\u003e. This is a complete re-write for better compatibility with Apple\u0026rsquo;s latest icon requirements. Read on to see what I have fixed and how\u0026hellip;\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"problems\"\u003e\n  Problems\n  \u003ca href=\"#problems\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eWhen I came to create a new iOS app recently, I found out that Icon Builder had fallen behind Apple\u0026rsquo;s requirements in three ways:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThe 1024 x 1024 marketing icon is now supposed to be inside the app\u0026rsquo;s icon set.\u003c/li\u003e\n\u003cli\u003eIcon files must have their color profile set to sRGB (P3 is also valid for iOS apps).\u003c/li\u003e\n\u003cli\u003eiOS icon files must have no transparent pixels and the alpha channel must be removed from the files.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWhen I set to work fixing these problems I soon ran into issues with the existing version of Icon Builder which was created 6 years ago.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIt was written in Objective-C which I am increasingly finding difficult and un-safe to write.\u003c/li\u003e\n\u003cli\u003eThe app was written when I was very much a beginner in Mac apps and this is obvious from the code\u0026hellip;\u003c/li\u003e\n\u003cli\u003eThere was a lot of legacy code left over from previous changes and extensions.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSo I decided that the most interesting thing to do would be to start almost from scratch and re-write the app in Swift using better techniques.\u003c/p\u003e\n\u003ch2 id=\"the-re-write\"\u003e\n  The Re-write\n  \u003ca href=\"#the-re-write\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eNow instead of the Massive View Controller, I have a larger set of small files, each with their own responsibility. Enums and structs dictate the various requirements for the different devices or app types. Other structs deal with creating the images, the folder management and writing out the files. An NSImage extension handles the resizing and reformatting of the images. This is now an app that I would not be ashamed to show anyone, except perhaps for the need to add more unit tests.\u003c/p\u003e\n\u003ch2 id=\"adding-a-color-profile\"\u003e\n  Adding a color profile\n  \u003ca href=\"#adding-a-color-profile\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eBut then we get to the new features needed. Adding the 1024x1024 icon to the app icon set was easy, especially after the re-factoring. But what about the color profile?\u003c/p\u003e\n\u003cp\u003eThis was not as easy as I expected - there is no built in command to apply a profile but here is the solution that I finally found:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eextension\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNSImage\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econvertImageTo_sRGB\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003ethrows\u003c/span\u003e -\u0026gt; Data {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eguard\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e colorSpace = CGColorSpace(name: CGColorSpace.sRGB),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e cgi = \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.cgImage(forProposedRect: \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                 context: \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                 hints: \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                  \u003cspan style=\"color:#66d9ef\"\u003ethrow\u003c/span\u003e ImageError.cantMakeCgImage\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e ci = CIImage(cgImage: cgi)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eguard\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e pngData = CIContext().pngRepresentation(of: ci,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                                        format: kCIFormatRGBA8,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                                        colorSpace: colorSpace) \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#66d9ef\"\u003ethrow\u003c/span\u003e ImageError.cantConvertToPng\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e pngData\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eThis takes the NSImage and converts it to a CGImage, first checking that the appropriate color space exists.\u003c/li\u003e\n\u003cli\u003eThen it uses the Core Graphics CGImage to create a Core Image CIImage.\u003c/li\u003e\n\u003cli\u003eThere is a new API in macOS 10.13 to extract the png data from a CIImage while assigning a color profile.\u003c/li\u003e\n\u003cli\u003eThis Data can then be written directly to a file and there you have a PNG with an attached color profile.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"transparency\"\u003e\n  Transparency\n  \u003ca href=\"#transparency\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eNow problems 1 \u0026amp; 2 have been solved. Problem 3 was the most difficult. It turned out to be a two-part problem because an image file can have no transparent pixels but still have an alpha channel in the file data.\u003c/p\u003e\n\u003cp\u003eAt first, I thought maybe I could just circumvent the whole problem by converting the images to JPEGs which have no transparency or alpha channel. Using the code above, I just changed it to getting the \u003ccode\u003ejpegRepresentation\u003c/code\u003e instead and saving with a .jpg file extension.\u003c/p\u003e\n\u003cp\u003eWhile this solved the alpha channel problem, the transparent parts of the icon just went black which was a not a good look.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Transparent-Jpeg.png\" alt=\"Transparent image converted to JPEG\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eFor anyone horrified at my use of force-unwrapping, I never do this in a production app but in a playground, it makes the code shorter and it doesn\u0026rsquo;t really matter if I get a crash there.\u003c/em\u003e\u003c/p\u003e\n\u003ch3 id=\"converting-transparent-pixels-to-white\"\u003e\n  Converting transparent pixels to white\n  \u003ca href=\"#converting-transparent-pixels-to-white\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eSo the first step must be to set the transparent parts of the image to another color. Searching for solutions online, most of the ones I came up with were very slow (processing each pixel) or so complicated that I didn\u0026rsquo;t understand them, and I hate just copy-pasting code that I don\u0026rsquo;t understand at all.\u003c/p\u003e\n\u003cp\u003eBut eventually I found something that I morphed into this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eextension\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNSImage\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emakeAlphaWhite\u003c/span\u003e() -\u0026gt; NSImage {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eguard\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e imageData = \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.tiffRepresentation,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e imageRep = NSBitmapImageRep(data: imageData),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e jpegData = imageRep.representation(using: .jpeg, properties: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                NSBitmapImageRep.PropertyKey.compressionFactor: NSNumber(value: \u003cspan style=\"color:#ae81ff\"\u003e1.0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                ]),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e jpegImage = NSImage(data: jpegData) \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e image\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e jpegImage\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIt used basically the same trick of converting the image into a JPEG but doing it this way via \u003ccode\u003eNSBitmapImageRep\u003c/code\u003e turned the transparent pixels white instead of black. And as you can see, this gave a much better looking image:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/MakeAlphaWhite.png\" alt=\"Transparent portions converted to white\"\u003e\u003c/p\u003e\n\u003cp\u003eNow I was able to continue with my plans to have JPEGs rule the world! This worked really well in my early tests but then I came to try a Stickers app and the icons didn’t work. I couldn\u0026rsquo;t even drag them in manually! Back to the Apple docs and I see that icons must be PNGs.\u003c/p\u003e\n\u003cp\u003eWhen I changed the transparent pixels to white, added the color space and then saved the PNG data, I got an image that looked correct but the file still contained an alpha channel. So I had to come up with a method that re-wrote the PNG data in such a way that it never contained any alpha data at all.\u003c/p\u003e\n\u003ch3 id=\"removing-the-alpha-channel\"\u003e\n  Removing the alpha channel\n  \u003ca href=\"#removing-the-alpha-channel\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eGraphics experts are probably groaning aloud by now, but I did eventually arrive at a solution, however hacky:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eextension\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNSImage\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econvertImageTo_sRGB_noAlpha\u003c/span\u003e() \u003cspan style=\"color:#66d9ef\"\u003ethrows\u003c/span\u003e -\u0026gt; Data {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eguard\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e colorSpace = CGColorSpace(name: CGColorSpace.sRGB),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e cgi = \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.cgImage(forProposedRect: \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                   context: \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                   hints: \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                    \u003cspan style=\"color:#66d9ef\"\u003ethrow\u003c/span\u003e ImageError.cantMakeCgImage\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e ci = CIImage(cgImage: cgi)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eguard\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e jpgData = CIContext().jpegRepresentation(of: ci,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                                           colorSpace: colorSpace) \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ethrow\u003c/span\u003e ImageError.cantConvertToJpg\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eguard\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e jpegImage = NSImage(data: jpgData) \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ethrow\u003c/span\u003e ImageError.cantConvertToJpgImage\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e pngData = \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e jpegImage.convertImageTo_sRGB()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e pngData\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eTake the image \u003cstrong\u003eafter\u003c/strong\u003e changing the transparent pixels to white.\u003c/li\u003e\n\u003cli\u003eConvert it to JPEG data with the required color space.\u003c/li\u003e\n\u003cli\u003eConvert the JPEG data back to an image - this will contain \u003cstrong\u003eNO\u003c/strong\u003e alpha data.\u003c/li\u003e\n\u003cli\u003eUse the original routine to convert this JPEG into PNG data with the correct color space.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRunning this in the playground looks like this:\n\u003cimg src=\"/images/TransparentPng.png\" alt=\"Creating non-transparent PNG in playground\"\u003e\u003c/p\u003e\n\u003cp\u003eAnd as you can see from the file info, it results in a file with the correctly assigned color profile and no alpha channel:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/FileInfo.png\" alt=\"Final result file info\"\u003e\u003c/p\u003e\n\u003cp\u003eThe double shuffle sounds time-consuming and in-efficient but it really doesn\u0026rsquo;t take long. In my tests, by far the longest part of creating an icon set is opening the file dialog.\u003c/p\u003e\n\u003ch2 id=\"future-plans\"\u003e\n  Future plans\n  \u003ca href=\"#future-plans\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eAdd more unit tests.\u003c/li\u003e\n\u003cli\u003eWork out how to replace the transparent pixels with a selected color.\u003c/li\u003e\n\u003cli\u003eOffer better cropping and image positioning options.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"references\"\u003e\n  References\n  \u003ca href=\"#references\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eFor resizing and cropping images, I use \u003ca href=\"https://mattgemmell.com/imagecrop-source-code/\"\u003eMatt Gemmell\u0026rsquo;s NSImage+MGCropExtensions\u003c/a\u003e and for further reading, I recommend Apple\u0026rsquo;s Human Interface Guidelines concerning app icons for \u003ca href=\"https://developer.apple.com/ios/human-interface-guidelines/icons-and-images/app-icon/\"\u003eiOS\u003c/a\u003e and \u003ca href=\"https://developer.apple.com/macos/human-interface-guidelines/icons-and-images/app-icon/\"\u003emacOS\u003c/a\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNote: here is Australia we use the spelling \u003cstrong\u003ecolour\u003c/strong\u003e but for consistency with the code samples, I have used \u003cstrong\u003ecolor\u003c/strong\u003e throughout the text.\u003c/p\u003e\n\u003c/blockquote\u003e"
    },
    {
        "title" : "NCSS 2018",
        "date_published" : "2018-01-05T11:33:35+10:00",
        "date_modified" : "2018-01-05T11:33:35+10:00",
        "id" : "https://troz.net/ncss2018/",
        "url" : "https://troz.net/ncss2018/",
        "content_html" : "\u003cp\u003eI gave a Masterclass on Swift at the NCSS Summer School 2018 in the University of Sydney on 9th January 2018. This post contains useful links for use in relation to the material covered during my class.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"online-sandboxes\"\u003e\n  Online Sandboxes\n  \u003ca href=\"#online-sandboxes\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://eval.weheartswift.com/eval/playground/swift-sandbox\"\u003eWe ❤️ Swift Sandbox\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://swiftlang.ng.bluemix.net/#/repl\"\u003eIBM Swift Sandbox\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"resources\"\u003e\n  Resources\n  \u003ca href=\"#resources\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://gist.github.com/trozware/bc582b9a49feb7bbd3adce8ea049c9d3\"\u003eGist of Code Samples\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/trozware/ncss2018/blob/master/Presentation.pdf\"\u003eSlides from Presentation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"contact-details\"\u003e\n  Contact Details\n  \u003ca href=\"#contact-details\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eEmail: \u003ca href=\"mailto:sarah@troz.net?subject=NCSS%202018\"\u003esarah@troz.net\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eTwitter: \u003ca href=\"https://twitter.com/trozware\"\u003e@trozware\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"useful-links\"\u003e\n  Useful Links\n  \u003ca href=\"#useful-links\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://itunes.apple.com/au/book/swift-programming-language/id881256329?mt=11\"\u003eThe Swift Programming Language\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://swift.org\"\u003eSwift.org\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://www.raywenderlich.com/132258/top-5-ios-swift-newsletters\"\u003eNewsletters\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://www.raywenderlich.com/category/swift\"\u003eTutorials\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e"
    },
    {
        "title" : "Apps",
        "date_published" : "2017-12-22T17:05:58+10:00",
        "date_modified" : "2017-12-22T17:05:58+10:00",
        "id" : "https://troz.net/apps/",
        "url" : "https://troz.net/apps/",
        "content_html" : ""
    },
    {
        "title" : "Mark Time",
        "date_published" : "2017-12-12T09:14:07+10:00",
        "date_modified" : "2017-12-12T09:14:07+10:00",
        "id" : "https://troz.net/post/2017/marktime/",
        "url" : "https://troz.net/post/2017/marktime/",
        "content_html" : "\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003e\u003ca href=\"https://itunes.apple.com/us/app/mark-time/id1305580742?mt=8\"\u003eMark Time\u003c/a\u003e is an application for Celestial Navigation that solves the\nproblem of how to take an accurate time reading to go with each sextant\nsighting. Here is how it was developed\u0026hellip;\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eA day in the life of a software developer - \u0026ldquo;it would be great if there was an\napp that did\u0026hellip;\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eOne of the family is learning celestial navigation and was struggling with the\nproblem that you either need a partner or more than 2 hands. The key factor is\nthat you need to record the exact time at the moment when you take your\nsighting. And this time has to be in UTC to make your subsequent calculations\nwork.\u003c/p\u003e\n\u003cp\u003eSince this is a very simple app, I decided it would be fun to describe the\ndevelopment process from first specifications to release in the App Store.\u003c/p\u003e\n\u003ch3 id=\"the-basic-specs\"\u003e\n  The Basic Specs\n  \u003ca href=\"#the-basic-specs\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003etap anywhere on the screen to record the time\u003c/li\u003e\n\u003cli\u003econvert the time to Universal Time (UT)\u003c/li\u003e\n\u003cli\u003edisplay that time in a specific format: DD:HH:MM:SS\u003c/li\u003e\n\u003cli\u003estore the last 5 tap times\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eA \u003ccode\u003eUITapGestureRecognizer\u003c/code\u003e over the entire view solved the first requirement.\nThe native \u003ccode\u003eDate\u003c/code\u003e object handles time zone conversions perfectly, and then it\nwas a matter of configuring a \u003ccode\u003eDateFormatter\u003c/code\u003e with a custom format string to\nprovide the required date display.\u003c/p\u003e\n\u003cp\u003eThe last 5 times are stored in \u003ccode\u003eUserDefaults\u003c/code\u003e and displayed in reverse order so\nthe most recent is always at the top.\u003c/p\u003e\n\u003ch3 id=\"ui-considerations\"\u003e\n  UI considerations\n  \u003ca href=\"#ui-considerations\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003ecolour scheme must work in bright sunlight\u003c/li\u003e\n\u003cli\u003etext should use dynamic sizing so it works if people adjust the text size on\ntheir iPhones\u003c/li\u003e\n\u003cli\u003ethe UI elements must be out of the way of the new iPhone X system gestures.\u003c/li\u003e\n\u003cli\u003ewhile it will most likely be used on iPhones, allow for iPads as well\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI had done extensive tests of colour schemes when developing my golf scoring app\n\u003ca href=\"/19th-hole/\"\u003e19th Hole\u003c/a\u003e, so I already had the answer to the colours question: dark grey\nbackground with white text.\u003c/p\u003e\n\u003cp\u003eAllowing for dynamic type should have been easy - choose a font style e.g. body,\nheadline, title 1 and set it to adjust automatically. But with a display that is\nmainly numeric, the display looked terrible because the numbers in the default\nSan Francisco are non-proportional. So I switched to Helvetica Neue and watched\nfor dynamic font size changes manually.\u003c/p\u003e\n\u003cp\u003eThe iPhone X should be fine since I used the new safe area layout guides.\u003c/p\u003e\n\u003cp\u003eFor iPad, I didn\u0026rsquo;t make a lot of UI changes since I don\u0026rsquo;t expect it to be used\nmuch, but the display is bigger and probably easier to read.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/MarkTime1.png\" alt=\"Mark Time\"\u003e\u003c/p\u003e\n\u003ch3 id=\"refinements\"\u003e\n  Refinements\n  \u003ca href=\"#refinements\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eAs always, once the first few iterations have been through the testing process,\nthere were a few things that needed changing and then feature creep set in\u0026hellip;\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003echange the date format to be more readable\u003c/li\u003e\n\u003cli\u003echange the basic tap gesture so that it triggers on tap down, not tap up\u003c/li\u003e\n\u003cli\u003eadd a button to clear all the stored data\u003c/li\u003e\n\u003cli\u003edisplay the current time in UTC and in the same format\u003c/li\u003e\n\u003cli\u003echeat mode - record latitude and longitude for each time so the calculations\ncan be checked\u003c/li\u003e\n\u003cli\u003echange the format for showing the latitude and longitude\u003c/li\u003e\n\u003cli\u003esound \u0026amp; haptics to provide feedback\u003c/li\u003e\n\u003cli\u003esettings\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe date format was DD:HH:MM:SS so for 12th December at 1:01:46 pm, this would\nshow 12:13:01:46 which we decided was a bit confusing. One tended to assume the\nfirst section was actually the hours. Under the new scheme, that same date\ndisplays as 12d 13h 01m 46.654s. The extra precision on the seconds was to show\nthat the time really was changing if you tapped multiple times quickly.\u003c/p\u003e\n\u003cp\u003eTo make the time record immediately, I removed the \u003ccode\u003eUITapGestureRecognizer\u003c/code\u003e and\nplaced \u003ccode\u003eUIButtons\u003c/code\u003e covering all the relevant active areas. They respond on Touch\nDown for a much faster reaction.\u003c/p\u003e\n\u003cp\u003eUsually, I make a separate View Controller for preferences. This time, because\nthe app needed access to the standard Settings app for Location services, I\ndecided to add the app\u0026rsquo;s preferences to the app\u0026rsquo;s page in the Settings app. This\nworked really well, and made the app itself smaller and simpler.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/MarkTime3.png\" alt=\"Mark Time\"\u003e\u003c/p\u003e\n\u003cp\u003eIn cheat mode, the location is recorded at every tap and then the info button\nbeside each time shows the details. This needed to handle the permissions\nrequired for accessing the user\u0026rsquo;s location. The latitude and longitude are shown\nin decimal format and at first, I also showed them in DMS (degrees, minutes,\nseconds) format. I found out that for navigation calculations, they prefer to\nsee degrees and decimal minutes, no seconds. And rather oddly, this is displayed\nsomething like this: 153° 22\u0026rsquo;.84 E\u003c/p\u003e\n\u003cp\u003eSounds and haptics were added, configurable through Settings. The sound was a\nnice loud double-beep designed to be clearly audible to tell you when you had\nrecorded a time.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/MarkTime2.png\" alt=\"Mark Time\"\u003e\u003c/p\u003e\n\u003ch3 id=\"release\"\u003e\n  Release\n  \u003ca href=\"#release\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eAfter numerous rounds of TestFlight, I was ready to release. The app was\nsubmitted to iTunes Connect and ready for review on Dec 9, 2017 at 7:36 PM. It\nmoved into review on Dec 11, 2017 at 8:07 AM and was ready for sale on Dec 11,\n2017 at 10:19 AM. So less than 39 hours from start to finish of the review\nprocess for a new app - things have certainly changed!\u003c/p\u003e\n\u003cp\u003eThe app is free - you can get it from the \u003ca href=\"https://itunes.apple.com/us/app/mark-time/id1305580742?mt=8\"\u003eiTunes App Store\u003c/a\u003e.\u003c/p\u003e"
    },
    {
        "title" : "Moving to Hugo",
        "date_published" : "2017-11-29T17:42:57+10:00",
        "date_modified" : "2017-11-29T17:42:57+10:00",
        "id" : "https://troz.net/post/2017/moving-to-hugo/",
        "url" : "https://troz.net/post/2017/moving-to-hugo/",
        "content_html" : "\u003cp\u003eYesterday, I came to update my blog: I had a new post in draft form and I wanted\nto update the Swift code to version 4. However installing High Sierra had\nremoved \u003ca href=\"https://jekyllrb.com\" title=\"Jekyll\"\u003eJekyll\u003c/a\u003e which is the site generator that I had been using. I\nre-installed Jekyll but found that it had been updated from version 2 to version\n3.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"jekyll-problems\"\u003e\n  Jekyll Problems\n  \u003ca href=\"#jekyll-problems\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eThen my problems started: missing dependencies due to the basic Jekyll install\nno longer including certain features, and then syntax errors due to changes in\nthe way things are done, particularly to do with pagination.\u003c/p\u003e\n\u003cp\u003eI tried to fix this myself, then thought that maybe the theme I was using had\nalready solved these issues so I tried re-installing that. It wanted to add\nabout 25 more gems and then failed to install - sigh - spend some time rolling\nthat back\u0026hellip;\u003c/p\u003e\n\u003cp\u003eAt this point I decided that if Jekyll was going to cause me a lot of trouble,\nit might be worth looking at an alternative.\u003c/p\u003e\n\u003cp\u003eMy main criteria were the ability to import my Jekyll site and the ability to\nhost on \u003ca href=\"https://pages.github.com/\" title=\"GitHub Pages\"\u003eGitHub Pages\u003c/a\u003e. After checking out the options, I decided to have a\nlook at \u003ca href=\"https://gohugo.io\" title=\"Hugo\"\u003eHugo\u003c/a\u003e.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"moving-to-hugo\"\u003e\n  Moving to Hugo\n  \u003ca href=\"#moving-to-hugo\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eOne of the most lauded features of Hugo is speed. I had found with Jekyll that\nwhen I saved an edited page, it took about 5 seconds before the edits could be\nreloaded into the browser. Hugo is supposedly fast and does auto reloads.\u003c/p\u003e\n\u003cp\u003eFollowing the \u003ca href=\"https://gohugo.io/getting-started/quick-start/\" title=\"Hugo Quick Start\"\u003eQuick Start\u003c/a\u003e guide, I installed Hugo. Importing my Jekyll site\nworked easily and so fast I wasn\u0026rsquo;t sure anything had happened, transferring my\nposts to \u003ccode\u003econtents/posts\u003c/code\u003e and my other files (status pages, images etc.) to\n\u003ccode\u003estatic\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThen the main exercise appeared to be choosing a theme which would provide not\nonly the visuals but the capabilities of the site.\u003c/p\u003e\n\u003cp\u003eSo I drew up a list of demands for any theme I chose:\u003c/p\u003e\n\u003ch3 id=\"must-have-features\"\u003e\n  Must Have Features\n  \u003ca href=\"#must-have-features\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eResponsive\u003c/li\u003e\n\u003cli\u003eBlog style:\n\u003cul\u003e\n\u003cli\u003efront page with recent posts\u003c/li\u003e\n\u003cli\u003etags\u003c/li\u003e\n\u003cli\u003earchive page\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eWritten using Markdown\u003c/li\u003e\n\u003cli\u003eStatic pages for apps listing, about, contact etc.\u003c/li\u003e\n\u003cli\u003eSyntax highlighting\u003c/li\u003e\n\u003cli\u003eSocial links\u003c/li\u003e\n\u003cli\u003eGoogle Analytics\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"would-be-nice-features\"\u003e\n  Would Be Nice Features\n  \u003ca href=\"#would-be-nice-features\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eDisqus commenting\u003c/li\u003e\n\u003cli\u003eTwitter cards\u003c/li\u003e\n\u003cli\u003eJSON Feed\u003c/li\u003e\n\u003cli\u003eSearching within the site\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe Hugo themes page \u003ca href=\"https://themes.gohugo.io\"\u003ehttps://themes.gohugo.io\u003c/a\u003e has themes listed by capabilities,\nbut no way that I could see to combine a selection of capabilities.\u003c/p\u003e\n\u003cp\u003eSome of the features like Google Analytics or Disqus comments, I could probably\nadd myself using templates from theme that did include them, if the template I\nchose did not.\u003c/p\u003e\n\u003cp\u003eConveniently, nearly all these seem to come with an exampleSite folder that\ncontains the configuration info.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"configuring-a-theme\"\u003e\n  Configuring a Theme\n  \u003ca href=\"#configuring-a-theme\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eAfter testing out several alternatives, I decided to go with \u003ca href=\"https://github.com/olOwOlo/hugo-theme-even\" title=\"Even\"\u003eEven\u003c/a\u003e - at\nleast to start with. I installed the theme and copied the contents of the\nexample \u003ccode\u003econfig.toml\u003c/code\u003e to my own \u003ccode\u003econfig.toml\u003c/code\u003e file and started configuring.\u003c/p\u003e\n\u003cp\u003eI wasn\u0026rsquo;t happy with some of the fonts, but soon worked out how to change the CSS\nin the theme and then re-build it to apply the changes. And I changed the theme\ncolour from the default red to \u0026ldquo;Cobalt Blue\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eMost of the other changes were done using the \u003ccode\u003econfig.toml\u003c/code\u003e file. I was able to\nset up menus, configure the social media links I wanted to show, set date\nformats, set the number of items to show per page and so on.\u003c/p\u003e\n\u003cp\u003eI had a couple of more static pages that I wanted to show, so I added their\nMarkdown files to the content folder.\u003c/p\u003e\n\u003cp\u003eOne nice feature which I had missed in Jekyll (or at least the way I had it set\nup) was the ability to separate blog posts from more static web pages. Each of\nmy apps has an information/support page that does not accept comments and\ndoesn\u0026rsquo;t need to be listed in the Archives. By moving these Markdown files from\n\u003ccode\u003econtents/posts\u003c/code\u003e to \u003ccode\u003econtents/pages\u003c/code\u003e, I was able to achieve this.\u003c/p\u003e\n\u003cp\u003eAdding Google Analytics and Disqus commenting was as easy as entering my IDs in\nthe relevant places in the \u003ccode\u003econfig.toml\u003c/code\u003e file.\u003c/p\u003e\n\u003cp\u003eI had to do some editing of my imported posts from Jekyll - mainly getting rid\nof references to \u003ccode\u003e{{ site.url }}\u003c/code\u003e so that images and internal links would work.\nAnd sometimes I just needed to re-save a file to make Hugo re-evaluate it (there\nis probably a command to force a complete re-build if I looked for it.)\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"working-out-the-structure\"\u003e\n  Working out the Structure\n  \u003ca href=\"#working-out-the-structure\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eOne thing that I was puzzled by was what templates the various pages are\ngenerated from.\u003c/p\u003e\n\u003cp\u003eThe main page is easy enough as the theme folder has a layouts folder with an\n\u003ccode\u003eindex.html\u003c/code\u003e file containing the templating. When a post is displayed, that\nlooks like it comes from \u003ccode\u003elayouts/posts/single.html\u003c/code\u003e while\n\u003ccode\u003elayouts/posts/summary.html\u003c/code\u003e contains the templating for each entry in the index\npage.\u003c/p\u003e\n\u003cp\u003eBut clicking on the Archives link in the me takes me to \u003ca href=\"https://troz.net/post/\"\u003ehttps://troz.net/post/\u003c/a\u003e\nand there is no \u003ccode\u003epost.html\u003c/code\u003e file in layouts. There is a \u003ccode\u003epost\u003c/code\u003e folder, but it\ncontains the \u003ccode\u003esingle.html\u003c/code\u003e \u0026amp; \u003ccode\u003esummary.html\u003c/code\u003e files described already.\u003c/p\u003e\n\u003cp\u003eDelving ever deeper, \u003ccode\u003elayouts/_default/section.html\u003c/code\u003e appears to contains the\nArchives page template. But how does that relate to the \u003ca href=\"https://troz.net/post/\"\u003ehttps://troz.net/post/\u003c/a\u003e\nlink? And the Tags template is in \u003ccode\u003elayouts/_default/terms.html\u003c/code\u003e but appears in\n\u003ca href=\"https://troz.net/tags/\"\u003ehttps://troz.net/tags/\u003c/a\u003e. Checking the Hugo documentation for creating a theme, I\nfind the information I need. Hugo has a selection of file paths that it checks\nfor such templates, and these file paths match some of those. So now I know\nwhere to go to customise further.\u003c/p\u003e\n\u003cp\u003eOne feature that I really like about the Even theme is the ability to have a\ntable of contents displayed beside each blog post if your page is wide enough.\nIt takes the headers in the post and uses them to make the table. I may need to\nadd or edit the headers in some posts, but I really like this feature.\u003c/p\u003e\n\u003cp\u003eAnd if you want a laugh, test out the 404 page - here is a \u003ca href=\"https://troz.net/bad-link/\" title=\"404\"\u003ebad link\u003c/a\u003e - which\ngenerates a random text emoji each time!\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"publishing\"\u003e\n  Publishing\n  \u003ca href=\"#publishing\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eI wanted to use my existing GitHub Pages setup, so I replaced the site files in\nmy local repository with the new Hugo site files. I generated the static site\nfiles using \u003ccode\u003ehugo\u003c/code\u003e in Terminal, then pushed the pages to GitHub. All I had to do\nthen was change the settings so that GitHub Pages knew my site was coming from\nthe \u003ccode\u003edocs\u003c/code\u003e folder and I was live with the new site.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"final-thoughts\"\u003e\n  Final Thoughts\n  \u003ca href=\"#final-thoughts\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eSo how am I going with my check list?\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eResponsive - ALMOST, not Hugo\u0026rsquo;s fault\u003c/li\u003e\n\u003cli\u003eBlog style - YES\u003c/li\u003e\n\u003cli\u003eWritten using Markdown - YES\u003c/li\u003e\n\u003cli\u003eStatic pages for apps listing, about, contact etc. - YES\u003c/li\u003e\n\u003cli\u003eSyntax highlighting - YES\u003c/li\u003e\n\u003cli\u003eSocial links - YES\u003c/li\u003e\n\u003cli\u003eGoogle Analytics - YES\u003c/li\u003e\n\u003cli\u003eDisqus commenting - YES\u003c/li\u003e\n\u003cli\u003eTwitter cards - NO\u003c/li\u003e\n\u003cli\u003eJSON Feed - NO\u003c/li\u003e\n\u003cli\u003eSearching within the site - NO\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe Hugo generated pages are all responsive and look great on my iPhone, but my\nold static page for listing my apps does not look good, so I need to re-design\nthat.\u003c/p\u003e\n\u003cp\u003eTwitter cards - I have found some articles on how to set that up, so it is\npossible, but I haven\u0026rsquo;t done it yet.\u003c/p\u003e\n\u003cp\u003eJSON Feed is not working. There are themes that apparently have this, but I\nhaven\u0026rsquo;t yet worked out how to implement it - hopefully later.\u003c/p\u003e\n\u003cp\u003eIn-site search - this was something I was able to get in my old WordPress site,\nbut not in Jekyll. There are Hugo themes listed that support search, but they\nseem to just give a link to Google or DuckDuckGo. Maybe this can be edited to\nrestrict it to the site, but I dislike using such searches, so I will not add a\nsearch unless it works internally. One theme I found uses \u003ca href=\"https://www.algolia.com\" title=\"Algolia\"\u003eAlgolia\u003c/a\u003e to search\nthe site, so I will investigate that.\u003c/p\u003e\n\u003cp\u003eOverall, I am impressed. The transition was relatively easy, especially\nconsidering that I didn\u0026rsquo;t take the time to learn anything about Hugo first, but\njust blundered in and tried to work it out on the fly.\u003c/p\u003e\n\u003cp\u003eThe speed of generating pages and the live reload while developing make Hugo a\npleasure to work with. Now all I have to do is write some interesting posts\u0026hellip;\u003c/p\u003e\n\u003cp\u003eAnd I want to tidy up the URLs, headers and tags for the older pages as well as\ninvestigating Twitter cards, search \u0026amp; JSON Feed.\u003c/p\u003e"
    },
    {
        "title" : "Contact",
        "date_published" : "2017-11-26T11:22:18+10:00",
        "date_modified" : "2017-11-26T11:22:18+10:00",
        "id" : "https://troz.net/contact/",
        "url" : "https://troz.net/contact/",
        "content_html" : ""
    },
    {
        "title" : "JSON Parsing in Swift 4",
        "date_published" : "2017-06-18T00:00:00Z",
        "date_modified" : "2017-06-18T00:00:00Z",
        "id" : "https://troz.net/post/2017/json-parsing-in-swift-4/",
        "url" : "https://troz.net/post/2017/json-parsing-in-swift-4/",
        "content_html" : "\u003cp\u003e\u003cstrong\u003eUpdated:\u003c/strong\u003e 3rd September 2017.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eChecked syntax using Xcode 9.0 beta 6.\u003c/li\u003e\n\u003cli\u003eAdded section on \u003ca href=\"#nulls\"\u003eallowing for nulls\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cp\u003eSince \u003cstrong\u003eJSON\u003c/strong\u003e has become the de facto standard for data transfers around the\ninternet, there has always been a lot of interest in Swift libraries to parse\nJSON into Swift classes or structs. Searching for \u0026ldquo;swift json library\u0026rdquo; on\n\u003ca href=\"https://github.com/search?q=swift+json+library\"\u003eGitHub\u003c/a\u003e discovers \u003c!-- raw HTML omitted --\u003e77\u003c!-- raw HTML omitted --\u003e 86 repositories. So why are there so many? And\nwhat has Swift 4 done to \u003cem\u003esherlock\u003c/em\u003e them all?\u003c/p\u003e\n\u003cp\u003eThe problem has always been converting loosely typed JSON to strictly typed\nSwift which involves a lot of type casting, checking, optionals etc. Swift has\nalways provided access to the Objective-C methods for converting JSON to and\nfrom NSData, NSDictionary and NSArray. (These are now called Data, Dictionary\nand Array, but those labels are so universal, that I sometimes feel a more\nspecific nomenclature would be useful. Have you tried doing a search for\n\u0026lsquo;Data\u0026rsquo;?)\u003c/p\u003e\n\u003cp\u003eFor sample data, I am using \u003ca href=\"https://jsonplaceholder.typicode.com/users\"\u003ehttps://jsonplaceholder.typicode.com/users\u003c/a\u003e which\nreturns 10 user objects in this format:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Leanne Graham\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;username\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Bret\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;email\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Sincere@april.biz\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;address\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;street\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Kulas Light\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;suite\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Apt. 556\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;city\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Gwenborough\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;zipcode\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;92998-3874\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;geo\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026#34;lat\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;-37.3159\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026#34;lng\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;81.1496\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;phone\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1-770-736-8031 x56442\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;website\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hildegard.org\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;company\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Romaguera-Crona\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;catchPhrase\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Multi-layered client-server neural-net\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;bs\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;harness real-time e-markets\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe goal will be to convert this to an instance of this matching Swift struct:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUser\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e id: Int\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e name: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e username: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e email: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e phone: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e website: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e address: Address\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e company: Company\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAddress\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e street: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e suite: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e city: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e zipcode: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e geo: Coordinates\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCoordinates\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e lat: Double\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e lng: Double\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCompany\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e name: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e catchPhrase: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e bs: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe first thing to note is that the Swift struct (and its embedded structs) use\nmultiple different types: Int, String, Double, Address, Coordinates, Company.\nThe JSON data only has strings and numbers and even then, some of the numbers\nare really strings - look at the lat \u0026amp; lng entries. So converting from JSON to a\nstruct and back again has always been problematic, but let\u0026rsquo;s give it a go using\nbuilt-in Swift 3 processing with no external libraries.\u003c/p\u003e\n\u003ch2 id=\"decoding-in-swift-3\"\u003e\n  Decoding in Swift 3\n  \u003ca href=\"#decoding-in-swift-3\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eYou can insert this into a playground or \u003ca href=\"https://github.com/trozware/json\"\u003edownload my playground\u003c/a\u003e and check\nout the Swift 3 JSON page:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eFoundation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e sampleDataAddress = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://jsonplaceholder.typicode.com/users\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e url = URL(string: sampleDataAddress)\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e jsonData = \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e! Data(contentsOf: url)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUser\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e id: Int\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e name: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e username: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e email: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e phone: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e website: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e address: Address\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e company: Company\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einit\u003c/span\u003e?(dict: [String: Any]) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eguard\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e id = dict[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e? Int,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e name = dict[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e? String,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e username = dict[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;username\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e? String,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e email = dict[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;email\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e? String,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e phone = dict[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;phone\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e? String,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e website = dict[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;website\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e? String,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e addressDict = dict[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;address\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e? [String: Any],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e address = Address(dict: addressDict),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e companyDict = dict[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;company\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e? [String: Any],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e company = Company(dict: companyDict)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.id = id\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.name = name\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.username = username\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.email = email\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.phone = phone\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.website = website\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.address = address\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.company = company\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAddress\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e street: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e suite: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e city: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e zipcode: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e geo: Coordinates\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003einit\u003c/span\u003e?(dict: [String: Any]) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eguard\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e street = dict[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;street\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e? String,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e suite = dict[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;suite\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e? String,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e city = dict[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;city\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e? String,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e zipcode = dict[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;zipcode\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e? String,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e geoDict = dict[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;geo\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e? [String: Any],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e geo = Coordinates(dict: geoDict) \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.street = street\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.suite = suite\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.city = city\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.zipcode = zipcode\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.geo = geo\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCoordinates\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e lat: Double\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e lng: Double\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003einit\u003c/span\u003e?(dict: [String: Any]) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eguard\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e latString = dict[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lat\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e? String,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e lat = Double(latString),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e lngString = dict[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lng\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e? String,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e lng = Double(lngString) \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.lat = lat\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.lng = lng\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCompany\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e name: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e catchPhrase: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e bs: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003einit\u003c/span\u003e?(dict: [String: Any]) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eguard\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e name = dict[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e? String,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e catchPhrase = dict[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;catchPhrase\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e? String,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e bs = dict[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;bs\u0026#34;\u003c/span\u003e] \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e? String \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.name = name\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.catchPhrase = catchPhrase\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.bs = bs\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e json = \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e? JSONSerialization.jsonObject(with: jsonData, options: []) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e jsonArray = json \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e? [[String: Any]] {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e users = jsonArray.flatMap {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            User(dict: $0)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        users.count\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        dump(users.first)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI don\u0026rsquo;t actually expect you to go through all this code in detail, but I\nincluded it here to make it obvious how verbose this method is.\u003c/p\u003e\n\u003cp\u003eThe first 3 lines get the data, and I have force-unwrapped the URL and the Data\nwhich I would not do in a production app but which is OK while testing in a\nplayground. Then there is a declaration of the Users struct with all its sub\nstructs. Each one has a failable init that tries to parse the JSON dictionary\nand returns nil if the data doesn\u0026rsquo;t match, by way of a lengthy set of guard\nstatements. The basic layout of each struct is the same but it is very verbose.\nAnd as an extra step, the lat and lng properties need to be converted from\nStrings to Doubles.\u003c/p\u003e\n\u003cp\u003eI have to confess that it took quite come time to get this right \u0026hellip; lots of\nguard statements to check that the data can be converted to the required types\nwhich meant that any typos produced an empty array. The sub-structs have to be\nextracted from the JSON as Dictionaries and then initialised by themselves.\u003c/p\u003e\n\u003ch2 id=\"decoding-in-swift-4\"\u003e\n  Decoding in Swift 4\n  \u003ca href=\"#decoding-in-swift-4\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eSo this works, and I get an array of Users objects. But it isn\u0026rsquo;t pretty and it\ntakes a lot of code to do the processing. So now I am going to move on to doing\nthis in Swift 4. I am using Xcode 9.0 beta 6 (9M214v) so if you have a later\nversion, you may need to adapt to any changes.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUser\u003c/span\u003e: Codable {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e id: Int\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e name: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e username: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e email: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e phone: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e website: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e address: Address\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e company: Company\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAddress\u003c/span\u003e: Codable {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e street: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e suite: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e city: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e zipcode: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e geo: Coordinates\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCoordinates\u003c/span\u003e: Codable {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e lat: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e lng: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCompany\u003c/span\u003e: Codable {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e name: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e catchPhrase: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e bs: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e jsonDecoder = JSONDecoder()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e users = \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e? jsonDecoder.decode(Array\u0026lt;User\u0026gt;.\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                    from: jsonData)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIgnoring the complexities of converting latitude and longitude to Doubles, I get\nvastly simpler code. I declare all the structs as conforming to the \u003ccode\u003eCodable\u003c/code\u003e\nprotocol and then I can remove all the init methods and just let \u003ccode\u003eJSONDecoder\u003c/code\u003e\ndo its magic. I just have to tell it what data type to expect - in this case an\nArray of Users. I don\u0026rsquo;t have to worry about the initial conversion of the JSON\ndata to a Dictionary or looping through the elements using flatMap.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eIn the playground, I used a do\u0026hellip;catch structure to check the result of the\ndecode function, but I have used try? here to keep the code short.\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id=\"changing-data-types\"\u003e\n  Changing data types\n  \u003ca href=\"#changing-data-types\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eThe lat \u0026amp; lng coordinates are stored in the JSON as Strings, but need to be\nconverted to Doubles for the Swift struct.\u003c/p\u003e\n\u003cp\u003eThis requires a custom init method for the Coordinates struct to do the\nconversion from String to Double.\u003c/p\u003e\n\u003cp\u003eSo here is the complete code for Swift 4 - again, if you don\u0026rsquo;t want to create\nyour own playground, you can \u003ca href=\"https://github.com/trozware/json\"\u003euse mine\u003c/a\u003e, this time looking at the Swift 4\nJSON page:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eFoundation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e sampleDataAddress = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://jsonplaceholder.typicode.com/users\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e url = URL(string: sampleDataAddress)\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e jsonData = \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e! Data(contentsOf: url)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUser\u003c/span\u003e: Codable {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e id: Int\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e name: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e username: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e email: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e phone: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e website: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e address: Address\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e company: Company\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAddress\u003c/span\u003e: Codable {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e street: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e suite: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e city: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e zipcode: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e geo: Coordinates\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCoordinates\u003c/span\u003e: Codable {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e lat: Double\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e lng: Double\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003einit\u003c/span\u003e(from decoder: Decoder) \u003cspan style=\"color:#66d9ef\"\u003ethrows\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e values = \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e decoder.container(keyedBy: CodingKeys.\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e latString = \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e values.decode(String.\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e, forKey: .lat)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e lngString = \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e values.decode(String.\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e, forKey: .lng)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                lat = Double(latString) ?? \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                lng = Double(lngString) ?? \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCompany\u003c/span\u003e: Codable {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e name: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e catchPhrase: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e bs: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e jsonDecoder = JSONDecoder()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e users = \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e? jsonDecoder.decode(Array\u0026lt;User\u0026gt;.\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e, from: jsonData)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eusers?.count\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edump(users?.first)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFor comparative purposes, I counted the lines of code in each, removing the\ncommon boiler plate of the top of each and the two lines for displaying the\nresults in the playground. I also removed the blank lines which I always use a\nlot in my code for readability but which are not relevant when comparing code\nefficiency:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eVersion\u003c/th\u003e\n\u003cth style=\"text-align:right\"\u003eLines\u003c/th\u003e\n\u003cth style=\"text-align:right\"\u003eLines if lat \u0026amp; lng are Strings\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eSwift 3\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003e95\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003e93\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSwift 4\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003e35\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003e28\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"encoding\"\u003e\n  Encoding\n  \u003ca href=\"#encoding\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eEncoding back to JSON is very similar. In the Swift 3 version, I would have\nwritten a method for each struct that created a Dictionary and then used\nJSONSerialization to convert the Dictionary back to JSON. This is very verbose\nand tedious to write so I am not going to bother to demonstrate it here.\u003c/p\u003e\n\u003cp\u003eBut in Swift 4, this is even easier than decoding. Add this code to the end of\nyour Swift 4 JSON playground or playground page:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e users = users {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e jsonEncoder = JSONEncoder()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    jsonEncoder.outputFormatting = .prettyPrinted\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e backToJson = \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e? jsonEncoder.encode(users) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e jsonString = String(data: backToJson, encoding: .utf8) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            print(jsonString)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003eJSONEncoder\u003c/code\u003e returns Data and I have converted that to a String for\nchecking. I set JSONEncoder\u0026rsquo;s outputFormatting property to .prettyPrinted get a\nmore readable String.\u003c/p\u003e\n\u003cp\u003eNotice how the encoded data is not quite the same as I received because the lat\n\u0026amp; lng properties are now Doubles. In a production app, if I needed to be able to\nconvert back to JSON, I probably would have left them as Strings so as to enable\ndata transfer in both directions. I would add computed properties to the struct\nto convert these Strings to Doubles as I needed them.\u003c/p\u003e\n\u003ch2 id=\"advanced-decoding\"\u003e\n  Advanced Decoding\n  \u003ca href=\"#advanced-decoding\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eNow that we have the basics, I want to look at three more features: changing\nproperty names, date handling and allowing for nulls.\u003c/p\u003e\n\u003ch2 id=\"changing-property-names\"\u003e\n  Changing Property Names\n  \u003ca href=\"#changing-property-names\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eIn these examples I used exactly the same names for the properties as were used\nin the JSON. In the Swift 3 version, it would have been easy to change the\nproperty names, since the data for each property was being extracted manually.\nIn Swift 4, if you want the decoder to change names, you have to tell it what\nyou want.\u003c/p\u003e\n\u003cp\u003eMake a new playground or playground page and replace the contents with this - or\ngo to the Swift 4 Extras page on \u003ca href=\"https://github.com/trozware/json\"\u003emy playground\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eFoundation\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e jsonString = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003ename1\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;: \u0026#34;\u003c/span\u003eJane\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003ename2\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;: \u0026#34;\u003c/span\u003eSmith\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e jsonData = jsonString.data(using: .utf8)\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePerson\u003c/span\u003e: Codable {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e firstName: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e lastName: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e jsonDecoder = JSONDecoder()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e person = \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e? jsonDecoder.decode(Person.\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e, from: jsonData)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edump(person)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis uses the new multi-line literals in Swift 4 to assemble the JSON string\nwhich is amazingly useful as it allows quotes to be embedded in the string\nwithout having to escape them. As you can see, the JSON property names are not\nvery helpful, so I want to change them in my Person struct. At the moment,\n\u003ccode\u003eperson\u003c/code\u003e is nil because I have not given the decoder any clues to help it\ntranslate the names. To do that, I have to add a CodingKeys enum to the Person\nstruct and it tells the decoder what names in the JSON match up to what\nproperties in the struct.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePerson\u003c/span\u003e: Codable {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e firstName: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e lastName: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eenum\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCodingKeys\u003c/span\u003e: String, CodingKey {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e firstName = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;name1\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e lastName = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;name2\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd that\u0026rsquo;s all I have to do. Now the JSON is correctly converted to a Person. As\nan exercise, use JSONEncoder to get back to JSON from the Person. You will see\nthat the JSON correctly names the elements using \u0026ldquo;name1\u0026rdquo; and \u0026ldquo;name2\u0026rdquo;.\u003c/p\u003e\n\u003ch2 id=\"date-handling\"\u003e\n  Date Handling\n  \u003ca href=\"#date-handling\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eNext let\u0026rsquo;s look at dates - add this code to the playground:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e jsonString2 = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003ename\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;: \u0026#34;\u003c/span\u003eMy New Project\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003ecreated\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;: \u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2017\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e06\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e18\u003c/span\u003eT06:\u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e25\u003c/span\u003eZ\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e jsonData2 = jsonString2.data(using: .utf8)\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eProject\u003c/span\u003e: Codable {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e name: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e created: Date\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e jsonDecoder2 = JSONDecoder()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e project = \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e? jsonDecoder2.decode(Project.\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e, from: jsonData2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edump(project)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhen this runs, \u003ccode\u003eproject\u003c/code\u003e is nil because the decoder has no idea how to get from\nthe String \u0026ldquo;2017-06-18T06:28:25Z\u0026rdquo; to a Date object. Add this line after creating\n\u003ccode\u003ejsonDecoder2\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ejsonDecoder2.dateDecodingStrategy = .iso8601\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow the date can be converted and an instance of the Project struct will be\ncreated.\u003c/p\u003e\n\u003cp\u003eAnd to get back to the JSON, converting the Date back to ISO8601 format:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e jsonEncoder = JSONEncoder()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ejsonEncoder.dateEncodingStrategy = .iso8601\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e backToJson = \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e? jsonEncoder.encode(project) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e jsonString = String(data: backToJson, encoding: .utf8) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(jsonString)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e\u003c/p\u003e\n\u003ch2 id=\"allowing-for-nulls\"\u003e\n  Allowing For Nulls\n  \u003ca href=\"#allowing-for-nulls\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eJSON data will often include \u003cstrong\u003enull\u003c/strong\u003e where there is no value for a particular\nproperty name. When using JSONDecoder or JSONEncoder, this can be allowed for by\nusing Optionals. If you are not clear about Optionals, have a look at my\nprevious article: \u003ca href=\"/post/2016-02-12-learning-swift-optionals/\"\u003eLearning Swift - Optionals\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe crucial step is to declare the properties of the Swift object as optionals\nif you think they could get a null value.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eRole\u003c/span\u003e: Codable {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e firstName: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e lastName: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e nickName: String?\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e jsonStringWithNulls = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e[\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e        \u0026#34;\u003c/span\u003efirstName\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;: \u0026#34;\u003c/span\u003eSally\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e        \u0026#34;\u003c/span\u003elastName\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;: \u0026#34;\u003c/span\u003eSparrow\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e        \u0026#34;\u003c/span\u003enickName\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;: null\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    },\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e        \u0026#34;\u003c/span\u003efirstName\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;: \u0026#34;\u003c/span\u003eDoctor\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e        \u0026#34;\u003c/span\u003elastName\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;: \u0026#34;\u003c/span\u003eWho\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e        \u0026#34;\u003c/span\u003enickName\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;: \u0026#34;\u003c/span\u003eThe Doctor\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e jsonDataWithNulls = jsonStringWithNulls.data(using: .utf8)\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e jsonDecoder3 = JSONDecoder()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e roles = \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e? jsonDecoder3.decode(Array\u0026lt;Role\u0026gt;.\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e, from: jsonDataWithNulls)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edump(roles)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn this example (which you can find in the Swift 4 Extras page on \u003ca href=\"https://github.com/trozware/json\"\u003emy\nplayground\u003c/a\u003e), I have declared a struct called Role with 3 String properties.\nThe 3rd String - nickName - is an Optional so it may be a String or it may be\nnil.\u003c/p\u003e\n\u003cp\u003eThe JSON contains 2 elements - one has a nickName value and the other has it as\nnull. Because the matching property in the Swift struct is an optional, this\nworks as expected and the nickName property for Sally Sparrow is decoded as nil.\nIf you remove the question mark to make nickName non-optional, the decoding will\nfail.\u003c/p\u003e\n\u003cp\u003eGoing back to JSON from a Swift object with optionals works much the same except\nthat it does not specifically mark items as null, it just leaves them out.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e jsonEncoder2 = JSONEncoder()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ejsonEncoder2.outputFormatting = .prettyPrinted\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e backToJsonWithNulls = \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e? jsonEncoder2.encode(roles) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e jsonString = String(data: backToJsonWithNulls, encoding: .utf8) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(jsonString)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"property-lists\"\u003e\n  Property Lists\n  \u003ca href=\"#property-lists\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eAs well as JSONDecoder and JSONEncoder, Swift 4 has introduced\nPropertyListDecoder and PropertyListEncoder, so let\u0026rsquo;s take a quick look at that.\u003c/p\u003e\n\u003cp\u003eAdd this to the bottom of the last playground as it uses the Project struct and\ndata:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e plistEncoder = PropertyListEncoder()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eplistEncoder.outputFormat = .xml\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e plist = \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e? plistEncoder.encode(project) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e plistString = String(data: plist, encoding: .utf8) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        print(plistString)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e plistDecoder = PropertyListDecoder()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e project2 = \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e? plistDecoder.decode(Project.\u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e, from: plist)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    dump(project2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI don\u0026rsquo;t see this is being quite as useful as the JSON Encoding \u0026amp; Decoding, but I\nmention it here for completeness.\u003c/p\u003e\n\u003ch2 id=\"codable\"\u003e\n  Codable\n  \u003ca href=\"#codable\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eIn all the Swift 4 examples above, I set the structs to conform to \u003ccode\u003eCodable\u003c/code\u003e.\nReading Apple\u0026rsquo;s docs, I see that \u003ccode\u003eCodable\u003c/code\u003e is actually a typealias referring to\n2 separate protocols:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Swift\" data-lang=\"Swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etypealias\u003c/span\u003e Codable = Decodable \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e Encodable\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIf you only need to convert data one way, it will be more efficient to set your\nstruct or class as confirming to only one of these protocols. For example, if\nyou download JSON data from an API but never need to send it back, just conform\nto Decodable to transform the JSON data into your data structure.\u003c/p\u003e\n\u003cp\u003eMuch more information can be found in the \u003ca href=\"https://developer.apple.com/documentation/swift/encoding_decoding_and_serialization\"\u003eApple documentation\u003c/a\u003e.\u003c/p\u003e"
    },
    {
        "title" : "Posting from my new iPad",
        "date_published" : "2017-06-17T00:00:00Z",
        "date_modified" : "2017-06-17T00:00:00Z",
        "id" : "https://troz.net/post/2017/posting-from-my-new-ipad/",
        "url" : "https://troz.net/post/2017/posting-from-my-new-ipad/",
        "content_html" : "\u003cp\u003eLast week I got a 10.5” iPad Pro. I have had an iPad ever since the original\nrelease, but I have to confess to mainly using it for content consumption rather\nthan creation. Since I am usually close to a Mac anyway, there didn’t seem a lot\nof point. But now that iOS 11 is really addressing the issue of making the iPad\na \u0026ldquo;pro\u0026rdquo; device, I decided to give it a try.\u003c/p\u003e\n\u003cp\u003eSo here I am, sitting in an armchair with my iPad on my lap, writing this post\nand working out the details as I go. Any typos are due to the cat trying to\ncompete with the iPad for space on my lap!\u003c/p\u003e\n\u003ch2 id=\"ipad\"\u003e\n  iPad\n  \u003ca href=\"#ipad\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eAs already mentioned, I have a new iPad Pro. I also have an Apple Pencil which I\nuse for taking notes. I do not have a keyboard, so I am using the on-screen\nkeyboard right now.\u003c/p\u003e\n\u003cp\u003eI don’t usually install beta versions of operating systems, but iOS 11 is a huge\npart of making the iPad more professional, so I have installed it. As you would\nexpect, there are a few issues (apps quitting, layout issues especially when\nrotating) but so far I am loving it.\u003c/p\u003e\n\u003ch2 id=\"writing\"\u003e\n  Writing\n  \u003ca href=\"#writing\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eMy site is published on \u003ca href=\"https://pages.github.com/\"\u003eGitHub Pages\u003c/a\u003e using \u003ca href=\"http://jekyllrb.com/\"\u003eJekyll\u003c/a\u003e with all the posts\nand pages written in Markdown. One key feature is that every post or page\nrequires a chunk of \u0026ldquo;front matter\u0026rdquo; that must be formatted correctly for the\nJekyll parser to interpret it and create the static content. After a bit of\nresearch, it looked like \u003ca href=\"http://omz-software.com/editorial/\"\u003eEditorial\u003c/a\u003e was going to be the best option for an\neditor app. I moved my site files to Dropbox, linked my Dropbox account to\nEditorial and I was ready to start writing.\u003c/p\u003e\n\u003cp\u003eI didn’t want to create the front matter manually for each post. On my Mac I\nhave a text expander snippet that handles that but copying from \u003ca href=\"http://mattgemmell.com/using-the-ipad-for-blogging-with-jekyll/\"\u003eMatt Gemell’s\npost\u003c/a\u003e on the topic, I created an Editorial workflow to create a new post. As\na side-note, Matt has a series of posts on using an iPad which I have found very\nuseful and inspirational.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Workflow.jpeg\" alt=\"Editorial workflow\"\u003e\u003c/p\u003e\n\u003cp\u003eText entry and editing is a task that I have always felt was too difficult in\niOS, particularly when it came to selecting text and moving the cursor. However\nthere are now several improvements. As with iOS 10, a two-fingered press on the\nkeyboard transforms it into a trackpad for moving the cursor. If you already\nhave text selected, this moves the selection handles. The new iOS 11 keyboard\nhas a really nice feature for entering non-alphabetic characters. The keys now\nshow a small grey character above the main character. Drag down on the key to\nmove the small character into the main key and type it. For example, drag down\non the h key to type (.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/keyboard-drag.png\" alt=\"Keyboard drag\"\u003e\u003c/p\u003e\n\u003cp\u003eEditorial has its own editing helpers. There is an additional toolbar above the\nkeyboard with a tab key as well as frequently used Markdown modifiers. And\nswiping across this toolbar moves the cursor. This is a much slower move than\nwhen using the keyboard as a trackpad so might be better for more precise\nmovements.\u003c/p\u003e\n\u003ch3 id=\"adding-links\"\u003e\n  Adding Links:\n  \u003ca href=\"#adding-links\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eI have referenced a few sites now, so I guess it is time to work out how to link\nto them. I always use Markdown’s referenced link method, with the links\ncollected at the foot of the document, so that is what I plan to do here. To set\ntext as a link, I selected it and used the Editorial toolbar to type an opening\nsquare bracket which surrounded the selection in square brackets. Then I moved\nthe cursor to after the closing bracket and typed another opening square\nbracket. This auto-closed and I was able to type a number which will be the\nreference.\u003c/p\u003e\n\u003cp\u003eNext step is to find the relevant URLs - drag \u0026amp; drop with multi-tasking to the\nrescue! Swipe up from the bottom of the screen to see the new Dock. This also\nmakes the keyboard disappear. Hold down on the Safari icon until you grab it,\nthen drag it up into the Editorial window. Now it is open as an overlay.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/safari-overlay.png\" alt=\"Safari as overlay\"\u003e\u003c/p\u003e\n\u003cp\u003eAt this point, I have several options:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSwiping from the left or right of the overlay window lets me position it to\nthe right or left of the screen, still as an overlay.\u003c/li\u003e\n\u003cli\u003eDragging from the bar at the top of the overlap allows me to convert to split\nscreen mode, and I can then drag the divider to adjust the ratios.\u003c/li\u003e\n\u003cli\u003eSwiping all the way to the right disappears the overlay, but swiping back from\nthe right edge returns it. Since I want to copy and paste some links, this\nlooks like the best option right now.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis swiping conflicts slightly with Editorial\u0026rsquo;s swiping from the side to see a\npreview. Swipe from off the edge for the overlap and from well inside the edge\nfor preview.\u003c/p\u003e\n\u003cp\u003eAnd here my plans come crashing down. I can drag from Safari\u0026rsquo;s address bar into\nthe Editorial document, but the drop doesn’t take. I guess I need an update to\nEditorial for this to work. But I can still use the old style copy and paste to\nget the links.\u003c/p\u003e\n\u003ch3 id=\"images\"\u003e\n  Images\n  \u003ca href=\"#images\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eSo now I have my links, but I want to insert a few images. I used iOS 11’s new\nscreen shot abilities. Press the usual home button \u0026amp; power button combination to\ntake a screen shot and it appears as a small picture in the bottom left of the\nscreen. Tap it to start editing: markup, crop etc. Then I used the sharing\nbutton to save the picture to Dropbox, putting it inside the images folder in my\nweb site folder.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/screenshot.jpeg\" alt=\"Editing a screenshot\"\u003e\u003c/p\u003e\n\u003cp\u003eI want to insert an image link but I have just worked out that I saved this\nMarkdown file in the root folder instead of the _posts folder. I can’t see a way\nto move it from inside Editorial, so I will swap to the Dropbox app to move the\nfile - be right back\u0026hellip; (I see now how I could have done this in Editorial.)\u003c/p\u003e\n\u003cp\u003eOk, this file is in the right place and the images are in the right folder, so\nhow to add an image link? Checking back at previous posts, I see that the format\nI use for inserting an image is: \u003ccode\u003e![Alt text][#]\u003c/code\u003e and the reference at the foot\nof the page is like\u003ccode\u003e[#]: /images/image_name.jpg\u003c/code\u003e but I don’t want to have to\nremember that every time, so I think it is time for some snippets. Tapping the\nlightning icon on the Editorial keyboard lets me edit and create snippets, so I\nhave made one for the image link and one for the image reference. Time to scroll\nback up the page and try them out.\u003c/p\u003e\n\u003cp\u003eI opened the Dropbox app in an overlay so that I could find the file names for\nthe images I just saved, then I created the links. The images don’t appear in\nthe preview but that is expected because Jekyll has not parsed the addresses.\nLooking at the information about the images in Dropbox, I see that they are far\ntoo big. I need a way to resize them. The screen shot editor doesn’t have a way\nto resize apart from cropping, at least not in this beta.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://workflow.is/\"\u003eWorkflow\u003c/a\u003e is another Pro level app that I have never really used, but it\nseems that it might do the job. I tried a few workflows to edit the size of an\nimage from a Dropbox file and save it back, but they although they appeared to\ncomplete, the image file remained the same size. So then I went to the Workflow\nGallery and found a workflow called Quick Resize Screenshot. When editing a\nscreen shot, I can use the sharing button to run the workflow and then I can\nsave the smaller images to Dropbox for use in the page. For the large images\nthat I have already saved, I will resize them on my Mac before publishing.\u003c/p\u003e\n\u003ch2 id=\"publishing\"\u003e\n  Publishing\n  \u003ca href=\"#publishing\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eThis brings me to the final step - publishing the changes to GitHub Pages.\nJekyll is a system that creates static web pages from the Markdown and other\nfiles. on my Mac, I run the \u003ccode\u003ejekyll build\u003c/code\u003e command in Terminal and the pages are\ncreated or re-generated as required. Then I use \u003ccode\u003egit\u003c/code\u003e to commit my changes and\npush them to GitHub which serves them.\u003c/p\u003e\n\u003cp\u003eThere appear to be Editorial workflows written in Python that use the GitHub\nAPIs to upload files, but this wouldn’t work well for me. Because of the\nstructure of my site, many different pages need to be re-generated when I\npublish a new post, so I will keep the publishing phase on my Mac. However there\nis no need to make it any more difficult than necessary, so I have written a\nshell script to do the work.\u003c/p\u003e\n\u003cp\u003eThe script takes an optional commit message parameter, builds the site, commits\nchanges and pushes then to GitHub. I have only tested this when no files had\nchanged, so this post will be the first real test. Shell scripting is outside my\ncomfort zone, so we will have to see how that works.\u003c/p\u003e\n\u003ch2 id=\"summary\"\u003e\n  Summary\n  \u003ca href=\"#summary\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eSo now I have a workflow on my iPad that uses Editorial, Dropbox and Workflow.\nThis allows me to do 100% of the writing task. Then I have a single shell script\non my Mac that does the publishing part. I can edit and create posts anywhere. I\ncan easily use split screen or screen overlays to add links. iOS 11 makes\ncreating and annotating screen shots very easy.\u003c/p\u003e\n\u003cp\u003eI am hoping for an update to Editorial that will allow it to accept drag \u0026amp; drop.\nThe ability to resize screen shots before saving them would also be really\nuseful.\u003c/p\u003e\n\u003cp\u003eSometimes my posts are more code-based and need access to Xcode and in those\ncases, I will stick to my Mac, especially considering Xcode’s new ability to\nconnect directly to GitHub which will make it great for publishing Swift\nplaygrounds. But for more narrative-style posts like this one, I will use my\niPad and see how I can improve my workflow and expand my tool set.\u003c/p\u003e\n\u003cp\u003eIt feels good to be using the iPad as a content creation device at last.\u003c/p\u003e\n\u003ch2 id=\"extra-notes-from-a-mac\"\u003e\n  Extra Notes from a Mac:\n  \u003ca href=\"#extra-notes-from-a-mac\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eSince this was my first time writing a blog post using an iPad and this\nworkflow, I decided that I should test the results before publishing, so I\nswitched back to the Mac and in Terminal, ran \u003ccode\u003ejekyll serve\u003c/code\u003e so that I could see\nthe results. There were a few issues mainly to do with the formatting of the\nfront matter. The three dashes at the top \u0026amp; bottom of the front matter had\nbecome munged into an emdash plus a dash, so that didn’t work. Jekyll is also\nfussy about the spaces in the tag \u0026amp; summary lines and it doesn\u0026rsquo;t handle\nnon-alphanumerics in the summary text.\u003c/p\u003e\n\u003cp\u003eI also used the Mac to shrink some of the images that I had saved before working\nout how to reduce the size of screen shots.\u003c/p\u003e\n\u003cp\u003eSo I need to check the structure of the front matter workflow before next time,\nbut this post is ready to go with only minor editing on the Mac side. Now to\ntest my shell script\u0026hellip;\u003c/p\u003e\n"
    },
    {
        "title" : "JSON Feed for TrozWare",
        "date_published" : "2017-05-20T00:00:00Z",
        "date_modified" : "2017-05-20T00:00:00Z",
        "id" : "https://troz.net/post/2017/json-feed-for-trozware/",
        "url" : "https://troz.net/post/2017/json-feed-for-trozware/",
        "content_html" : "\u003cp\u003e\u003ca href=\"https://jsonfeed.org/2017/05/17/announcing_json_feed\"\u003ejsonfeed.org\u003c/a\u003e has announced a new format for web site feeds, designed as an\nalternative to RSS. TrozWare has had an XML RSS feed for years, but I don\u0026rsquo;t\nthink anyone ever uses it (I certainly don\u0026rsquo;t), so today I have replaced it with\na JSON feed, which you can access through the\n\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e button at the top of every page.\u003c/p\u003e\n\u003cp\u003eI am sure many JSON Feed viewers will appear soon, but the only one I know about\nso far is at \u003ca href=\"http://json-feed-viewer.herokuapp.com\"\u003ehttp://json-feed-viewer.herokuapp.com\u003c/a\u003e. As soon as this update\nto my site goes live, I will apply to have TrozWare added to the list of sites\non this page. Meanwhile, you can paste in the URL: \u003ccode\u003ehttps://troz.net/feed.json\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis site is constructed using Jekyll, so I am very grateful to Niclas Darville\nfor his very easy to follow \u003ca href=\"https://ndarville.com/blog/2017/05/19/json-feed-for-jekyll/\"\u003eguide\u003c/a\u003e. However it is still well worth reading\nthrough the \u003ca href=\"https://jsonfeed.org/version/1\"\u003eofficial specs\u003c/a\u003e to see what else you want to add, or if you want\nto remove anything. I had to tweak a few settings to make it work for my\nconfiguration, and I added some more objects, but Niclas got me off to a flying\nstart.\u003c/p\u003e\n\u003cp\u003eTwo things to watch out for:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eMake sure your feed is producing valid JSON (I had an extra comma that was\nbreaking it\u0026hellip;).\u003c/li\u003e\n\u003cli\u003eAs third-party apps \u0026amp; sites may be displaying your content, you need to make\nsure that you are not using relative URLs for images and internal links. I\nwas using relative image URLs like \u003ccode\u003e/images/WorkHelp1.png\u003c/code\u003e but that showed a\nbroken link in the feed viewer, so I have changed all such links to\n\u003ccode\u003e/images/WorkHelp1.png\u003c/code\u003e. Hopefully that will work correctly on my local test\nserver as well as when published. \u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg src=\"https://jsonfeed.org/graphics/icon.png\" alt=\"JSON Feed icon\"\u003e\u003c/p\u003e\n\u003cp\u003eJSON Feed offers a nice icon which I would have liked to use, but I could not\nwork out a way to make it play nicely with the existing icons on my pages which\nall use \u003ca href=\"http://fontawesome.io\"\u003eFont Awesome\u003c/a\u003e icons. So I ended up just using the existing Feed\nicon. Hopefully Font Awesome will soon add a JSON Feed icon to their already\nimpressive list.\u003c/p\u003e\n\u003cp\u003eIf anyone still wants to use the \u003ca href=\"/index.xml\"\u003eRSS feed\u003c/a\u003e, it is no longer linked to the\nbuttons at the top of the pages, but you can access it manually.\u003c/p\u003e"
    },
    {
        "title" : "Blackmail Marketing",
        "date_published" : "2017-03-08T00:00:00Z",
        "date_modified" : "2017-03-08T00:00:00Z",
        "id" : "https://troz.net/post/2017/blackmail-marketing/",
        "url" : "https://troz.net/post/2017/blackmail-marketing/",
        "content_html" : "\u003cp\u003eI use my iPad to play games as a form of relaxation. Nearly all the games I play\nare puzzle apps with levels that can be played in a few minutes. Nearly all of\nthem are free to install. So how do they make money?\u003c/p\u003e\n\u003cp\u003eNow I would be the last person you should consult about marketing but it has\nalways seemed to me that the best way to market your product is to convince\npeople that it offers something they want so that they are prepared to pay for\nit.\u003c/p\u003e\n\u003cp\u003eThis is not the currently favored approach for mobile apps - at least certainly\nnot for games. No, the theory at the moment is to cause so much frustration and\nannoyance that people give you money to make it stop. Blackmail marketing.\u003c/p\u003e\n\u003cp\u003eA frequently used method is showing ads, sometimes just banner ads but more\noften full screen video ads that run for up to 30 seconds. If you interrupt the\nad, you don\u0026rsquo;t get the reward.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEvery goal reached triggers an ad.\u003c/li\u003e\n\u003cli\u003eQuitting and resuming the app triggers an ad.\u003c/li\u003e\n\u003cli\u003eWanting to play another level triggers an ad.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe theory is that you get so annoyed with this that you pay money to disable\nthe ads.\u003c/p\u003e\n\u003cp\u003eThe other common tactic is the delay. A tower defence game needs you to build a\ntower? OK, that will take 12 hours real time and you can\u0026rsquo;t proceed until it\u0026rsquo;s\nfinished. Or you can spend 12 gems which are sold as an in-app purchase. Maybe\nyou can only play 3 levels and then you need to recharge: again, pay up or wait.\nYou keep dying on that level? You\u0026rsquo;re out of lives. Pay up or wait until\ntomorrow. These delays are completely artificial. They have nothing to do with\ngame play but are solely designed to infuriate you enough to get you to pay.\u003c/p\u003e\n\u003cp\u003eSo when, and perhaps more importantly why, did mobile app marketing become so\nnegative? What happened to making your customers happy? Do unhappy customers\nspend more?\u003c/p\u003e\n\u003cp\u003eFinancially, it appears that irritating your users is a successful strategy.\nNearly all the top grossing games in the App Store are \u0026ldquo;free to play\u0026rdquo; in that\nthe initial download costs nothing. But these big studios are raking in enormous\nsums of money, so many people are persuaded to spend significant money by these\ninfuriating schemes.\u003c/p\u003e\n\u003cp\u003eA large part of this must be due to the various App Stores driving prices to the\nbottom. Gone are the days when the price of a mobile app was other than risible.\nSo app developers have four choices:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eDo it as a hobby or learning exercise.\u003c/li\u003e\n\u003cli\u003eDistribute apps as a form of self–promotion for other work.\u003c/li\u003e\n\u003cli\u003eWork for someone who pays you a real wage to develop apps.\u003c/li\u003e\n\u003cli\u003eJoin the blackmailers.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eSo how does this relate to indy developers like me? I care about my users and\nwant them to be happy.\u003c/p\u003e\n\u003cp\u003eI have tried several different approaches to app distribution:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eTotally free gets by far the most downloads but is economically ridiculous\nunless the app adds value to your business in some other way.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eA tip jar gets you nothing.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIn-app purchases (in my limited experience) make less than selling the app\nup-front for a small price.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eBanner ads with no method of forcing people to watch them generate almost no\nrevenue.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSo that leaves me with where I am today - selling apps for a few dollars and\nnothing more. Happily, I have found that Mac users are more prepared to pay a\nfew dollars for an app, so I have shut down many of my iOS apps and am\nconcentrating on the Mac app market.\u003c/p\u003e\n\u003cp\u003eAm I letting my principles stand in the way of mobile app profits? Should I just\njoin the gang and start blackmailing my customers? If so, what form should this\ntake?\u003c/p\u003e\n\u003cp\u003eAt the moment, I am considering banner ads on the screen with an in-app purchase\nto disable them entirely. I read a suggestion for a less invasive method of\ndoing this by creating your own ads for your other apps. This might be what I\nend up doing.\u003c/p\u003e\n\u003cp\u003eI would welcome any suggestions, advice or comments. Please join the discussion\nbelow or contact me using one of the links at the top of the page.\u003c/p\u003e\n"
    },
    {
        "title" : "NCSS 2017",
        "date_published" : "2017-01-06T00:00:00Z",
        "date_modified" : "2017-01-06T00:00:00Z",
        "id" : "https://troz.net/ncss2017/",
        "url" : "https://troz.net/ncss2017/",
        "content_html" : "\u003cp\u003eI gave a Masterclass on Swift at the NCSS Summer School 2017 in Sydney on 8th\nJanuary 2017. This post contains useful links for use during and after my class.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://swiftlang.ng.bluemix.net/#/repl\"\u003eIBM Swift Sandbox\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"sandbox-code-samples\"\u003e\n  Sandbox Code Samples\n  \u003ca href=\"#sandbox-code-samples\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"http://swiftlang.ng.bluemix.net/#/repl/58670662da20a814737c3562\"\u003eStrings\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"http://swiftlang.ng.bluemix.net/#/repl/5868463fb5619f13e0a940af\"\u003eOptionals\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"http://swiftlang.ng.bluemix.net/#/repl/5868954cb5619f13e0a940bd\"\u003eFunctions\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"http://swiftlang.ng.bluemix.net/#/repl/5866f31fda20a814737c353b\"\u003eClosures\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"http://swiftlang.ng.bluemix.net/#/repl/5866f48bda20a814737c353c\"\u003eObjects\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"http://swiftlang.ng.bluemix.net/#/repl/5866ed80da20a814737c3538\"\u003eProtocols\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"http://swiftlang.ng.bluemix.net/#/repl/5866fc4dda20a814737c3557\"\u003eGenerics\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"contact-details\"\u003e\n  Contact Details:\n  \u003ca href=\"#contact-details\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eEmail: \u003ca href=\"mailto:sarah@troz.net?subject=NCSS%202017\"\u003esarah@troz.net\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eTwitter: \u003ca href=\"https://twitter.com/trozware\"\u003e@trozware\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSlides:\n\u003ca href=\"https://www.dropbox.com/s/09r19my3d6jk5jt/NCSS%202017%20Swift%20MC.pdf?dl=0\"\u003eNCSS 2017 Swift MC.pdf\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"useful-links\"\u003e\n  Useful Links:\n  \u003ca href=\"#useful-links\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://itunes.apple.com/au/book/swift-programming-language/id881256329?mt=11\"\u003eThe Swift Programming Language\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://swift.org\"\u003eSwift.org\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://www.raywenderlich.com/132258/top-5-ios-swift-newsletters\"\u003eNewsletters\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://www.raywenderlich.com\"\u003eTutorials\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e"
    },
    {
        "title" : "Looking for beta testers",
        "date_published" : "2016-11-17T00:00:00Z",
        "date_modified" : "2016-11-17T00:00:00Z",
        "id" : "https://troz.net/post/2016/looking-for-beta-testers/",
        "url" : "https://troz.net/post/2016/looking-for-beta-testers/",
        "content_html" : "\u003cp\u003eI am looking for beta testers for my latest Mac app: \u003cstrong\u003e\u003ca href=\"/work/\"\u003eWork\u003c/a\u003e\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWork\u003c/strong\u003e is a project organizer app for developers, designers, students or any\nprofessional who works with multiple projects involving files \u0026amp; folders, web\npages, email addresses and lists of tasks. Click the link above for more\ninformation and help for getting started.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWork\u003c/strong\u003e requires macOS 10.12 or OS X 10.11.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eIf you would like to test this app, please \u003ca href=\"mailto:work@troz.net?subject=Work%20beta%20test\"\u003econtact me\u003c/a\u003e, giving details of\nyour Mac and operating system. The easiest way to do this is to select \u003cstrong\u003eAbout\nThis Mac\u003c/strong\u003e in the Apple menu and send me a screen shot of the window that\nappears.\u003c/p\u003e\n\u003cp\u003eAll beta testers will receive a free license to Work when it is released. If you\nreport a legitimate bug or provide valuable feed-back, you will also receive a\nfree license to your choice of one of my \u003ca href=\"/apps/\"\u003eother apps\u003c/a\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "Another Man Reader Update...",
        "date_published" : "2016-11-05T00:00:00Z",
        "date_modified" : "2016-11-05T00:00:00Z",
        "id" : "https://troz.net/post/2016/another-man-reader-update/",
        "url" : "https://troz.net/post/2016/another-man-reader-update/",
        "content_html" : "\u003cp\u003eA quick update to \u003ca href=\"/manreader/\"\u003eMan Reader\u003c/a\u003e to version 1.8 is now available through the\n\u003ca href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\"\u003eMac App Store\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe main reason for this version was that Man Reader was not previously\ndetecting man pages installed by third-party IDEs in the Applications folder.\nThere was also an issue with Man Reader failing to display the text of the\npreviously selected man page on app launch.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMore complete search for man pages, including in third-party IDEs.\u003c/li\u003e\n\u003cli\u003eFix for glitch when displaying previously selected page on launch.\u003c/li\u003e\n\u003c/ul\u003e\n"
    },
    {
        "title" : "Man Reader Update",
        "date_published" : "2016-10-12T00:00:00Z",
        "date_modified" : "2016-10-12T00:00:00Z",
        "id" : "https://troz.net/post/2016/man-reader-update/",
        "url" : "https://troz.net/post/2016/man-reader-update/",
        "content_html" : "\u003cp\u003e\u003ca href=\"/manreader/\"\u003eMan Reader\u003c/a\u003e has just been updated to version 1.7 and is available through\nthe \u003ca href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\"\u003eMac App Store\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe main reason for this update was to make the app work well with macOS Sierra,\nas I found that version 1.6 was sometimes crashing on launch. While doing this,\nthe update was rejected by the App Store reviewers because it crashed on OS X\n10.10. Since I no longer have a Mac running 10.10, I decided to set the minimum\nsupported system version to OS X 10.11. If you need support for older versions,\nyou should still be able to download version 1.6 which will work back to 10.7.\u003c/p\u003e\n\u003cp\u003eI also took the opportunity to fix some graphical issues, dealing with different\ncolor schemes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe man page list now shows alternating colors even when not using the default\nscheme.\u003c/li\u003e\n\u003cli\u003eWhen scrolling the man pages past the top or the bottom with a non-white\nbackground, you should no longer see white blocks top \u0026amp; bottom.\u003c/li\u003e\n\u003c/ul\u003e\n"
    },
    {
        "title" : "Podcasting",
        "date_published" : "2016-10-11T00:00:00Z",
        "date_modified" : "2016-10-11T00:00:00Z",
        "id" : "https://troz.net/post/2016/podcasting/",
        "url" : "https://troz.net/post/2016/podcasting/",
        "content_html" : "\u003cp\u003eI have recently started what I hope will be a weekly podcast with my friend and\ncolleague, \u003ca href=\"https://twitter.com/jerrydaniels\"\u003eJerry Daniels\u003c/a\u003e. Each podcast will be about 30 minutes in length.\u003c/p\u003e\n\u003cp\u003eWe will discuss Macs, iPhones, iPads, macOS, iOS, programming and anything\ntech-related that we find interesting. I hope you will find it entertaining and\ninformative, so please join us.\u003c/p\u003e\n\u003cp\u003eWe are using \u003ca href=\"https://zcast.co/zcasts\"\u003eZCast\u003c/a\u003e which has an iPhone app that makes it super easy to get\ntogether and record our chats. It doesn\u0026rsquo;t allow any post-processing, but really\nlowers the barrier to entry into the world of podcasting.\u003c/p\u003e\n\u003cp\u003eIf you get the \u003ca href=\"https://itunes.apple.com/app/zcast-podcast-from-your-phone!/id1041586670\"\u003eZCast app for iPhone\u003c/a\u003e, go to the ZCasters tab and search for\n\u0026ldquo;Trozware\u0026rdquo; or \u0026ldquo;Jerry Daniels\u0026rdquo; to find all our podcasts. Or use these links to\nlisten in your browser.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://zcast.co/j/ZyB8yK4z86\"\u003eThe new macOS\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://zcast.co/j/ewQe6x6E4d\"\u003eHands-on with iPhone 7\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://zcast.co/j/A9zvLAAEa3\"\u003eHands on iOS 10\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSince the first one was recorded using my name instead of my \u003ca href=\"https://twitter.com/trozware\"\u003e@trozware\u003c/a\u003e\nTwitter account, I will embed it here as it will not show up if you search for\n\u0026ldquo;Trozware\u0026rdquo;.\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n"
    },
    {
        "title" : "Dice Pass Updated",
        "date_published" : "2016-09-17T00:00:00Z",
        "date_modified" : "2016-09-17T00:00:00Z",
        "id" : "https://troz.net/post/2016/dice-pass-updated/",
        "url" : "https://troz.net/post/2016/dice-pass-updated/",
        "content_html" : "\u003cp\u003e\u003ca href=\"/dicepass/\"\u003eDice Pass 1.1\u003c/a\u003e is now available from the \u003ca href=\"https://itunes.apple.com/app/dice-pass/id997688302\"\u003eMac App Store\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"what-does-dice-pass-do\"\u003e\n  What does Dice Pass do?\n  \u003ca href=\"#what-does-dice-pass-do\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eDice Pass is a utility to app to generate random passphrases based on the\n\u003ca href=\"http://world.std.com/~reinhold/diceware.html\"\u003eDiceware\u003c/a\u003e system. Diceware uses a table of pre-defined words, each assigned\na 5 digit code number containing the digits 1 to 6. The official way to generate\na phrase is to roll 5 dice for each word you want in your passphrase and then\nconsult the words table to find the matching word.\u003c/p\u003e\n\u003cp\u003eThe resulting phrase uses real words or common abbreviations so it is easier to\nremember than a random collection of characters. At the same time, the random\nselection of words makes the generated passphrase much more secure as it avoids\nthe human tendency to pick words with personal meaning.\u003c/p\u003e\n\u003cp\u003eDice Pass allows you to select the number of words in your passphrase,\nre-generate the entire passphrase any time, re-roll a single word in your\npassphrase or set the dice rolls manually for maximum security and randomness.\u003c/p\u003e\n\u003ch2 id=\"whats-new-in-version-11\"\u003e\n  What\u0026rsquo;s New in Version 1.1:\n  \u003ca href=\"#whats-new-in-version-11\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eYou can now select from three word lists in the Word Lists menu:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eoriginal Diceware list\u003c/li\u003e\n\u003cli\u003eBeale list (fewer Americanisms and obscure words)\u003c/li\u003e\n\u003cli\u003eDiceware 8k list (a list of words that is a whole power of two in length)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou can also import your own word list if you prefer.\u003c/p\u003e\n\u003cp\u003eDice Pass 1.1 is compatible with macOS Sierra.\u003c/p\u003e\n"
    },
    {
        "title" : "How much work does Icon Builder save you?",
        "date_published" : "2016-09-17T00:00:00Z",
        "date_modified" : "2016-09-17T00:00:00Z",
        "id" : "https://troz.net/post/2016/how-much-work-does-icon-builder-save-you/",
        "url" : "https://troz.net/post/2016/how-much-work-does-icon-builder-save-you/",
        "content_html" : "\u003cp\u003e\u003ca href=\"/icon-builder/\"\u003eIcon Builder\u003c/a\u003e is a Mac app that takes a single image file and creates all\nthe different image sizes that you need to make a set of icons for your app:\nMac, iPhone, iPad, iOS Universal or Apple Watch.\u003c/p\u003e\n\u003cp\u003eVersion 4, released 16 September 2016 is available through the \u003ca href=\"https://itunes.apple.com/app/icon-builder/id552293482\"\u003eMac App\nStore\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"whats-new-in-version-4\"\u003e\n  What\u0026rsquo;s New in Version 4:\n  \u003ca href=\"#whats-new-in-version-4\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eAdded support for iMessage apps and Sticker Pack apps.\u003c/li\u003e\n\u003cli\u003eAdded support for creating Mac .icns files.\u003c/li\u003e\n\u003cli\u003eBetter removal of alpha channel for Apple Watch icons.\u003c/li\u003e\n\u003cli\u003eClearer usage instructions in ReadMe files.\u003c/li\u003e\n\u003cli\u003eiTunes Artwork folders will no longer be over-written with the latest image\nfiles.\u003c/li\u003e\n\u003cli\u003eSupports macOS Sierra and Xcode 8\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"/images/IconBuilder.png\" alt=\"Icon Builder\"\u003e\u003c/p\u003e\n\u003cp\u003eWhile working on version 4 and accommodating all these new icon sets (and\nwishing I had the time to re-write the app in Swift\u0026hellip;), I counted up all the\nicon files that Icon Builder makes for each app type:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003eApp Type\u003c/th\u003e\n\u003cth style=\"text-align:right\"\u003eNumber of Icons\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eMac\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003e10\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eiPhone\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003e8\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eiPhone supporting pre iOS 7\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003e11\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eiPad\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003e9\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eiPad supporting pre iOS 7\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003e13\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eiOS Universal\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003e14\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eiOS Universal supporting pre iOS 7\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003e20\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eApple Watch (also requires iOS app icons)\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003e8\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eSticker Pack app\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003e11\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eiMessages app\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003e14\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eiMessages app Messages extension\u003c/td\u003e\n\u003ctd style=\"text-align:right\"\u003e9\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eSo as you can see, Icon Builder is doing a lot of work for you. It also names\nall the icon files using the expected format, stores them in an concept folder,\ncreates the JSON file that identifies them all to Xcode and optionally installs\nthem in your Xcode project automatically. That’s a lot of value for dragging in\nan icon and clicking a button!\u003c/p\u003e\n\u003cp\u003eSo next time your designer sends you the twentieth tweaked icon for the day,\ndon\u0026rsquo;t get mad. Just drop it into Icon Builder and sit back while it does all the\nwork. (No need to tell the designer that\u0026hellip;)\u003c/p\u003e\n"
    },
    {
        "title" : "Retiring old apps",
        "date_published" : "2016-09-15T00:00:00Z",
        "date_modified" : "2016-09-15T00:00:00Z",
        "id" : "https://troz.net/post/2016/retiring-old-apps/",
        "url" : "https://troz.net/post/2016/retiring-old-apps/",
        "content_html" : "\u003cp\u003eWith the release of iOS 10 and the need to update iOS apps to suit, I have\ndecided it is time to retire some of my lesser-performing apps as it is not\nworth the effort required to maintain them.\u003c/p\u003e\n\u003cp\u003eAt the moment, the following iOS apps are no longer available:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA Knight\u0026rsquo;s Move\u003c/li\u003e\n\u003cli\u003eDice Pass\u003c/li\u003e\n\u003cli\u003ePic-a-POD\u003c/li\u003e\n\u003cli\u003eQuick Score - Tennis\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor the first three listed there, the Mac versions are still available:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://itunes.apple.com/app/a-knights-move/id533321133\"\u003eA Knight\u0026rsquo;s Move for Mac\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://itunes.apple.com/app/dice-pass/id997688302\"\u003eDice Pass for Mac\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://itunes.apple.com/app/pic-a-pod/id477909802\"\u003ePic-a-POD for Mac\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf you bought any of these apps and would like a promo code for the Mac version,\nsend me a screen shot of the app running on your iPhone or iPad and I will send\nyou a code.\u003c/p\u003e\n"
    },
    {
        "title" : "Man Reader updated to 1.6",
        "date_published" : "2016-07-16T00:00:00Z",
        "date_modified" : "2016-07-16T00:00:00Z",
        "id" : "https://troz.net/post/2016/man-reader-updated-to-1.6/",
        "url" : "https://troz.net/post/2016/man-reader-updated-to-1.6/",
        "content_html" : "\u003cp\u003eMan Reader has been updated to version 1.6 with the permissions needed for\nfinding all available man pages and a fix for search terms being over-written\nafter a background update.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/manreader/\"\u003eMan Reader 1.6\u003c/a\u003e is now available through the \u003ca href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\"\u003eMac App Store\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"change-log\"\u003e\n  Change Log:\n  \u003ca href=\"#change-log\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003ePermissions fix when searching for available man pages.\u003c/li\u003e\n\u003cli\u003eFixed error with new search term being over-written.\u003c/li\u003e\n\u003cli\u003eSand-boxed version now works just as well as the non-sand-boxed so please\nswitch back to this version.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis version fixes a problem with sand-boxing permissions potentially not\nallowing access to all the installed man pages on your system. This should now\nbe fixed but if you discover any man pages that are available through Terminal\nbut not through Man Read, please \u003ca href=\"mailto:sarah@troz.net?subject=Man%20Reader%20not%20detecting%20some%20man%20pages\"\u003eemail me the details\u003c/a\u003e and help me make Man\nReader better.\u003c/p\u003e\n\u003cp\u003eThere was also an issue with a previous search being restored after a background\nupdate, even if a new search term had been entered. This has been fixed.\u003c/p\u003e\n\u003cp\u003eIf you previously had downloaded the Man Reader (no SB) version of the app from\nthis site, please revert to the App Store version which you would have needed to\nhave bought in order to use the downloaded app. If you bought the app from\nPaddle, \u003ca href=\"mailto:sarah@troz.net?subject=Man%20Reader%20transfer%20to%20App%20Store\"\u003econtact me\u003c/a\u003e and I will transfer you to the App Store version.\nNeither of these other versions will be supported or updated any more.\u003c/p\u003e\n"
    },
    {
        "title" : "Dice Pass Mac Update",
        "date_published" : "2016-07-03T00:00:00Z",
        "date_modified" : "2016-07-03T00:00:00Z",
        "id" : "https://troz.net/post/2016/dice-pass-mac-update/",
        "url" : "https://troz.net/post/2016/dice-pass-mac-update/",
        "content_html" : "\u003cp\u003eI recently got an email from someone who had purchased \u003ca href=\"/dicepass/\"\u003eDice Pass\u003c/a\u003e for Mac\nfrom the \u003ca href=\"https://itunes.apple.com/app/dice-pass/id997688302\"\u003eMac App Store\u003c/a\u003e but had been unable to get it to run. This person\nwas using OS X 10.9.3.\u003c/p\u003e\n\u003cp\u003eI checked the App Store specifications and it showed that 10.9 was the minimum\nsystem requirement, so it should have worked. But going back to my Xcode\nproject, I found that it was set to a minimum of OS X 10.10.\u003c/p\u003e\n\u003cp\u003eI tried to re-compile for OS X 10.9 but this failed as the app uses several\nfeatures that are not available prior to 10.10.\u003c/p\u003e\n\u003cp\u003eThe minimum system version as displayed in the App Store is supposedly deduced\nautomatically by the App Store servers from the app\u0026rsquo;s binary. Somehow this was\nincorrect in the App Store, so some people may have bought that app and found\nthat it did not work despite them having what was listed as a compatible system.\u003c/p\u003e\n\u003cp\u003eIf you bought Dice Pass for OS X 10.9 and are unable to run it, I have two\npossible solutions for you:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eUpgrade your operating system to at least 10.10.\u003c/li\u003e\n\u003cli\u003eAsk Apple for a refund since it was their error that caused you to buy an app\nthat you cannot run.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eI have updated the app in the App Store changing nothing but the version number\nand it is now showing the correct minimum system requirement. My apologies if\nyou have been inconvenienced by this error.\u003c/p\u003e\n"
    },
    {
        "title" : "Learning Swift - Sets",
        "date_published" : "2016-05-28T00:00:00Z",
        "date_modified" : "2016-05-28T00:00:00Z",
        "id" : "https://troz.net/post/2016/learning-swift-sets/",
        "url" : "https://troz.net/post/2016/learning-swift-sets/",
        "content_html" : "\u003cp\u003eSets are the forgotten collection type in many languages, including Swift. I\nthink most developers use Arrays without really considering the advantages of\nusing a Set but they have some amazingly useful features that should make them a\npart of any progammer\u0026rsquo;s toolkit.\u003c/p\u003e\n\u003cp\u003eIf you want to follow along with a playground, you can download it \u003ca href=\"https://github.com/trozware/sets\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"what-is-a-set\"\u003e\n  What is a Set?\n  \u003ca href=\"#what-is-a-set\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eA Set is an un-ordered collection of unique items.\u003c/strong\u003e That\u0026rsquo;s it - nothing more\nthan that. So it is very similar to an Array, but it is not indexed like an\nArray and it cannot contain more than one of each entry.\u003c/p\u003e\n\u003ch2 id=\"creating-a-set\"\u003e\n  Creating a Set\n  \u003ca href=\"#creating-a-set\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eCreating a Set is as easy as creating an Array:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e myArray = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dog\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cat\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hamster\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dog\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e mySet: Set = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dog\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cat\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hamster\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dog\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIf you are running these commands in a playground, notice that the differences\nbetween the 2 results:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dog\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cat\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hamster\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dog\u0026#34;\u003c/span\u003e]    \u003cspan style=\"color:#75715e\"\u003e// myArray\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hamster\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cat\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dog\u0026#34;\u003c/span\u003e}           \u003cspan style=\"color:#75715e\"\u003e// mySet\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col\u003e\n\u003cli\u003eThe Array is shown wrapped in square brackets, the Set is shown wrapped in\ncurly braces. This is just a visual clue and doesn\u0026rsquo;t really mean anything.\nYou cannot initialize a set using curly braces.\u003c/li\u003e\n\u003cli\u003eAll the supplied elements of the Array are listed, but the Set has removed\nthe duplicate \u0026ldquo;dog\u0026rdquo; element. This did not cause an error or warning, it just\nhappened quietly.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWhen initializing a Set, you must add \u003ccode\u003e: Set\u003c/code\u003e to distinguish it from an array\ninitialization. In the example above, I did not specify the data type of the\nelements in the Set as the Swift compiler was able to infer this from the\ncontents. But if initializing an empty array, the data type must be specified.\nTo check how to do this, I option-clicked on \u003ccode\u003emySet\u003c/code\u003e to see what the Swift\ncompiler thought it was.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/set_types.png\" alt=\"Sets\"\u003e\u003c/p\u003e\n\u003cp\u003eSo mySet is actually \u003ccode\u003eSet\u0026lt;String\u0026gt;\u003c/code\u003e. This means that to create an empty Set, you\nneed to use something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e emptySetOfStrings: Set\u0026lt;String\u0026gt; = [] \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eemptySetOfInts: Set\u0026lt;Int\u0026gt; = []\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"adding-and-removing-elements\"\u003e\n  Adding and removing elements\n  \u003ca href=\"#adding-and-removing-elements\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eIf you have been using an Array to store unique values, then you have probably\nwritten code like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003emyArray.contains(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cat\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  myArray.append(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cat\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWith Sets, you don\u0026rsquo;t have to care. Just use \u003ccode\u003einsert()\u003c/code\u003e and let the Set work out\nwhether to add the item or not.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emySet.insert(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;goldfish\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// goldfish added: {\u0026#34;hamster\u0026#34;, \u0026#34;cat\u0026#34;, \u0026#34;dog\u0026#34;, \u0026#34;goldfish\u0026#34;}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emySet.insert(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dog\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// dog already there: {\u0026#34;hamster\u0026#34;, \u0026#34;cat\u0026#34;, \u0026#34;dog\u0026#34;, \u0026#34;goldfish\u0026#34;}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRemoving elements is also easier than in Arrays. For an Array, you first have to\nfind the index of the element and remove it by index:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// myArray.remove(\u0026#34;hamster\u0026#34;) // will not compile\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e index = myArray.index(of: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hamster\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  myArray.remove(at: index)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBut in a Set, you can remove any element easily and trying to remove an element\nthat doesn\u0026rsquo;t exist will fail without an error.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emySet.remove(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hamster\u0026#34;\u003c/span\u003e)   \u003cspan style=\"color:#75715e\"\u003e// returns \u0026#34;hamster\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emySet.remove(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;canary\u0026#34;\u003c/span\u003e)    \u003cspan style=\"color:#75715e\"\u003e// returns nil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"converting-between-sets-and-arrays\"\u003e\n  Converting between Sets and Arrays\n  \u003ca href=\"#converting-between-sets-and-arrays\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eSometimes you need to be able to switch between the two. My most recent example\nwas when I wanted to store data from a Set in a plist. Sets are not property\nlist types but Arrays are, so I converted the Set to an Array before storing it\nin the plist. When reading the data in from the plist, I converted it back to a\nSet.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e myArrayAsSet = Set(myArray)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e mySetAsArray = Array(mySet)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOne useful side-effect of these easy conversions is the ability to \u0026lsquo;unique\u0026rsquo; an\nArray in a single line. This may be inefficient for large arrays, but works very\nwell for small ones. Just be careful if the order of the elements is important\nas you cannot guarantee the order of elements in a Set.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e myArrayUniqued = Array(Set(myArray))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// [\u0026#34;cat\u0026#34;, \u0026#34;dog\u0026#34;]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"iterating-over-elements-in-a-set\"\u003e\n  Iterating over elements in a Set\n  \u003ca href=\"#iterating-over-elements-in-a-set\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eAs with an Array, you can use a \u003ccode\u003efor element in set\u003c/code\u003e structure, or you can use\n\u003ccode\u003eenumerated()\u003c/code\u003e. But you cannot subscript a Set.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e animal \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e mySet {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  print(animal)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (index, animal) \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e mySet.enumerated() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003eindex\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e = \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003eanimal\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// will not compile\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// for index in 0 ..\u0026lt; mySet.count {\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//   print(\u0026#34;\\(index) = \\(mySet[index])\u0026#34;)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// }\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"where-sets-get-really-interesting\"\u003e\n  Where Sets get really interesting\n  \u003ca href=\"#where-sets-get-really-interesting\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eRemember in school when you learnt about Venn diagrams with pretty interlocking\ncircles? Sets can do the same things, although you will have to do your own\npretty drawings :-)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e set1: Set = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dog\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cat\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pig\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e set2: Set = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cow\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;horse\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pig\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e intersect = set1.intersection(set2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// {\u0026#34;pig\u0026#34;}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e subtract = set1.subtracting(set2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// {\u0026#34;cat\u0026#34;, \u0026#34;dog\u0026#34;}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e union = set1.union(set2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// {\u0026#34;pig\u0026#34;, \u0026#34;cat\u0026#34;, \u0026#34;dog\u0026#34;, \u0026#34;cow\u0026#34; \u0026#34;horse\u0026#34;}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e xor = set1.symmetricDifference(set2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// {\u0026#34;cat\u0026#34;, \u0026#34;dog\u0026#34;, \u0026#34;cow\u0026#34;, \u0026#34;horse\u0026#34;}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn the code example above, we have two Sets of animals, with one animal in\ncommon.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eintersection()\u003c/code\u003e lists the elements in common.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esubtracting()\u003c/code\u003e lists the elements in one Set after removing all elements that\nare in the other.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eunion()\u003c/code\u003e joins all the elements without duplicates.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esymmetricDifference()\u003c/code\u003e lists the elements that are in one or other of the\nSets but not in both. (Swift 3 renamed this function from \u003ccode\u003eexclusiveOr()\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHere is my best attempt at a pretty drawing to show how these go together:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/sets_1.png\" alt=\"Sets\"\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eThe next fun trick is working out sub-sets, super-sets and disjoint sets.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e set1: Set = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dog\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cat\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pig\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e set2: Set = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cow\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;horse\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pig\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e smallSet: Set = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pig\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cow\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmallSet.isSubset(of: set1)   \u003cspan style=\"color:#75715e\"\u003e// false\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmallSet.isSubset(of: set2)   \u003cspan style=\"color:#75715e\"\u003e// true\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003esmallSet\u003c/code\u003e is \u003cstrong\u003enot\u003c/strong\u003e a subset of \u003ccode\u003eset1\u003c/code\u003e because it contains an element that is\nnot in \u003ccode\u003eset1\u003c/code\u003e. \u003ccode\u003esmallSet\u003c/code\u003e \u003cstrong\u003eis\u003c/strong\u003e a subset of \u003ccode\u003eset2\u003c/code\u003e because every element in\n\u003ccode\u003esmallSet\u003c/code\u003e is also in \u003ccode\u003eset2\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/sets_2.png\" alt=\"Sets\"\u003e\u003c/p\u003e\n\u003cp\u003eIf you want to get technical, a Set should not be considered a subset of an\nidentical Set. The default \u003ccode\u003eisSubset(of:)\u003c/code\u003e allows this, but you can use\n\u003ccode\u003eisStrictSubset(of:)\u003c/code\u003e if you prefer.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset1.isSubset(of: set1)         \u003cspan style=\"color:#75715e\"\u003e// true\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset1.isStrictSubset(of: set1)   \u003cspan style=\"color:#75715e\"\u003e// false\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSuperset works just the same but in reverse so the diagram above explains it\ntoo:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e set1: Set = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dog\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cat\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pig\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e set2: Set = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cow\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;horse\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pig\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e smallSet: Set = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pig\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cow\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset1.isSuperset(of: smallSet)       \u003cspan style=\"color:#75715e\"\u003e// false\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset2.isSuperset(of: smallSet)       \u003cspan style=\"color:#75715e\"\u003e// true\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset1.isSuperset(of: set1)           \u003cspan style=\"color:#75715e\"\u003e// true\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset1.isStrictSuperset(of: set1)     \u003cspan style=\"color:#75715e\"\u003e// false\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003eset1\u003c/code\u003e is \u003cstrong\u003enot\u003c/strong\u003e a superset of \u003ccode\u003esmallSet\u003c/code\u003e because it does not contain every\nelement in \u003ccode\u003esmallSet\u003c/code\u003e. \u003ccode\u003eset2\u003c/code\u003e \u003cstrong\u003eis\u003c/strong\u003e a superset of \u003ccode\u003esmallSet\u003c/code\u003e because every\nelement in \u003ccode\u003esmallSet\u003c/code\u003e is also in \u003ccode\u003eset2\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eisSuperset(of:)\u003c/code\u003e and \u003ccode\u003eisStrictSuperset(of:)\u003c/code\u003e functions allow or reject\nidentical sets.\u003c/p\u003e\n\u003cp\u003eThe final comparison tool that might be useful is \u003ccode\u003eisDisjoint(with:)\u003c/code\u003e which\nreturns true only if the two Sets have no elements in common i.e. if there is no\noverlap in the circles.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e set1: Set = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dog\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cat\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pig\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e set2: Set = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cow\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;horse\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pig\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e otherSet: Set = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;duck\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;chicken\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset1.isDisjoint(with: set2)       \u003cspan style=\"color:#75715e\"\u003e// false\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eset1.isDisjoint(with: otherSet)   \u003cspan style=\"color:#75715e\"\u003e// true\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u0026ldquo;pig\u0026rdquo; occurs in both \u003ccode\u003eset1\u003c/code\u003e and \u003ccode\u003eset2\u003c/code\u003e so they are \u003cstrong\u003enot\u003c/strong\u003e disjoint. \u003ccode\u003eotherSet\u003c/code\u003e\nand \u003ccode\u003eset1\u003c/code\u003e have no matching entries so they \u003cstrong\u003eare\u003c/strong\u003e disjoint.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"when-should-you-use-a-set\"\u003e\n  When should you use a Set?\n  \u003ca href=\"#when-should-you-use-a-set\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIf you want the elements to be unique.\u003c/li\u003e\n\u003cli\u003eIf you want easy methods of comparing the contents of different collections.\u003c/li\u003e\n\u003cli\u003eIf you want to be able to remove elements easily.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"when-should-you-not-use-a-set\"\u003e\n  When should you not use a Set?\n  \u003ca href=\"#when-should-you-not-use-a-set\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIf you need the collection to be able to hold multiples of an element.\u003c/li\u003e\n\u003cli\u003eIf the order of the collection is important.\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003cp\u003eFor more details on Sets, check out \u003ca href=\"http://swiftdoc.org/v2.2/type/Set/\"\u003eSwiftDoc.org\u003c/a\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "19th Hole Golf Scorer 3.1",
        "date_published" : "2016-05-07T00:00:00Z",
        "date_modified" : "2016-05-07T00:00:00Z",
        "id" : "https://troz.net/post/2016/19th-hole-golf-scorer-3.1/",
        "url" : "https://troz.net/post/2016/19th-hole-golf-scorer-3.1/",
        "content_html" : "\u003cp\u003eOne of the problems with using 19th Hole on the Apple Watch is making the app\nshow every time you raise your wrist. My solution to this was to go into\nSettings (either on my iPhone through the Watch app, or directly on the watch)\nand change it to \u0026ldquo;Resume Last Activity\u0026rdquo; on wrist raise. This worked fine but as\nI usually prefer the watch face to show on wrist raise, I had to keep setting\nand re-setting this which was a pain.\u003c/p\u003e\n\u003cp\u003eBut last week I noticed the fine print when changing this setting. In this\nscreen shot from the Watch app on my iPhone, you can see that \u0026ldquo;session-based\napps\u0026rdquo; and \u0026ldquo;some third-party workout apps\u0026rdquo; will over-ride the \u0026ldquo;Show Watch Face\u0026rdquo;\nsetting.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/WakeScreen.jpg\" alt=\"Wrist raise settings\"\u003e\u003c/p\u003e\n\u003cp\u003eI started to research this and found that if an app starts a \u0026ldquo;workout session\u0026rdquo;,\nthen it will become the active app until the session is ended or some other app\nstarts a session. So I got to work and added a workout session to the 19th\nHole\u0026rsquo;s Apple Watch app.\u003c/p\u003e\n\u003cp\u003eWhen you start scoring a round on the Apple Watch, you will see this dialog\nasking if you would like to start a workout:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Watch-workout.png\" alt=\"Start workout dialog\"\u003e\u003c/p\u003e\n\u003cp\u003eThe workout will be stopped automatically when you have scored the last hole.\nYou can also use a force-press on the scoring screen to turn the workout off or\non at any time.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Watch_end_workout.png\" alt=\"Stop workout\"\u003e\u003c/p\u003e\n\u003cp\u003eThis should make the app much more usable as an Apple Watch app, so happy\ngolfing :-)\u003c/p\u003e\n"
    },
    {
        "title" : "My Year With Apple Watch",
        "date_published" : "2016-04-28T00:00:00Z",
        "date_modified" : "2016-04-28T00:00:00Z",
        "id" : "https://troz.net/post/2016/my-year-with-apple-watch/",
        "url" : "https://troz.net/post/2016/my-year-with-apple-watch/",
        "content_html" : "\u003cp\u003eAs the Apple Watch hits its first birthday, there seems to be in increasing\nnumber of bloggers complaining about it. One (which I refuse to link to) titled\n\u0026ldquo;My Year of Hell With the Apple Watch\u0026rdquo;. I think the article has since been\nre-published with a slightly less inflammatory title, but really! Did somebody\nrivet the watch to his wrist? If it was so awful, why not just stop using it?\u003c/p\u003e\n\u003cp\u003eI am a watch nerd and have always loved watches and having one on me. I liked\nwatches with features and even had a calculator watch at one point although as a\nwoman with skinny wrists, I found it constantly annoying that watch makers put\nall the gadgets into man-sized watches so I was left with the choice of no\nfeatures or a watch that looked stupidly large on my wrist.\u003c/p\u003e\n\u003cp\u003eA few years ago I stopped wearing a watch. I can\u0026rsquo;t remember now why I did it -\nmaybe my watch strap broke and it wasn\u0026rsquo;t important enough to get a new one. I\nalways had my iPhone to give me the time.\u003c/p\u003e\n\u003cp\u003eBut I ordered three Apple Watches as soon as they were available and myself,\nhusband and eldest son have been using them ever since.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"here-are-what-i-consider-to-be-the-best-features-of-the-apple-watch\"\u003e\n  Here are what I consider to be the best features of the Apple Watch:\n  \u003ca href=\"#here-are-what-i-consider-to-be-the-best-features-of-the-apple-watch\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAccuracy\u003c/strong\u003e: It is a fantastically accurate time-piece. Not enough people\ngive this credit, but we have always been used to clocks and watches that were\ninherently inaccurate. Having a device on my wrist that I \u003cstrong\u003eknow\u003c/strong\u003e to be\nperfectly accurate is an amazing thing.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eNotifications\u003c/strong\u003e: this takes a bit of work to get right and with every new\napp, you need to assess whether to have its notifications appear on your\nwrist. But the wonderful thing is knowing that you haven\u0026rsquo;t missed anything and\nbeing able to glance at your wrist when a notification arrives and tell -\nunobtrusively - whether this is something that needs immediate attention. And\nthe ability to respond instantly to messages and emails with just a couple of\ntaps is amazingly useful.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCustomisable watch faces\u003c/strong\u003e: depending on what I am doing, I need quick\naccess to different pieces of information. When travelling, I can set up a\nwatch face with multiple time zones. When working, I need a timer. When on\nholiday, I prefer one of the more relaxing but less detailed watch faces.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eActivity\u003c/strong\u003e: I am not the world\u0026rsquo;s most active person so I find the three\nrings to be a really good motivator. In fact I just had to stop typing and run\nup \u0026amp; down the stairs to get another notch to the blue ring. The goals are not\nout of my reach, so I like trying to fill in the rings every day.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eVoice commands\u003c/strong\u003e: being able to send a text message completely by voice when\ndriving or when my hands are busy is fantastic. Starting a timer, doing unit\nconversions and navigating are things I do frequently by voice.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eExcellent battery life\u003c/strong\u003e: I started off having the battery life complication\nalways visible, but it very quickly became apparent that this was unnecessary.\nRight now I have been wearing the watch for about 11 hours and the battery is\nat 74%. And charging is so fast that if I did run it down, a 30 minute charge\nwould get me through most of a day.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eThe Milanese Loop\u003c/strong\u003e: best watch band ever.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are other good features, but I think those are my favourites.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"so-what-dont-i-like\"\u003e\n  So what don\u0026rsquo;t I like?\n  \u003ca href=\"#so-what-dont-i-like\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eThird-party apps are still a problem\u003c/strong\u003e. I know. I have published three\nmyself and sometimes they just doesn\u0026rsquo;t happen. However this appears to vary a\nlot. Some people say they can never get apps to run, even Apple\u0026rsquo;s apps. Others\nsay they work but with a long delay. My watch seems to be better than the\naverage but it is still an issue.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eSketches don\u0026rsquo;t always get through or can take ages\u003c/strong\u003e. We thought it would be\na lot of fun to send each other little sketches and so it is, despite our\ntotal lack of any artistic skills. But it loses a bit of impact when you have\nto send a message 20 minutes later asking if the sketch has arrived.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eThe exercise tracking seems to be a bit erratic\u003c/strong\u003e. If my husband and I go\nfor a walk together, he comes back with 25 minutes of exercise and I only have\n7 minutes. Am I not going fast enough? Are my arms not swinging enough? If it\nis very hot and my wrist gets sweaty, I seem to get better numbers - is this\nbecause my heart is beating faster or the capillaries closer to the surface\nhave expanded? Or is the watch picking up a better signal that way? Either\nway, I still like the activity circles, but the green ring frustrates me a\nbit.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"and-what-would-i-like-to-see-in-watch-2--watchos-3\"\u003e\n  And what would I like to see in Watch 2 / watchOS 3?\n  \u003ca href=\"#and-what-would-i-like-to-see-in-watch-2--watchos-3\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eSome sort of always-on display of the time.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eA speaker to allow Siri to talk back to me and to play audio.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFaceTime audio calls.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eBetter support for third-party apps - perhaps open up some private APIs?\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAllow developers to create watch faces or apps that told the time.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAllow developers to say that an app should stay as the frontmost app once\nopened.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"will-i-buy-watch-2\"\u003e\n  Will I buy Watch 2?\n  \u003ca href=\"#will-i-buy-watch-2\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eAt this stage I would say no. We bought the bottom-of-the-line Sport models\nbecause with version 1.0 of anything, you don\u0026rsquo;t want to spend so much that\nupgrading is ruled out. However these watches are still going great and a lot of\nthe improvements I am looking for will be in software not hardware.\u003c/p\u003e\n\u003cp\u003eBut 14 months ago, I was waiting for Apple to announce the iWatch as we all\nthought it would be called, and saying that I didn\u0026rsquo;t think I would get one. The\nfeature list convinced me and I have been delighted with it. So if Watch 2 comes\nup with some killer feature that matters to me, then I might have to\nre-consider\u0026hellip;\u003c/p\u003e\n"
    },
    {
        "title" : "How To Confuse TestFlight",
        "date_published" : "2016-04-24T00:00:00Z",
        "date_modified" : "2016-04-24T00:00:00Z",
        "id" : "https://troz.net/post/2016/how-to-confuse-testflight/",
        "url" : "https://troz.net/post/2016/how-to-confuse-testflight/",
        "content_html" : "\u003cp\u003eI ran into an unusual problem when testing my latest app: \u0026ldquo;\u003ca href=\"/what-is-my-speed/\"\u003eWhat Is My\nSpeed?\u003c/a\u003e\u0026rdquo;. It is now available from the \u003ca href=\"https://itunes.apple.com/app/what-is-my-speed/id1091394524\"\u003eiTunes App Store\u003c/a\u003e, but getting\nthere was a struggle.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"#tldr\"\u003eTL;DR\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eXcode is terrible at renaming projects, so it is a really good idea to have\nworked out your app\u0026rsquo;s name before starting. I would even recommend creating an\napp ID in your Apple Developer account and registering the app name in iTunes\nConnect. Only once you get to iTunes Connect will the name be checked for\nuniqueness. Searching the App Stores is not enough as it does not cover\nun-released apps or apps that are not available in your country.\u003c/p\u003e\n\u003cp\u003eSo I set up my app. I was hoping for \u0026ldquo;What\u0026rsquo;s My Speed?\u0026rdquo; but was happy with \u0026ldquo;What\nIs My Speed?\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eNext step was to create the project in Xcode which I did using the app name and\nmanually entering the bundle identifier that I had registered at Apple\nDeveloper. Xcode accepted the name without any warnings and created the default\ntargets using that name.\u003c/p\u003e\n\u003cp\u003eIn the default unit testing file, the module was defined like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e @testable \u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWhat\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eIs_My_Speed\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ewhich made me think that Xcode was quite happy to have parsed the app name as\nrequired to replace any unwanted characters to suit.\u003c/p\u003e\n\u003cp\u003eThe app was built, passed all unit tests, profiled, analyzed, tested on real\ndevices as well as the simulators and uploaded to TestFlight.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBARRRPPPP!\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/TestFlight_error.png\" alt=\"This app cannot be installed\"\u003e\u003c/p\u003e\n\u003cp\u003eWhat?\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e(I forgot to take a screenshot but found a similar one online. Thanks \u003ca href=\"https://www.simpletechs.net/apps/easy-fix-for-testflight-problem-after-restoring-from-backup/\"\u003eSimple\nTechs\u003c/a\u003e)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eI have had experience with TestFlight\u0026rsquo;s oddities in the past, so I incremented\nthe build number and tried again, thinking that maybe there had been a\nprocessing issue. Same result.\u003c/p\u003e\n\u003cp\u003eThis started a very frustrating 24 hours as I ran through all the possibilities\nI could think of or find suggested on the net. Due to disastrous Australian\ninternet speeds, especially uploads, each attempt took from 40 - 120 minutes.\nAbout 5 minutes to implement the next idea, 25 minutes upload time, then the\nrest waiting for Apple to process the app so I could try again.\u003c/p\u003e\n\u003cp\u003eHere is what I tried:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eUploaded a fresh build.\u003c/li\u003e\n\u003cli\u003eRemoved Bitcode.\u003c/li\u003e\n\u003cli\u003eFixed the code signing identity which was set to iOS Developer for some\nreason.\u003c/li\u003e\n\u003cli\u003eManually specified the provisioning profiles for all three components (iPhone\napp, WatchKit app, WatchKit Extension).\u003c/li\u003e\n\u003cli\u003eManually selected the code signing identity for the provisioning profiles.\u003c/li\u003e\n\u003cli\u003eUploaded using Application Loader instead of Xcode.\u003c/li\u003e\n\u003cli\u003eRemoved third-party framework.\u003c/li\u003e\n\u003cli\u003eRemoved WatchKit app.\u003c/li\u003e\n\u003cli\u003eRevoked my distribution profile, re-created it and updated all provisioning\nprofiles.\u003c/li\u003e\n\u003cli\u003eCreated a completely blank project with same app name and bundle identifier.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eAs you can see from this list, I thought it was a code signing or profile error.\nUsing \u003ca href=\"https://itunes.apple.com/app/apple-configurator-2/id1037126344\"\u003eApple Configurator 2\u003c/a\u003e (the modern version of iPhone Configuration\nUtility), I was able to get the logs from my iPhone and entries like the\nfollowing seemed to confirm this:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Error\" data-lang=\"Error\"\u003einstalld.staging/temp.2LWJ2h/extracted/Payload/What Is My Speed?.app : 0xe8008017 (A signed resource has been added, modified, or deleted.)}```\n\u003c/code\u003e\u003c/pre\u003e\u003c/blockquote\u003e\n\u003cp\u003eBut when I got to the stage of a completely blank app still failing, I suddenly\nthought of the question mark. With the benefit of my preamble to this post, you\nall probably got there long before I did, but I got there in the end.\u003c/p\u003e\n\u003cp\u003eThe solution was to remove the question mark from the names of the targets in\nXcode. I had to fix up the module names in my unit testing files, but apart from\nthat, there were no changes. After this I was able to upload the complete app to\nTestFlight and install it on my iPhone.\u003c/p\u003e\n\u003cp\u003eIt is possible that it was the Product Names that were the issue, rather than\nthe target name as in Build Settings, Product Name is set to be \u003ccode\u003e$(TARGET_NAME)\u003c/code\u003e\nby default but I didn\u0026rsquo;t test that. Maybe next time\u0026hellip;\u003c/p\u003e\n\u003cp\u003e\u003c!-- raw HTML omitted --\u003eTL;DR\u003c!-- raw HTML omitted --\u003e Do not put any unusual characters in your target names.\nAlphanumerics and spaces are OK, but I am not sure about anything else.\u003c/p\u003e"
    },
    {
        "title" : "What Is My Speed?",
        "date_published" : "2016-04-17T00:00:00Z",
        "date_modified" : "2016-04-17T00:00:00Z",
        "id" : "https://troz.net/what-is-my-speed/",
        "url" : "https://troz.net/what-is-my-speed/",
        "content_html" : "\u003c!-- raw HTML omitted --\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003e\u0026ldquo;What Is My Speed?\u0026rdquo; is available now from the \u003ca href=\"https://itunes.apple.com/app/what-is-my-speed/id1091394524\"\u003eiTunes App Store\u003c/a\u003e for iPhone\nand Apple Watch.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/speed_1.png\" alt=\"What Is My Speed? - iPhone\"\u003e\u003c/p\u003e\n\u003cp\u003eIf you read my recent blog post on \u003ca href=\"/post/2016-04-07-road-trip-apps/\"\u003eRoad Trip Apps\u003c/a\u003e you will have realised\nthat I was working on an app to fill a gap that I discovered in our road trip\napp arsenal. So here it is: \u0026ldquo;What Is My Speed?\u0026rdquo; for iPhone.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eTrack your speed on your iPhone while driving, bicycling, running\nor walking. See your course and altitude at all times.\u003c/p\u003e\n\u003cp\u003eOptionally set a speed limit and get audible warnings on your iPhone when you\nexceed it. Reduce the speed limit to zero or extend it over the maximum to turn\noff speed limit warnings.\u003c/p\u003e\n\u003cp\u003eDesigned for easy viewing in all light conditions and with very accessible\nswiping to change the speed limit quickly and easily.\u003c/p\u003e\n\u003cp\u003eIf you want more detailed information, tap the info button to see a complete\nlist of available data about your current location. \u003cem\u003eAltitude and floor data may\nnot always be available but will be displayed whenever possible.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/speed_2.png\" alt=\"What Is My Speed? details - iPhone\"\u003e\u003c/p\u003e\n\u003cp\u003eYour current iPhone settings are used to set the default units for speed and\naltitude, but these are easily changed after tapping the info button.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eTo adjust the speed limit, swipe from side to side. The speed limit indicator\nwill expand for easier viewing and the speed limit will increase or decrease.\nTap again to shrink the speed limit indicator or leave it for a few seconds and\nit will shrink automatically.\u003c/p\u003e\n\u003cp\u003eTap the \u0026ldquo;?\u0026rdquo; button on the main screen to be reminded of the available swipes.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/speed_3.png\" alt=\"What Is My Speed? adjust speed limit - iPhone\"\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003eLocation permissions:\u003c/strong\u003e On startup, the app will request permission to access\nyour location. This is how the speed, course and altitude data is gathered so is\nessential for the app to operate. Your location will only ever be tracked when\nthe app is the current foreground app.\u003c/p\u003e\n"
    },
    {
        "title" : "Road Trip Apps",
        "date_published" : "2016-04-07T00:00:00Z",
        "date_modified" : "2016-04-07T00:00:00Z",
        "id" : "https://troz.net/post/2016/road-trip-apps/",
        "url" : "https://troz.net/post/2016/road-trip-apps/",
        "content_html" : "\u003cp\u003eOver the past few months, we have done two long road trips: one approximately\n4,000 km and the other about 1,800 km. These gave us the chance to try out\nvarious apps for navigation and travel information. We live in Queensland,\nAustralia and some of these comments may be country-specific.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"navigation\"\u003e\n  Navigation\n  \u003ca href=\"#navigation\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eThe basic navigation came down to three apps:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.apple.com/ios/maps/\"\u003eApple Maps\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://itunes.apple.com/app/google-maps-real-time-navigation/id585027354\"\u003eGoogle Maps\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://itunes.apple.com/au/app/metroview-gps-navigation/id370753892\"\u003eMetroview\u003c/a\u003e (Australia and New Zealand only)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEach has their strengths and weaknesses:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eApple Maps is by far the most beautiful and easy to read. It integrates\nperfectly with Contacts (as you would expect). Turn-by-turn directions were\nmostly excellent. The biggest downside is that it does not allow you to\nspecify a route avoiding tolls.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eGoogle Maps allows you to plot a route avoiding tolls\u0026hellip; if you can find the\nsetting. Its traffic reporting is by far the best and it would offer suggested\nchanges of routes during the trip to get around traffic. The interface is\nconfusing at times. Turn-by-turn directions were good, although I would have\npreferred an Australian voice option.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eMetroview has all the maps downloaded which saves on data connection costs and\nhandles bad connectivity areas better. Its best feature is notification of\nspeed limits and alerts if you go over the limit, although it gets confused\nwhen on over or under-passes. Another very useful feature is the display of\nlanes when approaching highway exits, so you could tell which lane to be in.\nApparently the voice guidance is now more natural but we didn\u0026rsquo;t try this. The\ndisplay is messy and cluttered compared to the others.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe ended up with the following sequence:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eApple Maps for the bulk of the trip.\u003c/li\u003e\n\u003cli\u003eGoogle Maps \u0026amp; Metroview (on 2 separate iPhones) in the metropolitan areas and\nwhen about to take a highway exit.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eEven then it was amusing to see the apps panic when you took a new road and the\napps assumed you had left the road and were heading through the bush! And at one\npoint there was a large and official sign saying \u0026ldquo;Ignore GPS - do not take this\nturn\u0026rdquo; and sure enough, both Apple Maps and Google Maps wanted us to turn down a\nlittle country lane instead of keeping to the highway.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"speed-display\"\u003e\n  Speed Display:\n  \u003ca href=\"#speed-display\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eApart from the basic navigation apps, we tried a couple of speed display apps.\nThere are a lot of HUD speed apps out there that project the data on the the\nwindscreen but they had two problems:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThey only worked when it was dark. As soon as the sun got up, they became\ninvisible.\u003c/li\u003e\n\u003cli\u003eThey required you to place your iPhone flat on the dashboard so even if they\nhad worked during the day, the iPhone would have got far too hot and\nshut-down. (We have a mount that holds our iPhones in front of the air vents\nto avoid this over-heating problem. Any mount that sticks to the windscreen\nitself leaves the iPhone too exposed to the sun.)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOne we stuck with (in non-HUD mode) was \u003ca href=\"https://itunes.apple.com/app/speedometer-+-hud-digital/id375318117\"\u003eSpeedometer + HUD\u003c/a\u003e. This had a clear\ndisplay with a few flaws:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWhen moving from 99 kph to 100 kph, the display was not re-arranged for 3\ndigits. Moving from 101 down to 100 fixed it, but as 100 kph is the standard\nspeed limit, this was a frequent annoyance.\u003c/li\u003e\n\u003cli\u003eAdjusting the speed limit was too fiddly and difficult even for the passenger.\nIt would have been impossible for the driver.\u003c/li\u003e\n\u003cli\u003eIt only works in landscape mode which does not always suit the car mounts - we\nended up perching the 2nd iPhone on the unused ashtray.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe also tried \u003ca href=\"https://itunes.apple.com/app/talking-hud-voice-prompt-speedometer/id873194479\"\u003eTalking HUD\u003c/a\u003e but didn\u0026rsquo;t like it. It worked solely in HUD mode,\nso was only useful at night or very early morning. It had voice prompts to tell\nyou when to change gear but in an automatic car, they were just a distraction\nand it was not obvious how to turn them off.\u003c/p\u003e\n\u003cp\u003eBut overall, we found having a speed display app as well as a navigation app to\nbe the best combination. The audible alerts when you went over speed were very\nuseful when over-taking or getting up to speed as you could get the information\nwithout having to take your eyes off the road.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"future-app-plans\"\u003e\n  Future App Plans:\n  \u003ca href=\"#future-app-plans\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eHaving determined that a speed display app is really useful, but not finding one\nthat suited us perfectly, the obvious next step was to design my own. I wanted\nit to have the following features:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eclean display, visible in all light conditions\u003c/li\u003e\n\u003cli\u003eeasily settable speed limit\u003c/li\u003e\n\u003cli\u003eaudible and visual over-speed warnings\u003c/li\u003e\n\u003cli\u003eno HUD mode\u003c/li\u003e\n\u003cli\u003eApple Watch component for when you only had a single iPhone and it was\nnavigating but you still wanted a speed display\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSo watch this space for further news of my up-coming app\u0026hellip;\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"update\"\u003e\n  Update\n  \u003ca href=\"#update\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003e\u0026ldquo;\u003ca href=\"/what-is-my-speed/\"\u003eWhat Is My Speed?\u003c/a\u003e\u0026rdquo; is available now from the \u003ca href=\"https://itunes.apple.com/app/what-is-my-speed/id1091394524\"\u003eiTunes App Store\u003c/a\u003e for\niPhone and Apple Watch.\u003c/p\u003e\n"
    },
    {
        "title" : "Structs vs Classes",
        "date_published" : "2016-03-30T00:00:00Z",
        "date_modified" : "2016-03-30T00:00:00Z",
        "id" : "https://troz.net/post/2016/structs-vs-classes/",
        "url" : "https://troz.net/post/2016/structs-vs-classes/",
        "content_html" : "\u003cp\u003eOne of the big debates among Swift developers is when to use \u003ccode\u003estructs\u003c/code\u003e and when\nto use \u003ccode\u003eclasses\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eClasses are the building blocks of object-oriented programming\nbut structs as provided by Swift are newly powerful. Structs have been around in\nC-based languages for a long time, but Swift has made them more powerful and\ngiven them more features so that they are almost indistinguishable from classes.\nSo what are the differences and which one should you use?\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"where-they-are-the-same\"\u003e\n  Where they are the same?\n  \u003ca href=\"#where-they-are-the-same\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eboth can define initializers\u003c/li\u003e\n\u003cli\u003eboth can define properties\u003c/li\u003e\n\u003cli\u003eboth can define methods\u003c/li\u003e\n\u003cli\u003eboth can conform to protocols\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"where-they-are-different\"\u003e\n  Where they are different?\n  \u003ca href=\"#where-they-are-different\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eclasses can inherit from other classes\u003c/li\u003e\n\u003cli\u003estructs cannot inherit from other structs\u003c/li\u003e\n\u003cli\u003eclasses are reference types\u003c/li\u003e\n\u003cli\u003estructs are value types\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cp\u003eThe reference type vs value type difference is where things really get\ninteresting. Have a look at this example of a class with a single property:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePersonClass\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e name: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einit\u003c/span\u003e(name: String) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eself\u003c/span\u003e.name = name\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e personA = PersonClass(name: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Woody\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epersonA.name \u003cspan style=\"color:#75715e\"\u003e// Woody\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e personB = personA\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epersonB.name = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Buzz\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epersonB.name \u003cspan style=\"color:#75715e\"\u003e// Buzz\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat looks like standard stuff, but what do you think \u003ccode\u003epersonA\u003c/code\u003e\u0026rsquo;s name is now?\nIf you guessed \u0026ldquo;Buzz\u0026rdquo; then you win a prize! \u003cem\u003e(No, not a real prize - pat\nyourself on the back.)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThis is because when we created the \u003ccode\u003epersonB\u003c/code\u003e variable and assigned \u003ccode\u003epersonA\u003c/code\u003e to\nit, we did not assign the \u003cstrong\u003eVALUE\u003c/strong\u003e of \u003ccode\u003epersonA\u003c/code\u003e, we assigned a \u003cstrong\u003eREFERENCE\u003c/strong\u003e to\n\u003ccode\u003epersonA\u003c/code\u003e - actually the address in memory of \u003ccode\u003epersonA\u003c/code\u003e rather than the data\ninside.\u003c/p\u003e\n\u003cp\u003eSo now we have two objects and they are both looking at the same spot in memory\nfor their data. This means that changing the name of \u003ccode\u003epersonB\u003c/code\u003e changed the name\nof \u003ccode\u003epersonA\u003c/code\u003e as well.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s try the same thing with a struct:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePersonStruct\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e name: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e personC = PersonStruct(name: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Rex\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epersonC.name \u003cspan style=\"color:#75715e\"\u003e// Rex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e personD = personC\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epersonD.name = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hamm\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epersonD.name \u003cspan style=\"color:#75715e\"\u003e// Hamm\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epersonC.name \u003cspan style=\"color:#75715e\"\u003e// Rex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis time, because we are using a struct, when we assign \u003ccode\u003epersonC\u003c/code\u003e to the new\n\u003ccode\u003epersonD\u003c/code\u003e variable, we are actually making a copy of \u003ccode\u003epersonC\u003c/code\u003e and setting the\nvalues of \u003ccode\u003epersonD\u003c/code\u003e to this new copy. So now we can change \u003ccode\u003epersonD\u003c/code\u003e without\nmessing with \u003ccode\u003epersonC\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNote that I did not have a define an \u003ccode\u003einit\u003c/code\u003e for the struct because it creates\none automatically. You can still add one yourself if you want to do anything\ndifferent, but you do not have to.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eAt first glance, you may think that you should now use structs all the time to\navoid these unintended consequences, but it isn\u0026rsquo;t quite as simple as that.\nSometimes a class is still the best thing to use.\u003c/p\u003e\n\u003cp\u003eThe inheritance capabilities of classes can make your decision simple: if you\nneed to create a button and want to start by sub-classing UIButton or NSButton,\nthen your button must be a class, not a struct. This will apply to most user\ninterface objects.\u003c/p\u003e\n\u003cp\u003eApple really wants us to use structs and in the Swift standard libraries, a very\nhigh percentage of the objects are structs. But structs are especially well\nsuited to a certain subset of objects.\u003c/p\u003e\n\u003cp\u003eThe best explanation that I have found of when to use a struct is the \u003ca href=\"http://faq.sealedabstract.com/structs_or_classes/#an-alternative-hypothesis\"\u003eJeff Trick\u003c/a\u003e. Reduced down, the rule is:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIf you can overload == to compare two instances of your object, use a struct.\n\u003c!-- raw HTML omitted --\u003e If this doesn\u0026rsquo;t make sense, use a class.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eSo use structs for your things: Person, Shape, Brick, Cat. \u003c!-- raw HTML omitted --\u003e Use classes for\neverything else.\u003c/p\u003e\n\u003cp\u003eI would add one caveat: don\u0026rsquo;t fight the compiler. If using a struct is giving\nlots of errors and warnings, change to a class.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eA logical consequence of this is that all structs should conform to the\n\u003ca href=\"http://swiftdoc.org/v2.2/protocol/Equatable/\"\u003eEquatable\u003c/a\u003e protocol.\u003c/p\u003e\n\u003cp\u003eExtending \u003ccode\u003ePersonStruct\u003c/code\u003e to make it conform just requires a single function:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eextension\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePersonStruct\u003c/span\u003e: Equatable {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e == (lhs: PersonStruct, rhs: PersonStruct) -\u0026gt; Bool {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e lhs.name == rhs.name\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSince this struct only has one property, we can say that two instances of this\nstruct are equal if the names are equal.\u003c/p\u003e\n\u003cp\u003eTesting this, we can see:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e personC = PersonStruct(name: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Rex\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e personD = personC\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epersonD.name = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hamm\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epersonC == personD \u003cspan style=\"color:#75715e\"\u003e// false\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e personE = PersonStruct(name: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Rex\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epersonC == personE \u003cspan style=\"color:#75715e\"\u003e// true\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epersonC \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e personE \u003cspan style=\"color:#75715e\"\u003e// false\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eConveniently, providing an \u003ccode\u003e==\u003c/code\u003e function effectively gives us a \u003ccode\u003e!=\u003c/code\u003e function\nfor free as you can see from the last example.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eThere is one final point I would like to make about struct and that concerns\nmutating functions. Look at what happens if we include a function that changes\nthe \u003ccode\u003ename\u003c/code\u003e property in the struct:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/mutating.png\" alt=\"Mutating error\"\u003e\u003c/p\u003e\n\u003cp\u003eFix-it is very helpfully pointing out that the method needs to be marked as\n\u003ccode\u003emutating\u003c/code\u003e for this to work and is showing where this should go. Accepting the\nsuggestion will get rid of the error and then the name can be changed using this\nmethod.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePersonStruct\u003c/span\u003e: Equatable {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e name: String\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003emutating\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echangeName\u003c/span\u003e(to newName: String) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003enewName.isEmpty {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            name = newName\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e personC = PersonStruct(name: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Woody\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epersonC.name \u003cspan style=\"color:#75715e\"\u003e// Woody\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epersonC.changeName(to: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Sid\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epersonC.name \u003cspan style=\"color:#75715e\"\u003e// Sid\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThere is no problem about using \u003ccode\u003emutating\u003c/code\u003e and it will not have the unintended\nconsequences of using classes. Despite the scary name, a mutating function\nactually returns a new copy of the struct.\u003c/p\u003e\n\u003cp\u003eThe problem arises if you have many nested structs and the mutating has to\nspread through the list. So don\u0026rsquo;t nest your structs - at least not more than two\ndeep!\u003c/p\u003e\n"
    },
    {
        "title" : "Learning Swift - Optionals",
        "date_published" : "2016-03-12T14:24:00+10:00",
        "date_modified" : "2016-03-12T14:24:00+10:00",
        "id" : "https://troz.net/post/2016/learning-swift-optionals/",
        "url" : "https://troz.net/post/2016/learning-swift-optionals/",
        "content_html" : "\u003cp\u003eToday I plan to discuss optionals since they were a feature of Swift that I\nfound difficult to grasp at first.\u003c/p\u003e\n\u003ch2 id=\"what-is-an-optional-in-swift\"\u003e\n  What is an optional in Swift?\n  \u003ca href=\"#what-is-an-optional-in-swift\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eAn optional is a variable of a specified type that can also be nil.\u003c/p\u003e\n\u003ch2 id=\"why-does-this-matter\"\u003e\n  Why does this matter?\n  \u003ca href=\"#why-does-this-matter\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eIn Objective-C, any object type could be nil. If you declared a variable like\nthis:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-objectivec\" data-lang=\"objectivec\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNSString \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003emyString;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ethen \u003ccode\u003emyString\u003c/code\u003e was set to nil by default.\u003c/p\u003e\n\u003cp\u003eBut this could cause issues, especially as Objective-C does not complain if you\nsend a message to nil. This could lead to bugs that were very difficult to track\ndown.\u003c/p\u003e\n\u003cp\u003eThe other big use for nil is when returning from a function which has found no\nappropriate data to return. The classic example is when looking for the index of\nan element in an array. What should be returned if the element is not found in\nthe array?\u003c/p\u003e\n\u003cp\u003eSome languages return -1, Objective-C uses \u003ccode\u003eNSNotFound\u003c/code\u003e, but you have to know\nwhat each language is going to do. The more logical answer is nil. However if\nyour function is expected to return an integer, then it cannot return nil\nbecause nil is not an integer.\u003c/p\u003e\n\u003cp\u003eThis is where optionals come in: if the function is expected to return an\noptional integer, it can return with an integer with the index of the matching\nelement, or it can return nil if the element was not found. This is much clearer\nand less prone to error.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"how-does-swift-handle-optionals\"\u003e\n  How does Swift handle optionals?\n  \u003ca href=\"#how-does-swift-handle-optionals\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eOne of the first things that struck me about Swift was how clean the code\nlooked, without so many non-alphanumeric characters scattered around. Gone were\nall the:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e ; [ ]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBut instead, Swift code sprouted:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e ?\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhat were these?\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThe key to understanding optionals is to realise that when you declare an\noptional variable of a certain type, you are actually declaring a box that can\nhold a variable of that type or can hold nil.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eOnce you grasp that concept, it all becomes much more obvious.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e optionalInteger: Int?\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe ? indicates that this is an optional variable. It does not have to be\ninitialised as it is already set to nil which is valid for an optional variable.\nWithout the ? this would require initialisation as it would not be valid for it\nto be nil.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"setting-an-optional\"\u003e\n  Setting an optional\n  \u003ca href=\"#setting-an-optional\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eSetting the value of an optional variable is just the same as any other\nvariable:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eoptionalInteger = \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eoptionalInteger = \u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"getting-an-optional\"\u003e\n  Getting an optional\n  \u003ca href=\"#getting-an-optional\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eThe difference arises when you need to get the data out of the optional variable\nin order to use it. This process is called un-wrapping and it means to get the\nvariable value out of the \u0026lsquo;box\u0026rsquo; it is stored it.\u003c/p\u003e\n\u003ch3 id=\"the-most-obvious-way-is-to-use-\"\u003e\n  The most obvious way is to use !\n  \u003ca href=\"#the-most-obvious-way-is-to-use-\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e newInteger = optionalInteger!\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eDO NOT DO THIS!\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThis is called forced-unwrapping and assumes that the optional variable is not\nnil. If the optional is nil, this will crash. In Xcode, when you connect\ninterface elements from your storyboard to a Swift file, Xcode will use ! like\nthis:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003e@IBOutlet\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eweak\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e startButton: UIButton!\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI have to assume Xcode knows what it is doing and the button will be available\nwhen needed, but you should not use ! - it is un-safe. By using it, you are\nvowing to the compiler that when it gets to that point, the optional value will\nnot be nil. There are much better and safer ways of doing that.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"use-if-let\"\u003e\n  Use \u0026lsquo;if let\u0026rsquo;\n  \u003ca href=\"#use-if-let\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edoubleNumber\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e optionalInteger: Int?) -\u0026gt; Int? {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e integerValue = optionalInteger {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// integerValue is not an optional\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// and is guaranteed to contain an Int\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e integerValue \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// no integer found in the optional,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// so return nil to indicate failure\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"use-guard\"\u003e\n  Use guard\n  \u003ca href=\"#use-guard\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edoubleNumber\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e optionalInteger: Int?) -\u0026gt; Int? {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eguard\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e integerValue = optionalInteger \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// get out quickly,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// returning nil to indicate failure\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// integerValue is not an optional\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// and is guaranteed to contain an Int\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e integerValue \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThese two alternatives (\u003ccode\u003eif let\u003c/code\u003e \u0026amp; \u003ccode\u003eguard\u003c/code\u003e) do the same job but in opposite\nways. In both cases, they perform a conditional un-wrapping that may or may not\ngive a valid result. \u003ccode\u003eif let\u003c/code\u003e checks if it is OK to proceed. \u003ccode\u003eguard\u003c/code\u003e checks to\nsee if it is NOT OK to proceed. Which you use is really a matter of personal\npreference and working out what is more logical in each case.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eguard\u003c/code\u003e statement is really good for checking data early in a process and\nmaking a quick exit it something is wrong. The \u003ccode\u003eif let\u003c/code\u003e construct encloses your\nsuccess code inside a block and can sometimes leave the failure code a long way\nfrom the check which can make it less obvious. The other potential issue with\n\u003ccode\u003eif let\u003c/code\u003e is the \u0026ldquo;pyramid of doom\u0026rdquo; common in early Swift code as demonstrated in\nthis rather contrived example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eisValidAddressBookEntry\u003c/span\u003e(firstName: String?,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                             lastName: String?,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                             emailAddress: String?,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                             phoneNumber: String?) -\u0026gt; Bool {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e validFirstName = firstName {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e validLastName = lastName {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e validEmail = emailAddress {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e validPhone = phoneNumber {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThankfully, Swift now allows us to chain both \u003ccode\u003eif let\u003c/code\u003e and \u003ccode\u003eguard\u003c/code\u003e statements.\nHere is the previous example re-factored to use \u003ccode\u003eif let\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eisValidAddressBookEntrySwift2\u003c/span\u003e(firstName: String?,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                   lastName: String?,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                   emailAddress: String?,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                   phoneNumber: String?) -\u0026gt; Bool {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e validFirstName = firstName,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e validLastName = lastName,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e validEmail = emailAddress,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e validPhone = phoneNumber {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd here is the same function but using \u003ccode\u003eguard\u003c/code\u003e which allows the inputs to be checked immediately and the function exited if the u=inputs are not valid. For a short function like this, the change is not really significant, but if the function does a lot of processing of the input data, checking first and getting out as soon as possible is more efficient.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eisValidAddressBookEntryUsingGuard\u003c/span\u003e(firstName: String?,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                       lastName: String?,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                       emailAddress: String?,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                       phoneNumber: String?) -\u0026gt; Bool {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eguard\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e validFirstName = firstName,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e validLastName = lastName,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e validEmail = emailAddress,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e validPhone = phoneNumber \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"use-optional-chaining\"\u003e\n  Use optional chaining\n  \u003ca href=\"#use-optional-chaining\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThe final way to deal with optionals safely is to use optional chaining:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSocialMediaAccounts\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e facebook: Person?\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e twitter: Person?\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePerson\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e firstName: String?\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e lastName: String?\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e handle: String?\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e socialMedia: SocialMediaAccounts?\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esocialMedia = SocialMediaAccounts()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e twitterAccount = Person()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esocialMedia?.twitter = twitterAccount\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e twitterHandle = socialMedia?.twitter?.handle\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn this example, we have defined a \u003ccode\u003eSocialMediaAccounts\u003c/code\u003e struct that holds\noptional \u003ccode\u003ePerson\u003c/code\u003e structs for the various social media outlets. The\n\u003ccode\u003esocialMedia\u003c/code\u003e variable is defined as an optional and then created. A\n\u003ccode\u003etwitterAccount\u003c/code\u003e variable of type \u003ccode\u003ePerson\u003c/code\u003e is also created but contains no data\nat the moment.\u003c/p\u003e\n\u003cp\u003eWhen assigning the \u003ccode\u003etwitterAccount\u003c/code\u003e to the \u003ccode\u003esocialMedia.twitter\u003c/code\u003e property, a ?\nis inserted which checks to see that \u003ccode\u003esocialMedia\u003c/code\u003e is not nil. If it is nil,\nthen execution of that line stops at the ? and nothing bad will happen.\u003c/p\u003e\n\u003cp\u003eIn the same way, when trying to read back the twitter handle, we chained\ntogether 2 optionals with ?\u0026rsquo;s. If either \u003ccode\u003esocialMedia\u003c/code\u003e or \u003ccode\u003esocialMedia.twitter\u003c/code\u003e\nis nil, that line will not complete. Again this is perfectly safe and the app\nwill not crash.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eAll the examples in this article are available in a \u003ca href=\"https://github.com/trozware/optionals\"\u003eSwift playground\u003c/a\u003e which\nhas been updated to Swift 4 syntax.\u003c/p\u003e"
    },
    {
        "title" : "Learning Swift - For-Loops",
        "date_published" : "2016-03-12T00:00:00Z",
        "date_modified" : "2016-03-12T00:00:00Z",
        "id" : "https://troz.net/post/2016/learning-swift-for-loops/",
        "url" : "https://troz.net/post/2016/learning-swift-for-loops/",
        "content_html" : "\u003cp\u003eLoops are a fundamental building block of any program. Doing repetitive tasks\nfast and accurately is what computers are really good at and what we humans get\nvery bored doing. Swift offers several different ways to perform loops, but\ntoday we are going to concentrate on for-loops.\u003c/p\u003e\n\u003cp\u003eThe most basic form of loop is the \u003ccode\u003efor-in\u003c/code\u003e loop. There are two ways this can be\nused: looping over the numbers in a range or looping over the elements in an\narray or dictionary.\u003c/p\u003e\n\u003cp\u003eFirstly, the range:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e x \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e ..\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e { printWithSpace(x) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// prints: 0 1 2 3 4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cem\u003eI am using a custom print function that allows me to print the results on a\nsingle line for convenience.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThis \u003ccode\u003efor-in\u003c/code\u003e loop uses a half-open range and it is effectively saying:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estart with x at 0\nprint x with a space\nadd 1 to x\nis x still less than 5?\n    yes - go back to the print stage\n    no - stop\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we wanted to go all the way to 5 instead of stopping before 5, we would use a\nclosed range by replacing \u003ccode\u003e..\u0026lt;\u003c/code\u003e with \u003ccode\u003e...\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e x \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e ... \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e { printWithSpace(x) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// prints: 0 1 2 3 4 5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cp\u003eThese methods work fine if we want to loop through a range of numbers one at a\ntime but what if we want a different increment? There are several ways to vary\nthe step.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003estride(from:to:by:)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estride(from:through:by:)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ewhere\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e x \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e stride(from: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, to: \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, by: \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  printWithSpace(x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// prints: 0 2 4 6 8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e x \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e stride(from: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, through: \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, by: \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  printWithSpace(x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// prints: 0 2 4 6 8 10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe 2 variations of \u003ccode\u003estride\u003c/code\u003e are analogous to the 2 ways of expressing the range\nin the the \u003ccode\u003efor-in\u003c/code\u003e loop.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003estride(from:to:by:)\u003c/code\u003e starts with the number in the \u003ccode\u003efrom\u003c/code\u003e parameter and each\ntime through the loop, increments that number by the amount of the \u003ccode\u003eby\u003c/code\u003e\nparameter. If the incremented number is less than the \u003ccode\u003eto\u003c/code\u003e parameter, the loop\ncontinues.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003estride(from:through:by:)\u003c/code\u003e works the same way but continues until the\nincremented number is greater than or equal to the \u003ccode\u003ethrough\u003c/code\u003e parameter.\u003c/p\u003e\n\u003cp\u003eUsing a negative value for \u003ccode\u003eby\u003c/code\u003e allows counting backwards:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e x \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e stride(from: \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, through: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, by: \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  printWithSpace(x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// prints: 10 8 6 4 2 0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eStride can also be used for floating point loops although the result may contain\nsome unexpected changes in precision e.g 0.7000000000000001 instead of the\nexpected 0.7\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e startingNumber = \u003cspan style=\"color:#ae81ff\"\u003e0.1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e x \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e stride(from: startingNumber, through: \u003cspan style=\"color:#ae81ff\"\u003e1.0\u003c/span\u003e, by: \u003cspan style=\"color:#ae81ff\"\u003e0.2\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  printWithSpace(x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// prints: 0.1 0.3 0.5 0.7000000000000001 0.9\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNote that the result does not contain the \u003ccode\u003ethrough\u003c/code\u003e parameter as the next\niteration would have produced 1.1 which is greater than it. And also\n\u003ccode\u003estartingNumber\u003c/code\u003e did not have to be a variable as it is never actually changed.\u003c/p\u003e\n\u003cp\u003eUsing \u003ccode\u003ewhere\u003c/code\u003e makes it possible to step through a loop while conforming to some\nconditional:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e x \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e ... \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ewhere\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e == \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  printWithSpace(x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// prints: 0 3 6 9\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cp\u003eThe other main use for \u003ccode\u003efor-in\u003c/code\u003e loops is for iterating through the elements of\nan array or dictionary:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e arrayOfInts = [ \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e x \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e arrayOfInts {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  printWithSpace(x \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// prints: 2 4 6 8 10 12\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e myDict = [ \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;one\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;two\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;three\u0026#34;\u003c/span\u003e ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (key, value) \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e myDict {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003ekey\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e = \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003evalue\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// prints:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 2 = two\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 3 = three\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 1 = one\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAs a dictionary is un-sorted, the order of the items may vary.\u003c/p\u003e\n\u003cp\u003eIf you want to loop through an array while also monitoring the index of each\nelement, you can use \u003ccode\u003eenumerated()\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e arrayOfNames = [ \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Andy\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Buzz\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Woody\u0026#34;\u003c/span\u003e ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (index, element) \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e arrayOfNames.enumerated() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;The name at index \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003eindex\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e is \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\(\u003c/span\u003eelement\u003cspan style=\"color:#e6db74\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// prints:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// The name at index 0 is Andy\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// The name at index 1 is Buzz\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// The name at index 2 is Woody\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIf your array contains optionals, you can use \u003ccode\u003efor case let\u003c/code\u003e to test each value:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e arrayWithOptionals: [String?] = [ \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Woody\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Buzz\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Rex\u0026#34;\u003c/span\u003e ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e name? \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e arrayWithOptionals {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  printWithSpace(name)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// prints: Woody Buzz Rex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003ename\u003c/code\u003e variable is un-wrapped each time through the loop so can be used\nsafely.\u003c/p\u003e\n\u003cp\u003eAny of these loop styles can be combined with \u003ccode\u003ewhere\u003c/code\u003e to perform checks on each\niteration:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e arrayWithOptionals: [String?] = [ \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Woody\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Buzz\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Rex\u0026#34;\u003c/span\u003e ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e name? \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e arrayWithOptionals \u003cspan style=\"color:#66d9ef\"\u003ewhere\u003c/span\u003e name.count \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  printWithSpace(name)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// prints: Buzz Rex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cp\u003eSome of you may be wondering what happened to the old C-style loops like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e x = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; x \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e; x\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e { print(x, terminator: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis does not work in Swift 3+: the \u003ccode\u003e++\u003c/code\u003e and \u003ccode\u003e--\u003c/code\u003e operators and this style of\nloop declaration have been removed from the language. For further details, check\nout the relevant proposals at Swift Evolution:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md\"\u003eRemove C-style for-loops with conditions and incrementers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md\"\u003eRemove the ++ and \u0026ndash; operators\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cp\u003eAll the examples in this article are available in a \u003ca href=\"https://github.com/trozware/for-loops\"\u003eSwift playground\u003c/a\u003e now\nupdated to Swift 4 syntax.\u003c/p\u003e\n"
    },
    {
        "title" : "Learning Swift - Generics",
        "date_published" : "2016-02-29T00:00:00Z",
        "date_modified" : "2016-02-29T00:00:00Z",
        "id" : "https://troz.net/post/2016/learning-swift-generics/",
        "url" : "https://troz.net/post/2016/learning-swift-generics/",
        "content_html" : "\u003cp\u003eOne of the nice things about Swift is how clean your code looks. A lot of the\nweird characters that pepper the code of other languages has been eliminated: No\nmore semi-colons, asterisks etc.\u003c/p\u003e\n\u003cp\u003eBut then you are reading somebody else\u0026rsquo;s code and you find these angle brackets\nall over the place and they don\u0026rsquo;t seem to make sense.\u003c/p\u003e\n\u003cp\u003eWhat does this mean?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emid\u003c/span\u003e\u0026lt;T: Comparable\u0026gt;(array: [T]) -\u0026gt; T\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIt looks like it is a function to find the middle element in an array, but what\nis \u003ccode\u003e\u0026lt;T: Comparable\u0026gt;\u003c/code\u003e or \u003ccode\u003e[T]\u003c/code\u003e or even just \u003ccode\u003eT\u003c/code\u003e? They are describing Generic data\ntypes.\u003c/p\u003e\n\u003cp\u003eUsing the dictionary, I find the following definition for \u003ccode\u003egeneric\u003c/code\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003echaracteristic of or relating to a class or group of things; not specific.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAnd that really provides quite a good definition for Swift\u0026rsquo;s generics too. They\nallow you to assign a non-specific data type to a function so that function can\nbe used for many different data types.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eBut enough of the theory: by far the best way to understand generics is to\nencounter the problem they are meant to solve and then to solve it.\u003c/p\u003e\n\u003cp\u003eThe other day I was processing data to feed to a charting library. I ended up\nwith an array of CGFloats, but there were too many of them, so I wrote a\nfunction to give me the last x elements of an array of CGFloats:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eendOf\u003c/span\u003e(array: [CGFloat], numberOfElementsToInclude: Int) -\u0026gt; [CGFloat] {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e numberOfElementsToInclude \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e array.count { \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e array }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e startingElement = array.count \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e numberOfElementsToInclude\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e endOfArray = Array(array[startingElement ..\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e array.count])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e endOfArray\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e largeArray: [CGFloat] = [\u003cspan style=\"color:#ae81ff\"\u003e1.0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2.0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3.0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4.0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5.0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6.0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e7.0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e8.0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e9.0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e10.0\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e smallArray = endOf(array: largeArray, numberOfElementsToInclude: \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//smallArray now equals [8.0, 9.0, 10.0]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOK, so \u003ccode\u003elargeArray\u003c/code\u003e isn\u0026rsquo;t actually the largest array you have ever seen, but it\nworks for demo purposes. In my code, I had over 20,000 entries in the large\narray and only wanted the last 5,000.\u003c/p\u003e\n\u003cp\u003eI was completely happy with that until I found another data source where the\ndata was an array of Ints. Still perfectly chartable using my charting library,\nbut I could not get the end of the array using my nice function. First thought\nwas to replicate the function:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eendOf\u003c/span\u003e(array: [Int], numberOfElementsToInclude: Int) -\u0026gt; [Int] {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e numberOfElementsToInclude \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e array.count { \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e array }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e startingElement = array.count \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e numberOfElementsToInclude\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e endOfArray = Array(array[startingElement ..\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e array.count])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e endOfArray\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e largeArrayInt = [ \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e ] \u003cspan style=\"color:#75715e\"\u003e// type inferred to be Int\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e smallArrayInt = endOf(array: largeArrayInt, numberOfElementsToInclude: \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// smallArrayInt now equals [4, 5, 6, 7, 8, 9, 10]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA quick glance will reveal that the declaration line was the only thing that\nchanged. I didn\u0026rsquo;t have to give the function a new name because the compiler\nworked out which of the two functions to use based on the types supplied. So all\nI was doing was replacing \u003ccode\u003eCGFloat\u003c/code\u003e with \u003ccode\u003eInt\u003c/code\u003e in two places (the\n\u003ccode\u003enumberOfElementsToInclude\u003c/code\u003e parameter remains an \u003ccode\u003eInt\u003c/code\u003e in both cases).\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAs soon as you find yourself replicating code and only changing the types of\nthe data, that is a sign that you need to use generics.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eFor my first attempt at creating a generic function, all I did was replace the\nword \u003ccode\u003eCGFloat\u003c/code\u003e with \u003ccode\u003eT\u003c/code\u003e where \u003ccode\u003eT\u003c/code\u003e indicates some type that will be specified\nwhen the function is called. The convention is to use single letters for generic\ntypes: \u003ccode\u003eT\u003c/code\u003e for Type, \u003ccode\u003eA\u003c/code\u003e for AnyObject, \u003ccode\u003eZ\u003c/code\u003e because you feel like it. The choice\nis up to you.\u003c/p\u003e\n\u003cp\u003eThat produced this error:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Generics_error.png\" alt=\"Generics error\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eUse of undeclared type 'T'\u003c/code\u003e. Well that seems fair enough\u0026hellip; how is the compiler\nsupposed to know what a \u003ccode\u003eT\u003c/code\u003e is?\u003c/p\u003e\n\u003cp\u003eIt turns out that this is where the angle brackets come into play. You have to\nwarn the compiler that this function is going to get a generic type and that the\n\u003ccode\u003eT\u003c/code\u003e is only a placeholder, not a real type. So this version compiles and works -\nnotice the \u003ccode\u003e\u0026lt;T\u0026gt;\u003c/code\u003e between the function name and the opening bracket:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eendOf\u003c/span\u003e\u0026lt;T\u0026gt;(array: [T], numberOfElementsToInclude: Int) -\u0026gt; [T] {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e numberOfElementsToInclude \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e array.count { \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e array }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e startingElement = array.count \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e numberOfElementsToInclude\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e endOfArray = Array(array[startingElement ..\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e array.count])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e endOfArray\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow I have no code duplication and if I ever get another data set that uses a\ndifferent object type, my function will still work.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eNow we know to use generics instead of replicating code that operates in the\nsame way on different data types.\u003c/p\u003e\n\u003cp\u003eAnd we know how to construct a generic function.\u003c/p\u003e\n\u003cp\u003eUsing it is identical to using the two functions I had before:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e largeArray: [CGFloat] = [ \u003cspan style=\"color:#ae81ff\"\u003e1.0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2.0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3.0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4.0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5.0\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e6.0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e7.0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e8.0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e9.0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e10.0\u003c/span\u003e ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e smallArray = endOf(array: largeArray, numberOfElementsToInclude: \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e largeArrayInt = [ \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e ] \u003cspan style=\"color:#75715e\"\u003e// type inferred to be Int\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e smallArrayInt = endOf(array: largeArrayInt, numberOfElementsToInclude: \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou do not have to specify what \u003ccode\u003eT\u003c/code\u003e is when calling the function, that will be\ninferred from the supplied data.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eMoving on into more advanced use cases, we have two things to consider:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eFunctions where the generic parameters must conform to a protocol.\u003c/li\u003e\n\u003cli\u003eFunctions that take generic parameters of different types.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThe example function I started with (not mine but I forget where I got it\u0026hellip; If\nit is yours, thanks you very much) used:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emid\u003c/span\u003e \u0026lt;T: Comparable\u0026gt; (array: [T]) -\u0026gt; T\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eInstead of specifying the type as completely generic, it specified that it must\nconform to the Comparable protocol. This is because the function body used a\n\u003ccode\u003esort()\u003c/code\u003e function so the generic function needed to be sure that the elements in\nthe array could be compared. This technique can also be used to restrict the\nparameter types to sub-classes of a certain class.\u003c/p\u003e\n\u003cp\u003eFor a function with more than one generic data type, you need to use more than\none placeholder letter:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egenericWithTwoDifferentTypes\u003c/span\u003e\u0026lt;T, U\u0026gt;(param1: T, param2: U) -\u0026gt; Bool {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// ...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd in exactly the same way, both \u003ccode\u003eT\u003c/code\u003e and \u003ccode\u003eU\u003c/code\u003e can be set to conform to a\nprotocol or be members of a certain super-class.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eHopefully this has taken some of the mystery out of generics, but if you have\nany questions, please get in touch using the \u003ca href=\"/contact/\"\u003eContact page\u003c/a\u003e, comment below or\ncontact me via Twitter: \u003ca href=\"https://twitter.com/trozware\"\u003e@trozware\u003c/a\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "Singleton to Protocol",
        "date_published" : "2016-02-26T00:00:00Z",
        "date_modified" : "2016-02-26T00:00:00Z",
        "id" : "https://troz.net/post/2016/singleton-to-protocol/",
        "url" : "https://troz.net/post/2016/singleton-to-protocol/",
        "content_html" : "\u003cp\u003eI was driving through the town of \u003ca href=\"https://en.wikipedia.org/wiki/Singleton,_New_South_Wales\"\u003eSingleton\u003c/a\u003e the other day and of course, it\ngot me thinking about using singletons in my apps. Singletons were a commonly\nused pattern in Objective-C programming and appear in many of Apple\u0026rsquo;s own APIs,\nbut seem to be increasingly frowned upon in the Swift world.\u003c/p\u003e\n\u003ch2 id=\"so-what-is-a-singleton\"\u003e\n  So what is a singleton?\n  \u003ca href=\"#so-what-is-a-singleton\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eA singleton is a class that only expects to have a single instance. Think of it\nas a global instance of a class. In some cases this makes perfect sense if there\ncan only ever be one instance of a particular class or if there is a default\nvariant that suits most cases e.g.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eUIApplication.shared\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eUserDefaults.standard\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNotificationCenter.\u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eFileManager.\u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eURLSession.shared\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIf you are using an object with a property name of \u0026ldquo;shared\u0026rdquo;, \u0026ldquo;standard\u0026rdquo; or\n\u0026ldquo;default\u0026rdquo; you can be pretty sure it is an singleton.\u003c/p\u003e\n\u003ch2 id=\"and-whats-the-problem-with-singletons\"\u003e\n  And what\u0026rsquo;s the problem with singletons?\n  \u003ca href=\"#and-whats-the-problem-with-singletons\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eThere are probably many different opinions here but I have two thoughts about\nthis:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThey are effectively global variables and global variables can make your code\nmessy and un-predictable.\u003c/li\u003e\n\u003cli\u003eIf they can be accessed by multiple other objects, possibly at the same time,\nthen you can get conflicts. These can be handled by clever use of background\nqueues, but it isn\u0026rsquo;t easy.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"what-to-use-instead\"\u003e\n  What to use instead?\n  \u003ca href=\"#what-to-use-instead\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eAs I drove, I mused on a singleton that I had implemented recently. It was a\nlogging utility that allowed any object in my app (mostly view controllers) to\nsave a new entry to a log file. The basic structure of the Logger class was\nthis:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eLogger\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e sharedLogger = Logger()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eaddToLog\u003c/span\u003e(event: String) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#75715e\"\u003e// use private functions to find log file URL\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#75715e\"\u003e// append event text with time stamp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAny object in my app could use the Logger like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eLogger.sharedLogger.addToLog(event: newLogEvent)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhen I got to think about how I was using this, I realised that instead of a\nLogger \u003cem\u003eobject\u003c/em\u003e that everything could use, what I really needed was a Loggable\n\u003cem\u003ebehaviour\u003c/em\u003e that I could apply \u0026amp; restrict to the few classes that actually\nneeded to log events. For me, this was the break-through:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eCreate a behaviour, not an object.\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAs soon as I started thinking about this as a behaviour, a protocol became the\nobvious solution, so this is what I created:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eprotocol\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eLoggable\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// not declaring functions here\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// as they should NOT be over-written\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eextension\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eLoggable\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eaddToLog\u003c/span\u003e(event: String) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#75715e\"\u003e// use private functions to find log file URL\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#75715e\"\u003e// append event text with time stamp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe run immediately into one of the peculiarities of Swift protocol extensions\nwhich has been very well explained by \u003ca href=\"https://cjwirth.com/tech/swift-protocol-extension-weirdness\"\u003eCaesar Wirth\u003c/a\u003e. If I had declared\n\u003ccode\u003eaddToLog(_:)\u003c/code\u003e in the protocol, then any class or struct conforming to this\nprotocol would have been free to over-write this function and provide its own\nversion. This is not what I wanted here - I wanted every object to use the same\nversion. So I left the function declaration out of the protocol definition and\nonly included it in the protocol extension.\u003c/p\u003e\n\u003cp\u003eTo use this behaviour, a class or struct just has to be declared as conforming\nto the Loggable protocol:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyClass\u003c/span\u003e: Loggable {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edoSomething\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    addToLog(event: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;I did something!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFor my app, I knew that I would want all my NSViewControllers to be able to add\nlog events, so instead of setting them all individually as conforming to the\nprotocol, I used this shortcut which extends all NSViewControllers to conform to\nthe protocol.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eextension\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNSViewController\u003c/span\u003e: Loggable {}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI added this line to the Loggable.swift file where I declared the protocol and\nits extension, but outside both of them.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eProtocol-oriented programming is a new technique to me, so it really helps when\nI can find a practical example of where it solves a problem.\u003c/p\u003e\n\u003cp\u003eIf you are new to POP, I highly recommend the \u003ca href=\"https://developer.apple.com/videos/play/wwdc2015/408/\"\u003eCrusty talk\u003c/a\u003e from WWDC 2015.\nAnd this article by \u003ca href=\"http://matthijshollemans.com/2015/07/22/mixins-and-traits-in-swift-2/\"\u003eMatthijs Hollemans\u003c/a\u003e was invaluable to me in\ndemonstrating the problems with object inheritance that are solved by protocols.\u003c/p\u003e\n"
    },
    {
        "title" : "Three Rules for Writing Better Swift",
        "date_published" : "2016-02-24T00:00:00Z",
        "date_modified" : "2016-02-24T00:00:00Z",
        "id" : "https://troz.net/post/2016/three-rules-for-writing-better-swift/",
        "url" : "https://troz.net/post/2016/three-rules-for-writing-better-swift/",
        "content_html" : "\u003col\u003e\n\u003cli\u003eDo not use !.\u003c/li\u003e\n\u003cli\u003eUse let, not var.\u003c/li\u003e\n\u003cli\u003eAllow the compiler to infer types.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eRead on for more details\u0026hellip;\u003c/p\u003e\n\u003ch2 id=\"1-do-not-use-\"\u003e\n  1. Do not use !\n  \u003ca href=\"#1-do-not-use-\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eSwift uses optionals for values that can be nil. To use an optional value, you\nneed to \u0026ldquo;un-wrap\u0026rdquo; it first, which means getting the actual value out, assuming\nthat the value exists and the optional is not actually nil.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/post/2016-02-12-learning-swift-optionals/\"\u003eOptionals\u003c/a\u003e are the subject of a complete post by themselves, but for now, I\nwill just say this: When you use ! you are \u003cstrong\u003epromising\u003c/strong\u003e the compiler that you\nwill make sure there is a real value in that optional by the time it is needed.\u003c/p\u003e\n\u003cp\u003eIf this is not the case, your app will crash as shown in this playground:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Playground2.png\" alt=\"Playground crash\"\u003e\u003c/p\u003e\n\u003cp\u003eInstead of using ! you should use optional chaining with ? or check the value\nwith \u003ccode\u003eguard\u003c/code\u003e or \u003ccode\u003eif let\u003c/code\u003e before use.\u003c/p\u003e\n\u003cp\u003eOne trap to beware of is with Xcode\u0026rsquo;s attempts to be helpful and suggest fixes\nto problems. If you use an optional where it cannot work, Xcode will warn you\nthat it is incorrect, but the suggested fix will be to insert !\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/optional_fix.png\" alt=\"Optional fix\"\u003e\u003c/p\u003e\n\u003cp\u003eWhen you see this, do not accept the suggested fix, but use it as a warning to\nshow that you need to fix the problem properly.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"2-use-let-not-var\"\u003e\n  2. Use let, not var\n  \u003ca href=\"#2-use-let-not-var\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eUsing constants in C-based languages is a pain. I could never remember the\nObjective-C syntax for declaring a static constant, so used to fall back to\nusing \u003ccode\u003e#define\u003c/code\u003e for global constants. Inside my objects, all instance properties\nwere variables, not constants. Inside functions, it was the same.\u003c/p\u003e\n\u003cp\u003eIt doesn\u0026rsquo;t take much imagination to work out that your apps will perform better\nand more securely if values that do not need to change are allocated as\nconstants instead of variables.\u003c/p\u003e\n\u003cp\u003eWith Swift, this is easy as you just declare a constant using the \u003ccode\u003elet\u003c/code\u003e keyword\nand declare variables using \u003ccode\u003evar\u003c/code\u003e. The Swift compiler will now warn you if you\nhave used \u003ccode\u003evar\u003c/code\u003e where \u003ccode\u003elet\u003c/code\u003e would do, but I prefer to declare everything using\n\u003ccode\u003elet\u003c/code\u003e and only change to \u003ccode\u003evar\u003c/code\u003e when this causes an error as shown in this\nplayground example:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Playground3.png\" alt=\"Playground let error\"\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"3-allow-the-compiler-to-infer-types\"\u003e\n  3. Allow the compiler to infer types\n  \u003ca href=\"#3-allow-the-compiler-to-infer-types\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eWith Objective-C and many other languages, you have to tell the compiler exactly\nwhat each variable is going to be: a string, an integer, an object of a certain\ntype.\u003c/p\u003e\n\u003cp\u003eWith Swift, the compiler is clever enough to work this out for you, which can\nmake your code much cleaner looking and easy to read.\u003c/p\u003e\n\u003cp\u003eThere are a few exceptions to this rule which are shown in the playground below:\u003c/p\u003e\n\u003cp\u003eLines 3 - 6 are allowing the Swift compiler to decide what the type is and it is\nchoosing valid types: Int, Double, String and UIView.\u003c/p\u003e\n\u003cp\u003eLine 8 is a case where we do not want the default type, which would be Double so\nwe need to tell the compiler that this one really should be a CGFloat.\u003c/p\u003e\n\u003cp\u003eLines 10 \u0026amp; 11 both deal with an array of Ints. In line 10, the values are\nsupplied so the type of the array can be inferred. In the second case, the array\nis initially empty, so the type needs to be specified in the declaration.\u003c/p\u003e\n\u003cp\u003eLines 13 and 14 are the same but with dictionaries instead of arrays.\u003c/p\u003e\n\u003cp\u003eIn each case, it would have been valid Swift to specify the type but why bother?\nThe more text you enter , the more change of mistake and it leaves your code\nlooking cluttered.\u003c/p\u003e\n\u003cp\u003eIf you ever need to check what type has been assigned to a constant or variable,\nOption-click on it in Xcode and you willl get a popup telling you what it is.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Playground4.png\" alt=\"Playground types\"\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eThis was going to be five rules, but then I got a bit too verbose so will add\nmore rules in a separate post.\u003c/p\u003e"
    },
    {
        "title" : "Configuring Xcode",
        "date_published" : "2016-02-17T00:00:00Z",
        "date_modified" : "2016-02-17T00:00:00Z",
        "id" : "https://troz.net/post/2016/configuring-xcode/",
        "url" : "https://troz.net/post/2016/configuring-xcode/",
        "content_html" : "\u003cp\u003eWhile not strictly a part of my Learning Swift series, today I thought I would\ndiscuss some of the ways to configure and use Xcode to be a more productive and\ncomfortable programmer.\u003c/p\u003e\n\u003ch2 id=\"1-editor-color-themes-and-fonts\"\u003e\n  1. Editor color themes and fonts:\n  \u003ca href=\"#1-editor-color-themes-and-fonts\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"/images/XcodeFontPrefs.png\" alt=\"Editor\"\u003e\u003c/p\u003e\n\u003cp\u003eStep through the supplied themes and find the best one for you. Then click the\n\u0026lsquo;+\u0026rsquo; button at the bottom of the list and duplicate the selected theme. Now you\ncan tweak it to suit you. Each text category can have its own font and size, but\nyou can make multiple selections in order to do a bulk change. don\u0026rsquo;t forget to\ncheck out the Console section too - I dislike the default bold text for many of\nthe console reports, so always change that.\u003c/p\u003e\n\u003cp\u003eAn editing font should be mono-spaced i.e. every character should take up\nexactly the same width on the screen. This makes your code look neater and\nneater code is easier to read when you come back to it. I also much prefer a\nsans-serif font, but that is a matter of preference.\u003c/p\u003e\n\u003cp\u003eMenlo is the font used by Xcode as a default, but there are many other options\neither in the default installation of OS X or as free downloads. I change every\nnow and then just to keep things interesting, but my current selection is \u003ca href=\"https://github.com/tonsky/FiraCode\"\u003eFira\nCode\u003c/a\u003e. I love the way it merges two character symbols into a single\ncharacter for faster comprehension.\u003c/p\u003e\n\u003cp\u003eMy other favourites are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/adobe-fonts/source-code-pro\"\u003eSource Code Pro\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/chrissimpkins/hack\"\u003eHack\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/mozilla/Fira\"\u003eFira\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.fontsquirrel.com/fonts/Inconsolata\"\u003eInconsolata\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLook for a font that makes it easy to distinguish the digit \u0026lsquo;1\u0026rsquo; from a lowercase\n\u0026rsquo;l\u0026rsquo; and where the digit \u0026lsquo;0\u0026rsquo; is different to the \u0026lsquo;O\u0026rsquo;.\u003c/p\u003e\n\u003cp\u003eTo install and use a new font, download the files and then double-click a TTF or\nOTF font file to install it in FontBook. Once the font is installed, you may\nneed to restart Xcode in order to make it available.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"2-add-ons\"\u003e\n  2. Add-ons:\n  \u003ca href=\"#2-add-ons\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eUpdate:\u003c/strong\u003e Xcode 8 has removed the ability to run any plugins or to use\nAlcatraz, so this sectrion is no longer valid. Instead Apple is offering offical\nsupport for Xcode Source Editor Extensions, so they are the way of the future.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"3-documentation\"\u003e\n  3. Documentation:\n  \u003ca href=\"#3-documentation\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eXcode has excellent documentation, but unless you specifically download it, this\nwill all be accessed online. If you have a bad or non-existent connection, this\ncan be annoying. Go to Xcode\u0026rsquo;s Preferences -\u0026gt; Downloads and download all the\ndocument sets you are interested in. They are quite large, but having them local\nwill be a big bonus.\u003c/p\u003e\n\u003cp\u003eThe other tool I use for documentation is \u003ca href=\"https://kapeli.com/dash\"\u003eDash\u003c/a\u003e. It supports many languages\nand is not just for use in Xcode. I found the Xcode integration plugin was not\nvery useful as it conflicted with other useful behaviours. So I set up a global\nshortcut in System Preferences to search Dash for the selected text. This is\nmuch faster than Xcode\u0026rsquo;s built-in documentation.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Dash.png\" alt=\"Dash\"\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"4-other-preferences\"\u003e\n  4. Other preferences:\n  \u003ca href=\"#4-other-preferences\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eGo through the preference panes in Xcode\u0026rsquo;s preferences and tweak to suit your\nstyle or your group\u0026rsquo;s preferred style.\u003c/p\u003e\n\u003cp\u003eGeneral and Text Editing are important. Text Editing has a second tab for\nIndentation which is easy to miss. Indentation styles seem to cause a lot of\nheated debate, so make sure you check this out.\u003c/p\u003e\n\u003cp\u003eAccounts is vital if you are publishing to the App Stores and also makes it easy\nto transfer all your develop information from one computer to another.\u003c/p\u003e\n\u003cp\u003eFonts \u0026amp; Colors and Downloads are discussed above.\u003c/p\u003e\n\u003cp\u003eI tend to leave the others set to the defaults.\u003c/p\u003e\n"
    },
    {
        "title" : "How do I start to learn Swift?",
        "date_published" : "2016-02-16T00:00:00Z",
        "date_modified" : "2016-02-16T00:00:00Z",
        "id" : "https://troz.net/post/2016/how-do-i-start-to-learn-swift/",
        "url" : "https://troz.net/post/2016/how-do-i-start-to-learn-swift/",
        "content_html" : "\u003cp\u003eThe first thing to do is to download the latest version of Apple\u0026rsquo;s \u003ca href=\"https://itunes.apple.com/book/swift-programming-language/id881256329\"\u003eSwift\nProgramming Language book\u003c/a\u003e from the iBooks Store.\u003c/p\u003e\n\u003cp\u003eYou can just read this book, especially the first section: \u0026ldquo;A Swift Tour\u0026rdquo;, but\nyou will get more out of it if you follow along with the playground. There is a\nlink to download the playground from the book which you can use directly if you\nare reading using iBooks on the Mac. If you are not, here is the \u003ca href=\"https://developer.apple.com/go/?id=swift-tour\"\u003edownload\nlink\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eYou will also need to install \u003ca href=\"https://itunes.apple.com/app/xcode/id497799835\"\u003eXcode\u003c/a\u003e from the Mac App Store. Xcode is\nApple\u0026rsquo;s IDE and is used for programming Mac, iPhones, iPads, Apple Watches and\nApple TVs.\u003c/p\u003e\n\u003cp\u003eSwift introduced the playground to Xcode. A playground is a fantastic way to\nlearn and experiment. You do not need to create a project, build, run a separate\napp, install on a device. Code typed into a playground is run immediately and\nyou can see the results instantly, line by line.\u003c/p\u003e\n\u003cp\u003eHere is an example of a playground showing the code on the left and the result\nof each line appearing on the right.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Playground1.png\" alt=\"Playground\"\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eOnce you have gone through the Swift Tour, Apple\u0026rsquo;s book becomes more of a\nreference guide to return to whenever you get stuck. The other way I use it is\nto check up on changes made when a new version of Swift is released. As the\nlanguage is still rapidly evolving, these can be quite extensive. Once I have\nthe latest version of the book, I go to the Revision History at the back and\nclick the links to read about the features that have been added or changed.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eApart from Apple\u0026rsquo;s documentation, there are a lot of great web sites, blogs and\nTwitter accounts out there. There are also useful newsletters that give a weekly\nsummary of exciting developments.\u003c/p\u003e\n\u003cp\u003eHere are some of my favourites:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.natashatherobot.com\"\u003eNatasha the Robot\u003c/a\u003e - my favourite Swift blogger - sign up for her\nnewsletter and follow her on Twitter.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/swift/blog/\"\u003eApple\u0026rsquo;s Swift Blog\u003c/a\u003e - not many posts, but good for learning about new\nfeatures.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://ericasadun.com\"\u003eErica Sadun\u003c/a\u003e - sometimes a bit too technical for me, but often contains\nsome really useful snippets. Erica has the distinction of being the first\nperson outside Apple to have had a Swift language proposal accepted as part of\nthe open source development process.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://andybargh.com\"\u003eAndy Bargh\u003c/a\u003e - detailed articles on various aspects of Swift, plus a\nweekly newsletter.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.raywenderlich.com\"\u003eRay Wenderlich tutorials\u003c/a\u003e - search for Swift and find heaps of tutorials\ncovering many different aspects.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://swiftsandbox.io\"\u003eSwift Sandbox\u003c/a\u003e - weekly newsletter filled with interesting articles.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://swiftmonthly.com\"\u003eSwiftMonthly\u003c/a\u003e - useful newsletter with links to tutorials, videos and\nprojects.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://swiftdoc.org\"\u003eSwiftDoc.org\u003c/a\u003e - the documentation in Xcode is still heavily skewed\ntowards Objective-C programmers and it can be difficult to find Swift-specific\nentries. This site makes it easy.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAnd I hope you will keep coming back to this site to see what new Swift-related\narticles are available.\u003c/p\u003e\n"
    },
    {
        "title" : "Icon Builder 3.2 Released",
        "date_published" : "2016-02-10T00:00:00Z",
        "date_modified" : "2016-02-10T00:00:00Z",
        "id" : "https://troz.net/post/2016/icon-builder-32-released/",
        "url" : "https://troz.net/post/2016/icon-builder-32-released/",
        "content_html" : "\u003cp\u003e\u003ca href=\"http://itunes.apple.com/app/icon-builder/id552293482\"\u003eIcon Builder 3.2\u003c/a\u003e is now available from the Mac App Store.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIcons for Apple Watch apps now have their alpha channel removed.\u003c/li\u003e\n\u003cli\u003eTidier folder structure for related files (iTunes Artwork files and Read Me).\u003c/li\u003e\n\u003cli\u003eUpdated to work with Xcode 7\u0026rsquo;s Assets.xcassets folders.\u003c/li\u003e\n\u003cli\u003eCreates iPad Pro icons for Xcode 7.2 or later.\u003c/li\u003e\n\u003cli\u003eFix for Retina Macs creating double-sized images.\u003c/li\u003e\n\u003c/ul\u003e\n"
    },
    {
        "title" : "Why is Swift so great?",
        "date_published" : "2016-02-10T00:00:00Z",
        "date_modified" : "2016-02-10T00:00:00Z",
        "id" : "https://troz.net/post/2016/why-is-swift-so-great/",
        "url" : "https://troz.net/post/2016/why-is-swift-so-great/",
        "content_html" : "\u003cp\u003eFirstly, I can give you the technical answer, as published by Apple:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSwift is a new programming language for iOS, OS X, watchOS, and tvOS apps that\nbuilds on the best of C and Objective-C, without the constraints of C\ncompatibility. Swift adopts safe programming patterns and adds modern features\nto make programming easier, more flexible, and more fun. Swift’s clean slate,\nbacked by the mature and much-loved Cocoa and Cocoa Touch frameworks, is an\nopportunity to reimagine how software development works.\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e Swift has\nbeen years in the making. Apple laid the foundation for Swift by advancing our\nexisting compiler, debugger, and framework infrastructure. We simplified\nmemory management with Automatic Reference Counting (ARC). Our framework\nstack, built on the solid base of Foundation and Cocoa, has been modernized\nand standardized throughout. Objective-C itself has evolved to support blocks,\ncollection literals, and modules, enabling framework adoption of modern\nlanguage technologies without disruption. Thanks to this groundwork, we can\nnow introduce a new language for the future of Apple software development.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eExcerpt From: Apple Inc. “\u003ca href=\"https://itunes.apple.com/book/swift-programming-language/id881256329\"\u003eThe Swift Programming Language (Swift 2.1)\u003c/a\u003e.”\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"now-i-can-give-you-my-opinion\"\u003e\n  Now I can give you my opinion:\n  \u003ca href=\"#now-i-can-give-you-my-opinion\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eSwift makes for code that is easier \u0026amp; faster to write.\u003c/li\u003e\n\u003cli\u003eSwift makes for code that is easier \u0026amp; cleaner to read (much more important\nthan ease of writing).\u003c/li\u003e\n\u003cli\u003eSwift code is safer code.\u003c/li\u003e\n\u003cli\u003eSwift breaks free from the out-dated conventions of C-based languages.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cp\u003eWhen Apple announced Swift at WWDC 2105, I was astounded. That such a major\nevent could have been kept completely secret was amazing. Then I watched every\nvideo from WWDC 2015 that discussed Swift. Some were beyond me and others I\nabsorbed. Looking back, I can see that the development of Objective-C over the\npast few years was all aimed at getting to this point, especially with the\nintroduction of ARC and blocks.\u003c/p\u003e\n\u003cp\u003eAt that time, I was deeply involved in an existing Objective-C project and not\nable to do much in Swift. But I went through the introduction at the start of\nthe \u003ca href=\"https://itunes.apple.com/book/swift-programming-language/id881256329\"\u003eSwift Programming Language\u003c/a\u003e book in iBooks and was able to get some\nideas about how the language worked.\u003c/p\u003e\n\u003cp\u003eSome months later, I was able to spend time on Swift. As a learning exercise, I\nconverted an existing Objective-C iOS app to Swift. As might be expected, I\nreally just wrote Objective-C code using Swift syntax. It took a lot more\nlearning before I was able to write Swift-y code instead of just translated\nObjective-C. In future posts of this series, I hope to enable others to cross\nthat divide faster than I did.\u003c/p\u003e\n\u003cp\u003eNow when I go back to an Objective-C app, I feel like I am walking a tight-rope.\nWhen I use an NSArray, NSSet or NSDictionary, I think \u0026ldquo;How can I tell what sort\nof objects are in that array?\u0026rdquo;. When I use an object, I think \u0026ldquo;What if that\nobject is nil?\u0026rdquo;. All of a sudden, code that appeared stable now feels random.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eOne of the big things that people have latched onto with Swift is that it allows\nfunctional programming. I plan several detailed posts on functional programming\nin this series. But for now I would just recommend that you not worry about the\ndistinction between procedural \u0026amp; functional programming. Both have their\nadvocates and their detractors. Both have their advantages and disadvantages.\nJust do what ever works for you and we can worry about this later.\u003c/p\u003e\n"
    },
    {
        "title" : "Learning Swift - An Introduction",
        "date_published" : "2016-02-09T00:00:00Z",
        "date_modified" : "2016-02-09T00:00:00Z",
        "id" : "https://troz.net/post/2016/learning-swift-an-introduction/",
        "url" : "https://troz.net/post/2016/learning-swift-an-introduction/",
        "content_html" : "\u003ch2 id=\"welcome-to-learning-swift\"\u003e\n  Welcome to Learning Swift.\n  \u003ca href=\"#welcome-to-learning-swift\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eThis is the first post in what I hope will be an extensive series dealing with\nthe Swift language. Here are some of the questions I hope to answer:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eShould I learn Swift? Why?\u003c/li\u003e\n\u003cli\u003eWhy is Swift so great?\u003c/li\u003e\n\u003cli\u003eHow should I start learning Swift?\u003c/li\u003e\n\u003cli\u003eI already know Objective-C - how do I convert?\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAfter that, I am planning a series of posts discussing the major differences of\nSwift from the view point of an Objective-C programmer and the aspects of Swift\nthat I found difficult to grasp. Topics covered will include such things:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eoptionals\u003c/li\u003e\n\u003cli\u003eclosures\u003c/li\u003e\n\u003cli\u003efunctional programming\u003c/li\u003e\n\u003cli\u003eprotocols\u003c/li\u003e\n\u003cli\u003egenerics\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI am coming from a background of Objective-C, so many of my posts will be\ndealing with aspects of Swift that are not familiar to Objective-C programmers.\nI will not assume any Objective-C programming experience, but some features of\nSwift that are new to me, will be familiar to people accustomed to other\nlanguages.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eSo let\u0026rsquo;s start by answering the first question:\u003c/p\u003e\n\u003ch2 id=\"should-i-learn-swift\"\u003e\n  Should I learn Swift?\n  \u003ca href=\"#should-i-learn-swift\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eIf you are writing or planning apps for any Apple platform - YES.\u003c!-- raw HTML omitted --\u003e If not,\nwait until Swift is available for the platforms you need to support.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"why\"\u003e\n  Why?\n  \u003ca href=\"#why\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003ch3 id=\"if-you-are-already-an-ios-or-mac-developer-yes\"\u003e\n  If you are already an iOS or Mac developer: YES\n  \u003ca href=\"#if-you-are-already-an-ios-or-mac-developer-yes\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThis is the new language and Apple is very committed to it. Objective-C is not\ngoing away any time soon, but Swift is where it is going to end up, so why not\nmake the jump now while the language is still in development? You have to accept\nthat fact that every release of Xcode is going to break your code, but the\nautomatic re-factoring works very well. And by moving to Swift now, you get the\nchance to influence the direction of a new language. How often does that happen?\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"if-you-are-starting-to-learn-ios-or-mac-development-yes\"\u003e\n  If you are starting to learn iOS or Mac development: YES\n  \u003ca href=\"#if-you-are-starting-to-learn-ios-or-mac-development-yes\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eIf you have no history with Objective-C, then do not waste your time learning\nit. There is still a lot of sample code out there in Objective-C, but increasing\nnumbers of tutorial sites are using Swift and converting their existing\ntutorials to Swift. It will help if you know just enough Objective-C to read it,\nbut you do not need to know enough to write it.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"if-you-do-not-program-for-mac-or-ios-not-yet\"\u003e\n  If you do NOT program for Mac or iOS: NOT YET\n  \u003ca href=\"#if-you-do-not-program-for-mac-or-ios-not-yet\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eSwift went open source in late 2015. This is a big deal and Apple\u0026rsquo;s plans for\nSwift are quite clear. They want Swift to be such a main-stream language that it\nis used instead of Java for basic computer science courses in universities. This\nwas never going to happen unless the language was open-source and\ncross-platform. It is now open-source and available for \u003ca href=\"https://swift.org/download/#latest-development-snapshots\"\u003eLinux as well as\nMac/iOS\u003c/a\u003e. While Apple has not yet released any further ports, I think there\nare more on the way for Raspberry Pi, Arduino and other embedded systems as well\nas server-side Swift libraries like \u003ca href=\"http://perfect.org\"\u003ePerfect\u003c/a\u003e. I expect that a version for\nWindows will not be far behind.\u003c/p\u003e\n"
    },
    {
        "title" : "New Twitter account",
        "date_published" : "2016-02-09T00:00:00Z",
        "date_modified" : "2016-02-09T00:00:00Z",
        "id" : "https://troz.net/post/2016/new-twitter-account/",
        "url" : "https://troz.net/post/2016/new-twitter-account/",
        "content_html" : "\u003cp\u003eI have started a new Twitter account so that I can provide rapid support to\nusers of my apps. Please contact me \u003ca href=\"https://twitter.com/trozware\"\u003e@trozware\u003c/a\u003e if you have any questions,\nsuggestions, bug reports or would just like to chat.\u003c/p\u003e\n\u003cp\u003eI will also be using this account to promote my new \u003ca href=\"/post/2016-02-09-learning-swift-an-introduction/\"\u003eLearning Swift\u003c/a\u003e series.\u003c/p\u003e\n"
    },
    {
        "title" : "Possible issues with Icon Builder \u0026 Watch icons",
        "date_published" : "2016-02-06T00:00:00Z",
        "date_modified" : "2016-02-06T00:00:00Z",
        "id" : "https://troz.net/post/2016/possible-issues-with-iconbuilder/",
        "url" : "https://troz.net/post/2016/possible-issues-with-iconbuilder/",
        "content_html" : "\u003cp\u003eIt has come to my attention that there are two possible issues with Icon Builder\n3.0.1 when using icons created for an Apple Watch app. Once of them is something\nI can fix and the other appears to be a bug in Xcode 7.2\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003eUpdate:\u003c/strong\u003e Version 3.2 of Icon Builder is now available in the \u003ca href=\"http://itunes.apple.com/app/icon-builder/id552293482\"\u003eMac App\nStore\u003c/a\u003e. This removes the alpha channel from icons for a watch app.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eThe first problem is that iTines Connect now requires that the icons for an\nApple Watch app include no alpha channel. This is becoming an increasing trend\nwith it first having applied to the large icon file you upload directly to\niTunes Connect, then to screen shots. I expect it to extend to iOS app icons\nsoon, but hopefully Mac app icons can continue to include transparency.\u003c/p\u003e\n\u003cp\u003eWith Apple Watch icons, you are supposed to create a set of square icons and\nwatchOS or iTunesConnect applies the rounding mask. Presumably this is more\ncomplicated if the icon contains an alpha channel even if there are no\ntransparent pixels. If your Watch app icons contain an alpha channel, you will\nsee errors like this after uploading your app to iTunes Connect:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eInvalid Icon - The watch application \u0026lsquo;AppName.app/Watch/AppName WatchKit\nApp.app\u0026rsquo; contains an icon file \u0026lsquo;AppName.app/Watch/AppName WatchKit\n\u003ca href=\"mailto:App.app/AppIcon-Watch24x24@2x.png\"\u003eApp.app/AppIcon-Watch24x24@2x.png\u003c/a\u003e\u0026rsquo; with an alpha channel. Icons should not\nhave an alpha channel.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eYou will probably get this error message for every icon size in the Watch app (8\nin total). Until I release a new version of Icon Builder that allows for this\nthis, I suggest you use this \u003ca href=\"https://www.cocoacontrols.com/controls/alpha-channel-remover\"\u003eAlpha Channel Remover app\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIn your Xcode project, go to WatchKit App Assets.xcassets, select the AppIcon\nset, right-click and choose \u0026ldquo;Show in Finder\u0026rdquo;. A folder will open containing\neight .png files and one .json file. Drag \u0026amp; drop the .png files into the Alpha\nChannel Remover window and click the \u0026ldquo;Remove Alpha Channel\u0026rdquo; button. This will\nreplace all those image files with new versions without alpha channels. To\nconfirm this, select any of the images and press Command-I to get info. In the\nMore Info section, you will see \u0026ldquo;Alpha channel: No\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eYou can now submit your app again, but that only solves one of the issues.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eThe other problem is that you will get a warning about the \u003ca href=\"mailto:44x44@2x.png\"\u003e44x44@2x.png\u003c/a\u003e icon\nfile.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eInvalid Icon Name - The watch application \u0026lsquo;AppName.app/Watch/AppName WatchKit\nApp.app\u0026rsquo; contains an invalid icon file name \u0026lsquo;AppName.app/Watch/AppName\nWatchKit \u003ca href=\"mailto:App.app/AppIcon-Watch44x44@2x.png\"\u003eApp.app/AppIcon-Watch44x44@2x.png\u003c/a\u003e\u0026rsquo;. Make sure that icon file names\nfollow the pattern\u003c!-- raw HTML omitted --\u003e \u0026ldquo;\u003ccode\u003e*\u0026lt;dimension\u0026gt;@\u0026lt;scale\u0026gt;x.png\u003c/code\u003e\u0026rdquo; and they match the\nrequired dimensions. Please visit \u003ca href=\"https://developer.apple.com/watchkit/\"\u003ehttps://developer.apple.com/watchkit/\u003c/a\u003e for\nmore information.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAs you can see in the error message, the icon name (which is set by Xcode) does\nconform to the required pattern, and the image is the correct size. This appears\nto be a \u003ca href=\"http://www.openradar.me/23801324\"\u003ebug in Xcode 7.2\u003c/a\u003e but does not stop you from submitting your app as\nit is only a warning and not an error. Presumably this will be fixed in later\nversion of Xcode. I am running Xcode 7.2.1 and still see this warning.\u003c/p\u003e\n"
    },
    {
        "title" : "Man Reader 1.5",
        "date_published" : "2016-01-31T00:00:00Z",
        "date_modified" : "2016-01-31T00:00:00Z",
        "id" : "https://troz.net/post/2016/man-reader-1.5/",
        "url" : "https://troz.net/post/2016/man-reader-1.5/",
        "content_html" : "\u003cp\u003eMan Reader has been updated to version 1.5 with a major improvement in the way\nit looks for available man pages.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/manreader/\"\u003eMan Reader 1.5\u003c/a\u003e is now available through the \u003ca href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\"\u003eMac App Store\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"change-log\"\u003e\n  Change Log:\n  \u003ca href=\"#change-log\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eMuch improved searching for available man pages.\u003c/li\u003e\n\u003cli\u003eSand-boxed version now works just as well as the non-sand-boxed.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe main feature of this version is that it solves the previous problems with\nthe App Store version and sand-boxing. This was restricting the number of man\npages listed in Man Reader so I had to release a non-sand-boxed version of the\napp to allow for full functionality.\u003c/p\u003e\n\u003cp\u003eHowever I discovered that although this gave better results, it was still\nmissing a lot of man pages. Version 1.5 now queries the man page files in a\ncompletely different way which is listing many more man pages.\u003c/p\u003e\n\u003cp\u003eIf you previously had downloaded the Man Reader (no SB) version of the app from\nthis site, please revert to the App Store version which you would have needed to\nhave bought in order to use the downloaded app. If you bought the app from\nPaddle, \u003ca href=\"mailto:sarah@troz.net?subject=Man%20Reader%20transfer%20to%20App%20Store\"\u003econtact me\u003c/a\u003e and I will transfer you to the App Store version.\nNeither of these other versions will be supported or updated any more.\u003c/p\u003e\n"
    },
    {
        "title" : "Using 19th Hole on the Apple Watch",
        "date_published" : "2015-12-12T00:00:00Z",
        "date_modified" : "2015-12-12T00:00:00Z",
        "id" : "https://troz.net/post/2015/using-19th-hole-on-the-apple-watch/",
        "url" : "https://troz.net/post/2015/using-19th-hole-on-the-apple-watch/",
        "content_html" : "\u003cp\u003e19th Hole for iPhone and Apple Watch version 3 is now available through the\n\u003ca href=\"https://itunes.apple.com/us/app/the-19th-hole/id871686159?mt=8\u0026amp;uo=4\"\u003eiTunes App Store\u003c/a\u003e. This version is a complete re-write to accommodate the\nchanges in iOS 9 and watchOS2.\u003c/p\u003e\n\u003cp\u003eThe major changes are to do with the way the iPhone and the Watch communicate.\nIn watchOS1, all the brains of the app had to live in the iPhone, meaning that\nevery single interaction on the Watch had to be referred back to the iPhone for\nprocessing and the result sent back to the Watch for display. This lead to\ncommunications delays and breakdowns which caused third-party apps to work\nsluggishly or not at all. In watchOS2, the brains of the watch part of the app\ncan now operate inside the watch, greatly reducing the number of communications\nneeded. As well as that, Apple has now provided us with multiple ways of getting\ndata to and from the Watch which again improves performance and reliability.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eWith the 19th Hole, I made the decision to change the method of inputting\nscores. The previous version used a slider with plus and minus buttons to adjust\nscores. The problems with this were the small target area of the plus \u0026amp; minus\nbuttons as well as the fact that a slider with more than about 3 divisions was\nnot useful as a visual indicator.\u003c/p\u003e\n\u003cp\u003eWhen watchOS2 allowed developers access to the digital crown, I decided to\nswitch to using that instead. Now you tap the score box of the player you wish\nto adjust and use the digital crown to select a number. I think this will be\neasier to use while wearing a glove and hope that it is still easy to read out\ndoors.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eThe other suggestion is not to do with watchOS2 but is a general tip for using\napps of this kind. By default, the Apple Watch will always show the watch face\nwhen you raise your wrist. Normally this is the most useful thing, but when\nscoring a round of golf, it would be easier if The 19th Hole app stayed at the\nfront. To make this happen, you need to set to watch to show the last used app\ninstead of the watch face. This can be set using the Apple Watch app on the\nphone or on the watch itself.\u003c/p\u003e\n\u003cp\u003eOn the phone:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOpen the Apple Watch app.\u003c/li\u003e\n\u003cli\u003eSelect My Watch from the tabs at the bottom.\u003c/li\u003e\n\u003cli\u003eTap \u0026ldquo;General\u0026rdquo; and then scroll down to tap \u0026ldquo;Wake Screen\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eMake sure \u0026ldquo;Resume Last Activity\u0026rdquo; is checked.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOn the watch:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePress the digital crown to see the app icons.\u003c/li\u003e\n\u003cli\u003eFind and tap the Settings icon.\u003c/li\u003e\n\u003cli\u003eScroll down and tap \u0026ldquo;General\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eTap \u0026ldquo;Wake Screen\u0026rdquo; and scroll down to make sure that \u0026ldquo;Previous Activity\u0026rdquo; is\nchecked in the \u0026ldquo;Resume To\u0026rdquo; section.\u003c/li\u003e\n\u003c/ul\u003e\n"
    },
    {
        "title" : "Dice Pass for Mac",
        "date_published" : "2015-05-30T00:00:00Z",
        "date_modified" : "2015-05-30T00:00:00Z",
        "id" : "https://troz.net/post/2015/dice-pass-for-mac/",
        "url" : "https://troz.net/post/2015/dice-pass-for-mac/",
        "content_html" : "\u003cp\u003eWe live in a world of passwords and passphrases and there is a constant struggle\nbetween having a secure and a memorable password. As a result, many of us re-use\npasswords even though we know this is a bad idea.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://xkcd.com/936/\"\u003eXKCD\u003c/a\u003e had a wonderful comic that illustrated the theory of using a\npassphrase composed of words that are easy to remember but with a combination\nthat made the passphrase very hard to guess. However even when deciding to use a\npassphrase like this, it is not easy for us humans to avoid using words that\nhave meaning for us, particularly when it is something we really need to\nremember.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://world.std.com/~reinhold/diceware.html\"\u003eDiceware\u003c/a\u003e was developed to solve this problem. You have a set of 5 dice and\na list of words assigned to each possible dice roll for 11111 to 66666. You roll\nthe five dice and get the matching word from the list. Repeat this for the\nnumber of words you want to use in your passphrase and you have a random phrase\nthat is hopefully still memorable.\u003c/p\u003e\n\u003cp\u003eBut this sounds like a lot of effort and not something you are likely to do when\nfaced by a password entry field on a web page. So \u003ca href=\"/dicepass/\"\u003eDice Pass\u003c/a\u003e was written to\ndo the work for you quickly and easily.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/DicePass_Mac.png\" alt=\"Dice Pass for Mac\"\u003e\u003c/p\u003e\n\u003cp\u003eSelect the number of words you want in your passphrase and see the phrase\nimmediately. Keep clicking the \u0026ldquo;Generate New Phrase\u0026rdquo; button until you get a\nphrase you like. If you feel that the computer is not to be trusted when\ngenerating a random number for the dice rolls, use your real dice and click the\ndice to change them to the roll you got. If you get a passphrase that is good\nexcept for one or two words, use the Re-Roll button beside those words to get a\nnew roll for just that word.\u003c/p\u003e\n\u003cp\u003eDice Pass is available from the \u003ca href=\"https://itunes.apple.com/app/dice-pass/id997688302?mt=12\u0026amp;uo=4\"\u003eMac App Store\u003c/a\u003e now.\u003c/p\u003e\n"
    },
    {
        "title" : "Apple Watch First Impressions",
        "date_published" : "2015-04-29T00:00:00Z",
        "date_modified" : "2015-04-29T00:00:00Z",
        "id" : "https://troz.net/post/2015/apple-watch-first-impressions/",
        "url" : "https://troz.net/post/2015/apple-watch-first-impressions/",
        "content_html" : "\u003cp\u003eI realise that every one has written one of these posts, but given that everyone\nlooks for and notices different things, I think it is still valid.\u003c/p\u003e\n\u003cp\u003eMy first impression was \u0026ldquo;Why does it come in such a large box?\u0026rdquo;. The courier\ndelivered two boxes - my 38mm Apple Watch Sport and Tim\u0026rsquo;s 42mm Apple Watch\nSport. They both came in long boxes, with the 42mm box significantly longer. And\nboth boxes were heavy!\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"un-boxing\"\u003e\n  Un-boxing:\n  \u003ca href=\"#un-boxing\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eOpening them was a typical Apple experience: pull the tag to open the external\ncardboard box, lift out the white internal box. This opens to reveal the watch\nwith the default strap attached (short for 38mm, long for 42mm). Lift the watch\nout and pull the tags to remove the plastic protective coating. (On a side note,\nit drives me crazy when people leave this coating on devices, but I can\u0026rsquo;t see\nthis happening on the watch.) Underneath there is a sleeve containing the other\nhalf watch strap so you can swap from long to short. My family tells me that\nthis also includes a user guide, but I didn’t read that - typical Apple user\u0026hellip;\nUnder the sleeve is the power block and charging cable. The charging puck is\nlarger than I expected and the cable is very long. Having removed all the\ncomponents, the packaging is still quite heavy, so I guess Apple just wanted to\nmake sure that no watches were damaged in transit and that it felt like a\nquality product.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"pairing\"\u003e\n  Pairing\n  \u003ca href=\"#pairing\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003ePairing my watch to my iPhone was amazingly slick. After selecting my language,\nthe watch displayed a sort of nebula pattern. On the iPhone, I launched the\nApple Watch app, selected the pairing option and pointed the phone camera at the\nwatch display. This did the pairing. Then I waited while all the relevant apps\ntransferred their Apple Watch components to the watch and I was ready to start\nusing it.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"the-watch\"\u003e\n  The Watch:\n  \u003ca href=\"#the-watch\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThe watch comes with the modular watch face showing by default. This is a\ndigital time read-out with various \u0026lsquo;complications\u0026rsquo;. Force-touch the watch face\nto change it - this takes a surprisingly strong touch. Then you can swipe\nsideways to select a watch style. Once you have a style selected, some of them\noffer further customisations: select how much detail is shown, choose what extra\ninformation to display, adjust colors.\u003c/p\u003e\n\u003cp\u003eThis is a lot of fun and I am still changing mine very frequently. The good\nthing is that your customisations are stored, so if you set up the utility watch\nface in a particular way, then swap to the modular and configure it, when you go\nback to utility, your previous settings are all still there.\u003c/p\u003e\n\u003cp\u003eThe screen is gorgeous - very crisp and easy to read.\u003c/p\u003e\n\u003cp\u003eTwisting your wrist to show the time works well most of the time. There is a\ndelay that I would estimate at about half a second, presumably to avoid false\npositives triggering unnecessary displays. If you are holding your wrist at an\nunusual angle e.g. showing the watch to someone, this twist will not always\nwork, but tapping the screen will display the watch face instantly.\u003c/p\u003e\n\u003cp\u003eTapping on a complication will take you to the relevant parent app e.g. tapping\nthe current temperature will open the Weather app.\u003c/p\u003e\n\u003cp\u003eA minor quibble is that the phases of the moon are displayed from a northern\nhemisphere point of view and do not match what we actually see here in\nAustralia.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"battery-life\"\u003e\n  Battery Life:\n  \u003ca href=\"#battery-life\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThis is a complete non-issue. On my first day with the watch, the battery was at\n70% when I first turned it on. As you can imagine, usage was very intense that\nfirst day and I got to 8%. Since then, the battery level has only got down to 40\n-50% over a day and it recharges to 100% within 2 hours. Tim\u0026rsquo;s 42mm model gets\nslightly better battery life as expected.\u003c/p\u003e\n\u003cp\u003eI started off having the battery indicator as one of the \u0026lsquo;complications\u0026rsquo; on my\nwatch face, but now I just ignore it.\u003c/p\u003e\n\u003cp\u003eAnd the battery life of my iPhone has improved remarkably due to so many quick\ntransactions being done through the watch instead.\u003c/p\u003e\n\u003cp\u003eI did have a charging problem one night. I woke up and checked the time and\nrealised that the watch was quite warm to the touch. I checked the battery level\nwhich was actually lower than when I had put it on the charger. I took it off\nthe charger for a few hours, then put it back and all was well.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"notifications\"\u003e\n  Notifications\n  \u003ca href=\"#notifications\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eHere is where you need to be careful. I had turned off most notifications on my\nphone before getting the watch, so I have not been inconvenienced, in fact I\nhave been able to re-enable many notifications as they are no longer so\nintrusive.\u003c/p\u003e\n\u003cp\u003eAt first we thought some notifications were not getting through to the watch,\nthen we found out that if your iPhone is awake and un-locked, notifications are\nnot passed on to the watch. So drop the time until sleep on your phone to the\nminimum which saves your phone battery and makes sure you receive most\nnotifications on the watch.\u003c/p\u003e\n\u003cp\u003eIf you want to stop any apps sending notifications through to the watch, this is\neasily set in the iPhone\u0026rsquo;s Apple Watch app.\u003c/p\u003e\n\u003cp\u003eI have noticed there is a bit of a delay. I hear an email or message arriving on\nmy phone and it can be half a minute before it gets to my watch.\u003c/p\u003e\n\u003cp\u003eOnce you get a notification, you can tap it to go to the parent app, swipe up to\nprocess it in some way depending on the type of notification, or swipe to the\nleft to see a button that will clear the notification. If you want to get rid of\nall your notifications at once, do a force-touch on the notifications screen to\nget the option to clear them all.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"glances\"\u003e\n  Glances\n  \u003ca href=\"#glances\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eGlances are designed to be one screen indicators giving you important\ninformation as quickly as possible. From there, you can decide whether to go to\nthe parent app or not. These are accessed by swiping up from the bottom of the\nscreen when looking at the watch face.\u003c/p\u003e\n\u003cp\u003eI found that the most important thing here was to reduce the number of glances\nshown, since they are displayed sequentially. If you have 20 glances installed,\nyou have to swipe at least 20 times to see them all. So go to the Apple Watch\napp on your iPhone and turn off the glances you do not find essential.\u003c/p\u003e\n\u003cp\u003eThe first glance in the sequence is essential though as it allows you to toggle\nairplane mode, do not disturb and silent mode. It also has a button that can\nmake your iPhone make a sound to help you locate it. Hold this button down to\nmake the iPhone flash come on as well.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"activity\"\u003e\n  Activity\n  \u003ca href=\"#activity\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eHere I have to confess to my first disappointment. The activity app tracks three\nthings: Move, Exercise and Stand. When you first start the watch, you tell it\nyour age, sex, weight and height. It computes a suggested daily move goal for\nyou which you can adjust at any time. Then it tracks your daily activities and\nshows how well you are doing in relation to your goal. For exercise and standing\nthe goals are 30 minutes exercise and standing for at least one minute in an\nhour 12 times though the day.\u003c/p\u003e\n\u003cp\u003eThe move tracking seems to be fine. I am not sure what metrics it uses, but on\nmore active days, the numbers go up.\u003c/p\u003e\n\u003cp\u003eThe exercise one doesn\u0026rsquo;t work for me. We went for a walk and when we returned,\nTim\u0026rsquo;s watch showed 25 minutes exercise and mine showed 1 minute. We had walked\nthe same distance at the same speed, as confirmed by the pedometer. Subsequent\ntests revealed that I don\u0026rsquo;t swing my arms enough when walking to trigger what\never sensor this is using. I can\u0026rsquo;t quite see why it ignores the pedometer\ncompletely, but hopefully this can be fixed by a software update. For now, I\njust ignore this circle.\u003c/p\u003e\n\u003cp\u003eStanding is another issue since I use a standing desk, so I stand for many hours\neach day. Even when standing, I get my hourly reminders to stand. However I use\nthis as a trigger to make me to move about for a minute, so I suppose that is\nstill useful.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"communications\"\u003e\n  Communications\n  \u003ca href=\"#communications\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eThe various forms of communication are a real strength of the watch. With Tim \u0026amp;\nI both having watches, we can phone, message (audio or text) and use the new\nDigital Touch to send sketches, taps or heart beats. While it feels a bit weird\nto be talking to your wrist, this works really well and the sound quality is\namazing for such a small device. If you need more privacy, it is very easy to\ntransfer a phone call back to your phone.\u003c/p\u003e\n\u003cp\u003eOddly, the watch does not appear to offer FaceTime but always uses standard\nphone calls.\u003c/p\u003e\n\u003cp\u003eMessages are where the watch excels. If you get a message with a question, the\nwatch can suggest possible answers so you just have to tap a button. Even\nwithout this, there is a set of pre-defined answers which you can edit in the\nApple Watch app on your iPhone. And you can also use dictation or the new\nanimated emojis. Dictation seems a lot better on the watch than it ever was\nbefore on the phone. And even if dictation is not transcribed perfectly, you can\nsend the message as an audio recording instead of text.\u003c/p\u003e\n\u003cp\u003eWhen recording, tap the Done button as soon as you have finished speaking. The\ninclination is to wait for the text to be processed, but the recording carries\non, so stop the recording and let the text processing finish in its own time.\u003c/p\u003e\n\u003cp\u003eThe animated emojis work when you send them to other devices as they appear as\nGIFs. You can choose from 3 sets: faces, hands and hearts. Once you have swiped\nto select a set, use the crown to scroll between the options. You can also swipe\nfurther to get to the standard emojis.\u003c/p\u003e\n\u003cp\u003eDigital Touch works between watches only. It is a fun gimmick and I can imagine\nus developing a set of key codes or sketches, but neither of us can draw very\nwell, so the sketches are very rough. The heart beat is amusing, but the tapping\nis surprisingly effective as an attention-getter.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"summary\"\u003e\n  Summary\n  \u003ca href=\"#summary\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cp\u003eI think this is the start of a new way of interacting with our technology in a\nway that is both closer to us and less intrusive. I am loving the watch so far\nand can\u0026rsquo;t wait to see where it goes from here.\u003c/p\u003e\n\u003chr\u003e\n"
    },
    {
        "title" : "Time In Words 4.0",
        "date_published" : "2015-04-15T00:00:00Z",
        "date_modified" : "2015-04-15T00:00:00Z",
        "id" : "https://troz.net/post/2015/time-in-words-4.0/",
        "url" : "https://troz.net/post/2015/time-in-words-4.0/",
        "content_html" : "\u003cp\u003e\u003ca href=\"/time-in-words/\"\u003eTime In Words\u003c/a\u003e for iOS started off as a fun gimmick, emulating the\n\u003ca href=\"http://www.qlocktwo.com/\"\u003eQlocktwo\u003c/a\u003e type of time display where the relevant words are highlighted in\nsome way to spell out the time as a sentence. This very quickly evolved into\nwhat I hoped would be more useful app, still showing the original display, but\nalso providing the current time \u0026amp; date as complete sentences. Then I added time\nconversions and discovered the real power and utility of writing out times as\nwords.\u003c/p\u003e\n\u003cp\u003eWhen it comes to converting times, I doubt there are many people in the world\nwho haven\u0026rsquo;t had problems.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIs that morning or afternoon for them?\u003c/li\u003e\n\u003cli\u003eAre they in tomorrow, today or yesterday?\u003c/li\u003e\n\u003cli\u003eWhat if they are using daylight-savings?\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHaving the time written out removes all ambiguity. As an example, Time In Words\ncurrently reports very clearly:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIn Los Angeles, it is nine minutes to ten on Tuesday evening (daylight-savings\ntime).\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWhen writing \u003ca href=\"/time-in-words-for-mac/\"\u003eTime In Words for Mac\u003c/a\u003e, I focussed immediately on the time zone\nconversion facilities, and provided a menu bar app that can display as many time\nzones as you like (although more than will show on a single screen would\nprobably get annoying).\u003c/p\u003e\n\u003cp\u003eSo when I decided to do a complete re-write of Time In Words for iOS, the\nobvious move was to emulate the Mac version and allow for as many time zones as\nthe user wants, instead of the current 2 or 4 (iPhone or iPad). So I discarded\nthe Qlocktwo display and the separate date display which used a similar\nmechanic. I kept the display that shows the current date and time, but every\ndisplay after that shows the time in a different time zone. The time zones can\nbe changed and re-ordered, so the ones you need most are the fastest to get to\nonce the app opens.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eOne new feature (again taken from the Mac version), is the ability to calculate\n\u0026ldquo;What time will it be\u0026hellip;\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/TiW_what_time.png\" alt=\"What time\"\u003e\u003c/p\u003e\n\u003cp\u003eYou dial in your local date and time to see what time that will be in your\nselected zone. And if you want to calculate the other way around, tap the \u0026ldquo;Swap\ntime zones\u0026rdquo; button.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eThe main impetus for a re-write was the Apple Watch. I thought this would be a\nperfect app for the watch as it could use the Apple Watch\u0026rsquo;s superb time-keeping\nin conjunction with my text generation, to add a significant level of usability\nto the Apple Watch as regards time zone conversions.\u003c/p\u003e\n\u003cp\u003eSadly, Apple disagrees…\u003c/p\u003e\n\u003cp\u003eI completed the app and submitted it to the App Store for review. The review\nprocess seems to be very fast at the moment and the app moved into review only\none day later. And there it stuck for 3 days. This was very odd. My experience\nis that once an app gets into review, it only takes a few hours, if that. For\n\u003ca href=\"/19th-hole/\"\u003e19th Hole\u003c/a\u003e - my other app with an Apple Watch component, the review process\ntook 30 hours. But 3 days!\u003c/p\u003e\n\u003cp\u003eThen I got a phone call from Apple where a very polite person explained to me\nthat although this was not mentioned in any of the documentation, the marketing\npeople had decided that no apps were to be allowed on the watch if they told the\ntime.\u003c/p\u003e\n\u003cp\u003eI offered to remove the initial screen telling the local time, so the app would\nnot actually supply the current time but only the time conversions, but that was\nnot acceptable either.\u003c/p\u003e\n\u003cp\u003eThen I tried appealing the rejection. My hopes were not high, but I didn\u0026rsquo;t see\nany harm in asking. I again offered to remove the local time display and\nemphasised the accessibility advantages of displaying times in this manner.\nAnother day, another phone call, another polite Apple person saying no.\u003c/p\u003e\n\u003cp\u003eSo now I have re-submitted the app for review without the Apple Watch component,\nwhich is a shame. I am hoping that after some months they will review this\npolicy and allow me to try again, but who knows.\u003c/p\u003e\n\u003cp\u003eSo you can see what you are missing, here are a couple of screen shots from the\nwatch app showing my local time, plus one time zone:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/Watch_1.png\" alt=\"Local time\"\u003e\n\u003c!-- raw HTML omitted --\u003e\u003cimg src=\"/images/Watch_2.png\" alt=\"Converted time\"\u003e\u003c!-- raw HTML omitted --\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eOne more minor point. People who actually look at version numbers may wonder why\nI have gone from version 2.5 to version 4.0. When I was working on version 2.5,\nI considered making it version 3.0 and then changed my mind. However by that\ntime I had already created a version 3.0 in iTunesConnect, so I was not able to\nuse 3.0 again this time. This version was such a big change that I wanted it to\nbe a .0 release, so that meant going to version 4.0\u003c/p\u003e\n"
    },
    {
        "title" : "Apple Watch App - Rejected, then Accepted",
        "date_published" : "2015-04-11T00:00:00Z",
        "date_modified" : "2015-04-11T00:00:00Z",
        "id" : "https://troz.net/post/2015/apple-watch-rejected-then-accepted/",
        "url" : "https://troz.net/post/2015/apple-watch-rejected-then-accepted/",
        "content_html" : "\u003cp\u003eAs described in a \u003ca href=\"/post/2015-04-02-my-first-apple-watch-app/\"\u003eprevious post\u003c/a\u003e, about 9 days ago I submitted my first\nApple Watch app for review. The app was an extension of my golf scoring app:\n\u003ca href=\"/19th-hole/\"\u003eThe 19th Hole\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eI expected that App Store review times would go up dramatically once Apple had\nallowed developers to submit watch apps, but this proved to be incorrect. Three\ndays after submission, the app was marked as \u0026ldquo;In Review\u0026rdquo;. This seemed to happen\nlast thing on a Saturday, so there was no further action for two days, at which\npoint the app was rejected, with the following details (sic):\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWe noticed an issue in your app that contributes to a lower quality user\nexperience than Apple users expect. Specifically,\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cul\u003e\n\u003cli\u003ewhile using the Apple Watch app with the phone app is in the background mode\n(display off), the new data entry on the Watch App does not refresh\naccordingly until the phone app is turn back on.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eSo it appeared that the communication between the watch and the phone, which\nworked perfectly on the simulators, did not work at all on the actual devices.\nThis is the problem with developing for a device that you do not have.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eAfter some research, it appears that the problem is with the phone not operating\ncorrectly in background mode. Apple provides for communications from the watch\nto the phone. The phone can respond, but only the watch can initiate a\nconnection. I guess this makes sense since every watch will be paired with a\nphone but the reverse will not always be true.\u003c/p\u003e\n\u003cp\u003eTo talk to the phone, the watch uses this function:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eopenParentApplication\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e userInfo: [NSObject : AnyObject],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  reply reply: (([NSObject : AnyObject]\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e, NSError!) -\u0026gt; Void)?) -\u0026gt; Bool\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe phone listens for messages in this event handler:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eapplication\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e_\u003c/span\u003e application: UIApplication,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  handleWatchKitExtensionRequest userInfo: [NSObject : AnyObject]?,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  reply reply: (([NSObject : AnyObject]\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e) -\u0026gt; Void)\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe name of the WatchKit function is slightly misleading as it does open the\nparent application, but only in the background. Then the parent app is supposed\nto do whatever tasks are called for in the handleWatchKitExtensionRequest\nfunction, and return any required data using the supplied reply() function.\u003c/p\u003e\n\u003cp\u003eSo far, so good, and it all worked perfectly in the simulator. But it appears\nthat although this call wakes the iPhone app, it does not stay awake long enough\nto do anything. Many thanks to Brian at \u003ca href=\"http://www.fiveminutewatchkit.com/blog/2015/3/11/one-weird-trick-to-fix-openparentapplicationreply\"\u003eFive Minute WatchKit\u003c/a\u003e who pointed\nout the way to make this work. Firstly, you create a dummy background task\nguaranteed to keep the iPhone app awake for 2 seconds. Then you perform your own\nwork, using another background task. When that is finished, the phone can send\nthe response and end the real background task. The dummy task will time out by\nitself after 2 seconds.\u003c/p\u003e\n\u003cp\u003eFor my needs, I could probably reduce the 2 seconds considerably, but since this\nis a problem I am unable to test, I decided just to go with Brian\u0026rsquo;s suggestion\nas it is.\u003c/p\u003e\n\u003cp\u003eI re-submitted the app the same day it was rejected, and two days later it was\nback in review. The review process took longer than usual, but about 30 hours\nlater, the app was marked \u0026ldquo;Pending an Apple Release\u0026rdquo;. I assumed this meant that\nApple would release all WatchKit apps on 24th April when the watches shipped,\nbut the following day the app was reported as \u0026ldquo;Pending Developer Release\u0026rdquo; (I had\nset it to release manually). Now I have told iTunesConnect to release the app\nand it is \u0026ldquo;Processing for App Store\u0026rdquo;.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eOn a related note, the start of pre-ordering for the Apple Watch was scheduled\nfor a very civilised 5:01 pm here in eastern Australia. I had three watches all\nlined up in my Favorites in the Apple Store app, ready for ordering. When the\nstore became live (at about 5:03 pm), I could not work out how to order all\nthree in a single operation, so had to place these orders one at a time. I got\nthe first two ordered for the soonest possible delivery, but by the time I got\nto the third (about 3 minutes later), I had missed out and it will ship in 4 to\n6 weeks!\u003c/p\u003e\n"
    },
    {
        "title" : "My First Apple Watch App",
        "date_published" : "2015-04-02T00:00:00Z",
        "date_modified" : "2015-04-02T00:00:00Z",
        "id" : "https://troz.net/post/2015/my-first-apple-watch-app/",
        "url" : "https://troz.net/post/2015/my-first-apple-watch-app/",
        "content_html" : "\u003cp\u003eI have just submitted my first Apple Watch app to the iTunes App Store. This is\na scary thing to do, since I have never seen, touched or used an Apple Watch and\nall I had to go on was the Simulator that Apple supplies with Xcode.\u003c/p\u003e\n\u003cp\u003eAt the moment, Apple has only made a limited set of Apple Watch features\navailable to developers, and all Apple Watch apps come tethered to an iOS app -\npresumably this will mainly be iPhone apps, but I wonder will we be able to\nconnect Apple Watches to iPads? Anyway, it made sense to extend one of my\nexisting apps to use the Apple Watch instead of starting from scratch.\u003c/p\u003e\n\u003cp\u003eOf my \u003ca href=\"/apps-ios/\"\u003eiOS apps\u003c/a\u003e, I decided that \u003ca href=\"/19th-hole/\"\u003eThe 19th Hole\u003c/a\u003e, my golf scoring app,\nwould be well suited to the Apple Watch. The problem with using the iPhone\nversion to score is that you have to keep pulling your iPhone in and out of your\ngolf bag, sometimes in the rain, sometimes in bright sunlight. Being able to\nenter the scores on your wrist sounds like a big improvement. We know that the\nApple Watch is at least somewhat water-resistant, but we are yet to see how well\nit performs in bright sunlight, however I would expect that Apple has put\nconsiderable effort into this.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eOnce I decided to write an Apple Watch app, the first step was to learn how. I\nread all Apple\u0026rsquo;s published documents to get a feel for what was possible and\nwhat user-interface objects would be available. I find online courses very\nhelpful and by far the best Apple Watch course that I found was \u003ca href=\"http://www.raywenderlich.com/video-tutorials#watchkit\"\u003eRay\nWenderlich\u0026rsquo;s WatchKit video tutorial series\u003c/a\u003e. The instructors were very clear\nand explained how the layout and sizing of objects works on the Apple Watch, as\nwell as how to set up and move between views and how to communicate from the\nWatch back to the iPhone. The layout section of the course was particularly\nvaluable as no other course I found even mentioned this, although it is crucial\nto the interface design and allowing for the two sizes of watch.\u003c/p\u003e\n\u003cp\u003eI had released an update to \u003ca href=\"/19th-hole/\"\u003eThe 19th Hole\u003c/a\u003e recently in preparation for this.\nI wanted to have squashed the bugs and updated the interface, so the only\nchanges needed would be the WatchKit ones.\u003c/p\u003e\n\u003cp\u003eThe first step in adding a WatchKit app to your existing app is to create a new\ntarget in the Xcode project. Choosing WatchKit actually adds two new targets:\nthe WatchKit Extension which lives on the iPhone and supplies the code for the\nWatch, and the WatchKit App which lives on the Watch and provides the interface.\u003c/p\u003e\n\u003cp\u003eI decided to use a paged interface with one page per hole. Each of these pages\nhas a table, with one row per player. A slider with plus \u0026amp; minus buttons lets\nyou enter the score for each player and the total score for each player is also\ndisplayed.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/19thHole-Watch2.png\" alt=\"Data entry\"\u003e\u003c/p\u003e\n\u003cp\u003eApart from this data entry view, I have a splash screen which shows you the\ncurrent round as set up on the iPhone and a final summary screen showing\neveryone\u0026rsquo;s totals.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/19thHole-Watch1.png\" alt=\"Splash screen\"\u003e\n\u003cimg src=\"/images/19thHole-Watch3.png\" alt=\"Summary\"\u003e\u003c/p\u003e\n\u003cp\u003eThese images are taken from the Apple Watch simulator running in 42mm mode.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eThe biggest programming problem was getting the communications working beween\nthe two devices. The 19th Hole uses Core Data for all data storage. My first\nattempt shared this data between the two apps, allowing both to read and update\nthe database. This almost worked, but if both apps were open, then changes in\none device did not get across to the other. It seemed that the data was cached\nand I was unable to find a way to force either app to update every time.\u003c/p\u003e\n\u003cp\u003eMy next attempt kept all the data in the iPhone app and had the WatchKit\nextension ask for whatever data it needed and send changes to the iPhone app.\nThis worked much better and I was able to get live updates between the two\ndevices.\u003c/p\u003e\n\u003cp\u003eThe other issue is the fact that I have never seen, touched or used an Apple\nWatch. This means that I had to guess a lot of things:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ehow well will it perform?\u003c/li\u003e\n\u003cli\u003ewill the icon look OK?\u003c/li\u003e\n\u003cli\u003eare the controls large enough to use?\u003c/li\u003e\n\u003cli\u003ewill the text be large enough to read?\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMy main philosophy was to keep the Watch app as simple as possible and use the\nstandard interface elements, font sizes etc. Hopefully that will work.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eThe final step was submitting the app to iTunes Connect for review. It was not\nclear to me how to do this, so I logged into iTunes Connect, created a new\nversion and entered the meta-data. I couldn\u0026rsquo;t see anywhere to say anything about\nthe Watch. I archived the main iOS app as usual and validated it with the Store.\nI had a few things to fix up, but I got the build submitted.\u003c/p\u003e\n\u003cp\u003eBack to iTunes Connect and once the uploaded build had been processed, I was\nable to select it and click \u0026ldquo;Submit for Review\u0026rdquo;. At this point, the page\nreported an error and showed me a new section where I could upload the Apple\nWatch icon and screen shots.\u003c/p\u003e\n\u003cp\u003eI had been unsure how the icon would look when made round, but it looks OK on\nthe iTunes Connect page. How it will look on a tiny watch screen remains to be\nseen. Anyway, once I had my icon and screen shots uploaded, I was able to\nproceed to the next step. But then I got a message saying that the app could not\nbe processed - no explanation. Thankfully, I had seen some developers on Twitter\nreporting this, and somebody said that the solution was to remove the alpha\nchannel from your screen shots. Sorry for not giving credit here - I forget who\nsaid this, but it worked, so thank you whoever you are.\u003c/p\u003e\n\u003cp\u003eSo now my app is waiting for review and who knows how long that will take.\nAccording to \u003ca href=\"http://appreviewtimes.com\"\u003eApp Review Times\u003c/a\u003e, the current estimate is 8 days, but the\ntrend is heading upwards. I would expect that to blow out in the next few weeks\nas developers try to get their apps ready for the Apple Watch release date of\nApril 24th.\u003c/p\u003e\n"
    },
    {
        "title" : "LiveCode stacks",
        "date_published" : "2015-03-18T00:00:00Z",
        "date_modified" : "2015-03-18T00:00:00Z",
        "id" : "https://troz.net/post/2015/livecode-stacks/",
        "url" : "https://troz.net/post/2015/livecode-stacks/",
        "content_html" : "\u003cp\u003eWhen I converted my site to Jekyll \u0026amp; GitHub, one of the things I left behind was\na collection of LiveCode (Revolution) stacks. For many years I was active in the\nRevolution community before going in other directions and over that time, I\nbuilt up a small library of stacks that I released into the public domain.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://livecode.com\"\u003eLiveCode\u003c/a\u003e is a cross-platform rapid development environment. There is an\nopen source community edition available for anyone wishing to get started.\u003c/p\u003e\n\u003cp\u003eI had assumed that since I had not been an active LiveCode user for many years,\nthese stacks would have become worthless. But in the last couple of days, I have\nreceived a couple of queries from people looking for them.\u003c/p\u003e\n\u003cp\u003eSo I created a new GitHub repository and uploaded them all to here: \u003c!-- raw HTML omitted --\u003e\n\u003ca href=\"https://github.com/trozware/rev_stacks\"\u003eLiveCode stacks\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eNone of these stacks have been updated recently, but feel free to use or adapt\nas you see fit. They have not been tested using recent versions of LiveCode, so\nmay not work as expected. As stacks are provided as is. Use at your own risk.\u003c/p\u003e\n"
    },
    {
        "title" : "Icon Builder 3.0.1",
        "date_published" : "2015-03-17T00:00:00Z",
        "date_modified" : "2015-03-17T00:00:00Z",
        "id" : "https://troz.net/post/2015/icon-builder-3.0.1/",
        "url" : "https://troz.net/post/2015/icon-builder-3.0.1/",
        "content_html" : "\u003cp\u003eSo why an announcement for such a minor upgrade?\u003c/p\u003e\n\u003cp\u003eVersion 3.0 got no announcement because it was not the release I wanted.\u003c/p\u003e\n\u003cp\u003eHaving downloaded the Xcode 6.2 \u0026amp; 6.3 betas, I had worked out what icons were\nneeded to a WatchKit app. This, combined with several other changes, made me\nbump the version number to 3.0.\u003c/p\u003e\n\u003cp\u003eSadly, Apple rejected the update because it referred to pre-release products. So\nI pulled all mentions of WatchKit out of the interface and meta data and got 3.0\nreleased.\u003c/p\u003e\n\u003cp\u003eAfter the Apple keynote on March 9th, I re-enabled the WatchKit portions of the\napp and re-submitted to the App Store, hoping that with the WatchKit SDK now\npart of the official Xcode release, Apple\u0026rsquo;s reviewers would allow it to get\nthrough this time.\u003c/p\u003e\n\u003cp\u003eThis worked - in fact the app was reviewed and accepted within 6 days - so now\nIcon Builder adds WatchKit to its list of supported platforms.\u003c/p\u003e\n\u003cp\u003eActually, Apple may have done me a favour in rejecting the first one as they\nchanged the specifications for the icons slightly between Xcode 6.2 beta and\nXcode 6.2 release.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://troz.net/icon-builder/\"\u003eIcon Builder page\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://itunes.apple.com/us/app/icon-builder/id552293482?mt=12\u0026amp;uo=4\"\u003eMac App Store link\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"whats-new-in-version-3\"\u003e\n  What’s New in version 3?\n  \u003ca href=\"#whats-new-in-version-3\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSupport for WatchKit app icons (version 3.0.1)\u003c/li\u003e\n\u003cli\u003eSimplified interface: removed display of smaller icons.\u003c/li\u003e\n\u003cli\u003eFix for @3x images not being saved when you selected iOS 6 support.\u003c/li\u003e\n\u003cli\u003eiTunesArtwork@2x file now saved as a JPG to avoid iTunes Connect errors.\u003c/li\u003e\n\u003cli\u003eRemoved CarPlay icon - Xcode sometimes gave errors when this was included.\u003c/li\u003e\n\u003c/ul\u003e\n"
    },
    {
        "title" : "App Store Preview Videos",
        "date_published" : "2015-03-16T00:00:00Z",
        "date_modified" : "2015-03-16T00:00:00Z",
        "id" : "https://troz.net/post/2015/app-store-preview-videos/",
        "url" : "https://troz.net/post/2015/app-store-preview-videos/",
        "content_html" : "\u003cp\u003eApple now allows app developers to add a video preview of their app when\nuploading to iTunes Connect. This video is shown to potential purchasers when\nthey are looking at an app in the iTunes App Store, just like the screen shots.\u003c/p\u003e\n\u003cp\u003eI have been working on an update to \u003ca href=\"https://troz.net/19th-hole/\"\u003e19th Hole\u003c/a\u003e and since it uses a custom\nmethod for data input, I decided that a video would be really useful in this\ncase.\u003c/p\u003e\n\u003cp\u003eThe first step was to work out how to record video from my iPhone. In OS X\nYosemite (10.10), this can be done using QuickTime Player. Connect your device\nto your Mac using a Lightning cable (I think it has to be a Lightning cable -\nthe old cables will not work). Open up QuickTime Player and choose \u0026ldquo;New Movie\nRecording\u0026rdquo; from the File menu. By default this shows input from the Mac\u0026rsquo;s\nFaceTime camera, but just to the right of the red Record button, there is a down\narrow that shows a popup menu. Click this and you can select your iPhone as the\nCamera. Since I wanted the sound effects included, I also selected my iPhone as\nthe Microphone, but if you want to provide a voice-over or sound-track, you\nmight want to change this.\u003c/p\u003e\n\u003cp\u003eThat handles the technical side of recording, but I needed a way to show where I\nwas tapping and pressing on the iPhone screen. After some searching, I found\n\u003ca href=\"https://github.com/toddreed/Touchpose\"\u003eTouchpose\u003c/a\u003e which was exactly what I wanted. Since it requires changing the\nmain.m file, as well as changes to the app delegate, I created a branch in my\napp\u0026rsquo;s git repository so that I could apply these changes temporarily, but save\nthem for next time. The only alternation I made to the default settings was to\nchange the color of the cursor indicator to suit the color scheme of my app. And\nsince this was a temporary change, I set it to show the cursor indicator all the\ntime, not just when the screen was mirrored. All the details are shown in the\nsample project.\u003c/p\u003e\n\u003cp\u003eNext step was to actually record a session. After my first attempt (which lasted\nabout 67 seconds), I checked the Apple specs and found that the video could not\nbe longer than 30 seconds. So I re-thought what I wanted to include and tried\nagain. It took a few tries to get what I wanted, but finally I ended up with a\n.mov file that was 26 seconds long.\u003c/p\u003e\n\u003cp\u003eOn to iTunes Connect where I had the new version of the app set up already with\nits screen shots. Since I have an iPhone 6, the video was only suited for the\n4.7 inch section. So I dragged it into the drop zone and waited. No good - the\nvideo frame rate was too high. It has to be 30 fps or less. QuickTime Player had\nmade a video that was 50 fps.\u003c/p\u003e\n\u003cp\u003eThe app I usually turn to for any video conversion needs is \u003ca href=\"https://handbrake.fr\"\u003eHandbrake\u003c/a\u003e. So I\nran the app through Handbrake, specifying a frame rate of 30. This converted the\nvideo to .mp4 instead of .mov, but it was 30 fps. It wasn\u0026rsquo;t until I tried to\nupload it to iTunes Connect that I realised Handbrake had cropped the video from\n750 x 1334 to 750 x 1330. After searching through the settings, I found where I\nneeded to turn on custom clipping and set it to 0 so that the original\ndimensions were preserved. But iTunes Connect still didn\u0026rsquo;t like it, although\nthis time the error message was un-informative.\u003c/p\u003e\n\u003cp\u003eEventually, the brains trust on the other side of the room suggested iMovie. Not\nonly that, but he found that once the original had been dragged into iMovie, the\nshare options included an \u0026ldquo;App Preview\u0026rdquo; setting. This gave us a .mov file of the\ncorrect dimensions and the correct frame rate which iTunes Connect accepted.\u003c/p\u003e\n\u003cp\u003eiTunes Connect that allowed me to select the poster frame for the video and save\nthe changes to the app meta data. At that point, it showed a notice saying that\nthe app preview was being processed which could take up to 24 hours. It appears\nthat the processing has been finished, as that notice has disappeared.\u003c/p\u003e\n\u003cp\u003eFor the next stage, I ned to wait until the app gets reviewed and hopefully\napproved. Then it will be interesting to see how the video looks in the iTunes\nApp Store.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eAs a reward for reading this post, here is a pre-release of the video, showing\nhow to enter the score data for a hole of golf using \u003ca href=\"https://troz.net/19th-hole/\"\u003e19th Hole\u003c/a\u003e:\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n"
    },
    {
        "title" : "Testing automation",
        "date_published" : "2015-03-12T00:00:00Z",
        "date_modified" : "2015-03-12T00:00:00Z",
        "id" : "https://troz.net/post/2015/testing-automation/",
        "url" : "https://troz.net/post/2015/testing-automation/",
        "content_html" : "\u003cp\u003eToday I am experimenting with automating post generation.\u003c/p\u003e\n\u003cp\u003eFirstly, there is the structure of the post Markdown document, which really\nboils down to the file name and the header.\u003c/p\u003e\n\u003cp\u003eI have set up a macro in \u003ca href=\"http://www.ergonis.com/products/typinator/\"\u003eTypinator\u003c/a\u003e so that I just type the title of the\npost in a text document. I copy that title to the clipboard and type the\nshortcut. The header is then created with the title and the formatted permalink.\u003c/p\u003e\n\u003cp\u003eTo save the document, I use another Typinator snippet to convert the title\n(still in the clipboard) to lower case and to replace the spaces in the title\nwith dashes.\u003c/p\u003e\n\u003cp\u003eFor starting the local Jekyll server, I have turned to an \u003ca href=\"http://www.alfredapp.com\"\u003eAlfred\u003c/a\u003e workflow.\nI have two actions in the workflow. One opens Terminal, cd\u0026rsquo;s to my site folder\nand runs the command to start the local Jekyll server. The second opens my\ndefault browser to the local Jekyll test address.\u003c/p\u003e\n\u003cp\u003eBoth these actions happen simultaneously so the browser usually fails until\nrefreshed. The server is left running in Terminal so I can shut it down when\nfinished testing.\u003c/p\u003e\n\u003cp\u003eAfter writing the post, the final stage is to publish, so I need to work out the\ncommands for doing a git commit and push. Then I should be able to automate\nthose tasks.\u003c/p\u003e\n\u003cp\u003eTesting the git commands using Terminal, I have come up with the following\nsequence:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\ngit commit -a -m \u0026quot;Commit message here\u0026quot;\ngit push\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe commit message could be the title of the post, so I need a way to construct\nthe command and then execute it. Typinator is good at text manipulation, so I\nconstructed another macro that takes the clipboard, uses it as the commit\nmessage and performs the git commands. This gave a good commit message, but the\nactual commit failed, so that was no use.\u003c/p\u003e\n\u003cp\u003eSo then I went back to Alfred and created a workflow there with a series of\nTerminal commands to perform the actions above. This only allows a generic\ncommit message, but it works as expected.\u003c/p\u003e\n\u003cp\u003eSo there is still room for improvement, but with a set of macros, I can automate\na lot of the standard text entry, which is always good for reducing errors.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eThe sequence now is:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eOpen the text editor and type the title of the post.\u003c/li\u003e\n\u003cli\u003eCut this into the clipboard.\u003c/li\u003e\n\u003cli\u003eRun the Typinator macro to fill in the post header.\u003c/li\u003e\n\u003cli\u003eSave the post file, using the Typinator macro to construct the file name.\u003c/li\u003e\n\u003cli\u003eWrite the post, then use an Alfred workflow to test it locally.\u003c/li\u003e\n\u003cli\u003eWhen ready, use an Alfred workflow to publish.\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n"
    },
    {
        "title" : "Workflow for writing a post",
        "date_published" : "2015-03-10T00:00:00Z",
        "date_modified" : "2015-03-10T00:00:00Z",
        "id" : "https://troz.net/post/2015/workflow-for-writing-a-post/",
        "url" : "https://troz.net/post/2015/workflow-for-writing-a-post/",
        "content_html" : "\u003cp\u003eSo here is where I need to get used to Jekyll and how things are done. I will\nend up automating this when I am sure of the process, but for now, I am just\ngoing to work my way through it.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eStart up the local Jekyll server:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eI opened Terminal and used \u003ccode\u003ecd\u003c/code\u003e to get to the folder containing my site.\u003c/li\u003e\n\u003cli\u003eNext I started the Jekyll server locally using \u003ccode\u003ejekyll serve\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eThis gave me the address of the local server - in my case\n\u003ccode\u003ehttp://127.0.0.1:4000/\u003c/code\u003e - so I went there in my browser to see the default\npage.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eMy goal is to write a new blog post (this one in fact).\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor advice on creating a new post, I went to the \u003ca href=\"http://jekyllrb.com/docs/posts/\"\u003eJekyll docs\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eJekyll needs the file name to be a specific format which includes the date\nand title.\u003c/li\u003e\n\u003cli\u003eLooking in the \u003ccode\u003e_posts\u003c/code\u003e folder of the site folder, I see the previous post\nfile is titled \u003ccode\u003e2015-03-08-new-site-for-trozware.md\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eAs it is now 10th March 2015, I am saving this file as:\n\u003ccode\u003e2015-03-10-workflow-for-writing-a-post.md\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eSaving at this point shows a Jekyll error in the Terminal, but the next\nstage will fix that.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eFront matter:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eJekyll specifies that each file must have a \u003ca href=\"http://jekyllrb.com/docs/frontmatter/\"\u003efront matter block\u003c/a\u003e in a\ncertain format.\u003c/li\u003e\n\u003cli\u003eThe header has certain essential parameters and then more optional ones.\u003c/li\u003e\n\u003cli\u003eMy site was imported from WordPress, so the older posts contain several\nheader parameters that may not be necessary any more.\u003c/li\u003e\n\u003cli\u003eLook at the screen shot below to see what I have in this post file:\u003c/li\u003e\n\u003cli\u003eAfter saving, I see this entry in my Terminal:\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eRegenerating: 1 file(s) changed at 2015-03-10 13:50:40 ...done in 0.421789 seconds.\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eNow I can see the title and the start of the post on my first page and when\nclicking on it, I can see all the text.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAdding an image:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThis is not really necessary for this post, but I wanted to document it as\npart of the workflow.\u003c/li\u003e\n\u003cli\u003eI wanted to show the front matter and start of this post, so I took a\nscreen shot of the top of my editor window.\u003c/li\u003e\n\u003cli\u003eThen I renamed the image file and moved it into the \u003ccode\u003eimages\u003c/code\u003e folder of my\nsite.\u003c/li\u003e\n\u003cli\u003eNow to embed the image using this Markdown: \u003ccode\u003e![Post header][2]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eAs you can see, I prefer to group all links (images \u0026amp; URLs) at the end of\nthe document and keep the body of the text as clean as possible.\u003c/li\u003e\n\u003cli\u003e\u003cimg src=\"/images/post_header.png\" alt=\"Post header\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eProofing:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNow that I have the text of my post, I need to proof-read it from the local\nJekyll server.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003ejekyll serve\u003c/code\u003e command running in Terminal keeps the pages up-to-date\nas you edit, but you will need to refresh your page in the browser manually\nto check your changes.\u003c/li\u003e\n\u003cli\u003eAnd I have found that if you make a major change to the site e.g. a CSS\nfile or a config file, then it is best to stop the Jekyll server and start\nit again to make it re-build all the files.\u003c/li\u003e\n\u003cli\u003eTo be completely sure, stop the server and run \u003ccode\u003ejekyll build\u003c/code\u003e in Terminal\nalthough this may only do what \u003ccode\u003ejekyll serve\u003c/code\u003e does on startup anyway.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003ePublishing:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNow it is time to publish.\u003c/li\u003e\n\u003cli\u003eAs I am using GitHub Pages to host, the site files are all part of a single\nGit repository.\u003c/li\u003e\n\u003cli\u003eAnd as I understand it, the data \u003cstrong\u003emust\u003c/strong\u003e be in the \u003ccode\u003emaster\u003c/code\u003e branch.\u003c/li\u003e\n\u003cli\u003eOpening up the GitHub client, I see that my repository has a bunch of\nchanges: - the file I am working on - the image I inserted - feed.xml -\nindex.html files for each page\u003c/li\u003e\n\u003cli\u003eThis is as expected, since all pages are pre-generated when using Jekyll,\nso pages of posts must be re-rendered when a new post is added to the top.\u003c/li\u003e\n\u003cli\u003eNote that several of the files appear twice: once from where they are\nedited and once from the _site folder which serves them.\u003c/li\u003e\n\u003cli\u003eJust two simple steps now, using the GitHub client: 1. Commit 2. Sync\u003c/li\u003e\n\u003cli\u003eAnd that\u0026rsquo;s it. My new post is online and ready for reading.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eSummary:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThis was my first post after the one I wrote when setting up, so the first\nreal post.\u003c/li\u003e\n\u003cli\u003eWhile there appear to be a lot of steps, none of them are difficult.\u003c/li\u003e\n\u003cli\u003eBut I do have 4 apps running to do it: 1. TextWrangler for editing 1.\nTerminal to run the local Jekyll server 1. Safari to check the finished\npost 1. GitHub to commit and upload\u003c/li\u003e\n\u003cli\u003eAutomating this is an obvious next step, so stay tuned\u0026hellip;\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n"
    },
    {
        "title" : "New Site for TrozWare",
        "date_published" : "2015-03-08T00:00:00Z",
        "date_modified" : "2015-03-08T00:00:00Z",
        "id" : "https://troz.net/post/2015/new-site-for-trozware/",
        "url" : "https://troz.net/post/2015/new-site-for-trozware/",
        "content_html" : "\u003ch2 id=\"welcome-to-trozwares-new-site\"\u003e\n  Welcome to TrozWare\u0026rsquo;s new site.\n  \u003ca href=\"#welcome-to-trozwares-new-site\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eIt appears that I am not alone in deciding to move away from WordPress.\nWordPress is great - easy to set up and with lots of cool themes to allow\ncustomisation of your site. But it is slow, especially if (like me) you are\nrunning on a low-cost shared server.\u003c/p\u003e\n\u003cp\u003eI had been reading about \u003ca href=\"http://jekyllrb.com\"\u003eJekyll\u003c/a\u003e, so I decide to give it a go and also host\nmy site on \u003ca href=\"https://pages.github.com\"\u003eGitHub\u003c/a\u003e, taking advantage of their faster servers.\u003c/p\u003e\n\u003cp\u003eI followed the advice given by \u003ca href=\"http://www.girliemac.com/blog/2013/12/27/wordpress-to-jekyll/\"\u003eGirlie Mac\u003c/a\u003e and performed the migration from\nmy self-hosted WordPress site. I am using the \u003ca href=\"http://pixyll.com\"\u003ePixyll\u003c/a\u003e theme by \u003ca href=\"http://johnotander.com\"\u003eJohn\nOtander\u003c/a\u003e with a few tweaks of my own. The site is much faster to load, and I\nam hoping that the easier editing will inspire me to write more posts.\u003c/p\u003e\n\u003cp\u003eOf course it wasn\u0026rsquo;t all positive. WordPress did give me some features I liked,\nbut I think overall the result is better.\u003c/p\u003e\n\u003ch3 id=\"wordpress\"\u003e\n  WordPress\n  \u003ca href=\"#wordpress\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eWordPress gave me a full LAMP stack, so I could run my own PHP scripts.\u003c/li\u003e\n\u003cli\u003eWordPress gave me a search function.\u003c/li\u003e\n\u003cli\u003eCommenting was built-in.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"jekyll\"\u003e\n  Jekyll\n  \u003ca href=\"#jekyll\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eJekyll builds the pages out as static HTML, so all pages are pre-generated for\nfast loading.\u003c/li\u003e\n\u003cli\u003eWriting for Jekyll is pure Markdown so it is easier to write and preview\nlocally.\u003c/li\u003e\n\u003cli\u003eSome of the things I needed a plugin for in WordPress can be done natively in\nJekyll: - tables - syntax-highlighting\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor comments, I have switched to \u003ca href=\"https://disqus.com\"\u003eDisqus\u003c/a\u003e, but I am not sure about it yet. I\nwill evaluate over the next few weeks. In WordPress, I used a plugin to handle\nthe spam that inevitably arrived. I am hoping that Disqus will protect me from\nthat, but I have to see how good a job it does and whether the few real comments\nare worth it. A better option might be to turn off comments completely and just\nhave a contact form (which I have added using \u003ca href=\"http://formspree.io\"\u003eFormspree\u003c/a\u003e). Working in\nMarkdown is great. I love how I can have a really clean look in my editor and\nstill end up with well formatted HTML. I use Coda 2 on my Mac as my standard web\neditor, so that is what I am writing in now. I will probably experiment with\nother Markdown editors as I go. And for any Mac users out there working in\nMarkdown, I highly recommend \u003ca href=\"http://brettterpstra.com/projects/markdown-service-tools/\"\u003eBrett Terpstra\u0026rsquo;s Markdown Service Tools\u003c/a\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "Man Reader 1.4 Now Available",
        "date_published" : "2014-04-03T00:00:00Z",
        "date_modified" : "2014-04-03T00:00:00Z",
        "id" : "https://troz.net/post/2014/man-reader-1-4-now-available/",
        "url" : "https://troz.net/post/2014/man-reader-1-4-now-available/",
        "content_html" : "\u003cp\u003e\u003ca href=\"/manreader/\"\u003eMan Reader 1.4\u003c/a\u003e is now available through the \u003ca href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\"\u003eMac App Store\u003c/a\u003e.\u003c/p\u003e\n\u003ch4 id=\"the-new-features-and-fixes-are\"\u003e\n  The new features and fixes are:\n  \u003ca href=\"#the-new-features-and-fixes-are\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eFix for plain text view not wrapping correctly for odd-sized fonts.\u003c/li\u003e\n\u003cli\u003eFix for HTML text view over-riding font colors that may be invisible.\u003c/li\u003e\n\u003cli\u003eSearch for missing entry (e.g. g++) no longer requires Enter or Return.\u003c/li\u003e\n\u003cli\u003eBetter automatic selection of matching entries while searching.\u003c/li\u003e\n\u003cli\u003eFix for animation warning message appearing in Console.\u003c/li\u003e\n\u003cli\u003eStatus display shows when man page list is being updated.\u003c/li\u003e\n\u003cli\u003eSearching inside a page now allows a minimum of 2 characters (was 3), so\nflags\u003cbr\u003e\ne.g. ‘-b’ do not need to be escaped.\u003c/li\u003e\n\u003cli\u003eFixed path for Network Utility in tool bar (moved in OS X 10.9).\u003c/li\u003e\n\u003cli\u003eMore information available about the effects of sand-boxing for this app.\u003c/li\u003e\n\u003c/ul\u003e\n"
    },
    {
        "title" : "Email clients for Mac and iOS",
        "date_published" : "2014-03-25T00:00:00Z",
        "date_modified" : "2014-03-25T00:00:00Z",
        "id" : "https://troz.net/post/2014/email-clients-for-mac-ios/",
        "url" : "https://troz.net/post/2014/email-clients-for-mac-ios/",
        "content_html" : "\u003cp\u003eSome people are moving away from email, but for me, it remains the best way to\ncommunicate online. I get to keep a record of conversations and the attached\nfiles are with the text so I can always see the context.\u003c/p\u003e\n\u003cp\u003eBut I think everyone would agree that Apple have dropped the ball with Mail in\nOS X Mavericks, and to a lesser extent, in iOS 7.\u003c/p\u003e\n\u003cp\u003eSo I have been on a campaign lately to find an email client that suits my needs.\nI don\u0026rsquo;t feel that I have found the perfect answer yet, but I am getting there.\u003c/p\u003e\n\u003cp\u003eThe first step was to work out what I really needed in an email client:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003esupport for IMAP accounts and Gmail accounts\u003c/li\u003e\n\u003cli\u003e\u003c!-- raw HTML omitted --\u003eunified inbox - all accounts shown\ntogether\u003c!-- raw HTML omitted --\u003e\u003c/li\u003e\n\u003cli\u003econversation threading\u003c/li\u003e\n\u003cli\u003esupport for POP accounts (optional)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003eOn the Mac, I have narrowed it down to two clients that I am swapping between\nevery few days: \u003c!-- raw HTML omitted --\u003eUnibox\u003c!-- raw HTML omitted --\u003e\nand \u003c!-- raw HTML omitted --\u003eAirmail\u003c!-- raw HTML omitted --\u003e.\u003c/p\u003e\n\u003cp\u003eUnibox is different in the way it displays your emails. It is much more focussed\non people and conversations, so the side bar shows all the people who you have\nsent emails to or received emails from, grouped by date. I really like the\nmerging of incoming \u0026amp; outgoing emails, but it can be a bit weird if you delete\nthe latest email from someone who then disappears from sight.\u003c/p\u003e\n\u003cp\u003eEmails are grouped by a single person, not by conversation. There is a button on\nappropriate emails to toggle conversation view for that particular thread, but\nit doesn\u0026rsquo;t stick.\u003c/p\u003e\n\u003cp\u003eIn order to show a conversation, they truncate emails in the main part of the\nwindow and show a \u0026ldquo;More\u0026rdquo; button at the bottom of the email to expand it. This\nwas annoying, but in the latest beta, it performs much better, so you are not\ncontinually tapping this to see a long email.\u003c/p\u003e\n\u003cp\u003eAirmail has a more conventional display. Threading and the layout of threaded\nemails are both very nice. There are multiple view options, which I find can get\na bit messy looking, so I prefer the \u0026ldquo;Minimized View\u0026rdquo; setting. Airmail also does\nPOP accounts which is a plus.\u003c/p\u003e\n\u003cp\u003eThe main reason I keep going back to Unibox is the unification. I have grown to\nlike having sent and received messages all in the same window without having to\ngo and find them somewhere else.\u003c/p\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003eOn the iPad, I am currently using\n\u003c!-- raw HTML omitted --\u003eBoxer\u003c!-- raw HTML omitted --\u003e and have tried\nnumerous others. \u003c!-- raw HTML omitted --\u003eMolto\u003c!-- raw HTML omitted --\u003e\nwas quite good and the interface was fun, but it would only use landscape mode\nand like to be able to swap. Boxer is not great in portrait mode, but it does\nwork.\u003c/p\u003e\n\u003cp\u003eSo the jury is still out for iPad email clients, but on the Mac, I am leaning\ntowards Unibox.\u003c/p\u003e\n"
    },
    {
        "title" : "Berio Sequenza VII",
        "date_published" : "2013-11-07T00:00:00Z",
        "date_modified" : "2013-11-07T00:00:00Z",
        "id" : "https://troz.net/post/2013/berio-sequenza-vii/",
        "url" : "https://troz.net/post/2013/berio-sequenza-vii/",
        "content_html" : "\u003cp\u003eSo my latest app is way outside my usual sphere but that\u0026rsquo;s what happens when\nfamily decide that what you do might actually be useful!\u003c/p\u003e\n\u003cp\u003eMy son is an oboist and he is currently learning Berio\u0026rsquo;s Sequenza VII for Oboe.\nThis is a weird piece without a standard time signature. Instead each line has\n13 bars with each bar being allocated a certain time span in actual seconds. As\ncan easily be imagined, this makes learning and practicing this piece more of a\nmathematical exercise than a musical one.\u003c/p\u003e\n\u003cp\u003eSo I wrote him an app to sound out the end of each bar. Once he and his teacher\nused it, a few more features crept in and now I think it will be of great\nassistance to any student or teacher trying to work on this piece.\u003c/p\u003e\n\u003cp\u003eWhile I doubt that many oboists frequent this web site, it anyone who does can\npass this on to any oboist, I would be very grateful, and I think the oboist\nwould be too!\u003c/p\u003e\n\u003cp\u003eThe app is available through the\n\u003c!-- raw HTML omitted --\u003eiTunes\nApp Store\u003c!-- raw HTML omitted --\u003e.\u003cbr\u003e\nMore details are on \u003ca href=\"/berio/\" title=\"Berio’s Sequenza VII\"\u003ethis page\u003c/a\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "Icon Builder \u0026 iOS 7",
        "date_published" : "2013-09-23T00:00:00Z",
        "date_modified" : "2013-09-23T00:00:00Z",
        "id" : "https://troz.net/post/2013/icon-builder-ios-7/",
        "url" : "https://troz.net/post/2013/icon-builder-ios-7/",
        "content_html" : "\u003cp\u003eIcon Builder 1.2 was released on 18 September 2013.\u003cbr\u003e\nIt was an update with 2 new functions:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe ability to create images to suit an Xcode 5 assets library\u003c/li\u003e\n\u003cli\u003eThe ability to create icons with the required sizes for IOS 7 apps.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eKnowing that iOS 7 apps can only be built using Xcode 5, I linked the switch for\nthese 2 abilities in a single check box.\u003cbr\u003e\nThe problem was not really that they were in a single checkbox but that I had labelled\nit badly, so it was not obvious that this was what needed to be checked to create\niOS 7 sized icon files.\u003c/p\u003e\n\u003cp\u003eAfter some feedback from early users, it became clear to me that this was not\nenough. So 1.2.1 is now waiting for Apple\u0026rsquo;s approval.\u003cbr\u003e\nThe changes in this version are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMore informative labelling of the checkbox.\u003c/li\u003e\n\u003cli\u003eThe checkbox is checked by default is Xcode 5 is installed\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhile waiting for the new version to be approved, please be aware that iOS 7\nicon sizes will only be generated if you select \u0026ldquo;Check Assets (for Xcode 5.x or\nlater)\u0026rdquo;\u003c/p\u003e\n"
    },
    {
        "title" : "Icon apps updated",
        "date_published" : "2013-09-19T00:00:00Z",
        "date_modified" : "2013-09-19T00:00:00Z",
        "id" : "https://troz.net/post/2013/icon-apps-updated/",
        "url" : "https://troz.net/post/2013/icon-apps-updated/",
        "content_html" : "\u003cp\u003e\u003c!-- raw HTML omitted --\u003eIcns\nMaker\u003c!-- raw HTML omitted --\u003e and\n\u003c!-- raw HTML omitted --\u003eIcon\nBuilder\u003c!-- raw HTML omitted --\u003e have both just been updated to support Xcode 5.\u003c/p\u003e\n\u003cp\u003eIcon Builder is a Mac app that takes your images and creates all the required\nicon files for use in your iOS apps.\u003cbr\u003e\nIt now supports Xcode 5\u0026rsquo;s image assets folders and if you are using Xcode 5, it will\ncreate the icon sizes required for iOS 7 app.\u003c/p\u003e\n\u003cp\u003eIcns Maker is a Mac app that takes your images and creates icons for use in your\nMac apps.\u003cbr\u003e\nFor Xcode 4 or earlier, it creates a .icns file.\u003cbr\u003e\nFor Xcode 5, it creates a folder of images for use in your project\u0026rsquo;s image\nassets folder.\u003c/p\u003e\n"
    },
    {
        "title" : "Markdown",
        "date_published" : "2013-04-01T00:00:00Z",
        "date_modified" : "2013-04-01T00:00:00Z",
        "id" : "https://troz.net/post/2013/markdown/",
        "url" : "https://troz.net/post/2013/markdown/",
        "content_html" : "\u003cp\u003eFor some time now, I have been aware of the increasing trend towards using\nMarkdown for text editing and for creating HTML. Markdown has been on my list of\n\u0026ldquo;things I should learn some day\u0026rdquo; so I was interested last week to read about a\nnew iBooks book called \u003ca href=\"http://macsparky.com/markdown\"\u003eThe MacSparky Markdown Field Guide\u003c/a\u003e. This was\nsufficient inspiration so I got the book and read through it this weekend.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://static.squarespace.com/static/5008676d84aeae82b8acdd8c/t/5147c7a6e4b0d224b4419401/1363658669971/Markdown%20Cover%20Art%20-%20JPG.jpg?format=500w\" alt=\"The MacSparky Markdown Field Guide\"\u003e\u003c/p\u003e\n\u003cp\u003eActually, to say that I \u003cem\u003eread\u003c/em\u003e through the book is a mis-representation. The\nbook was written using iBooks Author specially for the iPad and contains screen\ncasts and interviews as well as text. But by the end of it, I now feel I have a\nbasic understanding on Markdown and the ways in which I can use it.\u003c/p\u003e\n\u003cp\u003eI guess the really big thing about using Markdown is that is creates plain text\nfiles that are human-readable even without being converted to HTML. This makes\nthem future-proof since they are not tied to a proprietary file format that may\ncease to exist at any time.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"using-markdown\"\u003e\n  Using Markdown:\n  \u003ca href=\"#using-markdown\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eSince this web site is a self-hosted WordPress site, my next step was to look\nfor a WordPress plugin that would allow me to use Markdown to create my posts. I\ncould have used a Markdown editor that had HTML export, but I wanted to try\nsomething that would eliminate the extra step. The first one I decide to try was\n\u003ca href=\"http://wordpress.org/extend/plugins/markdown-on-save-improved/\"\u003eMarkdown on Save Improved\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eOne of the main reasons for choosing this one was that it stores the posts as\nboth Markdown and as HTML. This saves time when going back to edit a post,\navoids the constant changes that creep in when converting between formats all\nthe time, and makes it so that the post will still display correctly even if\nMarkdown is no longer supported. The only problem I have found so far is that it\ndoesn\u0026rsquo;t automatically create links \u0026amp; image links using the Markdown format, but\nuses standard \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e links instead.\u003c/p\u003e\n\u003cp\u003eMy next stop, since I always use a Mac, was to get Brett Terpstra\u0026rsquo;s collection\nof \u003ca href=\"http://brettterpstra.com/projects/markdown-service-tools/\"\u003eServices for Markdown\u003c/a\u003e. These add a lot on convenient shortcuts: one of\nmy favourites is the ability to convert inline links to references links for\nincreased readability while editing.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"first-impressions\"\u003e\n  First Impressions:\n  \u003ca href=\"#first-impressions\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eSo having written this first post in Markdown, how do I feel about it? I haven\u0026rsquo;t\nreally tried anything too weird this time, but there are a few things that were\nvery easy to do. Particularly in the paragraph where I was talking about links \u0026amp;\nimages and wanted to include the tags as text without having it interpreted as\nHTML. All I had to do was surround the text with back-ticks.\u003c/p\u003e\n\u003cp\u003eLinks are vastly easier to manage and edit in Markdown. I miss the ability to\nspecify that links should open in a new tab - I prefer to have that setting for\nlinks that take you outside my web site, but the modern theories on usability\nseem to be heading towards deprecation of this feature, so I may just stop using\nit.\u003c/p\u003e\n\u003cp\u003eWith the standard WordPress editor, I always felt that I was fighting it. I had\nto swap between the visual \u0026amp; HTML editor tabs and when I swapped tabs, things\nwould sometimes change without me doing anything. So far, I feel more in control\nusing Markdown and although I have lost the WYSIWYG visual editor, I no longer\nhave to wade through the HTML editor to get the effect I want or to remove the\nresults of a few careless clicks.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"what-next\"\u003e\n  What next?\n  \u003ca href=\"#what-next\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eSome of the things on my wish list would be solved by a better editor and some\nby more powerful syntax.\u003c/p\u003e\n\u003cp\u003eEditor:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAdding links \u0026amp; images using Markdown style instead of HTML\u003c/li\u003e\n\u003cli\u003eBeing able to create lists\n\u003cul\u003e\n\u003cli\u003eMarkdown makes this very easy but this WP plugin does not support lists as\nfar as I can tell\u003c/li\u003e\n\u003cli\u003eSo these lists are in HTML\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSyntax:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAlignment of text \u0026amp; images\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUsing a stand-alone Markdown editor would solve the editor questions, but I\nwanted to try writing this post completely in WordPress.\u003cbr\u003e\nAnd with the alignment, there is nothing to stop me adding CSS to the Markdown.\u003c/p\u003e\n\u003cp\u003eNext time, I will test out a different WordPress Markdown editor and see how\nthat goes. I will also test using a standalone editor and exporting its HTML to\ncreate a post.\u003c/p\u003e\n"
    },
    {
        "title" : "A Knight's Move 1.3",
        "date_published" : "2013-02-27T00:00:00Z",
        "date_modified" : "2013-02-27T00:00:00Z",
        "id" : "https://troz.net/post/2013/a-knights-move-1-3/",
        "url" : "https://troz.net/post/2013/a-knights-move-1-3/",
        "content_html" : "\u003cp\u003e\u003cstrong\u003eUPDATE:\u003c/strong\u003e September 2016 - A Knight\u0026rsquo;s Move for iOS is no longer available.\u003c!-- raw HTML omitted --\u003e\n\u003ca href=\"/knightsmove/\"\u003eA Knight\u0026rsquo;s Move for Mac\u003c/a\u003e is still supported.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eA Knight\u0026rsquo;s Move has been updated to version 1.3. The Mac version is available\nthrough the\n\u003c!-- raw HTML omitted --\u003eMac\nApp Store\u003c!-- raw HTML omitted --\u003e.\u003c/p\u003e\n\u003ch2 id=\"three-new-level-packs\"\u003e\n  Three new level packs:\n  \u003ca href=\"#three-new-level-packs\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eEight by Eight\u003c/li\u003e\n\u003cli\u003eBishops Rule\u003c/li\u003e\n\u003cli\u003eCastles\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEight by Eight has every puzzle set in a chessboard sized grid with more\nconventional placing of pieces.\u003cbr\u003e\nBishops Rule has at least one Bishop in every puzzle.\u003cbr\u003e\nCastles has a Castle or Rook in every puzzle and is suited to players who would\nlike more of a challenge.\u003c/p\u003e\n\u003ch2 id=\"new-feature\"\u003e\n  New feature:\n  \u003ca href=\"#new-feature\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eWhen your knight has been taken, you have the option to undo the last move so\nyou can try again without losing the moves you have already made.\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n"
    },
    {
        "title" : "Man Reader (no SB)",
        "date_published" : "2013-02-06T00:00:00Z",
        "date_modified" : "2013-02-06T00:00:00Z",
        "id" : "https://troz.net/post/2013/man-reader-no-sb/",
        "url" : "https://troz.net/post/2013/man-reader-no-sb/",
        "content_html" : "\u003cp\u003eThese instructions are no longer valid. As of version 1.5, the App Store version\nof Man Reader has solved the sand-boxing issues and is now as powerful as the\nnon-sand-boxed version.\u003c/p\u003e\n\u003cp\u003eThe non-sand-boxed version will no longer be supported or updated, so please\nrevert to the App Store version.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eIf you find that Man Reader is not working well for you due to Apple\u0026rsquo;s\nsandboxing restrictions, then you can download a non-sandboxed version here. To\nfind out more about this, including how to test if you are affected, read the\n\u003ca href=\"/manreader-sandbox/\"\u003eSand-Boxing Man Reader\u003c/a\u003e page.\u003c/p\u003e\n\u003cp\u003eThe non-sandboxed version will only work if you have the App Store version of\nMan Reader already installed.\u003c/p\u003e\n\u003cp\u003eWhen you run \u0026lsquo;Man Reader (no SB)\u0026rsquo; for the first time, it will check to see if\nyou have a valid installation of \u0026lsquo;Man Reader\u0026rsquo; that you have purchased from the\nApp Store.\u003cbr\u003e\nIf you do not, \u0026lsquo;Man Reader (no SB)\u0026rsquo; will offer to take you to the App Store and then\nquit.\u003c/p\u003e\n\u003cp\u003eIf you already own the App Store version of Man Reader and \u0026lsquo;Man Reader (no SB)\u0026rsquo;\nhas started once, you can delete the App Store version and \u0026lsquo;Man Reader (no SB)\u0026rsquo;\nwill keep working.\u003c/p\u003e\n\u003cp\u003eTo install \u0026lsquo;Man Reader (no SB)\u0026rsquo;, click the download link below. This will\ndownload \u0026lsquo;ManReader-noSB.zip\u0026rsquo;. Double-click on this file to un-zip it, and then\nmove the \u0026lsquo;Man Reader (no SB).app\u0026rsquo; into your Applications folder and use as\nnormal. Do not delete the App Store version of Man Reader until \u0026lsquo;Man Reader (no\nSB)\u0026rsquo; has been run at least once.\u003c/p\u003e\n\u003ch2 id=\"deldownload-man-reader-no-sbdel2\"\u003e\n  \u003ca href=\"#\"\u003e\u003c!-- raw HTML omitted --\u003eDownload Man Reader (no SB)\u003c!-- raw HTML omitted --\u003e\u003c/a\u003e\n  \u003ca href=\"#deldownload-man-reader-no-sbdel2\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eI found out today (thanks Ron) that under OS X 10.10.3 the security settings no\nlonger allow the downloaded version of Man Reader (no SB) to run, despite the\nfact that I have signed it with my Apple Developer ID. OS X gives a very\nun-helpful dialog reporting that the app is damaged. In fact the app is fine,\nbut being blocked by the security settings. The solution as shown at\n\u003ca href=\"http://www.tech-recipes.com/rx/45404/mac-downloaded-app-is-damaged-and-cant-be-opened-error-solved/\"\u003eTechRecipes\u003c/a\u003e is to change your security system preferences to allow\ndownloaded apps from anywhere. You only need to do this temporarily as after you\nhave run the app once you can set this setting back to whatever you had before.\u003c/p\u003e\n"
    },
    {
        "title" : "Sand-Boxing Man Reader",
        "date_published" : "2013-02-06T00:00:00Z",
        "date_modified" : "2013-02-06T00:00:00Z",
        "id" : "https://troz.net/post/2013/sand-boxing-man-reader/",
        "url" : "https://troz.net/post/2013/sand-boxing-man-reader/",
        "content_html" : "\u003cp\u003eThese instructions are no longer valid. As of version 1.5, the App Store version\nof Man Reader has solved the sand-boxing issues and is now as powerful as the\nnon-sand-boxed version.\u003c/p\u003e\n\u003cp\u003eThe non-sand-boxed version will no longer be supported or updated, so please\nrevert to the App Store version.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eAs with all apps in the App Store, \u003ca href=\"/manreader/\"\u003eMan Reader\u003c/a\u003e is restricted by Apple\u0026rsquo;s\nsand-boxing policy. Sand-boxing is a great thing. It isolates apps from each\nother and from the system, making it far less likely that a problem app will\ncause wide-spread havoc. However for an app like Man Reader, this can lead to a\ndrop in functionality.\u003c/p\u003e\n\u003cp\u003eDue to the permissions limitations of sand-boxing, Man Reader can only search\ndefined paths on your system drive e.g. /usr/, /opt/\u003cbr\u003e\nThis is where the default man pages are all stored, but if you install other software\n(Xcode is a good example), then Man Reader may not be able to list all the available\nman pages on your system.\u003c/p\u003e\n\u003cp\u003eTo tell if Man Reader is missing man pages, copy \u0026amp; paste the following command\ninto the Terminal app:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ewhatis . \u0026gt;\u0026gt; ~/Desktop/whatis.txt\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMan Reader runs this command internally when it starts, but the Terminal app is\nnot sand-boxed and so can access everything.\u003cbr\u003e\nRunning this command will create a text file on your desktop with a list of all available\nman pages on your system. Open it in a text editor that can show the number of lines\nin a file. \u003ca href=\"http://www.barebones.com/products/textwrangler/\"\u003eTextWrangler from Bare Bones Software\u003c/a\u003e is a good free editor that\nwill do this.\u003c/p\u003e\n\u003cp\u003eTo check what man pages ManReader can read, go to Finder and select \u0026lsquo;Go to\nFolder\u0026hellip;\u0026quot; from the Go menu. Paste in the following path:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e~/Library/Containers/net.troz.Man-Reader/Data/Library/Application Support/Man Reader/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou will see two files: open the one called \u0026lsquo;ManReader.raw\u0026rsquo; in your text editor.\nThis is the result of Man Reader running the whatis command. Compare the number\nof lines in the two files. Don\u0026rsquo;t worry about the order of the items in the file\nas that may vary, you are only concerned with the total number of lines in each.\u003c/p\u003e\n\u003cp\u003eThere may be one or two lines more in the whatis.txt file but if there is a big\ndifference, then you are being sand-boxed\u0026hellip;\u003cbr\u003e\nAs an example, on my system, the whatis.txt file contains 8954 lines and the ManReader.raw\nfile contains 2320 lines!\u003c/p\u003e\n\u003cp\u003e\u003c!-- raw HTML omitted --\u003eIf you are affected by this or think that you might be, I now have a\nsolution - actually two possible solutions:\u003c!-- raw HTML omitted --\u003e\u003c/p\u003e\n\u003cp\u003e\u003c!-- raw HTML omitted --\u003eIf you have already bought Man Reader from the App Store, then you can\n\u003ca href=\"#\"\u003edownload a non-sandboxed version\u003c/a\u003e. This will only work if you have the App\nStore version of the app installed.\u003c!-- raw HTML omitted --\u003e\u003c/p\u003e\n\u003cp\u003e\u003c!-- raw HTML omitted --\u003eIf you do not already own a copy of Man Reader, and want to buy it\nun-sandboxed, then you can now \u003ca href=\"#\"\u003ebuy it directly\u003c/a\u003e.\u003c!-- raw HTML omitted --\u003e\u003c/p\u003e\n\u003cp\u003ePlease \u003ca href=\"mailto:sarah@troz.net?subject=Man%20Reader%20and%20Sand-Boxing\"\u003econtact me\u003c/a\u003e if you have any issues with this.\u003c/p\u003e\n"
    },
    {
        "title" : "Icns Maker \u0026 Icon Builder updated",
        "date_published" : "2013-01-19T00:00:00Z",
        "date_modified" : "2013-01-19T00:00:00Z",
        "id" : "https://troz.net/post/2013/icns-maker-icon-builder-updated/",
        "url" : "https://troz.net/post/2013/icns-maker-icon-builder-updated/",
        "content_html" : "\u003cp\u003eJanuary 18th 2013:\u003c/p\u003e\n\u003cp\u003eBoth of the icon building apps have now been updated to fix a but that made\nincorrect icon sizes when running on a Retina MacBook Pro.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/icns-maker/\" title=\"Icns Maker\"\u003e Icns Maker\u003c/a\u003e uses your image to create an icns file for Mac apps.\u003c/p\u003e\n\u003cp\u003e\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/icon-builder/\" title=\"Icon Builder\"\u003eIcon Builder\u003c/a\u003e uses your image to create the suite of icon files needed for\niOS apps.\u003c/p\u003e\n\u003cp\u003e\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e\u003c/p\u003e\n"
    },
    {
        "title" : "Icon Makers \u0026 Retina Macs",
        "date_published" : "2013-01-14T00:00:00Z",
        "date_modified" : "2013-01-14T00:00:00Z",
        "id" : "https://troz.net/post/2013/icon-makers-retina-macs/",
        "url" : "https://troz.net/post/2013/icon-makers-retina-macs/",
        "content_html" : "\u003cp\u003eIcns Maker which makes an icns icon file for Mac apps, and Icon Builder which\nmakes the suite of png files needed for iOS apps, are both compatible with the\nRetina MacBook Pro.\u003c/p\u003e\n\u003cp\u003eHowever it was recently brought to my attention (thanks Cameron), that when\nrunning on a Retina MBP, all the icon files were exactly twice as large as they\nshould be. The Icon.png file which supplies the main app icon for iPhone apps\nshould be 57 pixels by 57 pixels. Using Icon Builder on a Retina MBP produced an\nIcon.png file that was 114 x 114 pixels.\u003c/p\u003e\n\u003cp\u003eI have now worked out how to persuade the Retina Mac that when I ask for an\nimage size, I actually want that size, not the size that OS X thinks would look\nbetter. Updates to these 2 apps will be submitted to the App Store for approval\nlater today which will solve the problem.\u003c/p\u003e\n\u003cp\u003eIn the meantime, there is a work-around for Retina MBP users: force the app to\nrun in low resolution mode.\u003c/p\u003e\n\u003cp\u003eIn Finder, open your Applications folder and select the app (this works for both\nIcns Maker and Icon Builder). Press Command-I or choose Get Info from the File\nmenu which will open a window like this:\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003eCheck the checkbox labelled \u0026ldquo;Open in Low Resolution\u0026rdquo;. Next time the app is\nopened, it will ignore the Retina options and use standard resolution only. This\nwill create icon files with the correct sizes. However text may look slightly\nfuzzy.\u003c/p\u003e\n\u003cp\u003eWhen the updates to these apps become available, make sure you go back and\nun-check this setting to return to Retina mode.\u003c/p\u003e\n"
    },
    {
        "title" : "A Knight's Move updates",
        "date_published" : "2012-10-15T00:00:00Z",
        "date_modified" : "2012-10-15T00:00:00Z",
        "id" : "https://troz.net/post/2012/a-knights-move-updates/",
        "url" : "https://troz.net/post/2012/a-knights-move-updates/",
        "content_html" : "\u003cp\u003e\u003cstrong\u003eUPDATE:\u003c/strong\u003e September 2016 - A Knight\u0026rsquo;s Move for iOS is no longer available.\u003c!-- raw HTML omitted --\u003e\n\u003ca href=\"/knightsmove/\"\u003eA Knight\u0026rsquo;s Move for Mac\u003c/a\u003e is still supported.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eA Knight\u0026rsquo;s Move for iOS has been updated to take advantage of the taller iPhone\n5 screen.\u003c/p\u003e\n\u003cp\u003eIn-app purchasing of packs has been removed from both Mac \u0026amp; iOS versions.\u003cbr\u003e\nFor iOS, the app is now free but supported by iAds (please click through if you would\nlike to show your support).\u003cbr\u003e\nApple does not have an ad system for Mac, so the Mac version is now a paid app\nthat includes all the puzzle packs.\u003c/p\u003e\n\u003cp\u003eThe in-app purchasing was an interesting experiment, but the ratio of purchases\nto downloads was too low to sustain the development.\u003c/p\u003e\n"
    },
    {
        "title" : "App Store Review Times",
        "date_published" : "2012-10-15T00:00:00Z",
        "date_modified" : "2012-10-15T00:00:00Z",
        "id" : "https://troz.net/post/2012/app-store-review-times/",
        "url" : "https://troz.net/post/2012/app-store-review-times/",
        "content_html" : "\u003cp\u003eThere are been a lots of stories going around about lengthening Mac App Store\nreview times.\n\u003c!-- raw HTML omitted --\u003eShiny\nDevelopments\u003c!-- raw HTML omitted --\u003e crowd-sourced data certainly backs this up although they have\nmuch more data for iOS apps than for Mac apps.\u003c/p\u003e\n\u003cp\u003eSome people, including\n\u003c!-- raw HTML omitted --\u003eLex\nFriedman of MacWorld\u003c!-- raw HTML omitted --\u003e and\n\u003c!-- raw HTML omitted --\u003eJohn\nGruber of Daring Fireball\u003c!-- raw HTML omitted --\u003e, are suggesting that the delays are due to the\nrush of new apps to support the iPhone 5 and iOS 6. This implies that there is\nonly one set of review staff and that a large proportion of them have been moved\nfrom Mac to iOS apps.\u003c/p\u003e\n\u003cp\u003eI think this is an incorrect analysis. The slowdown started before iOS 6 and\nbefore the iPhone 5. I think it started in June when Apple started to enforce\nMac sandboxing.\u003c/p\u003e\n\u003cp\u003eAs discussed in a \u003ca href=\"/sandboxing-and-the-mac-app-store/\"\u003eprevious post\u003c/a\u003e, I have had a lot of trouble getting Man\nReader to be sandbox-compatible leading to many rejections. One problem was that\nI had implemented sand-boxing before the deadline, but with some temporary\nentitlements to allow read-only access to required system files. This\nentitlement was approved initially, but after one rejection, an Apple reviewer\ntold me that they had been approving all requested entitlements before the\ndeadline, but now were actually reviewing them all.\u003c/p\u003e\n\u003cp\u003eTo me, this seems like a rather silly thing to have done which has now returned\nto haunt them. Instead of allowing developers time to get used to the\nrestrictions, Apple reviewers allowed developers to think that their apps were\nsandbox-complient already. Then Apple was faced with the enormous task of\nre-checking all the entitlements that they had previously allowed without\nchecking. This was unfair to developers and has only created extra work for the\nreviewers.\u003c/p\u003e\n\u003cp\u003eHere is a table showing the recent review times for my Mac apps:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003eApp\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003eProcess\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003eReview days\u003c/th\u003e\n\u003cth style=\"text-align:center\"\u003eDates\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eTime In Words\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eupdate\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e22\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003eSept 22 - Oct 14\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eIcns Maker\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003enew app\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e24\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003eAug 5 - Aug 29\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eA Knight\u0026rsquo;s Move\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eupdate\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e26\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003eSept 6 - Oct 2\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eIcon Builder\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003enew app\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003e33\u003c/td\u003e\n\u003ctd style=\"text-align:center\"\u003eAug 22 - Sept 24\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003eBy comparison, when I submitted an update to A Knight\u0026rsquo;s Move for iOS in October,\nit was passed in only 8 days.\u003c/p\u003e\n"
    },
    {
        "title" : "Icon makers for Mac \u0026 iOS apps",
        "date_published" : "2012-10-15T00:00:00Z",
        "date_modified" : "2012-10-15T00:00:00Z",
        "id" : "https://troz.net/post/2012/icon-makers-for-mac-ios-apps/",
        "url" : "https://troz.net/post/2012/icon-makers-for-mac-ios-apps/",
        "content_html" : "\u003cp\u003eAnnouncing two new apps for creating icons for with Mac or iOS projects:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/icns-maker/\" title=\"Icns Maker\"\u003eIcns Maker\u003c/a\u003e helps you convert a single image into a .icns file in two\nsteps.\u003cbr\u003e\n\u003ca href=\"/icon-builder/\" title=\"Icon Builder\"\u003eIcon Builder\u003c/a\u003e creates all the files needed to set up your icons for any iOS project.\u003c/p\u003e\n\u003ch2 id=\"creating-icon-files-for-mac-apps\"\u003e\n  Creating icon files for Mac apps:\n  \u003ca href=\"#creating-icon-files-for-mac-apps\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eIn versions of Xcode before 4.4, Apple provided an app called “Icon Composer”.\nIt allowed you to drag images into a window and export a .icns file for use in\nyour Mac apps. With Xcode 4.4, Apple has changed the way icons are handled for\nMac apps and “Icon Composer” is no longer supplied.\u003c/p\u003e\n\u003cp\u003eThe Xcode docs describe the process you need to go through to make a .icns file:\ncreate a suite of image files of the correct size and with the correct file\nnames, bundle them into a specially named folder and then use Terminal to stitch\nthem together.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/icns-maker/\" title=\"Icns Maker\"\u003eIcns Maker\u003c/a\u003e does all this for you in two easy steps.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eDrag in an image file (preferably 1024x1024 but 512x512 will also work).\u003c/li\u003e\n\u003cli\u003eClick a button.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThere are more options available for fine-tuning your icons allowing you to\nselect different images for the various sizes, but this is all that is needed\nfor basic operation.\u003c/p\u003e\n\u003cp\u003eIcns Maker is available from the\n\u003c!-- raw HTML omitted --\u003eMac\nApp Store\u003c!-- raw HTML omitted --\u003e.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"creating-icon-files-for-ios-apps\"\u003e\n  Creating icon files for iOS apps:\n  \u003ca href=\"#creating-icon-files-for-ios-apps\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eIcons for iOS apps are not bundled into a single file like a Mac .icns file. You\nadd various .png images to your project. Depending on the devices supported by\nyour app, you will need many different sizes of icon file. There are some icons\nfor iPad only, some for iPhone / iPod Touch only and others required for any\ndevice. Additionally, you will need larger versions of each image to support\nRetina displays.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/icon-builder/\" title=\"Icon Builder\"\u003eIcon Builder\u003c/a\u003e is a Mac app that does all this for you. As with Icns Maker,\nyou just drag your image into the app and click a button. You can also select\nwhich devices your icon needs to suit and use different images for the different\nsizes if you want finer control.\u003c/p\u003e\n\u003cp\u003eWhen the app creates your icon files, it generates a ReadMe file with the\ninformation needed for installing these files in your project, including\ninformation to copy \u0026amp; paste directly into your Info.plist file.\u003c/p\u003e\n\u003cp\u003eIcon Builder is available from the\n\u003c!-- raw HTML omitted --\u003eMac\nApp Store\u003c!-- raw HTML omitted --\u003e.\u003cbr\u003e\nNote that although this app builds icon files for iOS app, it runs on a Mac.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"naming\"\u003e\n  Naming\n  \u003ca href=\"#naming\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eOriginally these apps were named in a consistent manner: Mac Icon Builder and\niOS Icon Builder. However both these names were rejected by Apple - you are not\nallowed to use the words \u0026ldquo;Mac\u0026rdquo; or \u0026ldquo;iOS\u0026rdquo; in any app name sold through the Mac App\nStore.\u003c/p\u003e\n\u003cp\u003eThen I tried Icns Maker and Icon Maker. Icns Maker was approved, but there is\nalready an app called Icon Maker, so I went with Icon Builder. But by that time\nIcns Maker had already been released, so there was no way to make the names more\nconsistent.\u003c/p\u003e\n"
    },
    {
        "title" : "Updating apps for iPhone 5",
        "date_published" : "2012-09-24T00:00:00Z",
        "date_modified" : "2012-09-24T00:00:00Z",
        "id" : "https://troz.net/post/2012/updating-apps-for-iphone-5/",
        "url" : "https://troz.net/post/2012/updating-apps-for-iphone-5/",
        "content_html" : "\u003cp\u003eI have started work updating my iOS apps to fill the larger screen of an iPhone\u003c/p\u003e\n\u003col start=\"5\"\u003e\n\u003cli\u003eMy iPhone 5 is on order - I missed out on the first shipment, but hopefully\nit won\u0026rsquo;t be too long. Meanwhile, I will just test in the iPhone Simulator and\nhope this is OK.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eBut it was a puzzle to me how to get an app to fill the longer screen. I have\nthe latest Xcode and the latest Simulator which allows you to specify what\nscreen size iPhone to simulate. So I re-built an app and nothing changed - it\nshowing black strips top \u0026amp; bottom and left my app at the old size.\u003c/p\u003e\n\u003cp\u003eAfter trying many different things and reading a lot of the new sections of the\nApple developer documentation, I finally found the answer online:\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003eApparently the system uses the presence or absence of this file this to detect\nwhether your app supports the longer iPhone.\u003c/p\u003e\n\u003cp\u003eI read that Xcode is supposed to warn you of the consequences if this file is\nmissing, but in my case, when I opened my project, Xcode helpfully used the old\nlaunch image in its place. It showed a warning icon that the image was the wrong\nsize, but nothing else.\u003c/p\u003e\n\u003cp\u003eThe next problem was how to create this file. I use screen shots, but until the\napp worked in the correct format, I wasn\u0026rsquo;t going to be able to get the screen\nshot. So I made it a 2 step process: first I duplicated the original launch\nimage, renamed it and resized it. It looked wrong but this was irrelevant - it\nwas enough to get the app working in the correct format. Once I had the app\nworking, I was able to take a screen shot and create the final launch image.\u003c/p\u003e\n\u003cp\u003eOnce you have the app working in 2 sizes, you have to do more work with the\nlayout, either using springs \u0026amp; struts or using the modern auto-layout feature. I\nfind auto-layout confusing, but it is obviously more powerful and the way of the\nfuture, so I am trying to work it out. I found a good tutorial at\n\u003c!-- raw HTML omitted --\u003eRay\nWenderlich\u0026rsquo;s site\u003c!-- raw HTML omitted --\u003e. While directed at iOS 6, it also applies to Mac apps.\u003c/p\u003e\n"
    },
    {
        "title" : "A Knight's Move for iOS 1.1",
        "date_published" : "2012-09-13T00:00:00Z",
        "date_modified" : "2012-09-13T00:00:00Z",
        "id" : "https://troz.net/post/2012/a-knights-move-for-ios-1-1/",
        "url" : "https://troz.net/post/2012/a-knights-move-for-ios-1-1/",
        "content_html" : "\u003cp\u003e\u003cstrong\u003eUPDATE:\u003c/strong\u003e September 2016 - A Knight\u0026rsquo;s Move for iOS is no longer available.\u003c!-- raw HTML omitted --\u003e\n\u003ca href=\"/knightsmove/\"\u003eA Knight\u0026rsquo;s Move for Mac\u003c/a\u003e is still supported.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eA Knight\u0026rsquo;s Move for iPad \u0026amp; iPhone has just been updated to version 1.1\u003c/p\u003e\n\u003cp\u003eThere were some minor changes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNew puzzle pack: Majestic.\u003c/li\u003e\n\u003cli\u003eiPhone now shows an info button of there is more help available for a\nparticular puzzle. (This info was already visible in the iPad version.)\u003c/li\u003e\n\u003cli\u003eMinor cosmetic fixes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe big change was that all puzzles packs are now included in the free app,\nwhich is now supported by iAds. The sale of puzzle packs via in-app purchasing\nwas disappointing, so I have decided to try using iAds instead. Hopefully they\nwill not feel too intrusive, but if you want to support my apps, please tap on a\nfew of the ads.\u003c/p\u003e\n\u003cp\u003eNote that iAds will not appear in all countries. You may just see a banner\nlinking you to my other apps on the iPad. On iPhone, you will not see anything\ndifferent.\u003c/p\u003e\n"
    },
    {
        "title" : "Man Reader 1.1 Released",
        "date_published" : "2012-08-14T00:00:00Z",
        "date_modified" : "2012-08-14T00:00:00Z",
        "id" : "https://troz.net/post/2012/man-reader-1-1-released/",
        "url" : "https://troz.net/post/2012/man-reader-1-1-released/",
        "content_html" : "\u003cp\u003eThe update of \u003ca href=\"/manreader/\" title=\"Man Reader\"\u003eMan Reader\u003c/a\u003e to version 1.1 has just become available through\nthe Mac App Store. This update has a bunch of \u003ca href=\"/manreader/#new_features\"\u003enew features\u003c/a\u003e - thanks to\neveryone who made suggestions.\u003c/p\u003e\n\u003cp\u003eAs detailed in a \u003ca href=\"/sandboxing-and-the-mac-app-store/\"\u003eprevious post\u003c/a\u003e, there have been major issues getting this\napp approved with Apple\u0026rsquo;s new sand-boxing restrictions fully in place. But to\ntheir credit, the Apple reviewers have been unfailing helpful and polite in\nanswering my questions and keeping me informed.\u003c/p\u003e\n\u003cp\u003eI hope everyone finds the new features useful. Please \u003ca href=\"mailto:sarah@troz.net?subject=Man%20Reader\"\u003ekeep the suggestions\ncoming in\u003c/a\u003e to make this app even better!\u003c/p\u003e\n"
    },
    {
        "title" : "Sandboxing and the Mac App Store",
        "date_published" : "2012-07-28T00:00:00Z",
        "date_modified" : "2012-07-28T00:00:00Z",
        "id" : "https://troz.net/post/2012/sandboxing-and-the-mac-app-store/",
        "url" : "https://troz.net/post/2012/sandboxing-and-the-mac-app-store/",
        "content_html" : "\u003cp\u003eAs of June 2012, all apps submitted to the Mac App Store have to be sandboxed\ni.e. they have to be able to run in a limited environment where they cannot\ninterfere with other apps or other parts of the system. While this is generally\na good thing, there are problems when apps have legitimate reasons for requiring\naccess to other resources.\u003c/p\u003e\n\u003cp\u003eOne annoyance for developers is that Apple\u0026rsquo;s apps are mostly not sandboxed. To\ncheck what apps you have installed that are sandboxed, open up Activity Monitor\n(in Applications/Utilities). In the View menu, check that Sandbox is checked in\nthe Columns submenu. Then you can sort by clicking on the Sandbox title and work\nout which apps are already sandboxed. Mail, Preview and Text Edit are now\nsandboxed and so is the new Reminders app, but as far as I can tell, no other\nApple apps are. This causes two problems: firstly it is not fair to other\ndevelopers if Apple is enforcing a standard which only they are allowed to\nbreak. Secondly, if Apple developers had to follow the same rules as everyone\nelse, then maybe the system would evolve to become more usable for everyone.\u003c/p\u003e\n\u003cp\u003eIn the Apple developer documentation about sandboxing, there is a section headed\n\u0026ldquo;Determine Whether Your App Is Suitable for Sandboxing\u0026rdquo;. Here they list numerous\nreasons why any app might not work in the sandbox. But the Mac App Store now\nmakes sandboxing compulsory, so what to do with apps that are not suitable?\u003c/p\u003e\n\u003cp\u003eSome resources can be requested when building the app: access to various folders\n(Pictures, Music, Downloads etc), access to Address Book and Calendar data,\nprinting facilities, networking etc. Beyond the specified list of entitlements\nthat can be requested, developers can also apply for \u0026ldquo;temporary entitlements\u0026rdquo;\nwhich, if granted, will unlock access to other parts of the operating system.\nHowever these are subject to the whims of app reviewers and will be re-assessed\nwith every update. Apple has also made it clear that they are intended as a\ntransition feature and will not be available for ever.\u003c/p\u003e\n\u003cp\u003eThis has lead to a recent spate of popular apps leaving the App Store.\n\u003c!-- raw HTML omitted --\u003eMarco\nArment\u003c!-- raw HTML omitted --\u003e has discussed this problem with an emphasis on the issue of lack of\nconfidence in buying from the App Store. If you cannot be sure that an app you\nbuy will remain in the App Store, then you are less likely to buy it there.\u003c/p\u003e\n\u003cp\u003eI have run into direct issues with sandboxing already. With\n\u003c!-- raw HTML omitted --\u003ePic-a-POD\u003c!-- raw HTML omitted --\u003e, I used to have\nlinks to the Desktop and Screen Saver panes in System Preferences. These used\nAppleScripts which required a temporary entitlement to send an AppleEvent. The\napp was rejected because of this, so I had to modify this feature - it now just\ntakes you to the relevant section of System Prefs, but not directly to either\nDesktop or Screen Saver. However Pic-a-POD\u0026rsquo;s help, which runs in Apple\u0026rsquo;s Help\nViewer app, contains exactly the same AppleScripts and so is allowed to access\nthese preference panes directly. Try working out the logic of that one!\u003c/p\u003e\n\u003cp\u003eI have more serious problems with\n\u003c!-- raw HTML omitted --\u003eMan Reader\u003c!-- raw HTML omitted --\u003e. Man\nReader displays a list of the man pages on your system. Depending on the tools\nyou have installed, these pages may be in a variety of locations. The shell\ncommand that detects them first reads a config file and then checks the folders\nlisted in that config file. All it needs is read-only access. With the first\nsandboxed version, I asked for a temporary entitlement to give me read-only\naccess to the startup disk. This was granted, but I have since been informed\nthat all requested entitlements were granted before the App Store cut-off date.\nThis may have been meant to be helpful, but it was not useful to allow access\nthat would later be removed without any warning.\u003c/p\u003e\n\u003cp\u003eThe current version of Man Reader waiting for approval asks for read-only access\nto the config file directly and then to every folder listed in that config file.\nIf approved, this should be able to access all the man pages on a system. I have\nno idea whether these entitlements will be granted, but if not, then I will have\nto remove Man Reader from the App Store. It would be wrong to continue to sell\nan app that only functioned in a limited manner, even though the App Store is\nfar and away my best form of marketing.\u003c/p\u003e\n\u003cp\u003eSo what do I suggest Apple does? I think they need to allow apps that are not\nsand-boxed. However these apps could come with a warning before installation. In\nMountain Lion, the new security feature called Gatekeeper allows you to specify\nthe level of security you want when installing apps. Currently the options are\nto allow apps downloaded from:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMac App Store\u003c/li\u003e\n\u003cli\u003eMac App Store and identified developers\u003c/li\u003e\n\u003cli\u003eAnywhere\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThey could split the first option in two and allow\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMac App Store sandboxed\u003c/li\u003e\n\u003cli\u003eMac App Store any\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOne further wrinkle is iCloud. Apple is encouraging users and developers towards\niCloud data storage and sharing. But only apps in the App Store are allowed to\nuse iCloud.\u003c/p\u003e\n\u003cp\u003eSo it will be interesting to see how this plays out. Obviously Apple is not\ngoing to care if a tiny developer like me leaves the App Store, but if enough\nhigh-profile developers leave, then there will surely be some consideration\ngiven to the problem.\u003c/p\u003e\n"
    },
    {
        "title" : "Update to Time In Words screen saver",
        "date_published" : "2012-07-27T00:00:00Z",
        "date_modified" : "2012-07-27T00:00:00Z",
        "id" : "https://troz.net/post/2012/update-to-time-in-words-screen-saver/",
        "url" : "https://troz.net/post/2012/update-to-time-in-words-screen-saver/",
        "content_html" : "\u003cp\u003e\u003ca href=\"/time-in-words-screen-saver-for-mac/\" title=\"Time In Words Screen Saver for Mac\"\u003eTime In Words screen saver\u003c/a\u003e has just been updated to version 1.1 and is now\nfully compatible with Mountain Lion. It is free to use and can be\n\u003ca href=\"/screensaver/TimeInWords-ScreenSaver.zip\"\u003edownloaded\u003c/a\u003e here.\u003c/p\u003e\n\u003cp\u003eThe basic screen saver worked before, but searching for an alternative time zone\nwould crash System Preferences. That is now fixed.\u003c/p\u003e\n\u003cp\u003eThe screen saver also shows a thumbnail image when in Mountain Lion and is\ncode-signed with my developer ID for compatibility with Mountain Lion\u0026rsquo;s\nGatekeeper.\u003c/p\u003e\n\u003cp\u003eThe current version is compatible with 10.8 and 10.7. It may work in 10.6 but I\ncannot be sure. If anyone tries it, please let me know.\u003c/p\u003e\n"
    },
    {
        "title" : "A Knight's Move Released",
        "date_published" : "2012-07-09T00:00:00Z",
        "date_modified" : "2012-07-09T00:00:00Z",
        "id" : "https://troz.net/post/2012/a-knights-move-released/",
        "url" : "https://troz.net/post/2012/a-knights-move-released/",
        "content_html" : "\u003cp\u003e\u003cstrong\u003eUPDATE:\u003c/strong\u003e September 2016 - A Knight\u0026rsquo;s Move for iOS is no longer available.\u003c!-- raw HTML omitted --\u003e\n\u003ca href=\"/knightsmove/\"\u003eA Knight\u0026rsquo;s Move for Mac\u003c/a\u003e is still supported.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e\u0026ldquo;A Knight\u0026rsquo;s Move\u0026rdquo; is a fun, addictive and simple puzzle game based on the\nmovements of chess pieces. Your goal is to move your white knight across a board\nto a target square using the same movements as a knight in chess. Pawns may\nblock your way, while enemy bishops, castles, knights and the queen may try to\nstop you.\u003c/p\u003e\n\u003cp\u003eThe game is available for iPad, iPhone and iPod Touch from the iTunes Store and\nrequires iOS 5.0 or later. The Mac version is available from the Mac App Store\nand requires OS X 10.7 or later.\u003c/p\u003e\n\u003cp\u003ePerfect for when you have a few minutes to relax, like on the train to work,\nduring your lunch break or during a boring lecture or class (Kids: don\u0026rsquo;t take\nadvice from randoms, but you can turn the sound FX off. Just sayin\u0026rsquo;), \u0026ldquo;A\nKnight\u0026rsquo;s Move\u0026rdquo; will keep you coming back for \u0026ldquo;Just One More Go\u0026rdquo;!\u003c/p\u003e\n\u003cp\u003eOnce you have played the tutorial pack, you can move on to the other puzzle\npacks. Each pack comes with 25 more puzzles and there are many different packs\nallowing you to select easy puzzles, challenging puzzles or variety packs, some\nwith themes.\u003c/p\u003e\n\u003cp\u003eSee more about \u0026ldquo;A Knight\u0026rsquo;s Move\u0026rdquo; at the \u003ca href=\"/knightsmove/\"\u003eKnight\u0026rsquo;s Move web page\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGet the game from the\n\u003c!-- raw HTML omitted --\u003eMac\nApp Store\u003c!-- raw HTML omitted --\u003e.\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003eTutorial puzzle on iPhone\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/images/PeskyPawns.png\"\u003e\u003c!-- raw HTML omitted --\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003ePesky Pawns - one of the more difficult puzzles on Mac.\u003c/p\u003e\n"
    },
    {
        "title" : "Easy access to the Library folder",
        "date_published" : "2012-05-16T00:00:00Z",
        "date_modified" : "2012-05-16T00:00:00Z",
        "id" : "https://troz.net/post/2012/easy-access-to-the-library-folder/",
        "url" : "https://troz.net/post/2012/easy-access-to-the-library-folder/",
        "content_html" : "\u003cp\u003eIn Mac OS X 10.7 (Lion), Apple decided to make it more difficult to access your\nLibrary folder, presumably to stop people doing stuff that made apps crash. But\nas a developer, I need access to my Library folder a lot. I need to check that\npreferences are being saved correctly. If I have an app that uses the\nApplication Support folder, then I need to be able to check it. And for\nsand-boxed apps, they keep all their data in the Containers folder inside the\nLibrary.\u003c/p\u003e\n\u003cp\u003eYou can easily get to the Library folder by holding down the Option key while\nchoosing the Go menu in Finder. This adds Library to the menu and you can get to\nthe folder that way. But this is not as convenient as single-click access from a\nFinder window, so here is my preferred method.\u003c/p\u003e\n\u003cp\u003eUse the Option key and the Finder\u0026rsquo;s Go menu to get the Library folder open in a\nFinder window. Switch this window to column view, which will display the Library\nfolder (slightly greyed out) in the first column. Drag this Library folder to\nthe side bar of your Finder window. Now it is there all the time, in every\nFinder window that is showing the side bar.\u003c/p\u003e\n\u003cp\u003eI have read about various Terminal tricks to get the Library to show up, but\nevery system update seems to turn it off again. This technique doesn\u0026rsquo;t involve\nanything except the Finder\u0026rsquo;s side bar preferences and so far (I\u0026rsquo;m now up to\n10.7.4), it hasn\u0026rsquo;t needed to be reset after any update.\u003c/p\u003e\n"
    },
    {
        "title" : "Man Reader update coming soon",
        "date_published" : "2012-05-11T00:00:00Z",
        "date_modified" : "2012-05-11T00:00:00Z",
        "id" : "https://troz.net/post/2012/man-reader-update-coming-soon/",
        "url" : "https://troz.net/post/2012/man-reader-update-coming-soon/",
        "content_html" : "\u003cp\u003eMan Reader launched on the Mac App Store a couple of days ago and yesterday I\ngot an email from a purchaser who reported that Man Reader was not displaying\nthe man pages for MacPorts, even though he had the paths set up correctly.\u003c/p\u003e\n\u003cp\u003eI installed MacPorts to check this out and ran into the same problem. Running\nthe command \u0026ldquo;man port\u0026rdquo; in Terminal worked fine, but \u0026ldquo;port\u0026rdquo; did not appear in Man\nReader\u0026rsquo;s list.\u003c/p\u003e\n\u003cp\u003eMan Reader uses the \u0026ldquo;apropos\u0026rdquo; command to list all available man pages, so I\ntested it next. When I found that it was not listing \u0026ldquo;port\u0026rdquo; either, I thought I\nhad discovered the problem. OS X offers two commands for searching for man\npages: apropos \u0026amp; whatis. The database files used by these commands are updated\nweekly by one of the periodic system commands. I manually ran this update\ncommand using:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo /etc/periodic/weekly/320.whatis\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis did part of the job, as the apropos command when used in Terminal now\ncontained the MacPorts man pages. However Man Reader still did not show these\nman pages.\u003c/p\u003e\n\u003cp\u003eReverting to the Console log, I found that this was a sand-boxing problem. The\nMac OS X sand-box was preventing access to the man.conf file (which tells where\nto look for man pages), and the whatis database file containing the new data. I\nassume that without access to these files, the default locations for man pages\nwere still searched, but no non-standard locations were being searched.\u003c/p\u003e\n\u003cp\u003eI have just submitted an update to the App Store that still uses sand-boxing but\nrequests temporary read-only access to the file system to read these files. If\nApple rejects this, then I will release a version without sand-boxing.\u003c/p\u003e\n\u003cp\u003eEither way, you can be assured that the matter is being dealt with and the next\nupdate, whether sand-boxed or not, will allow access to all man pages.\u003c/p\u003e\n"
    },
    {
        "title" : "Pic-a-POD 2.0.4 for Mac",
        "date_published" : "2012-05-11T00:00:00Z",
        "date_modified" : "2012-05-11T00:00:00Z",
        "id" : "https://troz.net/post/2012/pic-a-pod-2-0-4-for-mac/",
        "url" : "https://troz.net/post/2012/pic-a-pod-2-0-4-for-mac/",
        "content_html" : "\u003cp\u003eThe latest update for \u003ca href=\"http://www.picapod.com/\"\u003ePic-a-POD for Mac\u003c/a\u003e is now available through the\n\u003c!-- raw HTML omitted --\u003eMac\nApp Store\u003c!-- raw HTML omitted --\u003e.\u003c/p\u003e\n\u003ch2 id=\"bug-fix\"\u003e\n  Bug fix:\n  \u003ca href=\"#bug-fix\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eselecting an iPhoto pic from the Recent Desktops menu now works correctly.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"new-features\"\u003e\n  New features:\n  \u003ca href=\"#new-features\" class=\"h-anchor\" aria-hidden=\"true\"\u003e#\u003c/a\u003e\n\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBetter indication of downloads and when large pics are not yet available\u003c/li\u003e\n\u003cli\u003eDirect link to App Store in Help menu - please rate or review.\u003c/li\u003e\n\u003c/ul\u003e\n"
    },
    {
        "title" : "Making a Mac Screen Saver",
        "date_published" : "2012-05-09T00:00:00Z",
        "date_modified" : "2012-05-09T00:00:00Z",
        "id" : "https://troz.net/post/2012/making-a-mac-screen-saver/",
        "url" : "https://troz.net/post/2012/making-a-mac-screen-saver/",
        "content_html" : "\u003cp\u003eHaving just completed the my first screen saver for Mac - the \u003ca href=\"/time-in-words-screen-saver-for-mac/\" title=\"Time In Words Screen Saver for Mac\"\u003eTime In Words\nScreen Saver\u003c/a\u003e, I thought I would share some of the experiences. I am using OS\nX Lion (10.7) and Xcode 4.3.2\u003c/p\u003e\n\u003cp\u003eThe first thing is to create a new project in Xcode using the Screen Saver\ntemplate:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/images/ScreenSaverTemplate.png\"\u003e\u003c!-- raw HTML omitted --\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eXcode sets up a project for you with everything you need for a screen saver\nmodule. Start editing the ScreenSaverView.m file. The most important method here\nis animateOneFrame.\u003c/p\u003e\n\u003cp\u003eThis is called every time the animation time interval elapses. This interval is\nset in \u003ccode\u003einitWithFrame:isPreview:\u003c/code\u003e. I have seen some debate online as to whether\nthe drawing should be done in the \u003ccode\u003eanimateOneFrame\u003c/code\u003e method or in the \u003ccode\u003edrawRect\u003c/code\u003e\nmethod. I chose to use \u003ccode\u003eanimateOneFrame\u003c/code\u003e because they are both called when the\nscreen saver starts which can lead to an unpleasant flicker.\u003c/p\u003e\n\u003cp\u003eNow it is up to you to decide what to show in the \u003ccode\u003eanimateOneFrame\u003c/code\u003e method. For\nTime In Words, I assembled the data as a string, created a dictionary of text\nattributes, calculated the location where I wanted to show the text and used\n\u003ccode\u003edrawAtPoint:withAttributes:\u003c/code\u003e to display it.\u003c/p\u003e\n\u003cp\u003eThere are a couple of important tricks when working out locations: firstly, you\nwill need to know the bounds of the screen saver area. This will vary depending\non the monitor, screen size or whether the screen saver is appearing in the\npreview window in System Preferences. The screen saver view has a method that\ndoes this work for you.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-objectivec\" data-lang=\"objectivec\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNSRect viewBounds \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [self bounds];\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe next trick is that you are most likely going to need some random numbers.\nAgain, the screen saver framework supplies these to you in several forms. I used\n\u003ccode\u003eSSRandomFloatBetween\u003c/code\u003e but there are others. Check the documentation.\u003c/p\u003e\n\u003cp\u003eI ran into an oddity in System Preferences that made testing a bit tedious. I\nbuilt the screen saver module and double-clicked on it to install into System\nPreferences. That worked fine, but when I made some changes and repeated the\nprocess, the original screen saver was still in place. I found that I had to\nquit System Preferences each time. Deleting the old version of the screen saver\nwas not necessary, but quitting the System Prefs app was essential.\u003c/p\u003e\n\u003cp\u003eSo that gives the basic screen saver module but with no options. Adding options\nis not difficult, but as always, there are a few things that are not obvious on\nfirst glance.\u003c/p\u003e\n\u003cp\u003eAdd a xib file to your project: I used a window template. Then change the\nwindow\u0026rsquo;s class to NSPanel and configure it as shown:\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003eSet the File\u0026rsquo;s Owner class to the class of your Screen Saver view. In your\nScreenSaverView.h file, declare a property for this new panel. e.g.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-objectivec\" data-lang=\"objectivec\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#66d9ef\"\u003e@property\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eIBOutlet\u003c/span\u003e NSPanel \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eoptionsPanel;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e@synthesize this in the ScreenSaverView.m file. In the xib file, connect the\npanel to this outlet.\u003c/p\u003e\n\u003cp\u003eNow go back to ScreenSaverView.m and add the following code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-objectivec\" data-lang=\"objectivec\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eBOOL\u003c/span\u003e)hasConfigureSheet { \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e YES; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e (NSWindow \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)configureSheet { \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003eself.optionsPanel) { [NSBundle\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  loadNibNamed:\u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;Options\u0026#34;\u003c/span\u003e owner:self]; } \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e self.optionsPanel; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eIBAction\u003c/span\u003e)closeConfig:(\u003cspan style=\"color:#66d9ef\"\u003eid\u003c/span\u003e)sender { [[NSApplication sharedApplication]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  endSheet:self.optionsPanel]; }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003ehasConfigureSheet\u003c/code\u003e and \u003ccode\u003econfigureSheet\u003c/code\u003e stubs are already there for you,\nbut you can replace them with these versions.\u003c/p\u003e\n\u003cp\u003eGo back to the xib file and drag in a button to close the options panel. Connect\nit to the \u003ccode\u003ecloseConfig:\u003c/code\u003e action.\u003c/p\u003e\n\u003cp\u003eSave everything, build, install in System Preferences and test. Firstly, the\n\u0026ldquo;Options\u0026hellip;\u0026rdquo; button should be enabled. Clicking it should open your panel as a\nsheet, and when you click your button, the panel should close.\u003c/p\u003e\n\u003cp\u003eIf that doesn\u0026rsquo;t work, check the class assignments, the connections, the settings\nfor the NSPanel and the code in that order.\u003c/p\u003e\n\u003cp\u003eOnce the panel is opening and closing as required, you need to add the ability\nto store and retrieve the settings. Instead of using NSUserDefaults as you would\nin a standard Mac app, there is a special class call ScreenSaverDefaults for\nscreen savers. It needs a unique module name, so I used the bundle identifier.\nFor my Time In Words screen saver, this is\n\u0026ldquo;net.troz.Time-In-Words-Screen-Saver\u0026rdquo;. I defined a constant to hold this as a\nstring, so I could use it anywhere I needed.\u003c/p\u003e\n\u003cp\u003eIn the \u003ccode\u003einitWithFrame:isPreview:\u003c/code\u003e method, I got a reference to the screen saver\ndefaults for my screen saver and registered the defaults. I am never very sure\nabout the need to do this, but it is supposed to be a good practice.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-objectivec\" data-lang=\"objectivec\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eScreenSaverDefaults \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003edefaults \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [ScreenSaverDefaults defaultsForModuleWithName:kModuleName];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[defaults registerDefaults:[NSDictionary dictionaryWithObjectsAndKeys:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;NO\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;UseAlternativeZone\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;AlternativeZoneName\u0026#34;\u003c/span\u003e, nil]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eUsing them is exactly the same as using NSUserDefaults:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-objectivec\" data-lang=\"objectivec\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Reading\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003eScreenSaverDefaults \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003edefaults \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [ScreenSaverDefaults defaultsForModuleWithName:kModuleName];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eBOOL\u003c/span\u003e useAlternativeZone \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [defaults boolForKey:\u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;UseAlternativeZone\u0026#34;\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNSString \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ealternativeZoneName \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [defaults objectForKey:\u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;AlternativeZoneName\u0026#34;\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u0026hellip;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-objectivec\" data-lang=\"objectivec\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Writing\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003eScreenSaverDefaults \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003edefaults \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [ScreenSaverDefaults defaultsForModuleWithName:kModuleName]; [defaults setBool:useAlternative forKey:\u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;UseAlternativeZone\u0026#34;\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[defaults setObject:alternativeZoneName forKey:\u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;AlternativeZoneName\u0026#34;\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[defaults synchronize];\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOne last thing: if you want to distribute the screen saver, you will want to\ncreate an archive, possibly code-signing with your Apple developer ID to allow\nfor Mountain Lion\u0026rsquo;s up-coming Gatekeeper security system. I code-signed the\nproject and built an archive, but when I clicked \u0026ldquo;Distribute\u0026rdquo; in the Organizer,\nthe only appropriate options was \u0026ldquo;Save Built Products\u0026rdquo;. I selected this option\nand ended up with a series of folders inside folders, with the screen saver\nmodule in about the fifth folder down. I don\u0026rsquo;t know why the module gets\ndistributed like this, but I pulled it out of the folders and it worked fine.\u003c/p\u003e\n\u003cp\u003eAnd that\u0026rsquo;s about it. A lot of this stuff is online or in Apple\u0026rsquo;s documentation,\nbut there are enough oddities to make it worthwhile gathering together all that\nI learnt while making this screen saver.\u003c/p\u003e\n\u003cp\u003eClick this icon to download the screen saver:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/screensaver/TimeInWords-ScreenSaver.zip\"\u003e\u003c!-- raw HTML omitted --\u003e\u003c/a\u003e\u003c/p\u003e\n"
    },
    {
        "title" : "Support for older operating systems",
        "date_published" : "2012-05-02T00:00:00Z",
        "date_modified" : "2012-05-02T00:00:00Z",
        "id" : "https://troz.net/post/2012/support-for-older-operating-systems/",
        "url" : "https://troz.net/post/2012/support-for-older-operating-systems/",
        "content_html" : "\u003cp\u003eWorking out what operating systems to support in your software is always a\ndifficult decision. I only program for Mac \u0026amp; iOS systems for starters. This is\nbecause they are the systems I use and understand. I am not interested in\nexpending the time \u0026amp; money needed to program and test my software for other\nsystems.\u003c/p\u003e\n\u003cp\u003eWithin the Mac \u0026amp; iOS ecosystems, there is still the decision of which versions\nto support. Partially, this is based on the usage statistics of each version. I\nfound a site that segments the current Mac market:\n\u003c!-- raw HTML omitted --\u003eDistribution\nof Mac OS X versions\u003c!-- raw HTML omitted --\u003e. This tells me that OS 10.6 \u0026amp; OS 10.7 between them have\n83% which makes 10.6 a good cut-off point.\u003c/p\u003e\n\u003cp\u003eDistribution of iOS versions is harder to discover, but I found a post that did\na good job of analysing the statistics that are available:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://pxldot.com/post/18754186750/ios-ebb-and-flow\"\u003e pxldot (iOS Ebb and Flow)\u003c/a\u003e. According to this post, by March 2012, iOS had\nabout 75% with the remainder being almost exclusively iOS 4.\u003c/p\u003e\n\u003cp\u003eSo based on statistics alone, it makes sense to support Mac OS X 10.6 or later\nand iOS 4 and later. However this doesn\u0026rsquo;t cover all the relevant issues. Another\nimportant factor is new techniques and APIs introduced in Apple\u0026rsquo;s developer\ntools.\u003c/p\u003e\n\u003cp\u003eIn iOS 4, Apple gave us ARC - Automatic Reference Counting - which basically\nremoves the tedious job of memory management. This was especially painful in iOS\napps where there is no garbage collection. \u003ca href=\"http://longweekendmobile.com/2011/09/07/objc-automatic-reference-counting-in-xcode-explained/\"\u003eThe Long Weekend Website\u003c/a\u003e has an\nexcellent summary of ARC - what it is and how to use it. Since this only\nexcludes iOS 3 or earlier, there is no issue using this for all iOS projects.\u003c/p\u003e\n\u003cp\u003eBut now Apple has extended ARC to Mac apps as well, but only for apps built to\nrun under 10.7 or later. Even though Mac apps could use garbage collection to\nremove some of the burden of memory management, this had its own inefficiencies\nand overheads. So in my case, I have decided that all future apps will require\n10.7 to take advantage of ARC. Existing apps will stay as is - requiring 10.6 or\nlater. With 10.8 not that far away, the usage statistics should follow this\ntrend.\u003c/p\u003e\n\u003cp\u003eBack to iOS, there is another new feature of Xcode that is really too attractive\nto ignore and that is story-boarding. This is a graphical way of laying out the\nnavigation logic for your app and providing segues between different views. Ray\nWenderlich has a good \u003ca href=\"http://www.raywenderlich.com/5138/beginning-storyboards-in-ios-5-part-1\"\u003eintroduction to storyboards\u003c/a\u003e. So this means that my\nfuture iOS apps will all require 10.5 or later.\u003c/p\u003e\n\u003cp\u003eOne final factor is testing. You really need to have a device running each\nversion of any supported operating system. I would rather concentrate on getting\nthe best result for users of the latest versions that spend my time tweaking for\nolder systems. With iOS, Apple makes it amazingly easy to update to the latest\nversion. With Macs it costs money which is always a barrier, but technically,\nthe App Store is making updates easier to apply.\u003c/p\u003e\n"
    },
    {
        "title" : "Time In Words \u0026 the new iPad",
        "date_published" : "2012-04-10T00:00:00Z",
        "date_modified" : "2012-04-10T00:00:00Z",
        "id" : "https://troz.net/post/2012/time-in-words-the-new-ipad/",
        "url" : "https://troz.net/post/2012/time-in-words-the-new-ipad/",
        "content_html" : "\u003cp\u003eThe new iPad has a Retina display, meaning that the pixel density is much\ngreater. For some apps, this is a problem as their graphics are now scaled and\nlook pixellated. However Time In Words is very simple. It uses standard fonts\nand interface widgets with no images or external graphics apart from the icon.\nThe icon may not look perfect on a new iPad, but the display itself should look\nreally great.\u003c/p\u003e\n\u003cp\u003eI had a report from one user that Time In Words will not work at all on his new\niPad. Unfortunately, the email address supplied did not work, so I was unable to\ncontact this person directly. If you are reading this, please contact me again.\u003c/p\u003e\n\u003cp\u003eThe person having the problem did not specify exactly what the problem was, so I\ndon\u0026rsquo;t know if the app will not start, or if it is not displaying correctly, or\nif it is showing the wrong times or what.\u003c/p\u003e\n\u003cp\u003eHowever I suggested two things to try, and I will list them now in case anyone\nelse is having issues:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eTry deleting the app from your iPad and then re-installing from the App\nStore.\u003c/li\u003e\n\u003cli\u003eDo a complete reboot of your iPad in case it is running low on memory.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eHopefully one or both of these ideas will solve any problems. They are both good\ngeneral tricks to try with any problem app.\u003c/p\u003e\n"
    },
    {
        "title" : "iPhone 4 Home Button",
        "date_published" : "2012-03-28T00:00:00Z",
        "date_modified" : "2012-03-28T00:00:00Z",
        "id" : "https://troz.net/post/2012/iphone-4-home-button/",
        "url" : "https://troz.net/post/2012/iphone-4-home-button/",
        "content_html" : "\u003cp\u003eMy iPhone 4 is now 18 months old, and it\u0026rsquo;s Home button is starting to feel the\nstrain. These buttons have been used much more than originally intended, with\nthe new multitasking required double-presses, not to mention access to the\ncamera etc. So basically , it is wearing out.\u003c/p\u003e\n\u003cp\u003eThe phone is out of warranty and there is no way I am going to pay for an\nexpensive repair when my current phone contract will expire later this year, and\nhopefully the iPhone 5 will be ready for me then. And a cheap repair or DIY is\ntoo risky.\u003c/p\u003e\n\u003cp\u003eI saw a post comparing the physical structure of the home buttons on iPhone 4 \u0026amp;\n4S. Unfortunately I cannot find the link now, but it showed that the actual\nhardware has been made a lot more robust since the iPhone 4 was released, so\nthis should only be a short term issue.\u003c/p\u003e\n\u003cp\u003eI read a article suggesting the use of WD-40 for a mis-behaving Home button.\nThis is a TERRIBLE idea! Do not spray a penetrating oil into your expensive\nelectronic device. For starters, it don\u0026rsquo;t believe it is a friction problem - I\nthink the mechanism is just wearing out.\u003c/p\u003e\n\u003cp\u003eSome people recommend recalibrating the Home button as shown in this post from\n\u003ca href=\"http://www.idownloadblog.com/2011/12/22/recalibrate-home-button-responsive/\"\u003eidownloadblog.com\u003c/a\u003e. I am a bit sceptical about this. I tried it, but I can\u0026rsquo;t\nsee that it did anything. Maybe if your problem is software rather than\nhardware, then it will do some good. Anyway, unlike the WD-40 trick, it can\u0026rsquo;t do\nany harm.\u003c/p\u003e\n\u003cp\u003eFinally, on to the workaround. If your iPhone button is really unreliable, but\nyou are not ready to repair or upgrade, then you can use the Accessibility tools\nto get a software Home button on the screen.\u003c/p\u003e\n\u003cp\u003eGo to Settings - General - Accessibility. Scroll down to \u0026ldquo;Physical \u0026amp; Motor\u0026rdquo;.\nTurn on AssistiveTouch.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/images/HomeButton1.png\"\u003e\u003c!-- raw HTML omitted --\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eWhen you back out of Settings, you will see a white blob somewhere on your\nscreen. This can be dragged to any location around the edge of the screen, so\nyou can always move it out of the way in any app.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/images/HomeButton2.png\"\u003e\u003c!-- raw HTML omitted --\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eTapping on the white blob gives you an overlay view with four options, one of\nwhich is Home. Tapping this is exactly the same as pressing the physical Home\nbutton. So with this and the power button, you can do everything, even if the\nHome button stops working completely.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/images/HomeButton3.png\"\u003e\u003c!-- raw HTML omitted --\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThanks to Tom at our local Apple Store (Robina, Queensland, Australia) for this\ntip.\u003c/p\u003e\n"
    },
    {
        "title" : "Time In Words for Mac now available",
        "date_published" : "2012-03-20T00:00:00Z",
        "date_modified" : "2012-03-20T00:00:00Z",
        "id" : "https://troz.net/post/2012/time-in-words-for-mac-now-available/",
        "url" : "https://troz.net/post/2012/time-in-words-for-mac-now-available/",
        "content_html" : "\u003cp\u003eTime In Words for Mac has just been approved and is now available for free from\nthe\n\u003c!-- raw HTML omitted --\u003eMac\nApp Store\u003c!-- raw HTML omitted --\u003e.\u003c/p\u003e\n\u003cp\u003eFor more details, check out the \u003ca href=\"/time-in-words-for-mac/\"\u003eTime In Words for Mac\u003c/a\u003e web page.\u003c/p\u003e\n"
    },
    {
        "title" : "Interface options for selecting time zones",
        "date_published" : "2012-02-25T00:00:00Z",
        "date_modified" : "2012-02-25T00:00:00Z",
        "id" : "https://troz.net/post/2012/interface-options-for-selecting-time-zones/",
        "url" : "https://troz.net/post/2012/interface-options-for-selecting-time-zones/",
        "content_html" : "\u003cp\u003eAs part of the design for [Time In Words for Mac][1], I had to work out the\ninterface for selecting time zones. With [Time In Word for iOS][2], I used\npicker wheels which are excellent for selecting hierarchical data. On the Mac,\nthere is no such thing as the iOS picker wheel and so I had to consider what to\nuse instead.\u003c/p\u003e\n\u003cp\u003eWhen you ask the system (Mac or iOS) for the available time zones, you get a\nlist of names like this:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAfrica/Abidjan\u003cbr\u003e\nAfrica/Accra\u003cbr\u003e\n\u0026hellip;\u003cbr\u003e\nAmerica/Cayman\u003cbr\u003e\nAmerica/Chicago\u003cbr\u003e\n\u0026hellip;\u003cbr\u003e\nEurope/Riga\u003cbr\u003e\nEurope/Rome\u003cbr\u003e\netc.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThis seems obviously designed for a hierarchical display with the major regions\nas a first selection, filtering down to the cities in that region, making\nselection a two-step process. With the picker wheel in iOS, that is what I did.\nThe first wheel selects the region which then populates the second wheel with\nthe relevant city names. It makes it quick and easy to select a zone.\u003c/p\u003e\n\u003cp\u003eI always prefer to use standard user interface objects because people are\nfamiliar with them, they automatically update with the system, and there is much\nless chance of the App Store rejecting the app. So I scrolled through the\navailable Mac options and came to NSBrowser. This is basically what Finder uses\nwhen in column mode.\u003c/p\u003e\n\u003cp\u003eI created an NSBrowser object, worked out a way to populate it and tested. It\nwas incredibly slow! The list of regions appeared when the window opened, and\nthat was no problem. Then I clicked a region and the first set of city names\nappeared instantly. But subsequent selections took about 3 seconds to appear.\u003c/p\u003e\n\u003cp\u003eI added some timing tests and my data gathering was taking about 20\nmilliseconds. The log thought the browser had updated within about 100\nmilliseconds, so I guess the rest of the time was some redraw issue.\u003c/p\u003e\n\u003cp\u003eApple provides a large number of sample projects so I downloaded one that used\nNSBrowser. It seemed fast and responsive, so I duplicated it\u0026rsquo;s different method\nof assembling the data and tried again. No luck - it was as slow as before.\u003c/p\u003e\n\u003cp\u003eI am sure that if I kept at it, I would eventually work out what was causing the\nbottleneck and make NSBrowser work - after all, Finder is responsive enough,\neven if not great. But in the end, I decided that the advantages to using this\nform of interface didn\u0026rsquo;t justify the time spent, so I went with a simple table\nand a search field.\u003c/p\u003e\n\u003cp\u003eIt is fast to populate, responsive to searches and didn\u0026rsquo;t take long to set up.\nSo I am happy, although still perplexed about NSBrowser. It is on my to-do list\nof things I want to work out one day.\u003c/p\u003e\n\u003cp\u003e[1]: /time-in-words-for-mac/ [2]: /time-in-words/\u003c/p\u003e\n"
    },
    {
        "title" : "Scroll bars in Mac OX 10.6 and 10.7",
        "date_published" : "2012-02-25T00:00:00Z",
        "date_modified" : "2012-02-25T00:00:00Z",
        "id" : "https://troz.net/post/2012/scroll-bars-in-mac-ox-10-6-and-10-7/",
        "url" : "https://troz.net/post/2012/scroll-bars-in-mac-ox-10-6-and-10-7/",
        "content_html" : "\u003cp\u003eWith the introduction of OS X 10.7 (Lion), Apple removed the obvious scroll bars\nfrom windows and replaced them with a much more subtle scroll indicator, that\nonly appears when you are actually scrolling. This was designed to match the iOS\nscrolling, as was the swap of scroll direction which makes much more sense if\nyou use a trackpad.\u003c/p\u003e\n\u003cp\u003eWith the upcoming \u003ca href=\"/time-in-words-for-mac/\"\u003eTime In Words for Mac\u003c/a\u003e, I have a Preferences window to\nallow selection of time zones to display in the menu. The app will be compatible\nwith 10.6 or later. Under 10.6, the scrollbars are always visible and this is\nwhat the Preferences display looks like:\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003eThis may change, but the basic layout is there. As you can see, I have a\n3-column table listing all the available time zones, with the final column right\njustified.\u003c/p\u003e\n\u003cp\u003eUnder 10.7, this doesn\u0026rsquo;t quite work:\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003eI had to grab this screen shot quickly after swiping the trackpad, but you can\nsee the problem. When not scrolling, the scroll indicator is hidden and the\nright column is fully visible, but when dragging the scroll indicator appears on\ntop of the right-justified entries in that column.\u003c/p\u003e\n\u003cp\u003eSo now I am not quite sure what to do. Here are the options I have considered:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLeft or centre-justify the text in the final column.\u003c/li\u003e\n\u003cli\u003eAdd some spacing at the end of each line so that the scroll indicator appears\nin blank space.\u003c/li\u003e\n\u003cli\u003ePut up with it.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI will have to experiment with various options and see what I can do.\u003c/p\u003e\n"
    },
    {
        "title" : "Time In Words available in the App Store",
        "date_published" : "2012-02-09T00:00:00Z",
        "date_modified" : "2012-02-09T00:00:00Z",
        "id" : "https://troz.net/post/2012/time-in-words-available-in-the-app-store/",
        "url" : "https://troz.net/post/2012/time-in-words-available-in-the-app-store/",
        "content_html" : "\u003cp\u003eTime In Words is now available at the App Store.\u003c/p\u003e\n\u003cp\u003eTime In Words is a clock and calendar app that takes you out of the digital era\nand back to when saying “quarter to seven” or “five past two” was accurate\nenough.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://itunes.apple.com/app/time-in-words/id498403851\"\u003e\u003c!-- raw HTML omitted --\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eCheck out the \u003ca href=\"/time-in-words/\"\u003eTime In Words web page\u003c/a\u003e for more info and screen shots.\u003c/p\u003e\n"
    }
    ]
}
