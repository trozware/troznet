{
    "version" : "https://jsonfeed.org/version/1",
    "title" : "TrozWare",
    "description": "Recent content on TrozWare",
    "home_page_url" : "https://troz.net/",
    "icon": "/icons/apple-touch-icon-180x180.png",
    "feed_url" : "https://troz.net/feed.json",
    "author" : {
        "name" : "Sarah Reichelt"
    },
    "items" : [
    {
        "title" : "Icon Builder 5",
        "date_published" : "2018-02-18T10:19:18+10:00",
        "date_modified" : "2018-02-18T10:19:18+10:00",
        "id" : "https://troz.net/post/2018/icon-builder-5/",
        "url" : "https://troz.net/post/2018/icon-builder-5/",
        "content_html" : "\u003cp\u003e\u003ca href=\"/icon-builder/\"\u003eIcon Builder 5.0\u003c/a\u003e has been submitted to the \u003ca href=\"http://itunes.apple.com/app/icon-builder/id552293482\"\u003eMac App Store\u003c/a\u003e for review and should be available within a day or two. This is a complete re-write for better compatibility with Apple\u0026rsquo;s latest icon requirements. Read on to see what I have fixed and how\u0026hellip;\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"problems\"\u003eProblems\u003c/h2\u003e\n\n\u003cp\u003eWhen I came to create a new iOS app recently, I found out that Icon Builder had fallen behind Apple\u0026rsquo;s requirements in three ways:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eThe 1024 x 1024 marketing icon is now supposed to be inside the app\u0026rsquo;s icon set.\u003c/li\u003e\n\u003cli\u003eIcon files must have their color profile set to sRGB (P3 is also valid for iOS apps).\u003c/li\u003e\n\u003cli\u003eiOS icon files must have no transparent pixels and the alpha channel must be removed from the files.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWhen I set to work fixing these problems I soon ran into issues with the existing version of Icon Builder which was created 6 years ago.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIt was written in Objective-C which I am increasingly finding difficult and un-safe to write.\u003c/li\u003e\n\u003cli\u003eThe app was written when I was very much a beginner in Mac apps and this is obvious from the code\u0026hellip;\u003c/li\u003e\n\u003cli\u003eThere was a lot of legacy code left over from previous changes and extensions.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSo I decided that the most interesting thing to do would be to start almost from scratch and re-write the app in Swift using better techniques.\u003c/p\u003e\n\n\u003ch2 id=\"the-re-write\"\u003eThe Re-write\u003c/h2\u003e\n\n\u003cp\u003eNow instead of the Massive View Controller, I have a larger set of small files, each with their own responsibility. Enums and structs dictate the various requirements for the different devices or app types. Other structs deal with creating the images, the folder management and writing out the files. An NSImage extension handles the resizing and reformatting of the images. This is now an app that I would not be ashamed to show anyone, except perhaps for the need to add more unit tests.\u003c/p\u003e\n\n\u003ch2 id=\"adding-a-color-profile\"\u003eAdding a color profile\u003c/h2\u003e\n\n\u003cp\u003eBut then we get to the new features needed. Adding the 1024x1024 icon to the app icon set was easy, especially after the re-factoring. But what about the color profile?\u003c/p\u003e\n\n\u003cp\u003eThis was not as easy as I expected - there is no built in command to apply a profile but here is the solution that I finally found:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003eextension NSImage {\n\n  func convertImageTo_sRGB() throws -\u0026gt; Data {\n      guard let colorSpace = CGColorSpace(name: CGColorSpace.sRGB),\n          let cgi = self.cgImage(forProposedRect: nil,\n                                 context: nil,\n                                 hints: nil) else {\n                                  throw ImageError.cantMakeCgImage\n      }\n\n      let ci = CIImage(cgImage: cgi)\n\n      guard let pngData = CIContext().pngRepresentation(of: ci,\n                                                        format: kCIFormatRGBA8,\n                                                        colorSpace: colorSpace) else {\n          throw ImageError.cantConvertToPng\n      }\n      return pngData\n  }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cul\u003e\n\u003cli\u003eThis takes the NSImage and converts it to a CGImage, first checking that the appropriate color space exists.\u003c/li\u003e\n\u003cli\u003eThen it uses the Core Graphics CGImage to create a Core Image CIImage.\u003c/li\u003e\n\u003cli\u003eThere is a new API in macOS 10.13 to extract the png data from a CIImage while assigning a color profile.\u003c/li\u003e\n\u003cli\u003eThis Data can then be written directly to a file and there you have a PNG with an attached color profile.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"transparency\"\u003eTransparency\u003c/h2\u003e\n\n\u003cp\u003eNow problems 1 \u0026amp; 2 have been solved. Problem 3 was the most difficult. It turned out to be a two-part problem because an image file can have no transparent pixels but still have an alpha channel in the file data.\u003c/p\u003e\n\n\u003cp\u003eAt first, I thought maybe I could just circumvent the whole problem by converting the images to JPEGs which have no transparency or alpha channel. Using the code above, I just changed it to getting the \u003ccode\u003ejpegRepresentation\u003c/code\u003e instead and saving with a .jpg file extension.\u003c/p\u003e\n\n\u003cp\u003eWhile this solved the alpha channel problem, the transparent parts of the icon just went black which was a not a good look.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/Transparent-Jpeg.png\" alt=\"Transparent image converted to JPEG\" /\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eFor anyone horrified at my use of force-unwrapping, I never do this in a production app but in a playground, it makes the code a shorter and it doesn\u0026rsquo;t really matter if I get a crash there.\u003c/em\u003e\u003c/p\u003e\n\n\u003ch3 id=\"converting-transparent-pixels-to-white\"\u003eConverting transparent pixels to white\u003c/h3\u003e\n\n\u003cp\u003eSo the first step must be to set the transparent parts of the image to another color. Searching for solutions online, most of the ones I came up with were very slow (processing each pixel) or so complicated that I didn\u0026rsquo;t understand them, and I hate just copy-pasting code that I don\u0026rsquo;t understand at all.\u003c/p\u003e\n\n\u003cp\u003eBut eventually I found something that I morphed into this:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003eextension NSImage {\n\n    func makeAlphaWhite() -\u0026gt; NSImage {\n        guard let imageData = self.tiffRepresentation,\n            let imageRep = NSBitmapImageRep(data: imageData),\n            let jpegData = imageRep.representation(using: .jpeg, properties: [\n                NSBitmapImageRep.PropertyKey.compressionFactor: NSNumber(value: 1.0)\n                ]),\n            let jpegImage = NSImage(data: jpegData) else {\n                return image\n        }\n        return jpegImage\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIt used basically the same trick of converting the image into a JPEG but doing it this way via \u003ccode\u003eNSBitmapImageRep\u003c/code\u003e turned the transparent pixels white instead of black. And as you can see, this gave a much better looking image:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/MakeAlphaWhite.png\" alt=\"Transparent portions converted to white\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eNow I was able to continue with my plans to have JPEGs rule the world! This worked really well in my early tests but then I came to try a Stickers app and the icons didn’t work. I couldn\u0026rsquo;t even drag them in manually! Back to the Apple docs and I see that icons must be PNGs.\u003c/p\u003e\n\n\u003cp\u003eWhen I changed the transparent pixels to white, added the color space and then saved the PNG data, I got an image that looked correct but the file still contained an alpha channel. So I had to come up with a method that re-wrote the PNG data in such a way that it never contained any alpha data at all.\u003c/p\u003e\n\n\u003ch3 id=\"removing-the-alpha-channel\"\u003eRemoving the alpha channel\u003c/h3\u003e\n\n\u003cp\u003eGraphics experts are probably groaning aloud by now, but I did eventually arrive at a solution, however hacky:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003eextension NSImage {\n\n    func convertImageTo_sRGB_noAlpha() throws -\u0026gt; Data {\n        guard let colorSpace = CGColorSpace(name: CGColorSpace.sRGB),\n            let cgi = self.cgImage(forProposedRect: nil,\n                                   context: nil,\n                                   hints: nil) else {\n                                    throw ImageError.cantMakeCgImage\n        }\n\n        let ci = CIImage(cgImage: cgi)\n        guard let jpgData = CIContext().jpegRepresentation(of: ci,\n                                                           colorSpace: colorSpace) else {\n            throw ImageError.cantConvertToJpg\n        }\n        guard let jpegImage = NSImage(data: jpgData) else {\n            throw ImageError.cantConvertToJpgImage\n        }\n        let pngData = try jpegImage.convertImageTo_sRGB()\n        return pngData\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cul\u003e\n\u003cli\u003eTake the image \u003cstrong\u003eafter\u003c/strong\u003e changing the transparent pixels to white.\u003c/li\u003e\n\u003cli\u003eConvert it to JPEG data with the required color space.\u003c/li\u003e\n\u003cli\u003eConvert the JPEG data back to an image - this will contain \u003cstrong\u003eNO\u003c/strong\u003e alpha data.\u003c/li\u003e\n\u003cli\u003eUse the original routine to convert this JPEG into PNG data with the correct color space.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eRunning this in the playground looks like this:\n\u003cimg src=\"/images/TransparentPng.png\" alt=\"Creating non-transparent PNG in playground\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAnd as you can see from the file info, it results in a file with the correctly assigned color profile and no alpha channel:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/FileInfo.png\" alt=\"Final result file info\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThe double shuffle sounds time-consuming and in-efficient but it really doesn\u0026rsquo;t take long. In my tests, by far the longest part of creating an icon set is opening the file dialog.\u003c/p\u003e\n\n\u003ch2 id=\"future-plans\"\u003eFuture plans\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdd more unit tests.\u003c/li\u003e\n\u003cli\u003eWork out how to replace the transparent pixels with a selected color.\u003c/li\u003e\n\u003cli\u003eOffer better cropping and image positioning options.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e\n\n\u003cp\u003eFor resizing and cropping images, I use \u003ca href=\"https://mattgemmell.com/imagecrop-source-code/\"\u003eMatt Gemmell\u0026rsquo;s NSImage+MGCropExtensions\u003c/a\u003e and for further reading, I recommend Apple\u0026rsquo;s Human Interface Guidelines concerning app icons for \u003ca href=\"https://developer.apple.com/ios/human-interface-guidelines/icons-and-images/app-icon/\"\u003eiOS\u003c/a\u003e and \u003ca href=\"https://developer.apple.com/macos/human-interface-guidelines/icons-and-images/app-icon/\"\u003emacOS\u003c/a\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eNote: here is Australia we use the spelling \u003cstrong\u003ecolour\u003c/strong\u003e but for consistency with the code samples, I have used \u003cstrong\u003ecolor\u003c/strong\u003e throughout the text.\u003c/p\u003e\n\u003c/blockquote\u003e"
    },
    {
        "title" : "NCSS 2018",
        "date_published" : "2018-01-05T11:33:35+10:00",
        "date_modified" : "2018-01-05T11:33:35+10:00",
        "id" : "https://troz.net/ncss2018/",
        "url" : "https://troz.net/ncss2018/",
        "content_html" : "\u003cp\u003eI gave a Masterclass on Swift at the NCSS Summer School 2018 in the University of Sydney on 9th January 2018. This post contains useful links for use in relation to the material covered during my class.\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"online-sandboxes\"\u003eOnline Sandboxes\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://eval.weheartswift.com/eval/playground/swift-sandbox\"\u003eWe ❤️ Swift Sandbox\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://swiftlang.ng.bluemix.net/#/repl\"\u003eIBM Swift Sandbox\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"resources\"\u003eResources\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://gist.github.com/trozware/bc582b9a49feb7bbd3adce8ea049c9d3\"\u003eGist of Code Samples\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://github.com/trozware/ncss2018/blob/master/Presentation.pdf\"\u003eSlides from Presentation\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"contact-details\"\u003eContact Details\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eEmail: \u003ca href=\"mailto:sarah@troz.net?subject=NCSS%202018\"\u003esarah@troz.net\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eTwitter: \u003ca href=\"https://twitter.com/trozware\"\u003e@trozware\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"useful-links\"\u003eUseful Links\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://itunes.apple.com/au/book/swift-programming-language/id881256329?mt=11\"\u003eThe Swift Programming Language\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://swift.org\"\u003eSwift.org\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.raywenderlich.com/132258/top-5-ios-swift-newsletters\"\u003eNewsletters\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.raywenderlich.com/category/swift\"\u003eTutorials\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e"
    },
    {
        "title" : "Apps",
        "date_published" : "2017-12-22T17:05:58+10:00",
        "date_modified" : "2017-12-22T17:05:58+10:00",
        "id" : "https://troz.net/apps/",
        "url" : "https://troz.net/apps/",
        "content_html" : ""
    },
    {
        "title" : "Mark Time",
        "date_published" : "2017-12-12T09:14:07+10:00",
        "date_modified" : "2017-12-12T09:14:07+10:00",
        "id" : "https://troz.net/post/2017/marktime/",
        "url" : "https://troz.net/post/2017/marktime/",
        "content_html" : "\u003cstyle\u003eimg {width: 300px; } \u003c/style\u003e\n\n\u003cp\u003e\u003ca href=\"https://itunes.apple.com/us/app/mark-time/id1305580742?mt=8\"\u003eMark Time\u003c/a\u003e is an application for Celestial Navigation that solves the\nproblem of how to take an accurate time reading to go with each sextant\nsighting. Here is how it was developed\u0026hellip;\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eA day in the life of a software developer - \u0026ldquo;it would be great if there was an\napp that did\u0026hellip;\u0026rdquo;\u003c/p\u003e\n\n\u003cp\u003eOne of the family is learning celestial navigation and was struggling with the\nproblem that you either need a partner or more than 2 hands. The key factor is\nthat you need to record the exact time at the moment when you take your\nsighting. And this time has to be in UTC to make your subsequent calculations\nwork.\u003c/p\u003e\n\n\u003cp\u003eSince this is a very simple app, I decided it would be fun to describe the\ndevelopment process from first specifications to release in the App Store.\u003c/p\u003e\n\n\u003ch3 id=\"the-basic-specs\"\u003eThe Basic Specs\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003etap anywhere on the screen to record the time\u003c/li\u003e\n\u003cli\u003econvert the time to Universal Time (UT)\u003c/li\u003e\n\u003cli\u003edisplay that time in a specific format: DD:HH:MM:SS\u003c/li\u003e\n\u003cli\u003estore the last 5 tap times\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eA \u003ccode\u003eUITapGestureRecognizer\u003c/code\u003e over the entire view solved the first requirement.\nThe native \u003ccode\u003eDate\u003c/code\u003e object handles time zone conversions perfectly, and then it\nwas a matter of configuring a \u003ccode\u003eDateFormatter\u003c/code\u003e with a custom format string to\nprovide the required date display.\u003c/p\u003e\n\n\u003cp\u003eThe last 5 times are stored in \u003ccode\u003eUserDefaults\u003c/code\u003e and displayed in reverse order so\nthe most recent is always at the top.\u003c/p\u003e\n\n\u003ch3 id=\"ui-considerations\"\u003eUI considerations\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003ecolour scheme must work in bright sunlight\u003c/li\u003e\n\u003cli\u003etext should use dynamic sizing so it works if people adjust the text size on\ntheir iPhones\u003c/li\u003e\n\u003cli\u003ethe UI elements must be out of the way of the new iPhone X system gestures.\u003c/li\u003e\n\u003cli\u003ewhile it will most likely be used on iPhones, allow for iPads as well\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eI had done extensive tests of colour schemes when developing my golf scoring app\n\u003ca href=\"/19th-hole/\"\u003e19th Hole\u003c/a\u003e, so I already had the answer to the colours question: dark grey\nbackground with white text.\u003c/p\u003e\n\n\u003cp\u003eAllowing for dynamic type should have been easy - choose a font style e.g. body,\nheadline, title 1 and set it to adjust automatically. But with a display that is\nmainly numeric, the display looked terrible because the numbers in the default\nSan Francisco are non-proportional. So I switched to Helvetica Neue and watched\nfor dynamic font size changes manually.\u003c/p\u003e\n\n\u003cp\u003eThe iPhone X should be fine since I used the new safe area layout guides.\u003c/p\u003e\n\n\u003cp\u003eFor iPad, I didn\u0026rsquo;t make a lot of UI changes since I don\u0026rsquo;t expect it to be used\nmuch, but the display is bigger and probably easier to read.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/MarkTime1.png\" alt=\"Mark Time\" /\u003e\u003c/p\u003e\n\n\u003ch3 id=\"refinements\"\u003eRefinements\u003c/h3\u003e\n\n\u003cp\u003eAs always, once the first few iterations have been through the testing process,\nthere were a few things that needed changing and then feature creep set in\u0026hellip;\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003echange the date format to be more readable\u003c/li\u003e\n\u003cli\u003echange the basic tap gesture so that it triggers on tap down, not tap up\u003c/li\u003e\n\u003cli\u003eadd a button to clear all the stored data\u003c/li\u003e\n\u003cli\u003edisplay the current time in UTC and in the same format\u003c/li\u003e\n\u003cli\u003echeat mode - record latitude and longitude for each time so the calculations\ncan be checked\u003c/li\u003e\n\u003cli\u003echange the format for showing the latitude and longitude\u003c/li\u003e\n\u003cli\u003esound \u0026amp; haptics to provide feedback\u003c/li\u003e\n\u003cli\u003esettings\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe date format was DD:HH:MM:SS so for 12th December at 1:01:46 pm, this would\nshow 12:13:01:46 which we decided was a bit confusing. One tended to assume the\nfirst section was actually the hours. Under the new scheme, that same date\ndisplays as 12d 13h 01m 46.654s. The extra precision on the seconds was to show\nthat the time really was changing if you tapped multiple times quickly.\u003c/p\u003e\n\n\u003cp\u003eTo make the time record immediately, I removed the \u003ccode\u003eUITapGestureRecognizer\u003c/code\u003e and\nplaced \u003ccode\u003eUIButtons\u003c/code\u003e covering all the relevant active areas. They respond on Touch\nDown for a much faster reaction.\u003c/p\u003e\n\n\u003cp\u003eUsually, I make a separate View Controller for preferences. This time, because\nthe app needed access to the standard Settings app for Location services, I\ndecided to add the app\u0026rsquo;s preferences to the app\u0026rsquo;s page in the Settings app. This\nworked really well, and made the app itself smaller and simpler.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/MarkTime3.png\" alt=\"Mark Time\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eIn cheat mode, the location is recorded at every tap and then the info button\nbeside each time shows the details. This needed to handle the permissions\nrequired for accessing the user\u0026rsquo;s location. The latitude and longitude are shown\nin decimal format and at first, I also showed them in DMS (degrees, minutes,\nseconds) format. I found out that for navigation calculations, they prefer to\nsee degrees and decimal minutes, no seconds. And rather oddly, this is displayed\nsomething like this: 153° 22\u0026rsquo;.84 E\u003c/p\u003e\n\n\u003cp\u003eSounds and haptics were added, configurable through Settings. The sound was a\nnice loud double-beep designed to be clearly audible to tell you when you had\nrecorded a time.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/MarkTime2.png\" alt=\"Mark Time\" /\u003e\u003c/p\u003e\n\n\u003ch3 id=\"release\"\u003eRelease\u003c/h3\u003e\n\n\u003cp\u003eAfter numerous rounds of TestFlight, I was ready to release. The app was\nsubmitted to iTunes Connect and ready for review on Dec 9, 2017 at 7:36 PM. It\nmoved into review on Dec 11, 2017 at 8:07 AM and was ready for sale on Dec 11,\n2017 at 10:19 AM. So less than 39 hours from start to finish of the review\nprocess for a new app - things have certainly changed!\u003c/p\u003e\n\n\u003cp\u003eThe app is free - you can get it from the \u003ca href=\"https://itunes.apple.com/us/app/mark-time/id1305580742?mt=8\"\u003eiTunes App Store\u003c/a\u003e.\u003c/p\u003e"
    },
    {
        "title" : "Moving to Hugo",
        "date_published" : "2017-11-29T17:42:57+10:00",
        "date_modified" : "2017-11-29T17:42:57+10:00",
        "id" : "https://troz.net/post/2017/moving-to-hugo/",
        "url" : "https://troz.net/post/2017/moving-to-hugo/",
        "content_html" : "\u003cp\u003eYesterday, I came to update my blog: I had a new post in draft form and I wanted\nto update the Swift code to version 4. However installing High Sierra had\nremoved \u003ca href=\"https://jekyllrb.com\" title=\"Jekyll\"\u003eJekyll\u003c/a\u003e which is the site generator that I had been using. I\nre-installed Jekyll but found that it had been updated from version 2 to version\n3.\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"jekyll-problems\"\u003eJekyll Problems\u003c/h2\u003e\n\n\u003cp\u003eThen my problems started: missing dependencies due to the basic Jekyll install\nno longer including certain features, and then syntax errors due to changes in\nthe way things are done, particularly to do with pagination.\u003c/p\u003e\n\n\u003cp\u003eI tried to fix this myself, then thought that maybe the theme I was using had\nalready solved these issues so I tried re-installing that. It wanted to add\nabout 25 more gems and then failed to install - sigh - spend some time rolling\nthat back\u0026hellip;\u003c/p\u003e\n\n\u003cp\u003eAt this point I decided that if Jekyll was going to cause me a lot of trouble,\nit might be worth looking at an alternative.\u003c/p\u003e\n\n\u003cp\u003eMy main criteria were the ability to import my Jekyll site and the ability to\nhost on \u003ca href=\"https://pages.github.com/\" title=\"GitHub Pages\"\u003eGitHub Pages\u003c/a\u003e. After checking out the options, I decided to have a\nlook at \u003ca href=\"https://gohugo.io\" title=\"Hugo\"\u003eHugo\u003c/a\u003e.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"moving-to-hugo\"\u003eMoving to Hugo\u003c/h2\u003e\n\n\u003cp\u003eOne of the most lauded features of Hugo is speed. I had found with Jekyll that\nwhen I saved an edited page, it took about 5 seconds before the edits could be\nreloaded into the browser. Hugo is supposedly fast and does auto reloads.\u003c/p\u003e\n\n\u003cp\u003eFollowing the \u003ca href=\"https://gohugo.io/getting-started/quick-start/\" title=\"Hugo Quick Start\"\u003eQuick Start\u003c/a\u003e guide, I installed Hugo. Importing my Jekyll site\nworked easily and so fast I wasn\u0026rsquo;t sure anything had happened, transferring my\nposts to \u003ccode\u003econtents/posts\u003c/code\u003e and my other files (status pages, images etc.) to\n\u003ccode\u003estatic\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThen the main exercise appeared to be choosing a theme which would provide not\nonly the visuals but the capabilities of the site.\u003c/p\u003e\n\n\u003cp\u003eSo I drew up a list of demands for any theme I chose:\u003c/p\u003e\n\n\u003ch3 id=\"must-have-features\"\u003eMust Have Features\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eResponsive\u003c/li\u003e\n\u003cli\u003eBlog style:\n\n\u003cul\u003e\n\u003cli\u003efront page with recent posts\u003c/li\u003e\n\u003cli\u003etags\u003c/li\u003e\n\u003cli\u003earchive page\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eWritten using Markdown\u003c/li\u003e\n\u003cli\u003eStatic pages for apps listing, about, contact etc.\u003c/li\u003e\n\u003cli\u003eSyntax highlighting\u003c/li\u003e\n\u003cli\u003eSocial links\u003c/li\u003e\n\u003cli\u003eGoogle Analytics\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"would-be-nice-features\"\u003eWould Be Nice Features\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eDisqus commenting\u003c/li\u003e\n\u003cli\u003eTwitter cards\u003c/li\u003e\n\u003cli\u003eJSON Feed\u003c/li\u003e\n\u003cli\u003eSearching within the site\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe Hugo themes page \u003ca href=\"https://themes.gohugo.io\"\u003ehttps://themes.gohugo.io\u003c/a\u003e has themes listed by capabilities,\nbut no way that I could see to combine a selection of capabilities.\u003c/p\u003e\n\n\u003cp\u003eSome of the features like Google Analytics or Disqus comments, I could probably\nadd myself using templates from theme that did include them, if the template I\nchose did not.\u003c/p\u003e\n\n\u003cp\u003eConveniently, nearly all these seem to come with an exampleSite folder that\ncontains the configuration info.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"configuring-a-theme\"\u003eConfiguring a Theme\u003c/h2\u003e\n\n\u003cp\u003eAfter testing out several alternatives, I decided to go with \u003ca href=\"https://github.com/olOwOlo/hugo-theme-even\" title=\"Even\"\u003eEven\u003c/a\u003e - at\nleast to start with. I installed the theme and copied the contents of the\nexample \u003ccode\u003econfig.toml\u003c/code\u003e to my own \u003ccode\u003econfig.toml\u003c/code\u003e file and started configuring.\u003c/p\u003e\n\n\u003cp\u003eI wasn\u0026rsquo;t happy with some of the fonts, but soon worked out how to change the CSS\nin the theme and then re-build it to apply the changes. And I changed the theme\ncolour from the default red to \u0026ldquo;Cobalt Blue\u0026rdquo;.\u003c/p\u003e\n\n\u003cp\u003eMost of the other changes were done using the \u003ccode\u003econfig.toml\u003c/code\u003e file. I was able to\nset up menus, configure the social media links I wanted to show, set date\nformats, set the number of items to show per page and so on.\u003c/p\u003e\n\n\u003cp\u003eI had a couple of more static pages that I wanted to show, so I added their\nMarkdown files to the content folder.\u003c/p\u003e\n\n\u003cp\u003eOne nice feature which I had missed in Jekyll (or at least the way I had it set\nup) was the ability to separate blog posts from more static web pages. Each of\nmy apps has an information/support page that does not accept comments and\ndoesn\u0026rsquo;t need to be listed in the Archives. By moving these Markdown files from\n\u003ccode\u003econtents/posts\u003c/code\u003e to \u003ccode\u003econtents/pages\u003c/code\u003e, I was able to achieve this.\u003c/p\u003e\n\n\u003cp\u003eAdding Google Analytics and Disqus commenting was as easy as entering my IDs in\nthe relevant places in the \u003ccode\u003econfig.toml\u003c/code\u003e file.\u003c/p\u003e\n\n\u003cp\u003eI had to do some editing of my imported posts from Jekyll - mainly getting rid\nof references to \u003ccode\u003e{{ site.url }}\u003c/code\u003e so that images and internal links would work.\nAnd sometimes I just needed to re-save a file to make Hugo re-evaluate it (there\nis probably a command to force a complete re-build if I looked for it.)\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"working-out-the-structure\"\u003eWorking out the Structure\u003c/h2\u003e\n\n\u003cp\u003eOne thing that I was puzzled by was what templates the various pages are\ngenerated from.\u003c/p\u003e\n\n\u003cp\u003eThe main page is easy enough as the theme folder has a layouts folder with an\n\u003ccode\u003eindex.html\u003c/code\u003e file containing the templating. When a post is displayed, that\nlooks like it comes from \u003ccode\u003elayouts/posts/single.html\u003c/code\u003e while\n\u003ccode\u003elayouts/posts/summary.html\u003c/code\u003e contains the templating for each entry in the index\npage.\u003c/p\u003e\n\n\u003cp\u003eBut clicking on the Archives link in the me takes me to \u003ca href=\"https://troz.net/post/\"\u003ehttps://troz.net/post/\u003c/a\u003e\nand there is no \u003ccode\u003epost.html\u003c/code\u003e file in layouts. There is a \u003ccode\u003epost\u003c/code\u003e folder, but it\ncontains the \u003ccode\u003esingle.html\u003c/code\u003e \u0026amp; \u003ccode\u003esummary.html\u003c/code\u003e files described already.\u003c/p\u003e\n\n\u003cp\u003eDelving ever deeper, \u003ccode\u003elayouts/_default/section.html\u003c/code\u003e appears to contains the\nArchives page template. But how does that relate to the \u003ca href=\"https://troz.net/post/\"\u003ehttps://troz.net/post/\u003c/a\u003e\nlink? And the Tags template is in \u003ccode\u003elayouts/_default/terms.html\u003c/code\u003e but appears in\n\u003ca href=\"https://troz.net/tags/\"\u003ehttps://troz.net/tags/\u003c/a\u003e. Checking the Hugo documentation for creating a theme, I\nfind the information I need. Hugo has a selection of file paths that it checks\nfor such templates, and these file paths match some of those. So now I know\nwhere to go to customise further.\u003c/p\u003e\n\n\u003cp\u003eOne feature that I really like about the Even theme is the ability to have a\ntable of contents displayed beside each blog post if your page is wide enough.\nIt takes the headers in the post and uses them to make the table. I may need to\nadd or edit the headers in some posts, but I really like this feature.\u003c/p\u003e\n\n\u003cp\u003eAnd if you want a laugh, test out the 404 page - here is a \u003ca href=\"https://troz.net/bad-link/\" title=\"404\"\u003ebad link\u003c/a\u003e - which\ngenerates a random text emoji each time!\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"publishing\"\u003ePublishing\u003c/h2\u003e\n\n\u003cp\u003eI wanted to use my existing GitHub Pages setup, so I replaced the site files in\nmy local repository with the new Hugo site files. I generated the static site\nfiles using \u003ccode\u003ehugo\u003c/code\u003e in Terminal, then pushed the pages to GitHub. All I had to do\nthen was change the settings so that GitHub Pages knew my site was coming from\nthe \u003ccode\u003edocs\u003c/code\u003e folder and I was live with the new site.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\n\n\u003cp\u003eSo how am I going with my check list?\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eResponsive - ALMOST, not Hugo\u0026rsquo;s fault\u003c/li\u003e\n\u003cli\u003eBlog style - YES\u003c/li\u003e\n\u003cli\u003eWritten using Markdown - YES\u003c/li\u003e\n\u003cli\u003eStatic pages for apps listing, about, contact etc. - YES\u003c/li\u003e\n\u003cli\u003eSyntax highlighting - YES\u003c/li\u003e\n\u003cli\u003eSocial links - YES\u003c/li\u003e\n\u003cli\u003eGoogle Analytics - YES\u003c/li\u003e\n\u003cli\u003eDisqus commenting - YES\u003c/li\u003e\n\u003cli\u003eTwitter cards - NO\u003c/li\u003e\n\u003cli\u003eJSON Feed - NO\u003c/li\u003e\n\u003cli\u003eSearching within the site - NO\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe Hugo generated pages are all responsive and look great on my iPhone, but my\nold static page for listing my apps does not look good, so I need to re-design\nthat.\u003c/p\u003e\n\n\u003cp\u003eTwitter cards - I have found some articles on how to set that up, so it is\npossible, but I haven\u0026rsquo;t done it yet.\u003c/p\u003e\n\n\u003cp\u003eJSON Feed is not working. There are themes that apparently have this, but I\nhaven\u0026rsquo;t yet worked out how to implement it - hopefully later.\u003c/p\u003e\n\n\u003cp\u003eIn-site search - this was something I was able to get in my old WordPress site,\nbut not in Jekyll. There are Hugo themes listed that support search, but they\nseem to just give a link to Google or DuckDuckGo. Maybe this can be edited to\nrestrict it to the site, but I dislike using such searches, so I will not add a\nsearch unless it works internally. One theme I found uses \u003ca href=\"https://www.algolia.com\" title=\"Algolia\"\u003eAlgolia\u003c/a\u003e to search\nthe site, so I will investigate that.\u003c/p\u003e\n\n\u003cp\u003eOverall, I am impressed. The transition was relatively easy, especially\nconsidering that I didn\u0026rsquo;t take the time to learn anything about Hugo first, but\njust blundered in and tried to work it out on the fly.\u003c/p\u003e\n\n\u003cp\u003eThe speed of generating pages and the live reload while developing make Hugo a\npleasure to work with. Now all I have to do is write some interesting posts\u0026hellip;\u003c/p\u003e\n\n\u003cp\u003eAnd I want to tidy up the URLs, headers and tags for the older pages as well as\ninvestigating Twitter cards, search \u0026amp; JSON Feed.\u003c/p\u003e"
    },
    {
        "title" : "Marktime",
        "date_published" : "2017-11-26T14:48:53+10:00",
        "date_modified" : "2017-11-26T14:48:53+10:00",
        "id" : "https://troz.net/marktime/",
        "url" : "https://troz.net/marktime/",
        "content_html" : "\u003cstyle\u003eimg {width: 300px; } \u003c/style\u003e\n\n\u003cp\u003eMark Time is now available now from the \u003ca href=\"https://itunes.apple.com/us/app/mark-time/id1305580742?mt=8\"\u003eiTunes App Store\u003c/a\u003e for iPhone and\niPad as an assistant for celestial navigators.\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003cp\u003eMark Time is an application for Celestial Navigation that solves the problem of\nhow to take an accurate time reading to go with each sextant sighting.\u003c/p\u003e\n\n\u003cp\u003eBy simply tapping the screen you can record the exact time UTC as you take your\nsight, so you have no chance of making an error with the conversion, and this\ntime is stored in one of five registers.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/MarkTime1.png\" alt=\"Mark Time\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eVery useful when you have an assistant, and ideal for taking readings when you\nare on your own.\u003c/p\u003e\n\n\u003cp\u003eAs you record a time you hear a confirmation sound and feel a vibration, so\nthere is no need even to look at the screen. In addition the actual latitude and\nlongitude at each time can be accessed later to verify your calculations. These\noptions are all configurable in Settings to suit your own preferences.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/MarkTime2.png\" alt=\"Mark Time\" /\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLocation permissions:\u003c/strong\u003e On startup, the app will request permission to access\nyour location. This is how the latitude and longitude data is gathered to\nprovide this data if you wish.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eSupport:\u003c/strong\u003e If you have any questions about this app, please use the Contact\nlink above to get in touch.\u003c/p\u003e"
    },
    {
        "title" : "Contact",
        "date_published" : "2017-11-26T11:22:18+10:00",
        "date_modified" : "2017-11-26T11:22:18+10:00",
        "id" : "https://troz.net/contact/",
        "url" : "https://troz.net/contact/",
        "content_html" : "\u003cp\u003e\u003c/p\u003e\n\n\u003cstyle\u003e\n.py2 {\n    padding-top: 1rem;\n    padding-bottom: 1rem\n}\n.form-stacked input, .form-stacked textarea, .form-stacked select {\n    width: 100%\n}\ninput, select, textarea, fieldset {\n    font-size: 1rem;\n    margin-top: 0;\n    margin-bottom: .5rem\n}\ninput[type=text], input[type=datetime], input[type=datetime-local],\ninput[type=email], input[type=month], input[type=number], input[type=password],\ninput[type=search], input[type=tel], input[type=time], input[type=url],\ninput[type=week] {\n    box-sizing: border-box;\n    height: 2.25rem;\n    padding: .5rem .5rem;\n    vertical-align: middle;\n    -webkit-appearance: none\n}\n.form-stacked input, .form-stacked textarea, .form-stacked select {\n    width: 100%\n}\nbutton, .button {\n    font-family: \"Lato\", \"Helvetica Neue\", Helvetica, sans-serif;\n    font-size: inherit;\n    font-weight: normal;\n    text-decoration: none;\n    cursor: pointer;\n    display: inline-block;\n    box-sizing: border-box;\n    line-height: 1.125rem;\n    padding: .5rem 1rem;\n    margin: 0;\n    height: auto;\n    border: 1px solid transparent;\n    vertical-align: middle;\n    -webkit-appearance: none\n}\nbutton, .button {\n    text-shadow: none;\n    background-image: none\n}\n.button:hover, .button:focus, .button:active {\n    color: white;\n    text-shadow: none;\n    background-image: none\n}\n.button-blue {\n    color: white;\n    background-color: #0076df;\n    border-radius: 3px;\n    transition-duration: .1s;\n    transition-timing-function: ease-out;\n    transition-property: box-shadow, background-color\n}\n.button-blue:hover {\n    opacity: .875\n}\n.button-blue:active, .button-blue.is-active {\n    box-shadow: inset 0 0 0 32px rgba(0, 0, 0, 0.125), inset 0 2px 3px 0 rgba(0, 0, 0, 0.25)\n}\n.button-blue:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.5), 0 0 1px 4px rgba(0, 118, 223, 0.5)\n}\n.button-blue:disabled, .button-blue.is-disabled {\n    opacity: .5\n}\ntextarea {\n    box-sizing: border-box;\n    line-height: 1.75;\n    padding: .5rem .5rem\n}\n\u003c/style\u003e\n\n\u003cdiv class=\"py2\"\u003e\n  \u003cform action=\"https://formspree.io/sarah@troz.net\" method=\"POST\" class=\"form-stacked form-light\"\u003e\n  \u003cinput type=\"text\" name=\"name\" class=\"input mobile-block\" placeholder=\"Name\"\u003e\n  \u003cinput type=\"email\" name=\"email\" class=\"input mobile-block\" placeholder=\"Email Address\"\u003e\n  \u003cinput type=\"text\" name=\"_gotcha\" style=\"display:none\" /\u003e\n  \u003cinput type=\"hidden\" name=\"_subject\" value=\"TrozWare Contact\" /\u003e\n  \u003cinput type=\"hidden\" name=\"_next\" value=\"/thanks/\" /\u003e\n  \u003ctextarea type=\"text\" name=\"content\" class=\"input mobile-block\" rows=\"5\" placeholder=\"What would you like to say?\"\u003e\u003c/textarea\u003e\n  \u003cinput type=\"submit\" class=\"button button-blue button-big mobile-block\" value=\"Send Message\"\u003e\n  \u003c/form\u003e\n\u003c/div\u003e"
    },
    {
        "title" : "JSON Parsing in Swift 4",
        "date_published" : "2017-06-18T00:00:00Z",
        "date_modified" : "2017-06-18T00:00:00Z",
        "id" : "https://troz.net/post/2017/json-parsing-in-swift-4/",
        "url" : "https://troz.net/post/2017/json-parsing-in-swift-4/",
        "content_html" : "\u003cp\u003e\u003cstrong\u003eUpdated:\u003c/strong\u003e 3rd September 2017.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eChecked syntax using Xcode 9.0 beta 6.\u003c/li\u003e\n\u003cli\u003eAdded section on \u003ca href=\"#nulls\"\u003eallowing for nulls\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eSince \u003cstrong\u003eJSON\u003c/strong\u003e has become the de facto standard for data transfers around the\ninternet, there has always been a lot of interest in Swift libraries to parse\nJSON into Swift classes or structs. Searching for \u0026ldquo;swift json library\u0026rdquo; on\n\u003ca href=\"https://github.com/search?q=swift+json+library\"\u003eGitHub\u003c/a\u003e discovers \u003cs\u003e77\u003c/s\u003e 86 repositories. So why are there so many? And\nwhat has Swift 4 done to \u003cem\u003esherlock\u003c/em\u003e them all?\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003cp\u003eThe problem has always been converting loosely typed JSON to strictly typed\nSwift which involves a lot of type casting, checking, optionals etc. Swift has\nalways provided access to the Objective-C methods for converting JSON to and\nfrom NSData, NSDictionary and NSArray. (These are now called Data, Dictionary\nand Array, but those labels are so universal, that I sometimes feel a more\nspecific nomenclature would be useful. Have you tried doing a search for\n\u0026lsquo;Data\u0026rsquo;?)\u003c/p\u003e\n\n\u003cp\u003eFor sample data, I am using \u003ca href=\"https://jsonplaceholder.typicode.com/users\"\u003ehttps://jsonplaceholder.typicode.com/users\u003c/a\u003e which\nreturns 10 user objects in this format:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n  \u0026quot;id\u0026quot;: 1,\n  \u0026quot;name\u0026quot;: \u0026quot;Leanne Graham\u0026quot;,\n  \u0026quot;username\u0026quot;: \u0026quot;Bret\u0026quot;,\n  \u0026quot;email\u0026quot;: \u0026quot;Sincere@april.biz\u0026quot;,\n  \u0026quot;address\u0026quot;: {\n    \u0026quot;street\u0026quot;: \u0026quot;Kulas Light\u0026quot;,\n    \u0026quot;suite\u0026quot;: \u0026quot;Apt. 556\u0026quot;,\n    \u0026quot;city\u0026quot;: \u0026quot;Gwenborough\u0026quot;,\n    \u0026quot;zipcode\u0026quot;: \u0026quot;92998-3874\u0026quot;,\n    \u0026quot;geo\u0026quot;: {\n      \u0026quot;lat\u0026quot;: \u0026quot;-37.3159\u0026quot;,\n      \u0026quot;lng\u0026quot;: \u0026quot;81.1496\u0026quot;\n    }\n  },\n  \u0026quot;phone\u0026quot;: \u0026quot;1-770-736-8031 x56442\u0026quot;,\n  \u0026quot;website\u0026quot;: \u0026quot;hildegard.org\u0026quot;,\n  \u0026quot;company\u0026quot;: {\n    \u0026quot;name\u0026quot;: \u0026quot;Romaguera-Crona\u0026quot;,\n    \u0026quot;catchPhrase\u0026quot;: \u0026quot;Multi-layered client-server neural-net\u0026quot;,\n    \u0026quot;bs\u0026quot;: \u0026quot;harness real-time e-markets\u0026quot;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe goal will be to convert this to an instance of this matching Swift struct:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003estruct User {\n    let id: Int\n    let name: String\n    let username: String\n    let email: String\n    let phone: String\n    let website: String\n    let address: Address\n    let company: Company\n\n    struct Address {\n        let street: String\n        let suite: String\n        let city: String\n        let zipcode: String\n        let geo: Coordinates\n\n        struct Coordinates {\n            let lat: Double\n            let lng: Double\n        }\n    }\n\n    struct Company {\n        let name: String\n        let catchPhrase: String\n        let bs: String\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe first thing to note is that the Swift struct (and its embedded structs) use\nmultiple different types: Int, String, Double, Address, Coordinates, Company.\nThe JSON data only has strings and numbers and even then, some of the numbers\nare really strings - look at the lat \u0026amp; lng entries. So converting from JSON to a\nstruct and back again has always been problematic, but let\u0026rsquo;s give it a go using\nbuilt-in Swift 3 processing with no external libraries.\u003c/p\u003e\n\n\u003ch2 id=\"decoding-in-swift-3\"\u003eDecoding in Swift 3\u003c/h2\u003e\n\n\u003cp\u003eYou can insert this into a playground or \u003ca href=\"https://github.com/trozware/json\"\u003edownload my playground\u003c/a\u003e and check\nout the Swift 3 JSON page:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003eimport Foundation\n\nlet sampleDataAddress = \u0026quot;https://jsonplaceholder.typicode.com/users\u0026quot;\nlet url = URL(string: sampleDataAddress)!\nlet jsonData = try! Data(contentsOf: url)\n\nstruct User {\n    let id: Int\n    let name: String\n    let username: String\n    let email: String\n    let phone: String\n    let website: String\n    let address: Address\n    let company: Company\n\n    init?(dict: [String: Any]) {\n        guard\n            let id = dict[\u0026quot;id\u0026quot;] as? Int,\n            let name = dict[\u0026quot;name\u0026quot;] as? String,\n            let username = dict[\u0026quot;username\u0026quot;] as? String,\n            let email = dict[\u0026quot;email\u0026quot;] as? String,\n            let phone = dict[\u0026quot;phone\u0026quot;] as? String,\n            let website = dict[\u0026quot;website\u0026quot;] as? String,\n            let addressDict = dict[\u0026quot;address\u0026quot;] as? [String: Any],\n            let address = Address(dict: addressDict),\n            let companyDict = dict[\u0026quot;company\u0026quot;] as? [String: Any],\n            let company = Company(dict: companyDict)\n            else {\n                return nil\n        }\n\n        self.id = id\n        self.name = name\n        self.username = username\n        self.email = email\n        self.phone = phone\n        self.website = website\n        self.address = address\n        self.company = company\n    }\n\n    struct Address {\n        let street: String\n        let suite: String\n        let city: String\n        let zipcode: String\n        let geo: Coordinates\n\n        init?(dict: [String: Any]) {\n            guard\n                let street = dict[\u0026quot;street\u0026quot;] as? String,\n                let suite = dict[\u0026quot;suite\u0026quot;] as? String,\n                let city = dict[\u0026quot;city\u0026quot;] as? String,\n                let zipcode = dict[\u0026quot;zipcode\u0026quot;] as? String,\n                let geoDict = dict[\u0026quot;geo\u0026quot;] as? [String: Any],\n                let geo = Coordinates(dict: geoDict) else {\n                    return nil\n            }\n\n            self.street = street\n            self.suite = suite\n            self.city = city\n            self.zipcode = zipcode\n            self.geo = geo\n        }\n\n        struct Coordinates {\n            let lat: Double\n            let lng: Double\n\n            init?(dict: [String: Any]) {\n                guard\n                    let latString = dict[\u0026quot;lat\u0026quot;] as? String,\n                    let lat = Double(latString),\n                    let lngString = dict[\u0026quot;lng\u0026quot;] as? String,\n                    let lng = Double(lngString) else {\n                        return nil\n                }\n                self.lat = lat\n                self.lng = lng\n            }\n        }\n    }\n\n    struct Company {\n        let name: String\n        let catchPhrase: String\n        let bs: String\n\n        init?(dict: [String: Any]) {\n            guard\n                let name = dict[\u0026quot;name\u0026quot;] as? String,\n                let catchPhrase = dict[\u0026quot;catchPhrase\u0026quot;] as? String,\n                let bs = dict[\u0026quot;bs\u0026quot;] as? String else {\n                    return nil\n            }\n\n            self.name = name\n            self.catchPhrase = catchPhrase\n            self.bs = bs\n        }\n    }\n}\n\nif let json = try? JSONSerialization.jsonObject(with: jsonData, options: []) {\n    if let jsonArray = json as? [[String: Any]] {\n        let users = jsonArray.flatMap {\n            User(dict: $0)\n        }\n        users.count\n        dump(users.first)\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eI don\u0026rsquo;t actually expect you to go through all this code in detail, but I\nincluded it here to make it obvious how verbose this method is.\u003c/p\u003e\n\n\u003cp\u003eThe first 3 lines get the data, and I have force-unwrapped the URL and the Data\nwhich I would not do in a production app but which is OK while testing in a\nplayground. Then there is a declaration of the Users struct with all its sub\nstructs. Each one has a failable init that tries to parse the JSON dictionary\nand returns nil if the data doesn\u0026rsquo;t match, by way of a lengthy set of guard\nstatements. The basic layout of each struct is the same but it is very verbose.\nAnd as an extra step, the lat and lng properties need to be converted from\nStrings to Doubles.\u003c/p\u003e\n\n\u003cp\u003eI have to confess that it took quite come time to get this right \u0026hellip; lots of\nguard statements to check that the data can be converted to the required types\nwhich meant that any typos produced an empty array. The sub-structs have to be\nextracted from the JSON as Dictionaries and then initialised by themselves.\u003c/p\u003e\n\n\u003ch2 id=\"decoding-in-swift-4\"\u003eDecoding in Swift 4\u003c/h2\u003e\n\n\u003cp\u003eSo this works, and I get an array of Users objects. But it isn\u0026rsquo;t pretty and it\ntakes a lot of code to do the processing. So now I am going to move on to doing\nthis in Swift 4. I am using Xcode 9.0 beta 6 (9M214v) so if you have a later\nversion, you may need to adapt to any changes.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003estruct User: Codable {\n    let id: Int\n    let name: String\n    let username: String\n    let email: String\n    let phone: String\n    let website: String\n    let address: Address\n    let company: Company\n\n    struct Address: Codable {\n        let street: String\n        let suite: String\n        let city: String\n        let zipcode: String\n        let geo: Coordinates\n\n        struct Coordinates: Codable {\n            let lat: String\n            let lng: String\n        }\n    }\n\n    struct Company: Codable {\n        let name: String\n        let catchPhrase: String\n        let bs: String\n    }\n}\n\nlet jsonDecoder = JSONDecoder()\nlet users = try? jsonDecoder.decode(Array\u0026lt;User\u0026gt;.self,\n                                    from: jsonData)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIgnoring the complexities of converting latitude and longitude to Doubles, I get\nvastly simpler code. I declare all the structs as conforming to the \u003ccode\u003eCodable\u003c/code\u003e\nprotocol and then I can remove all the init methods and just let \u003ccode\u003eJSONDecoder\u003c/code\u003e\ndo its magic. I just have to tell it what data type to expect - in this case an\nArray of Users. I don\u0026rsquo;t have to worry about the initial conversion of the JSON\ndata to a Dictionary or looping through the elements using flatMap.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eIn the playground, I used a do\u0026hellip;catch structure to check the result of the\ndecode function, but I have used try? here to keep the code short.\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2 id=\"changing-data-types\"\u003eChanging data types\u003c/h2\u003e\n\n\u003cp\u003eThe lat \u0026amp; lng coordinates are stored in the JSON as Strings, but need to be\nconverted to Doubles for the Swift struct.\u003c/p\u003e\n\n\u003cp\u003eThis requires a custom init method for the Coordinates struct to do the\nconversion from String to Double.\u003c/p\u003e\n\n\u003cp\u003eSo here is the complete code for Swift 4 - again, if you don\u0026rsquo;t want to create\nyour own playground, you can \u003ca href=\"https://github.com/trozware/json\"\u003euse mine\u003c/a\u003e, this time looking at the Swift 4\nJSON page:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003eimport Foundation\n\nlet sampleDataAddress = \u0026quot;https://jsonplaceholder.typicode.com/users\u0026quot;\nlet url = URL(string: sampleDataAddress)!\nlet jsonData = try! Data(contentsOf: url)\n\nstruct User: Codable {\n    let id: Int\n    let name: String\n    let username: String\n    let email: String\n    let phone: String\n    let website: String\n    let address: Address\n    let company: Company\n\n    struct Address: Codable {\n        let street: String\n        let suite: String\n        let city: String\n        let zipcode: String\n        let geo: Coordinates\n\n        struct Coordinates: Codable {\n            let lat: Double\n            let lng: Double\n\n            init(from decoder: Decoder) throws {\n                let values = try decoder.container(keyedBy: CodingKeys.self)\n                let latString = try values.decode(String.self, forKey: .lat)\n                let lngString = try values.decode(String.self, forKey: .lng)\n                lat = Double(latString) ?? 0\n                lng = Double(lngString) ?? 0\n            }\n        }\n    }\n\n    struct Company: Codable {\n        let name: String\n        let catchPhrase: String\n        let bs: String\n    }\n}\n\nlet jsonDecoder = JSONDecoder()\nlet users = try? jsonDecoder.decode(Array\u0026lt;User\u0026gt;.self, from: jsonData)\n\nusers?.count\ndump(users?.first)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eFor comparative purposes, I counted the lines of code in each, removing the\ncommon boiler plate of the top of each and the two lines for displaying the\nresults in the playground. I also removed the blank lines which I always use a\nlot in my code for readability but which are not relevant when comparing code\nefficiency:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eVersion\u003c/th\u003e\n\u003cth align=\"right\"\u003eLines\u003c/th\u003e\n\u003cth align=\"right\"\u003eLines if lat \u0026amp; lng are Strings\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eSwift 3\u003c/td\u003e\n\u003ctd align=\"right\"\u003e95\u003c/td\u003e\n\u003ctd align=\"right\"\u003e93\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd\u003eSwift 4\u003c/td\u003e\n\u003ctd align=\"right\"\u003e35\u003c/td\u003e\n\u003ctd align=\"right\"\u003e28\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2 id=\"encoding\"\u003eEncoding\u003c/h2\u003e\n\n\u003cp\u003eEncoding back to JSON is very similar. In the Swift 3 version, I would have\nwritten a method for each struct that created a Dictionary and then used\nJSONSerialization to convert the Dictionary back to JSON. This is very verbose\nand tedious to write so I am not going to bother to demonstrate it here.\u003c/p\u003e\n\n\u003cp\u003eBut in Swift 4, this is even easier than decoding. Add this code to the end of\nyour Swift 4 JSON playground or playground page:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003eif let users = users {\n    let jsonEncoder = JSONEncoder()\n    jsonEncoder.outputFormatting = .prettyPrinted\n\n    if let backToJson = try? jsonEncoder.encode(users) {\n        if let jsonString = String(data: backToJson, encoding: .utf8) {\n            print(jsonString)\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe \u003ccode\u003eJSONEncoder\u003c/code\u003e returns Data and I have converted that to a String for\nchecking. I set JSONEncoder\u0026rsquo;s outputFormatting property to .prettyPrinted get a\nmore readable String.\u003c/p\u003e\n\n\u003cp\u003eNotice how the encoded data is not quite the same as I received because the lat\n\u0026amp; lng properties are now Doubles. In a production app, if I needed to be able to\nconvert back to JSON, I probably would have left them as Strings so as to enable\ndata transfer in both directions. I would add computed properties to the struct\nto convert these Strings to Doubles as I needed them.\u003c/p\u003e\n\n\u003ch2 id=\"advanced-decoding\"\u003eAdvanced Decoding\u003c/h2\u003e\n\n\u003cp\u003eNow that we have the basics, I want to look at three more features: changing\nproperty names, date handling and allowing for nulls.\u003c/p\u003e\n\n\u003ch2 id=\"changing-property-names\"\u003eChanging Property Names\u003c/h2\u003e\n\n\u003cp\u003eIn these examples I used exactly the same names for the properties as were used\nin the JSON. In the Swift 3 version, it would have been easy to change the\nproperty names, since the data for each property was being extracted manually.\nIn Swift 4, if you want the decoder to change names, you have to tell it what\nyou want.\u003c/p\u003e\n\n\u003cp\u003eMake a new playground or playground page and replace the contents with this - or\ngo to the Swift 4 Extras page on \u003ca href=\"https://github.com/trozware/json\"\u003emy playground\u003c/a\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003eimport Foundation\n\nlet jsonString = \u0026quot;\u0026quot;\u0026quot;\n{\n\u0026quot;name1\u0026quot;: \u0026quot;Jane\u0026quot;,\n\u0026quot;name2\u0026quot;: \u0026quot;Smith\u0026quot;\n}\n\u0026quot;\u0026quot;\u0026quot;\nlet jsonData = jsonString.data(using: .utf8)!\n\nstruct Person: Codable {\n    let firstName: String\n    let lastName: String\n}\n\nlet jsonDecoder = JSONDecoder()\nlet person = try? jsonDecoder.decode(Person.self, from: jsonData)\ndump(person)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThis uses the new multi-line literals in Swift 4 to assemble the JSON string\nwhich is amazingly useful as it allows quotes to be embedded in the string\nwithout having to escape them. As you can see, the JSON property names are not\nvery helpful, so I want to change them in my Person struct. At the moment,\n\u003ccode\u003eperson\u003c/code\u003e is nil because I have not given the decoder any clues to help it\ntranslate the names. To do that, I have to add a CodingKeys enum to the Person\nstruct and it tells the decoder what names in the JSON match up to what\nproperties in the struct.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003estruct Person: Codable {\n    let firstName: String\n    let lastName: String\n\n    enum CodingKeys: String, CodingKey {\n        case firstName = \u0026quot;name1\u0026quot;\n        case lastName = \u0026quot;name2\u0026quot;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAnd that\u0026rsquo;s all I have to do. Now the JSON is correctly converted to a Person. As\nan exercise, use JSONEncoder to get back to JSON from the Person. You will see\nthat the JSON correctly names the elements using \u0026ldquo;name1\u0026rdquo; and \u0026ldquo;name2\u0026rdquo;.\u003c/p\u003e\n\n\u003ch2 id=\"date-handling\"\u003eDate Handling\u003c/h2\u003e\n\n\u003cp\u003eNext let\u0026rsquo;s look at dates - add this code to the playground:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003elet jsonString2 = \u0026quot;\u0026quot;\u0026quot;\n{\n\u0026quot;name\u0026quot;: \u0026quot;My New Project\u0026quot;,\n\u0026quot;created\u0026quot;: \u0026quot;2017-06-18T06:28:25Z\u0026quot;\n}\n\u0026quot;\u0026quot;\u0026quot;\nlet jsonData2 = jsonString2.data(using: .utf8)!\n\nstruct Project: Codable {\n    let name: String\n    let created: Date\n}\n\nlet jsonDecoder2 = JSONDecoder()\nlet project = try? jsonDecoder2.decode(Project.self, from: jsonData2)\n\ndump(project)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWhen this runs, \u003ccode\u003eproject\u003c/code\u003e is nil because the decoder has no idea how to get from\nthe String \u0026ldquo;2017-06-18T06:28:25Z\u0026rdquo; to a Date object. Add this line after creating\n\u003ccode\u003ejsonDecoder2\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003ejsonDecoder2.dateDecodingStrategy = .iso8601\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow the date can be converted and an instance of the Project struct will be\ncreated.\u003c/p\u003e\n\n\u003cp\u003eAnd to get back to the JSON, converting the Date back to ISO8601 format:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003elet jsonEncoder = JSONEncoder()\njsonEncoder.dateEncodingStrategy = .iso8601\n\nif let backToJson = try? jsonEncoder.encode(project) {\n    if let jsonString = String(data: backToJson, encoding: .utf8) {\n        print(jsonString)\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003ca name =\"nulls\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"allowing-for-nulls\"\u003eAllowing For Nulls\u003c/h2\u003e\n\n\u003cp\u003eJSON data will often include \u003cstrong\u003enull\u003c/strong\u003e where there is no value for a particular\nproperty name. When using JSONDecoder or JSONEncoder, this can be allowed for by\nusing Optionals. If you are not clear about Optionals, have a look at my\nprevious article: \u003ca href=\"/post/2016-02-12-learning-swift-optionals/\"\u003eLearning Swift - Optionals\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe crucial step is to declare the properties of the Swift object as optionals\nif you think they could get a null value.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003estruct Role: Codable {\n    let firstName: String\n    let lastName: String\n    let nickName: String?\n}\n\nlet jsonStringWithNulls = \u0026quot;\u0026quot;\u0026quot;\n[\n    {\n        \u0026quot;firstName\u0026quot;: \u0026quot;Sally\u0026quot;,\n        \u0026quot;lastName\u0026quot;: \u0026quot;Sparrow\u0026quot;,\n        \u0026quot;nickName\u0026quot;: null\n    },\n    {\n        \u0026quot;firstName\u0026quot;: \u0026quot;Doctor\u0026quot;,\n        \u0026quot;lastName\u0026quot;: \u0026quot;Who\u0026quot;,\n        \u0026quot;nickName\u0026quot;: \u0026quot;The Doctor\u0026quot;\n    }\n]\n\u0026quot;\u0026quot;\u0026quot;\nlet jsonDataWithNulls = jsonStringWithNulls.data(using: .utf8)!\n\nlet jsonDecoder3 = JSONDecoder()\nlet roles = try? jsonDecoder3.decode(Array\u0026lt;Role\u0026gt;.self, from: jsonDataWithNulls)\ndump(roles)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIn this example (which you can find in the Swift 4 Extras page on \u003ca href=\"https://github.com/trozware/json\"\u003emy\nplayground\u003c/a\u003e), I have declared a struct called Role with 3 String properties.\nThe 3rd String - nickName - is an Optional so it may be a String or it may be\nnil.\u003c/p\u003e\n\n\u003cp\u003eThe JSON contains 2 elements - one has a nickName value and the other has it as\nnull. Because the matching property in the Swift struct is an optional, this\nworks as expected and the nickName property for Sally Sparrow is decoded as nil.\nIf you remove the question mark to make nickName non-optional, the decoding will\nfail.\u003c/p\u003e\n\n\u003cp\u003eGoing back to JSON from a Swift object with optionals works much the same except\nthat it does not specifically mark items as null, it just leaves them out.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003elet jsonEncoder2 = JSONEncoder()\njsonEncoder2.outputFormatting = .prettyPrinted\n\nif let backToJsonWithNulls = try? jsonEncoder2.encode(roles) {\n    if let jsonString = String(data: backToJsonWithNulls, encoding: .utf8) {\n        print(jsonString)\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"property-lists\"\u003eProperty Lists\u003c/h2\u003e\n\n\u003cp\u003eAs well as JSONDecoder and JSONEncoder, Swift 4 has introduced\nPropertyListDecoder and PropertyListEncoder, so let\u0026rsquo;s take a quick look at that.\u003c/p\u003e\n\n\u003cp\u003eAdd this to the bottom of the last playground as it uses the Project struct and\ndata:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003elet plistEncoder = PropertyListEncoder()\nplistEncoder.outputFormat = .xml\nif let plist = try? plistEncoder.encode(project) {\n    if let plistString = String(data: plist, encoding: .utf8) {\n        print(plistString)\n    }\n\n    let plistDecoder = PropertyListDecoder()\n    let project2 = try? plistDecoder.decode(Project.self, from: plist)\n\n    dump(project2)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eI don\u0026rsquo;t see this is being quite as useful as the JSON Encoding \u0026amp; Decoding, but I\nmention it here for completeness.\u003c/p\u003e\n\n\u003ch2 id=\"codable\"\u003eCodable\u003c/h2\u003e\n\n\u003cp\u003eIn all the Swift 4 examples above, I set the structs to conform to \u003ccode\u003eCodable\u003c/code\u003e.\nReading Apple\u0026rsquo;s docs, I see that \u003ccode\u003eCodable\u003c/code\u003e is actually a typealias referring to\n2 separate protocols:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-Swift\"\u003etypealias Codable = Decodable \u0026amp; Encodable\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIf you only need to convert data one way, it will be more efficient to set your\nstruct or class as confirming to only one of these protocols. For example, if\nyou download JSON data from an API but never need to send it back, just conform\nto Decodable to transform the JSON data into your data structure.\u003c/p\u003e\n\n\u003cp\u003eMuch more information can be found in the \u003ca href=\"https://developer.apple.com/documentation/swift/encoding_decoding_and_serialization\"\u003eApple documentation\u003c/a\u003e.\u003c/p\u003e"
    },
    {
        "title" : "Posting from my new iPad",
        "date_published" : "2017-06-17T00:00:00Z",
        "date_modified" : "2017-06-17T00:00:00Z",
        "id" : "https://troz.net/post/2017/posting-from-my-new-ipad/",
        "url" : "https://troz.net/post/2017/posting-from-my-new-ipad/",
        "content_html" : "\n\n\u003cp\u003eLast week I got a 10.5” iPad Pro. I have had an iPad ever since the original\nrelease, but I have to confess to mainly using it for content consumption rather\nthan creation. Since I am usually close to a Mac anyway, there didn’t seem a lot\nof point. But now that iOS 11 is really addressing the issue of making the iPad\na \u0026ldquo;pro\u0026rdquo; device, I decided to give it a try.\u003c/p\u003e\n\n\u003cp\u003eSo here I am, sitting in an armchair with my iPad on my lap, writing this post\nand working out the details as I go. Any typos are due to the cat trying to\ncompete with the iPad for space on my lap!\u003c/p\u003e\n\n\u003ch2 id=\"ipad\"\u003eiPad\u003c/h2\u003e\n\n\u003cp\u003eAs already mentioned, I have a new iPad Pro. I also have an Apple Pencil which I\nuse for taking notes. I do not have a keyboard, so I am using the on-screen\nkeyboard right now.\u003c/p\u003e\n\n\u003cp\u003eI don’t usually install beta versions of operating systems, but iOS 11 is a huge\npart of making the iPad more professional, so I have installed it. As you would\nexpect, there are a few issues (apps quitting, layout issues especially when\nrotating) but so far I am loving it.\u003c/p\u003e\n\n\u003ch2 id=\"writing\"\u003eWriting\u003c/h2\u003e\n\n\u003cp\u003eMy site is published on \u003ca href=\"https://pages.github.com/\"\u003eGitHub Pages\u003c/a\u003e using \u003ca href=\"http://jekyllrb.com/\"\u003eJekyll\u003c/a\u003e with all the posts\nand pages written in Markdown. One key feature is that every post or page\nrequires a chunk of \u0026ldquo;front matter\u0026rdquo; that must be formatted correctly for the\nJekyll parser to interpret it and create the static content. After a bit of\nresearch, it looked like \u003ca href=\"http://omz-software.com/editorial/\"\u003eEditorial\u003c/a\u003e was going to be the best option for an\neditor app. I moved my site files to Dropbox, linked my Dropbox account to\nEditorial and I was ready to start writing.\u003c/p\u003e\n\n\u003cp\u003eI didn’t want to create the front matter manually for each post. On my Mac I\nhave a text expander snippet that handles that but copying from \u003ca href=\"http://mattgemmell.com/using-the-ipad-for-blogging-with-jekyll/\"\u003eMatt Gemell’s\npost\u003c/a\u003e on the topic, I created an Editorial workflow to create a new post. As\na side-note, Matt has a series of posts on using an iPad which I have found very\nuseful and inspirational.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/Workflow.jpeg\" alt=\"Editorial workflow\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eText entry and editing is a task that I have always felt was too difficult in\niOS, particularly when it came to selecting text and moving the cursor. However\nthere are now several improvements. As with iOS 10, a two-fingered press on the\nkeyboard transforms it into a trackpad for moving the cursor. If you already\nhave text selected, this moves the selection handles. The new iOS 11 keyboard\nhas a really nice feature for entering non-alphabetic characters. The keys now\nshow a small grey character above the main character. Drag down on the key to\nmove the small character into the main key and type it. For example, drag down\non the h key to type (.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/keyboard-drag.png\" alt=\"Keyboard drag\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eEditorial has its own editing helpers. There is an additional toolbar above the\nkeyboard with a tab key as well as frequently used Markdown modifiers. And\nswiping across this toolbar moves the cursor. This is a much slower move than\nwhen using the keyboard as a trackpad so might be better for more precise\nmovements.\u003c/p\u003e\n\n\u003ch3 id=\"adding-links\"\u003eAdding Links:\u003c/h3\u003e\n\n\u003cp\u003eI have referenced a few sites now, so I guess it is time to work out how to link\nto them. I always use Markdown’s referenced link method, with the links\ncollected at the foot of the document, so that is what I plan to do here. To set\ntext as a link, I selected it and used the Editorial toolbar to type an opening\nsquare bracket which surrounded the selection in square brackets. Then I moved\nthe cursor to after the closing bracket and typed another opening square\nbracket. This auto-closed and I was able to type a number which will be the\nreference.\u003c/p\u003e\n\n\u003cp\u003eNext step is to find the relevant URLs - drag \u0026amp; drop with multi-tasking to the\nrescue! Swipe up from the bottom of the screen to see the new Dock. This also\nmakes the keyboard disappear. Hold down on the Safari icon until you grab it,\nthen drag it up into the Editorial window. Now it is open as an overlay.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/safari-overlay.png\" alt=\"Safari as overlay\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAt this point, I have several options:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eSwiping from the left or right of the overlay window lets me position it to\nthe right or left of the screen, still as an overlay.\u003c/li\u003e\n\u003cli\u003eDragging from the bar at the top of the overlap allows me to convert to split\nscreen mode, and I can then drag the divider to adjust the ratios.\u003c/li\u003e\n\u003cli\u003eSwiping all the way to the right disappears the overlay, but swiping back from\nthe right edge returns it. Since I want to copy and paste some links, this\nlooks like the best option right now.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis swiping conflicts slightly with Editorial\u0026rsquo;s swiping from the side to see a\npreview. Swipe from off the edge for the overlap and from well inside the edge\nfor preview.\u003c/p\u003e\n\n\u003cp\u003eAnd here my plans come crashing down. I can drag from Safari\u0026rsquo;s address bar into\nthe Editorial document, but the drop doesn’t take. I guess I need an update to\nEditorial for this to work. But I can still use the old style copy and paste to\nget the links.\u003c/p\u003e\n\n\u003ch3 id=\"images\"\u003eImages\u003c/h3\u003e\n\n\u003cp\u003eSo now I have my links, but I want to insert a few images. I used iOS 11’s new\nscreen shot abilities. Press the usual home button \u0026amp; power button combination to\ntake a screen shot and it appears as a small picture in the bottom left of the\nscreen. Tap it to start editing: markup, crop etc. Then I used the sharing\nbutton to save the picture to Dropbox, putting it inside the images folder in my\nweb site folder.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/screenshot.jpeg\" alt=\"Editing a screenshot\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eI want to insert an image link but I have just worked out that I saved this\nMarkdown file in the root folder instead of the _posts folder. I can’t see a way\nto move it from inside Editorial, so I will swap to the Dropbox app to move the\nfile - be right back\u0026hellip; (I see now how I could have done this in Editorial.)\u003c/p\u003e\n\n\u003cp\u003eOk, this file is in the right place and the images are in the right folder, so\nhow to add an image link? Checking back at previous posts, I see that the format\nI use for inserting an image is: \u003ccode\u003e![Alt text][#]\u003c/code\u003e and the reference at the foot\nof the page is like\u003ccode\u003e[#]: /images/image_name.jpg\u003c/code\u003e but I don’t want to have to\nremember that every time, so I think it is time for some snippets. Tapping the\nlightning icon on the Editorial keyboard lets me edit and create snippets, so I\nhave made one for the image link and one for the image reference. Time to scroll\nback up the page and try them out.\u003c/p\u003e\n\n\u003cp\u003eI opened the Dropbox app in an overlay so that I could find the file names for\nthe images I just saved, then I created the links. The images don’t appear in\nthe preview but that is expected because Jekyll has not parsed the addresses.\nLooking at the information about the images in Dropbox, I see that they are far\ntoo big. I need a way to resize them. The screen shot editor doesn’t have a way\nto resize apart from cropping, at least not in this beta.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://workflow.is/\"\u003eWorkflow\u003c/a\u003e is another Pro level app that I have never really used, but it\nseems that it might do the job. I tried a few workflows to edit the size of an\nimage from a Dropbox file and save it back, but they although they appeared to\ncomplete, the image file remained the same size. So then I went to the Workflow\nGallery and found a workflow called Quick Resize Screenshot. When editing a\nscreen shot, I can use the sharing button to run the workflow and then I can\nsave the smaller images to Dropbox for use in the page. For the large images\nthat I have already saved, I will resize them on my Mac before publishing.\u003c/p\u003e\n\n\u003ch2 id=\"publishing\"\u003ePublishing\u003c/h2\u003e\n\n\u003cp\u003eThis brings me to the final step - publishing the changes to GitHub Pages.\nJekyll is a system that creates static web pages from the Markdown and other\nfiles. on my Mac, I run the \u003ccode\u003ejekyll build\u003c/code\u003e command in Terminal and the pages are\ncreated or re-generated as required. Then I use \u003ccode\u003egit\u003c/code\u003e to commit my changes and\npush them to GitHub which serves them.\u003c/p\u003e\n\n\u003cp\u003eThere appear to be Editorial workflows written in Python that use the GitHub\nAPIs to upload files, but this wouldn’t work well for me. Because of the\nstructure of my site, many different pages need to be re-generated when I\npublish a new post, so I will keep the publishing phase on my Mac. However there\nis no need to make it any more difficult than necessary, so I have written a\nshell script to do the work.\u003c/p\u003e\n\n\u003cp\u003eThe script takes an optional commit message parameter, builds the site, commits\nchanges and pushes then to GitHub. I have only tested this when no files had\nchanged, so this post will be the first real test. Shell scripting is outside my\ncomfort zone, so we will have to see how that works.\u003c/p\u003e\n\n\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\n\u003cp\u003eSo now I have a workflow on my iPad that uses Editorial, Dropbox and Workflow.\nThis allows me to do 100% of the writing task. Then I have a single shell script\non my Mac that does the publishing part. I can edit and create posts anywhere. I\ncan easily use split screen or screen overlays to add links. iOS 11 makes\ncreating and annotating screen shots very easy.\u003c/p\u003e\n\n\u003cp\u003eI am hoping for an update to Editorial that will allow it to accept drag \u0026amp; drop.\nThe ability to resize screen shots before saving them would also be really\nuseful.\u003c/p\u003e\n\n\u003cp\u003eSometimes my posts are more code-based and need access to Xcode and in those\ncases, I will stick to my Mac, especially considering Xcode’s new ability to\nconnect directly to GitHub which will make it great for publishing Swift\nplaygrounds. But for more narrative-style posts like this one, I will use my\niPad and see how I can improve my workflow and expand my tool set.\u003c/p\u003e\n\n\u003cp\u003eIt feels good to be using the iPad as a content creation device at last.\u003c/p\u003e\n\n\u003ch2 id=\"extra-notes-from-a-mac\"\u003eExtra Notes from a Mac:\u003c/h2\u003e\n\n\u003cp\u003eSince this was my first time writing a blog post using an iPad and this\nworkflow, I decided that I should test the results before publishing, so I\nswitched back to the Mac and in Terminal, ran \u003ccode\u003ejekyll serve\u003c/code\u003e so that I could see\nthe results. There were a few issues mainly to do with the formatting of the\nfront matter. The three dashes at the top \u0026amp; bottom of the front matter had\nbecome munged into an emdash plus a dash, so that didn’t work. Jekyll is also\nfussy about the spaces in the tag \u0026amp; summary lines and it doesn\u0026rsquo;t handle\nnon-alphanumerics in the summary text.\u003c/p\u003e\n\n\u003cp\u003eI also used the Mac to shrink some of the images that I had saved before working\nout how to reduce the size of screen shots.\u003c/p\u003e\n\n\u003cp\u003eSo I need to check the structure of the front matter workflow before next time,\nbut this post is ready to go with only minor editing on the Mac side. Now to\ntest my shell script\u0026hellip;\u003c/p\u003e\n"
    },
    {
        "title" : "JSON Feed for TrozWare",
        "date_published" : "2017-05-20T00:00:00Z",
        "date_modified" : "2017-05-20T00:00:00Z",
        "id" : "https://troz.net/post/2017/json-feed-for-trozware/",
        "url" : "https://troz.net/post/2017/json-feed-for-trozware/",
        "content_html" : "\u003cp\u003e\u003ca href=\"https://jsonfeed.org/2017/05/17/announcing_json_feed\"\u003ejsonfeed.org\u003c/a\u003e has announced a new format for web site feeds, designed as an\nalternative to RSS. TrozWare has had an XML RSS feed for years, but I don\u0026rsquo;t\nthink anyone ever uses it (I certainly don\u0026rsquo;t), so today I have replaced it with\na JSON feed, which you can access through the\n\u003ca class=\"fa fa-rss\" href=\"/feed.json\"\u003e\u003c/a\u003e button at the top of every page.\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003cp\u003eI am sure many JSON Feed viewers will appear soon, but the only one I know about\nso far is at \u003ca href=\"http://json-feed-viewer.herokuapp.com\"\u003ehttp://json-feed-viewer.herokuapp.com\u003c/a\u003e. As soon as this update\nto my site goes live, I will apply to have TrozWare added to the list of sites\non this page. Meanwhile, you can paste in the URL: \u003ccode\u003ehttp://troz.net/feed.json\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis site is constructed using Jekyll, so I am very grateful to Niclas Darville\nfor his very easy to follow \u003ca href=\"https://ndarville.com/blog/2017/05/19/json-feed-for-jekyll/\"\u003eguide\u003c/a\u003e. However it is still well worth reading\nthrough the \u003ca href=\"https://jsonfeed.org/version/1\"\u003eofficial specs\u003c/a\u003e to see what else you want to add, or if you want\nto remove anything. I had to tweak a few settings to make it work for my\nconfiguration, and I added some more objects, but Niclas got me off to a flying\nstart.\u003c/p\u003e\n\n\u003cp\u003eTwo things to watch out for:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eMake sure your feed is producing valid JSON (I had an extra comma that was\nbreaking it\u0026hellip;).\u003c/li\u003e\n\u003cli\u003eAs third-party apps \u0026amp; sites may be displaying your content, you need to make\nsure that you are not using relative URLs for images and internal links. I\nwas using relative image URLs like \u003ccode\u003e/images/WorkHelp1.png\u003c/code\u003e but that showed a\nbroken link in the feed viewer, so I have changed all such links to\n\u003ccode\u003e/images/WorkHelp1.png\u003c/code\u003e. Hopefully that will work correctly on my local test\nserver as well as when published. \u003cbr\u003e\u003cbr\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cimg src=\"https://jsonfeed.org/graphics/icon.png\" alt=\"JSON Feed icon\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eJSON Feed offers a nice icon which I would have liked to use, but I could not\nwork out a way to make it play nicely with the existing icons on my pages which\nall use \u003ca href=\"http://fontawesome.io\"\u003eFont Awesome\u003c/a\u003e icons. So I ended up just using the existing Feed\nicon. Hopefully Font Awesome will soon add a JSON Feed icon to their already\nimpressive list.\u003c/p\u003e\n\n\u003cp\u003eIf anyone still wants to use the \u003ca href=\"/index.xml\"\u003eRSS feed\u003c/a\u003e, it is no longer linked to the\nbuttons at the top of the pages, but you can access it manually.\u003c/p\u003e"
    },
    {
        "title" : "Blackmail Marketing",
        "date_published" : "2017-03-08T00:00:00Z",
        "date_modified" : "2017-03-08T00:00:00Z",
        "id" : "https://troz.net/post/2017/blackmail-marketing/",
        "url" : "https://troz.net/post/2017/blackmail-marketing/",
        "content_html" : "\u003cp\u003eI use my iPad to play games as a form of relaxation. Nearly all the games I play\nare puzzle apps with levels that can be played in a few minutes. Nearly all of\nthem are free to install. So how do they make money?\u003c/p\u003e\n\n\u003cp\u003eNow I would be the last person you should consult about marketing but it has\nalways seemed to me that the best way to market your product is to convince\npeople that it offers something they want so that they are prepared to pay for\nit.\u003c/p\u003e\n\n\u003cp\u003eThis is not the currently favored approach for mobile apps - at least certainly\nnot for games. No, the theory at the moment is to cause so much frustration and\nannoyance that people give you money to make it stop. Blackmail marketing.\u003c/p\u003e\n\n\u003cp\u003eA frequently used method is showing ads, sometimes just banner ads but more\noften full screen video ads that run for up to 30 seconds. If you interrupt the\nad, you don\u0026rsquo;t get the reward.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eEvery goal reached triggers an ad.\u003c/li\u003e\n\u003cli\u003eQuitting and resuming the app triggers an ad.\u003c/li\u003e\n\u003cli\u003eWanting to play another level triggers an ad.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe theory is that you get so annoyed with this that you pay money to disable\nthe ads.\u003c/p\u003e\n\n\u003cp\u003eThe other common tactic is the delay. A tower defence game needs you to build a\ntower? OK, that will take 12 hours real time and you can\u0026rsquo;t proceed until it\u0026rsquo;s\nfinished. Or you can spend 12 gems which are sold as an in-app purchase. Maybe\nyou can only play 3 levels and then you need to recharge: again, pay up or wait.\nYou keep dying on that level? You\u0026rsquo;re out of lives. Pay up or wait until\ntomorrow. These delays are completely artificial. They have nothing to do with\ngame play but are solely designed to infuriate you enough to get you to pay.\u003c/p\u003e\n\n\u003cp\u003eSo when, and perhaps more importantly why, did mobile app marketing become so\nnegative? What happened to making your customers happy? Do unhappy customers\nspend more?\u003c/p\u003e\n\n\u003cp\u003eFinancially, it appears that irritating your users is a successful strategy.\nNearly all the top grossing games in the App Store are \u0026ldquo;free to play\u0026rdquo; in that\nthe initial download costs nothing. But these big studios are raking in enormous\nsums of money, so many people are persuaded to spend significant money by these\ninfuriating schemes.\u003c/p\u003e\n\n\u003cp\u003eA large part of this must be due to the various App Stores driving prices to the\nbottom. Gone are the days when the price of a mobile app was other than risible.\nSo app developers have four choices:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eDo it as a hobby or learning exercise.\u003c/li\u003e\n\u003cli\u003eDistribute apps as a form of self–promotion for other work.\u003c/li\u003e\n\u003cli\u003eWork for someone who pays you a real wage to develop apps.\u003c/li\u003e\n\u003cli\u003eJoin the blackmailers.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eSo how does this relate to indy developers like me? I care about my users and\nwant them to be happy.\u003c/p\u003e\n\n\u003cp\u003eI have tried several different approaches to app distribution:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eTotally free gets by far the most downloads but is economically ridiculous\nunless the app adds value to your business in some other way.\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eA tip jar gets you nothing.\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eIn-app purchases (in my limited experience) make less than selling the app\nup-front for a small price.\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eBanner ads with no method of forcing people to watch them generate almost no\nrevenue.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSo that leaves me with where I am today - selling apps for a few dollars and\nnothing more. Happily, I have found that Mac users are more prepared to pay a\nfew dollars for an app, so I have shut down many of my iOS apps and am\nconcentrating on the Mac app market.\u003c/p\u003e\n\n\u003cp\u003eAm I letting my principles stand in the way of mobile app profits? Should I just\njoin the gang and start blackmailing my customers? If so, what form should this\ntake?\u003c/p\u003e\n\n\u003cp\u003eAt the moment, I am considering banner ads on the screen with an in-app purchase\nto disable them entirely. I read a suggestion for a less invasive method of\ndoing this by creating your own ads for your other apps. This might be what I\nend up doing.\u003c/p\u003e\n\n\u003cp\u003eI would welcome any suggestions, advice or comments. Please join the discussion\nbelow or contact me using one of the links at the top of the page.\u003c/p\u003e\n"
    },
    {
        "title" : "NCSS 2017",
        "date_published" : "2017-01-06T00:00:00Z",
        "date_modified" : "2017-01-06T00:00:00Z",
        "id" : "https://troz.net/ncss2017/",
        "url" : "https://troz.net/ncss2017/",
        "content_html" : "\u003cp\u003eI gave a Masterclass on Swift at the NCSS Summer School 2017 in Sydney on 8th\nJanuary 2017. This post contains useful links for use during and after my class.\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://swiftlang.ng.bluemix.net/#/repl\"\u003eIBM Swift Sandbox\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"sandbox-code-samples\"\u003eSandbox Code Samples\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"http://swiftlang.ng.bluemix.net/#/repl/58670662da20a814737c3562\"\u003eStrings\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003ca href=\"http://swiftlang.ng.bluemix.net/#/repl/5868463fb5619f13e0a940af\"\u003eOptionals\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003ca href=\"http://swiftlang.ng.bluemix.net/#/repl/5868954cb5619f13e0a940bd\"\u003eFunctions\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003ca href=\"http://swiftlang.ng.bluemix.net/#/repl/5866f31fda20a814737c353b\"\u003eClosures\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003ca href=\"http://swiftlang.ng.bluemix.net/#/repl/5866f48bda20a814737c353c\"\u003eObjects\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003ca href=\"http://swiftlang.ng.bluemix.net/#/repl/5866ed80da20a814737c3538\"\u003eProtocols\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003ca href=\"http://swiftlang.ng.bluemix.net/#/repl/5866fc4dda20a814737c3557\"\u003eGenerics\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"contact-details\"\u003eContact Details:\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eEmail: \u003ca href=\"mailto:sarah@troz.net?subject=NCSS%202017\"\u003esarah@troz.net\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eTwitter: \u003ca href=\"https://twitter.com/trozware\"\u003e@trozware\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eSlides:\n\u003ca href=\"https://www.dropbox.com/s/09r19my3d6jk5jt/NCSS%202017%20Swift%20MC.pdf?dl=0\"\u003eNCSS 2017 Swift MC.pdf\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"useful-links\"\u003eUseful Links:\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://itunes.apple.com/au/book/swift-programming-language/id881256329?mt=11\"\u003eThe Swift Programming Language\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://swift.org\"\u003eSwift.org\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.raywenderlich.com/132258/top-5-ios-swift-newsletters\"\u003eNewsletters\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.raywenderlich.com\"\u003eTutorials\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e"
    },
    {
        "title" : "Looking for beta testers",
        "date_published" : "2016-11-17T00:00:00Z",
        "date_modified" : "2016-11-17T00:00:00Z",
        "id" : "https://troz.net/post/2016/looking-for-beta-testers/",
        "url" : "https://troz.net/post/2016/looking-for-beta-testers/",
        "content_html" : "\u003cp\u003eI am looking for beta testers for my latest Mac app: \u003cstrong\u003e\u003ca href=\"/work/\"\u003eWork\u003c/a\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eWork\u003c/strong\u003e is a project organizer app for developers, designers, students or any\nprofessional who works with multiple projects involving files \u0026amp; folders, web\npages, email addresses and lists of tasks. Click the link above for more\ninformation and help for getting started.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eWork\u003c/strong\u003e requires macOS 10.12 or OS X 10.11.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eIf you would like to test this app, please \u003ca href=\"mailto:work@troz.net?subject=Work%20beta%20test\"\u003econtact me\u003c/a\u003e, giving details of\nyour Mac and operating system. The easiest way to do this is to select \u003cstrong\u003eAbout\nThis Mac\u003c/strong\u003e in the Apple menu and send me a screen shot of the window that\nappears.\u003c/p\u003e\n\n\u003cp\u003eAll beta testers will receive a free license to Work when it is released. If you\nreport a legitimate bug or provide valuable feed-back, you will also receive a\nfree license to your choice of one of my \u003ca href=\"/apps/\"\u003eother apps\u003c/a\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "Work",
        "date_published" : "2016-11-16T00:00:00Z",
        "date_modified" : "2016-11-16T00:00:00Z",
        "id" : "https://troz.net/work/",
        "url" : "https://troz.net/work/",
        "content_html" : "\u003cp\u003e\u003cstrong\u003eWork\u003c/strong\u003e is a project organizer app for developers, designers, students or any\nprofessional who works with multiple projects involving files \u0026amp; folders, web\npages, email addresses and lists of tasks.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eWork\u003c/strong\u003e requires macOS 10.12 or OS X 10.11 and will be available from the Mac\nApp Store soon.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eWe all know what it is like to be in the middle of a project or rushing to\ncomplete an assignment\u0026hellip;\u003c/p\u003e\n\n\u003cp\u003eWe have files scattered all over the place, email addresses of team members or\nclients, web pages with specifications or useful information, tasks scribbled on\nsticky notes or scraps of paper.\u003c/p\u003e\n\n\u003cp\u003eWouldn\u0026rsquo;t it be better if there was one place where you could have quick and easy\naccess to all these items, but without having to change the way you work? With\nthe \u003cstrong\u003eWork\u003c/strong\u003e app, you can regain control - the app helps you get to what you\nwant so you save time.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eHere is the project document you will see when you select \u003cstrong\u003eWork Help\u003c/strong\u003e from the\n\u003cstrong\u003eHelp\u003c/strong\u003e menu:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/WorkHelp1.png\" alt=\"Work\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eIt gathers together some useful links to information about \u003cstrong\u003eWork\u003c/strong\u003e and my other\napps or to allow you to contact me. In \u003cstrong\u003eWork\u003c/strong\u003e documents for my apps, I\nassemble the project files I need to open, images, web page addresses etc. My\nmost frequently used links are starred so I can focus on them whenever I want a\nshorter list.\u003c/p\u003e\n\n\u003cp\u003eDrag files or folders into the window to link them to your \u003cstrong\u003eWork\u003c/strong\u003e document.\nCopy a web address or email address and use \u003cstrong\u003eAdd Web/Email\u003c/strong\u003e to quickly create\na new link entry with the copied address.\u003c/p\u003e\n\n\u003cp\u003eSwitching to \u003cstrong\u003eTasks\u003c/strong\u003e mode allows you to focus on your tasks list. Tasks can be\ngrouped, re-ordered and marked as complete. Use the \u003cstrong\u003eView\u003c/strong\u003e menu to hide\ncompleted tasks if you want a more compact list. Use the \u003cstrong\u003eEdit\u003c/strong\u003e menu or the\ntoolbar buttons to edit groups - this allows you to create your own custom\ngroupings.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/WorkHelp2.png\" alt=\"Work - Tasks\" /\u003e\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003e\u003cstrong\u003eWork\u003c/strong\u003e doesn\u0026rsquo;t move or rename any of your files - it merely links all these\nthings together for fast, convenient and searchable access. It even tracks files\nor folders if you move them later.\u003c/p\u003e\n\n\u003cp\u003eMake a \u003cstrong\u003eWork\u003c/strong\u003e document for every project, drag in the relevant files or\nfolders, add web page addresses and email addresses, make your own task lists.\u003c/p\u003e\n\n\u003cp\u003eCreate groups to gather items together, adjust the display to view only the\nentries you want, use quick look to get a fast glimpse of files or web pages.\u003c/p\u003e\n\n\u003cp\u003eWork also supports the Touch Bar on the new MacBook Pros:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/Work_TB.png\" alt=\"Work - TouchBar\" /\u003e\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eSelect \u003cstrong\u003eWork Help\u003c/strong\u003e from the \u003cstrong\u003eHelp\u003c/strong\u003e menu to see the special \u003cstrong\u003eWork\u003c/strong\u003e document\npictured above. Use the links to keep in touch and step through the sequence of\ntasks to learn the basics of using the app.\u003c/p\u003e\n"
    },
    {
        "title" : "Another Man Reader Update...",
        "date_published" : "2016-11-05T00:00:00Z",
        "date_modified" : "2016-11-05T00:00:00Z",
        "id" : "https://troz.net/post/2016/another-man-reader-update/",
        "url" : "https://troz.net/post/2016/another-man-reader-update/",
        "content_html" : "\u003cp\u003eA quick update to \u003ca href=\"/manreader/\"\u003eMan Reader\u003c/a\u003e to version 1.8 is now available through the\n\u003ca href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\"\u003eMac App Store\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe main reason for this version was that Man Reader was not previously\ndetecting man pages installed by third-party IDEs in the Applications folder.\nThere was also an issue with Man Reader failing to display the text of the\npreviously selected man page on app launch.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eMore complete search for man pages, including in third-party IDEs.\u003c/li\u003e\n\u003cli\u003eFix for glitch when displaying previously selected page on launch.\u003c/li\u003e\n\u003c/ul\u003e\n"
    },
    {
        "title" : "Man Reader Update",
        "date_published" : "2016-10-12T00:00:00Z",
        "date_modified" : "2016-10-12T00:00:00Z",
        "id" : "https://troz.net/post/2016/man-reader-update/",
        "url" : "https://troz.net/post/2016/man-reader-update/",
        "content_html" : "\u003cp\u003e\u003ca href=\"/manreader/\"\u003eMan Reader\u003c/a\u003e has just been updated to version 1.7 and is available through\nthe \u003ca href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\"\u003eMac App Store\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe main reason for this update was to make the app work well with macOS Sierra,\nas I found that version 1.6 was sometimes crashing on launch. While doing this,\nthe update was rejected by the App Store reviewers because it crashed on OS X\n10.10. Since I no longer have a Mac running 10.10, I decided to set the minimum\nsupported system version to OS X 10.11. If you need support for older versions,\nyou should still be able to download version 1.6 which will work back to 10.7.\u003c/p\u003e\n\n\u003cp\u003eI also took the opportunity to fix some graphical issues, dealing with different\ncolor schemes:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe man page list now shows alternating colors even when not using the default\nscheme.\u003c/li\u003e\n\u003cli\u003eWhen scrolling the man pages past the top or the bottom with a non-white\nbackground, you should no longer see white blocks top \u0026amp; bottom.\u003c/li\u003e\n\u003c/ul\u003e\n"
    },
    {
        "title" : "Podcasting",
        "date_published" : "2016-10-11T00:00:00Z",
        "date_modified" : "2016-10-11T00:00:00Z",
        "id" : "https://troz.net/post/2016/podcasting/",
        "url" : "https://troz.net/post/2016/podcasting/",
        "content_html" : "\u003cp\u003eI have recently started what I hope will be a weekly podcast with my friend and\ncolleague, \u003ca href=\"https://twitter.com/jerrydaniels\"\u003eJerry Daniels\u003c/a\u003e. Each podcast will be about 30 minutes in length.\u003c/p\u003e\n\n\u003cp\u003eWe will discuss Macs, iPhones, iPads, macOS, iOS, programming and anything\ntech-related that we find interesting. I hope you will find it entertaining and\ninformative, so please join us.\u003c/p\u003e\n\n\u003cp\u003eWe are using \u003ca href=\"https://zcast.co/zcasts\"\u003eZCast\u003c/a\u003e which has an iPhone app that makes it super easy to get\ntogether and record our chats. It doesn\u0026rsquo;t allow any post-processing, but really\nlowers the barrier to entry into the world of podcasting.\u003c/p\u003e\n\n\u003cp\u003eIf you get the \u003ca href=\"https://itunes.apple.com/app/zcast-podcast-from-your-phone!/id1041586670\"\u003eZCast app for iPhone\u003c/a\u003e, go to the ZCasters tab and search for\n\u0026ldquo;Trozware\u0026rdquo; or \u0026ldquo;Jerry Daniels\u0026rdquo; to find all our podcasts. Or use these links to\nlisten in your browser.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://zcast.co/j/ZyB8yK4z86\"\u003eThe new macOS\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://zcast.co/j/ewQe6x6E4d\"\u003eHands-on with iPhone 7\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://zcast.co/j/A9zvLAAEa3\"\u003eHands on iOS 10\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSince the first one was recorded using my name instead of my \u003ca href=\"https://twitter.com/trozware\"\u003e@trozware\u003c/a\u003e\nTwitter account, I will embed it here as it will not show up if you search for\n\u0026ldquo;Trozware\u0026rdquo;.\u003c/p\u003e\n\n\u003cp\u003e\u003cIFRAME src='https://zcast.co/embedded/ZyB8yK4z86' width='350' height='500' STYLE='width: 350; height: 500; border: none;' scrolling='auto'\u003e\u003c/IFRAME\u003e\u003c/p\u003e\n"
    },
    {
        "title" : "Dice Pass Updated",
        "date_published" : "2016-09-17T00:00:00Z",
        "date_modified" : "2016-09-17T00:00:00Z",
        "id" : "https://troz.net/post/2016/dice-pass-updated/",
        "url" : "https://troz.net/post/2016/dice-pass-updated/",
        "content_html" : "\n\n\u003cp\u003e\u003ca href=\"/dicepass/\"\u003eDice Pass 1.1\u003c/a\u003e is now available from the \u003ca href=\"https://itunes.apple.com/app/dice-pass/id997688302\"\u003eMac App Store\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"what-does-dice-pass-do\"\u003eWhat does Dice Pass do?\u003c/h2\u003e\n\n\u003cp\u003eDice Pass is a utility to app to generate random passphrases based on the\n\u003ca href=\"http://world.std.com/~reinhold/diceware.html\"\u003eDiceware\u003c/a\u003e system. Diceware uses a table of pre-defined words, each assigned\na 5 digit code number containing the digits 1 to 6. The official way to generate\na phrase is to roll 5 dice for each word you want in your passphrase and then\nconsult the words table to find the matching word.\u003c/p\u003e\n\n\u003cp\u003eThe resulting phrase uses real words or common abbreviations so it is easier to\nremember than a random collection of characters. At the same time, the random\nselection of words makes the generated passphrase much more secure as it avoids\nthe human tendency to pick words with personal meaning.\u003c/p\u003e\n\n\u003cp\u003eDice Pass allows you to select the number of words in your passphrase,\nre-generate the entire passphrase any time, re-roll a single word in your\npassphrase or set the dice rolls manually for maximum security and randomness.\u003c/p\u003e\n\n\u003ch2 id=\"what-s-new-in-version-1-1\"\u003eWhat\u0026rsquo;s New in Version 1.1:\u003c/h2\u003e\n\n\u003cp\u003eYou can now select from three word lists in the Word Lists menu:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eoriginal Diceware list\u003c/li\u003e\n\u003cli\u003eBeale list (fewer Americanisms and obscure words)\u003c/li\u003e\n\u003cli\u003eDiceware 8k list (a list of words that is a whole power of two in length)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou can also import your own word list if you prefer.\u003c/p\u003e\n\n\u003cp\u003eDice Pass 1.1 is compatible with macOS Sierra.\u003c/p\u003e\n"
    },
    {
        "title" : "How much work does Icon Builder save you?",
        "date_published" : "2016-09-17T00:00:00Z",
        "date_modified" : "2016-09-17T00:00:00Z",
        "id" : "https://troz.net/post/2016/how-much-work-does-icon-builder-save-you/",
        "url" : "https://troz.net/post/2016/how-much-work-does-icon-builder-save-you/",
        "content_html" : "\n\n\u003cp\u003e\u003ca href=\"/icon-builder/\"\u003eIcon Builder\u003c/a\u003e is a Mac app that takes a single image file and creates all\nthe different image sizes that you need to make a set of icons for your app:\nMac, iPhone, iPad, iOS Universal or Apple Watch.\u003c/p\u003e\n\n\u003cp\u003eVersion 4, released 16 September 2016 is available through the \u003ca href=\"https://itunes.apple.com/app/icon-builder/id552293482\"\u003eMac App\nStore\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"what-s-new-in-version-4\"\u003eWhat\u0026rsquo;s New in Version 4:\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdded support for iMessage apps and Sticker Pack apps.\u003c/li\u003e\n\u003cli\u003eAdded support for creating Mac .icns files.\u003c/li\u003e\n\u003cli\u003eBetter removal of alpha channel for Apple Watch icons.\u003c/li\u003e\n\u003cli\u003eClearer usage instructions in ReadMe files.\u003c/li\u003e\n\u003cli\u003eiTunes Artwork folders will no longer be over-written with the latest image\nfiles.\u003c/li\u003e\n\u003cli\u003eSupports macOS Sierra and Xcode 8\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/IconBuilder.png\" alt=\"Icon Builder\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eWhile working on version 4 and accommodating all these new icon sets (and\nwishing I had the time to re-write the app in Swift\u0026hellip;), I counted up all the\nicon files that Icon Builder makes for each app type:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003eApp Type\u003c/th\u003e\n\u003cth align=\"right\"\u003eNumber of Icons\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eMac\u003c/td\u003e\n\u003ctd align=\"right\"\u003e10\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eiPhone\u003c/td\u003e\n\u003ctd align=\"right\"\u003e8\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eiPhone supporting pre iOS 7\u003c/td\u003e\n\u003ctd align=\"right\"\u003e11\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eiPad\u003c/td\u003e\n\u003ctd align=\"right\"\u003e9\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eiPad supporting pre iOS 7\u003c/td\u003e\n\u003ctd align=\"right\"\u003e13\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eiOS Universal\u003c/td\u003e\n\u003ctd align=\"right\"\u003e14\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eiOS Universal supporting pre iOS 7\u003c/td\u003e\n\u003ctd align=\"right\"\u003e20\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eApple Watch (also requires iOS app icons)\u003c/td\u003e\n\u003ctd align=\"right\"\u003e8\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eSticker Pack app\u003c/td\u003e\n\u003ctd align=\"right\"\u003e11\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eiMessages app\u003c/td\u003e\n\u003ctd align=\"right\"\u003e14\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eiMessages app Messages extension\u003c/td\u003e\n\u003ctd align=\"right\"\u003e9\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eSo as you can see, Icon Builder is doing a lot of work for you. It also names\nall the icon files using the expected format, stores them in an concept folder,\ncreates the JSON file that identifies them all to Xcode and optionally installs\nthem in your Xcode project automatically. That’s a lot of value for dragging in\nan icon and clicking a button!\u003c/p\u003e\n\n\u003cp\u003eSo next time your designer sends you the twentieth tweaked icon for the day,\ndon\u0026rsquo;t get mad. Just drop it into Icon Builder and sit back while it does all the\nwork. (No need to tell the designer that\u0026hellip;)\u003c/p\u003e\n"
    },
    {
        "title" : "Retiring old apps",
        "date_published" : "2016-09-15T00:00:00Z",
        "date_modified" : "2016-09-15T00:00:00Z",
        "id" : "https://troz.net/post/2016/retiring-old-apps/",
        "url" : "https://troz.net/post/2016/retiring-old-apps/",
        "content_html" : "\u003cp\u003eWith the release of iOS 10 and the need to update iOS apps to suit, I have\ndecided it is time to retire some of my lesser-performing apps as it is not\nworth the effort required to maintain them.\u003c/p\u003e\n\n\u003cp\u003eAt the moment, the following iOS apps are no longer available:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA Knight\u0026rsquo;s Move\u003c/li\u003e\n\u003cli\u003eDice Pass\u003c/li\u003e\n\u003cli\u003ePic-a-POD\u003c/li\u003e\n\u003cli\u003eQuick Score - Tennis\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFor the first three listed there, the Mac versions are still available:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://itunes.apple.com/app/a-knights-move/id533321133\"\u003eA Knight\u0026rsquo;s Move for Mac\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://itunes.apple.com/app/dice-pass/id997688302\"\u003eDice Pass for Mac\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://itunes.apple.com/app/pic-a-pod/id477909802\"\u003ePic-a-POD for Mac\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIf you bought any of these apps and would like a promo code for the Mac version,\nsend me a screen shot of the app running on your iPhone or iPad and I will send\nyou a code.\u003c/p\u003e\n"
    },
    {
        "title" : "Man Reader updated to 1.6",
        "date_published" : "2016-07-16T00:00:00Z",
        "date_modified" : "2016-07-16T00:00:00Z",
        "id" : "https://troz.net/post/2016/man-reader-updated-to-1.6/",
        "url" : "https://troz.net/post/2016/man-reader-updated-to-1.6/",
        "content_html" : "\n\n\u003cp\u003eMan Reader has been updated to version 1.6 with the permissions needed for\nfinding all available man pages and a fix for search terms being over-written\nafter a background update.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/manreader/\"\u003eMan Reader 1.6\u003c/a\u003e is now available through the \u003ca href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\"\u003eMac App Store\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"change-log\"\u003eChange Log:\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003ePermissions fix when searching for available man pages.\u003c/li\u003e\n\u003cli\u003eFixed error with new search term being over-written.\u003c/li\u003e\n\u003cli\u003eSand-boxed version now works just as well as the non-sand-boxed so please\nswitch back to this version.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis version fixes a problem with sand-boxing permissions potentially not\nallowing access to all the installed man pages on your system. This should now\nbe fixed but if you discover any man pages that are available through Terminal\nbut not through Man Read, please \u003ca href=\"mailto:sarah@troz.net?subject=Man%20Reader%20not%20detecting%20some%20man%20pages\"\u003eemail me the details\u003c/a\u003e and help me make Man\nReader better.\u003c/p\u003e\n\n\u003cp\u003eThere was also an issue with a previous search being restored after a background\nupdate, even if a new search term had been entered. This has been fixed.\u003c/p\u003e\n\n\u003cp\u003eIf you previously had downloaded the Man Reader (no SB) version of the app from\nthis site, please revert to the App Store version which you would have needed to\nhave bought in order to use the downloaded app. If you bought the app from\nPaddle, \u003ca href=\"mailto:sarah@troz.net?subject=Man%20Reader%20transfer%20to%20App%20Store\"\u003econtact me\u003c/a\u003e and I will transfer you to the App Store version.\nNeither of these other versions will be supported or updated any more.\u003c/p\u003e\n"
    },
    {
        "title" : "Dice Pass Mac Update",
        "date_published" : "2016-07-03T00:00:00Z",
        "date_modified" : "2016-07-03T00:00:00Z",
        "id" : "https://troz.net/post/2016/dice-pass-mac-update/",
        "url" : "https://troz.net/post/2016/dice-pass-mac-update/",
        "content_html" : "\u003cp\u003eI recently got an email from someone who had purchased \u003ca href=\"/dicepass/\"\u003eDice Pass\u003c/a\u003e for Mac\nfrom the \u003ca href=\"https://itunes.apple.com/app/dice-pass/id997688302\"\u003eMac App Store\u003c/a\u003e but had been unable to get it to run. This person\nwas using OS X 10.9.3.\u003c/p\u003e\n\n\u003cp\u003eI checked the App Store specifications and it showed that 10.9 was the minimum\nsystem requirement, so it should have worked. But going back to my Xcode\nproject, I found that it was set to a minimum of OS X 10.10.\u003c/p\u003e\n\n\u003cp\u003eI tried to re-compile for OS X 10.9 but this failed as the app uses several\nfeatures that are not available prior to 10.10.\u003c/p\u003e\n\n\u003cp\u003eThe minimum system version as displayed in the App Store is supposedly deduced\nautomatically by the App Store servers from the app\u0026rsquo;s binary. Somehow this was\nincorrect in the App Store, so some people may have bought that app and found\nthat it did not work despite them having what was listed as a compatible system.\u003c/p\u003e\n\n\u003cp\u003eIf you bought Dice Pass for OS X 10.9 and are unable to run it, I have two\npossible solutions for you:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eUpgrade your operating system to at least 10.10.\u003c/li\u003e\n\u003cli\u003eAsk Apple for a refund since it was their error that caused you to buy an app\nthat you cannot run.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eI have updated the app in the App Store changing nothing but the version number\nand it is now showing the correct minimum system requirement. My apologies if\nyou have been inconvenienced by this error.\u003c/p\u003e\n"
    },
    {
        "title" : "Learning Swift - Sets",
        "date_published" : "2016-05-28T00:00:00Z",
        "date_modified" : "2016-05-28T00:00:00Z",
        "id" : "https://troz.net/post/2016/learning-swift-sets/",
        "url" : "https://troz.net/post/2016/learning-swift-sets/",
        "content_html" : "\n\n\u003cp\u003eSets are the forgotten collection type in many languages, including Swift. I\nthink most developers use Arrays without really considering the advantages of\nusing a Set but they have some amazingly useful features that should make them a\npart of any progammer\u0026rsquo;s toolkit.\u003c/p\u003e\n\n\u003cp\u003eIf you want to follow along with a playground, you can download it \u003ca href=\"https://github.com/trozware/sets\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"what-is-a-set\"\u003eWhat is a Set?\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eA Set is an un-ordered collection of unique items.\u003c/strong\u003e That\u0026rsquo;s it - nothing more\nthan that. So it is very similar to an Array, but it is not indexed like an\nArray and it cannot contain more than one of each entry.\u003c/p\u003e\n\n\u003ch2 id=\"creating-a-set\"\u003eCreating a Set\u003c/h2\u003e\n\n\u003cp\u003eCreating a Set is as easy as creating an Array:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003evar myArray = [\u0026quot;dog\u0026quot;, \u0026quot;cat\u0026quot;, \u0026quot;hamster\u0026quot;, \u0026quot;dog\u0026quot;]\nvar mySet: Set = [\u0026quot;dog\u0026quot;, \u0026quot;cat\u0026quot;, \u0026quot;hamster\u0026quot;, \u0026quot;dog\u0026quot;]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIf you are running these commands in a playground, notice that the differences\nbetween the 2 results:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003e[\u0026quot;dog\u0026quot;, \u0026quot;cat\u0026quot;, \u0026quot;hamster\u0026quot;, \u0026quot;dog\u0026quot;]    // myArray\n{\u0026quot;hamster\u0026quot;, \u0026quot;cat\u0026quot;, \u0026quot;dog\u0026quot;}           // mySet\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003col\u003e\n\u003cli\u003eThe Array is shown wrapped in square brackets, the Set is shown wrapped in\ncurly braces. This is just a visual clue and doesn\u0026rsquo;t really mean anything.\nYou cannot initialize a set using curly braces.\u003c/li\u003e\n\u003cli\u003eAll the supplied elements of the Array are listed, but the Set has removed\nthe duplicate \u0026ldquo;dog\u0026rdquo; element. This did not cause an error or warning, it just\nhappened quietly.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWhen initializing a Set, you must add \u003ccode\u003e: Set\u003c/code\u003e to distinguish it from an array\ninitialization. In the example above, I did not specify the data type of the\nelements in the Set as the Swift compiler was able to infer this from the\ncontents. But if initializing an empty array, the data type must be specified.\nTo check how to do this, I option-clicked on \u003ccode\u003emySet\u003c/code\u003e to see what the Swift\ncompiler thought it was.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/set_types.png\" alt=\"Sets\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eSo mySet is actually \u003ccode\u003eSet\u0026lt;String\u0026gt;\u003c/code\u003e. This means that to create an empty Set, you\nneed to use something like this:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003evar emptySetOfStrings: Set\u0026lt;String\u0026gt; = [] var\nemptySetOfInts: Set\u0026lt;Int\u0026gt; = []\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"adding-and-removing-elements\"\u003eAdding and removing elements\u003c/h2\u003e\n\n\u003cp\u003eIf you have been using an Array to store unique values, then you have probably\nwritten code like this:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003eif !myArray.contains(\u0026quot;cat\u0026quot;) {\n  myArray.append(\u0026quot;cat\u0026quot;)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWith Sets, you don\u0026rsquo;t have to care. Just use \u003ccode\u003einsert()\u003c/code\u003e and let the Set work out\nwhether to add the item or not.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003emySet.insert(\u0026quot;goldfish\u0026quot;)\n// goldfish added: {\u0026quot;hamster\u0026quot;, \u0026quot;cat\u0026quot;, \u0026quot;dog\u0026quot;, \u0026quot;goldfish\u0026quot;}\nmySet.insert(\u0026quot;dog\u0026quot;)\n// dog already there: {\u0026quot;hamster\u0026quot;, \u0026quot;cat\u0026quot;, \u0026quot;dog\u0026quot;, \u0026quot;goldfish\u0026quot;}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eRemoving elements is also easier than in Arrays. For an Array, you first have to\nfind the index of the element and remove it by index:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003e// myArray.remove(\u0026quot;hamster\u0026quot;) // will not compile\nif let index = myArray.index(of: \u0026quot;hamster\u0026quot;) {\n  myArray.remove(at: index)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eBut in a Set, you can remove any element easily and trying to remove an element\nthat doesn\u0026rsquo;t exist will fail without an error.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003emySet.remove(\u0026quot;hamster\u0026quot;)   // returns \u0026quot;hamster\u0026quot;\nmySet.remove(\u0026quot;canary\u0026quot;)    // returns nil\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"converting-between-sets-and-arrays\"\u003eConverting between Sets and Arrays\u003c/h2\u003e\n\n\u003cp\u003eSometimes you need to be able to switch between the two. My most recent example\nwas when I wanted to store data from a Set in a plist. Sets are not property\nlist types but Arrays are, so I converted the Set to an Array before storing it\nin the plist. When reading the data in from the plist, I converted it back to a\nSet.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003elet myArrayAsSet = Set(myArray)\nlet mySetAsArray = Array(mySet)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eOne useful side-effect of these easy conversions is the ability to \u0026lsquo;unique\u0026rsquo; an\nArray in a single line. This may be inefficient for large arrays, but works very\nwell for small ones. Just be careful if the order of the elements is important\nas you cannot guarantee the order of elements in a Set.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003elet myArrayUniqued = Array(Set(myArray))\n// [\u0026quot;cat\u0026quot;, \u0026quot;dog\u0026quot;]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2 id=\"iterating-over-elements-in-a-set\"\u003eIterating over elements in a Set\u003c/h2\u003e\n\n\u003cp\u003eAs with an Array, you can use a \u003ccode\u003efor element in set\u003c/code\u003e structure, or you can use\n\u003ccode\u003eenumerated()\u003c/code\u003e. But you cannot subscript a Set.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003efor animal in mySet {\n  print(animal)\n}\n\nfor (index, animal) in mySet.enumerated() {\n  print(\u0026quot;\\(index) = \\(animal)\u0026quot;)\n}\n\n// will not compile\n// for index in 0 ..\u0026lt; mySet.count {\n//   print(\u0026quot;\\(index) = \\(mySet[index])\u0026quot;)\n// }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"where-sets-get-really-interesting\"\u003eWhere Sets get really interesting\u003c/h2\u003e\n\n\u003cp\u003eRemember in school when you learnt about Venn diagrams with pretty interlocking\ncircles? Sets can do the same things, although you will have to do your own\npretty drawings :-)\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003elet set1: Set = [\u0026quot;dog\u0026quot;, \u0026quot;cat\u0026quot;, \u0026quot;pig\u0026quot;]\nlet set2: Set = [\u0026quot;cow\u0026quot;, \u0026quot;horse\u0026quot;, \u0026quot;pig\u0026quot;]\n\nlet intersect = set1.intersection(set2)\n// {\u0026quot;pig\u0026quot;}\n\nlet subtract = set1.subtracting(set2)\n// {\u0026quot;cat\u0026quot;, \u0026quot;dog\u0026quot;}\n\nlet union = set1.union(set2)\n// {\u0026quot;pig\u0026quot;, \u0026quot;cat\u0026quot;, \u0026quot;dog\u0026quot;, \u0026quot;cow\u0026quot; \u0026quot;horse\u0026quot;}\n\nlet xor = set1.symmetricDifference(set2)\n// {\u0026quot;cat\u0026quot;, \u0026quot;dog\u0026quot;, \u0026quot;cow\u0026quot;, \u0026quot;horse\u0026quot;}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIn the code example above, we have two Sets of animals, with one animal in\ncommon.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eintersection()\u003c/code\u003e lists the elements in common.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esubtracting()\u003c/code\u003e lists the elements in one Set after removing all elements that\nare in the other.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eunion()\u003c/code\u003e joins all the elements without duplicates.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esymmetricDifference()\u003c/code\u003e lists the elements that are in one or other of the\nSets but not in both. (Swift 3 renamed this function from \u003ccode\u003eexclusiveOr()\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHere is my best attempt at a pretty drawing to show how these go together:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/sets_1.png\" alt=\"Sets\" /\u003e\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eThe next fun trick is working out sub-sets, super-sets and disjoint sets.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003elet set1: Set = [\u0026quot;dog\u0026quot;, \u0026quot;cat\u0026quot;, \u0026quot;pig\u0026quot;]\nlet set2: Set = [\u0026quot;cow\u0026quot;, \u0026quot;horse\u0026quot;, \u0026quot;pig\u0026quot;]\n\nlet smallSet: Set = [\u0026quot;pig\u0026quot;, \u0026quot;cow\u0026quot;]\n\nsmallSet.isSubset(of: set1)   // false\nsmallSet.isSubset(of: set2)   // true\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003ccode\u003esmallSet\u003c/code\u003e is \u003cstrong\u003enot\u003c/strong\u003e a subset of \u003ccode\u003eset1\u003c/code\u003e because it contains an element that is\nnot in \u003ccode\u003eset1\u003c/code\u003e. \u003ccode\u003esmallSet\u003c/code\u003e \u003cstrong\u003eis\u003c/strong\u003e a subset of \u003ccode\u003eset2\u003c/code\u003e because every element in\n\u003ccode\u003esmallSet\u003c/code\u003e is also in \u003ccode\u003eset2\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/sets_2.png\" alt=\"Sets\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eIf you want to get technical, a Set should not be considered a subset of an\nidentical Set. The default \u003ccode\u003eisSubset(of:)\u003c/code\u003e allows this, but you can use\n\u003ccode\u003eisStrictSubset(of:)\u003c/code\u003e if you prefer.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003eset1.isSubset(of: set1)         // true\nset1.isStrictSubset(of: set1)   // false\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eSuperset works just the same but in reverse so the diagram above explains it\ntoo:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003elet set1: Set = [\u0026quot;dog\u0026quot;, \u0026quot;cat\u0026quot;, \u0026quot;pig\u0026quot;]\nlet set2: Set = [\u0026quot;cow\u0026quot;, \u0026quot;horse\u0026quot;, \u0026quot;pig\u0026quot;]\n\nlet smallSet: Set = [\u0026quot;pig\u0026quot;, \u0026quot;cow\u0026quot;]\n\nset1.isSuperset(of: smallSet)       // false\nset2.isSuperset(of: smallSet)       // true\n\nset1.isSuperset(of: set1)           // true\nset1.isStrictSuperset(of: set1)     // false\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003ccode\u003eset1\u003c/code\u003e is \u003cstrong\u003enot\u003c/strong\u003e a superset of \u003ccode\u003esmallSet\u003c/code\u003e because it does not contain every\nelement in \u003ccode\u003esmallSet\u003c/code\u003e. \u003ccode\u003eset2\u003c/code\u003e \u003cstrong\u003eis\u003c/strong\u003e a superset of \u003ccode\u003esmallSet\u003c/code\u003e because every\nelement in \u003ccode\u003esmallSet\u003c/code\u003e is also in \u003ccode\u003eset2\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eisSuperset(of:)\u003c/code\u003e and \u003ccode\u003eisStrictSuperset(of:)\u003c/code\u003e functions allow or reject\nidentical sets.\u003c/p\u003e\n\n\u003cp\u003eThe final comparison tool that might be useful is \u003ccode\u003eisDisjoint(with:)\u003c/code\u003e which\nreturns true only if the two Sets have no elements in common i.e. if there is no\noverlap in the circles.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003elet set1: Set = [\u0026quot;dog\u0026quot;, \u0026quot;cat\u0026quot;, \u0026quot;pig\u0026quot;]\nlet set2: Set = [\u0026quot;cow\u0026quot;, \u0026quot;horse\u0026quot;, \u0026quot;pig\u0026quot;]\n\nlet otherSet: Set = [\u0026quot;duck\u0026quot;, \u0026quot;chicken\u0026quot;]\n\nset1.isDisjoint(with: set2)       // false\nset1.isDisjoint(with: otherSet)   // true\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u0026ldquo;pig\u0026rdquo; occurs in both \u003ccode\u003eset1\u003c/code\u003e and \u003ccode\u003eset2\u003c/code\u003e so they are \u003cstrong\u003enot\u003c/strong\u003e disjoint. \u003ccode\u003eotherSet\u003c/code\u003e\nand \u003ccode\u003eset1\u003c/code\u003e have no matching entries so they \u003cstrong\u003eare\u003c/strong\u003e disjoint.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"when-should-you-use-a-set\"\u003eWhen should you use a Set?\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eIf you want the elements to be unique.\u003c/li\u003e\n\u003cli\u003eIf you want easy methods of comparing the contents of different collections.\u003c/li\u003e\n\u003cli\u003eIf you want to be able to remove elements easily.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"when-should-you-not-use-a-set\"\u003eWhen should you not use a Set?\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eIf you need the collection to be able to hold multiples of an element.\u003c/li\u003e\n\u003cli\u003eIf the order of the collection is important.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eFor more details on Sets, check out \u003ca href=\"http://swiftdoc.org/v2.2/type/Set/\"\u003eSwiftDoc.org\u003c/a\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "19th Hole Golf Scorer 3.1",
        "date_published" : "2016-05-07T00:00:00Z",
        "date_modified" : "2016-05-07T00:00:00Z",
        "id" : "https://troz.net/post/2016/19th-hole-golf-scorer-3.1/",
        "url" : "https://troz.net/post/2016/19th-hole-golf-scorer-3.1/",
        "content_html" : "\u003cp\u003eOne of the problems with using 19th Hole on the Apple Watch is making the app\nshow every time you raise your wrist. My solution to this was to go into\nSettings (either on my iPhone through the Watch app, or directly on the watch)\nand change it to \u0026ldquo;Resume Last Activity\u0026rdquo; on wrist raise. This worked fine but as\nI usually prefer the watch face to show on wrist raise, I had to keep setting\nand re-setting this which was a pain.\u003c/p\u003e\n\n\u003cp\u003eBut last week I noticed the fine print when changing this setting. In this\nscreen shot from the Watch app on my iPhone, you can see that \u0026ldquo;session-based\napps\u0026rdquo; and \u0026ldquo;some third-party workout apps\u0026rdquo; will over-ride the \u0026ldquo;Show Watch Face\u0026rdquo;\nsetting.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/WakeScreen.jpg\" alt=\"Wrist raise settings\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eI started to research this and found that if an app starts a \u0026ldquo;workout session\u0026rdquo;,\nthen it will become the active app until the session is ended or some other app\nstarts a session. So I got to work and added a workout session to the 19th\nHole\u0026rsquo;s Apple Watch app.\u003c/p\u003e\n\n\u003cp\u003eWhen you start scoring a round on the Apple Watch, you will see this dialog\nasking if you would like to start a workout:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/Watch-workout.png\" alt=\"Start workout dialog\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThe workout will be stopped automatically when you have scored the last hole.\nYou can also use a force-press on the scoring screen to turn the workout off or\non at any time.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/Watch_end_workout.png\" alt=\"Stop workout\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis should make the app much more usable as an Apple Watch app, so happy\ngolfing :-)\u003c/p\u003e\n"
    },
    {
        "title" : "My Year With Apple Watch",
        "date_published" : "2016-04-28T00:00:00Z",
        "date_modified" : "2016-04-28T00:00:00Z",
        "id" : "https://troz.net/post/2016/my-year-with-apple-watch/",
        "url" : "https://troz.net/post/2016/my-year-with-apple-watch/",
        "content_html" : "\n\n\u003cp\u003eAs the Apple Watch hits its first birthday, there seems to be in increasing\nnumber of bloggers complaining about it. One (which I refuse to link to) titled\n\u0026ldquo;My Year of Hell With the Apple Watch\u0026rdquo;. I think the article has since been\nre-published with a slightly less inflammatory title, but really! Did somebody\nrivet the watch to his wrist? If it was so awful, why not just stop using it?\u003c/p\u003e\n\n\u003cp\u003eI am a watch nerd and have always loved watches and having one on me. I liked\nwatches with features and even had a calculator watch at one point although as a\nwoman with skinny wrists, I found it constantly annoying that watch makers put\nall the gadgets into man-sized watches so I was left with the choice of no\nfeatures or a watch that looked stupidly large on my wrist.\u003c/p\u003e\n\n\u003cp\u003eA few years ago I stopped wearing a watch. I can\u0026rsquo;t remember now why I did it -\nmaybe my watch strap broke and it wasn\u0026rsquo;t important enough to get a new one. I\nalways had my iPhone to give me the time.\u003c/p\u003e\n\n\u003cp\u003eBut I ordered three Apple Watches as soon as they were available and myself,\nhusband and eldest son have been using them ever since.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"here-are-what-i-consider-to-be-the-best-features-of-the-apple-watch\"\u003eHere are what I consider to be the best features of the Apple Watch:\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eAccuracy\u003c/strong\u003e: It is a fantastically accurate time-piece. Not enough people\ngive this credit, but we have always been used to clocks and watches that were\ninherently inaccurate. Having a device on my wrist that I \u003cstrong\u003eknow\u003c/strong\u003e to be\nperfectly accurate is an amazing thing.\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eNotifications\u003c/strong\u003e: this takes a bit of work to get right and with every new\napp, you need to assess whether to have its notifications appear on your\nwrist. But the wonderful thing is knowing that you haven\u0026rsquo;t missed anything and\nbeing able to glance at your wrist when a notification arrives and tell -\nunobtrusively - whether this is something that needs immediate attention. And\nthe ability to respond instantly to messages and emails with just a couple of\ntaps is amazingly useful.\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eCustomisable watch faces\u003c/strong\u003e: depending on what I am doing, I need quick\naccess to different pieces of information. When travelling, I can set up a\nwatch face with multiple time zones. When working, I need a timer. When on\nholiday, I prefer one of the more relaxing but less detailed watch faces.\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eActivity\u003c/strong\u003e: I am not the world\u0026rsquo;s most active person so I find the three\nrings to be a really good motivator. In fact I just had to stop typing and run\nup \u0026amp; down the stairs to get another notch to the blue ring. The goals are not\nout of my reach, so I like trying to fill in the rings every day.\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eVoice commands\u003c/strong\u003e: being able to send a text message completely by voice when\ndriving or when my hands are busy is fantastic. Starting a timer, doing unit\nconversions and navigating are things I do frequently by voice.\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eExcellent battery life\u003c/strong\u003e: I started off having the battery life complication\nalways visible, but it very quickly became apparent that this was unnecessary.\nRight now I have been wearing the watch for about 11 hours and the battery is\nat 74%. And charging is so fast that if I did run it down, a 30 minute charge\nwould get me through most of a day.\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eThe Milanese Loop\u003c/strong\u003e: best watch band ever.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThere are other good features, but I think those are my favourites.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"so-what-don-t-i-like\"\u003eSo what don\u0026rsquo;t I like?\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eThird-party apps are still a problem\u003c/strong\u003e. I know. I have published three\nmyself and sometimes they just doesn\u0026rsquo;t happen. However this appears to vary a\nlot. Some people say they can never get apps to run, even Apple\u0026rsquo;s apps. Others\nsay they work but with a long delay. My watch seems to be better than the\naverage but it is still an issue.\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eSketches don\u0026rsquo;t always get through or can take ages\u003c/strong\u003e. We thought it would be\na lot of fun to send each other little sketches and so it is, despite our\ntotal lack of any artistic skills. But it loses a bit of impact when you have\nto send a message 20 minutes later asking if the sketch has arrived.\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eThe exercise tracking seems to be a bit erratic\u003c/strong\u003e. If my husband and I go\nfor a walk together, he comes back with 25 minutes of exercise and I only have\n7 minutes. Am I not going fast enough? Are my arms not swinging enough? If it\nis very hot and my wrist gets sweaty, I seem to get better numbers - is this\nbecause my heart is beating faster or the capillaries closer to the surface\nhave expanded? Or is the watch picking up a better signal that way? Either\nway, I still like the activity circles, but the green ring frustrates me a\nbit.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"and-what-would-i-like-to-see-in-watch-2-watchos-3\"\u003eAnd what would I like to see in Watch 2 / watchOS 3?\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eSome sort of always-on display of the time.\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eA speaker to allow Siri to talk back to me and to play audio.\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eFaceTime audio calls.\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eBetter support for third-party apps - perhaps open up some private APIs?\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eAllow developers to create watch faces or apps that told the time.\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eAllow developers to say that an app should stay as the frontmost app once\nopened.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"will-i-buy-watch-2\"\u003eWill I buy Watch 2?\u003c/h2\u003e\n\n\u003cp\u003eAt this stage I would say no. We bought the bottom-of-the-line Sport models\nbecause with version 1.0 of anything, you don\u0026rsquo;t want to spend so much that\nupgrading is ruled out. However these watches are still going great and a lot of\nthe improvements I am looking for will be in software not hardware.\u003c/p\u003e\n\n\u003cp\u003eBut 14 months ago, I was waiting for Apple to announce the iWatch as we all\nthought it would be called, and saying that I didn\u0026rsquo;t think I would get one. The\nfeature list convinced me and I have been delighted with it. So if Watch 2 comes\nup with some killer feature that matters to me, then I might have to\nre-consider\u0026hellip;\u003c/p\u003e\n"
    },
    {
        "title" : "How To Confuse TestFlight",
        "date_published" : "2016-04-24T00:00:00Z",
        "date_modified" : "2016-04-24T00:00:00Z",
        "id" : "https://troz.net/post/2016/how-to-confuse-testflight/",
        "url" : "https://troz.net/post/2016/how-to-confuse-testflight/",
        "content_html" : "\u003cp\u003eI ran into an unusual problem when testing my latest app: \u0026ldquo;\u003ca href=\"/what-is-my-speed/\"\u003eWhat Is My\nSpeed?\u003c/a\u003e\u0026rdquo;. It is now available from the \u003ca href=\"https://itunes.apple.com/app/what-is-my-speed/id1091394524\"\u003eiTunes App Store\u003c/a\u003e, but getting\nthere was a struggle.\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"#tldr\"\u003eTL;DR\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eXcode is terrible at renaming projects, so it is a really good idea to have\nworked out your app\u0026rsquo;s name before starting. I would even recommend creating an\napp ID in your Apple Developer account and registering the app name in iTunes\nConnect. Only once you get to iTunes Connect will the name be checked for\nuniqueness. Searching the App Stores is not enough as it does not cover\nun-released apps or apps that are not available in your country.\u003c/p\u003e\n\n\u003cp\u003eSo I set up my app. I was hoping for \u0026ldquo;What\u0026rsquo;s My Speed?\u0026rdquo; but was happy with \u0026ldquo;What\nIs My Speed?\u0026ldquo;.\u003c/p\u003e\n\n\u003cp\u003eNext step was to create the project in Xcode which I did using the app name and\nmanually entering the bundle identifier that I had registered at Apple\nDeveloper. Xcode accepted the name without any warnings and created the default\ntargets using that name.\u003c/p\u003e\n\n\u003cp\u003eIn the default unit testing file, the module was defined like this:\u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e @testable \u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWhat\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eIs_My_Speed\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003ewhich made me think that Xcode was quite happy to have parsed the app name as\nrequired to replace any unwanted characters to suit.\u003c/p\u003e\n\n\u003cp\u003eThe app was built, passed all unit tests, profiled, analyzed, tested on real\ndevices as well as the simulators and uploaded to TestFlight.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eBARRRPPPP!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/TestFlight_error.png\" alt=\"This app cannot be installed\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eWhat?\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003e(I forgot to take a screenshot but found a similar one online. Thanks \u003ca href=\"https://www.simpletechs.net/apps/easy-fix-for-testflight-problem-after-restoring-from-backup/\"\u003eSimple\nTechs\u003c/a\u003e)\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eI have had experience with TestFlight\u0026rsquo;s oddities in the past, so I incremented\nthe build number and tried again, thinking that maybe there had been a\nprocessing issue. Same result.\u003c/p\u003e\n\n\u003cp\u003eThis started a very frustrating 24 hours as I ran through all the possibilities\nI could think of or find suggested on the net. Due to disastrous Australian\ninternet speeds, especially uploads, each attempt took from 40 - 120 minutes.\nAbout 5 minutes to implement the next idea, 25 minutes upload time, then the\nrest waiting for Apple to process the app so I could try again.\u003c/p\u003e\n\n\u003cp\u003eHere is what I tried:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eUploaded a fresh build.\u003c/li\u003e\n\u003cli\u003eRemoved Bitcode.\u003c/li\u003e\n\u003cli\u003eFixed the code signing identity which was set to iOS Developer for some\nreason.\u003c/li\u003e\n\u003cli\u003eManually specified the provisioning profiles for all three components (iPhone\napp, WatchKit app, WatchKit Extension).\u003c/li\u003e\n\u003cli\u003eManually selected the code signing identity for the provisioning profiles.\u003c/li\u003e\n\u003cli\u003eUploaded using Application Loader instead of Xcode.\u003c/li\u003e\n\u003cli\u003eRemoved third-party framework.\u003c/li\u003e\n\u003cli\u003eRemoved WatchKit app.\u003c/li\u003e\n\u003cli\u003eRevoked my distribution profile, re-created it and updated all provisioning\nprofiles.\u003c/li\u003e\n\u003cli\u003eCreated a completely blank project with same app name and bundle identifier.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eAs you can see from this list, I thought it was a code signing or profile error.\nUsing \u003ca href=\"https://itunes.apple.com/app/apple-configurator-2/id1037126344\"\u003eApple Configurator 2\u003c/a\u003e (the modern version of iPhone Configuration\nUtility), I was able to get the logs from my iPhone and entries like the\nfollowing seemed to confirm this:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003eError Domain=LaunchServicesError Code=0 \u0026quot;(null)\u0026quot; UserInfo={Error=ApplicationVerificationFailed, ErrorDetail=-402620393, ErrorDescription=Failed to verify code signature of /private/var/installd/Library/Caches/com.apple.mobile.\ninstalld.staging/temp.2LWJ2h/extracted/Payload/What Is My Speed?.app : 0xe8008017 (A signed resource has been added, modified, or deleted.)}```\n\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eBut when I got to the stage of a completely blank app still failing, I suddenly\nthought of the question mark. With the benefit of my preamble to this post, you\nall probably got there long before I did, but I got there in the end.\u003c/p\u003e\n\n\u003cp\u003eThe solution was to remove the question mark from the names of the targets in\nXcode. I had to fix up the module names in my unit testing files, but apart from\nthat, there were no changes. After this I was able to upload the complete app to\nTestFlight and install it on my iPhone.\u003c/p\u003e\n\n\u003cp\u003eIt is possible that it was the Product Names that were the issue, rather than\nthe target name as in Build Settings, Product Name is set to be \u003ccode\u003e$(TARGET_NAME)\u003c/code\u003e\nby default but I didn\u0026rsquo;t test that. Maybe next time\u0026hellip;\u003c/p\u003e\n\n\u003cp\u003e\u003ca name=\"tldr\"\u003eTL;DR\u003c/a\u003e Do not put any unusual characters in your target names.\nAlphanumerics and spaces are OK, but I am not sure about anything else.\u003c/p\u003e"
    },
    {
        "title" : "What Is My Speed?",
        "date_published" : "2016-04-17T00:00:00Z",
        "date_modified" : "2016-04-17T00:00:00Z",
        "id" : "https://troz.net/what-is-my-speed/",
        "url" : "https://troz.net/what-is-my-speed/",
        "content_html" : "\u003cstyle\u003e\nimg {\n    display: block;\n    margin-left: auto;\n    margin-right: auto }\n\u003c/style\u003e\n\n\u003cp\u003e\u0026ldquo;What Is My Speed?\u0026rdquo; is available now from the \u003ca href=\"https://itunes.apple.com/app/what-is-my-speed/id1091394524\"\u003eiTunes App Store\u003c/a\u003e for iPhone\nand Apple Watch.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/speed_1.png\" alt=\"What Is My Speed? - iPhone\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eIf you read my recent blog post on \u003ca href=\"/post/2016-04-07-road-trip-apps/\"\u003eRoad Trip Apps\u003c/a\u003e you will have realised\nthat I was working on an app to fill a gap that I discovered in our road trip\napp arsenal. So here it is: \u0026ldquo;What Is My Speed?\u0026rdquo; for iPhone \u0026amp; Apple Watch.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eTrack your speed on your iPhone or Apple Watch while driving, bicycling, running\nor walking. See your course and altitude at all times.\u003c/p\u003e\n\n\u003cp\u003eOptionally set a speed limit and get audible warnings on your iPhone when you\nexceed it. Reduce the speed limit to zero or extend it over the maximum to turn\noff speed limit warnings.\u003c/p\u003e\n\n\u003cp\u003eDesigned for easy viewing in all light conditions and with very accessible\nswiping to change the speed limit quickly and easily.\u003c/p\u003e\n\n\u003cp\u003eIf you want more detailed information, tap the info button to see a complete\nlist of available data about your current location. \u003cem\u003eAltitude and floor data may\nnot always be available but will be displayed whenever possible.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/speed_2.png\" alt=\"What Is My Speed? details - iPhone\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eYour current iPhone settings are used to set the default units for speed and\naltitude, but these are easily changed after tapping the info button.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eTo monitor your speed on your Apple Watch, you need to start the app on your\niPhone, but then it does not have to remain in the foreground. However speed\nlimit warnings will only be given when the iPhone app is active.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/speed_watch_1.png\" alt=\"What Is My Speed? Apple Watch\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eTo adjust the speed limit, swipe from side to side. The speed limit indicator\nwill expand for easier viewing and the speed limit will increase or decrease.\nTap again to shrink the speed limit indicator or leave it for a few seconds and\nit will shrink automatically. You can also swipe up or down with two fingers to\nadjust the screen brightness for maximum visibility.\u003c/p\u003e\n\n\u003cp\u003eTap the \u0026ldquo;?\u0026rdquo; button on the main screen to be reminded of the available swipes.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/speed_3.png\" alt=\"What Is My Speed? adjust speed limit - iPhone\" /\u003e\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003e\u003cstrong\u003eLocation permissions:\u003c/strong\u003e On startup, the app will request permission to access\nyour location. This is how the speed, course and altitude data is gathered so is\nessential for the app to operate. If you have an Apple Watch with the app\ninstalled, the app will continue to track your speed while in the background so\nthat the data can be sent to your watch. If you do not have an Apple Watch or\nthe app is not installed on the watch, your speed will only ever be tracked when\nthe app is the current foreground app.\u003c/p\u003e\n"
    },
    {
        "title" : "Road Trip Apps",
        "date_published" : "2016-04-07T00:00:00Z",
        "date_modified" : "2016-04-07T00:00:00Z",
        "id" : "https://troz.net/post/2016/road-trip-apps/",
        "url" : "https://troz.net/post/2016/road-trip-apps/",
        "content_html" : "\n\n\u003cp\u003eOver the past few months, we have done two long road trips: one approximately\n4,000 km and the other about 1,800 km. These gave us the chance to try out\nvarious apps for navigation and travel information. We live in Queensland,\nAustralia and some of these comments may be country-specific.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"navigation\"\u003eNavigation\u003c/h2\u003e\n\n\u003cp\u003eThe basic navigation came down to three apps:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.apple.com/ios/maps/\"\u003eApple Maps\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://itunes.apple.com/app/google-maps-real-time-navigation/id585027354\"\u003eGoogle Maps\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://itunes.apple.com/au/app/metroview-gps-navigation/id370753892\"\u003eMetroview\u003c/a\u003e (Australia and New Zealand only)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eEach has their strengths and weaknesses:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eApple Maps is by far the most beautiful and easy to read. It integrates\nperfectly with Contacts (as you would expect). Turn-by-turn directions were\nmostly excellent. The biggest downside is that it does not allow you to\nspecify a route avoiding tolls.\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eGoogle Maps allows you to plot a route avoiding tolls\u0026hellip; if you can find the\nsetting. Its traffic reporting is by far the best and it would offer suggested\nchanges of routes during the trip to get around traffic. The interface is\nconfusing at times. Turn-by-turn directions were good, although I would have\npreferred an Australian voice option.\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eMetroview has all the maps downloaded which saves on data connection costs and\nhandles bad connectivity areas better. Its best feature is notification of\nspeed limits and alerts if you go over the limit, although it gets confused\nwhen on over or under-passes. Another very useful feature is the display of\nlanes when approaching highway exits, so you could tell which lane to be in.\nApparently the voice guidance is now more natural but we didn\u0026rsquo;t try this. The\ndisplay is messy and cluttered compared to the others.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe ended up with the following sequence:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eApple Maps for the bulk of the trip.\u003c/li\u003e\n\u003cli\u003eGoogle Maps \u0026amp; Metroview (on 2 separate iPhones) in the metropolitan areas and\nwhen about to take a highway exit.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eEven then it was amusing to see the apps panic when you took a new road and the\napps assumed you had left the road and were heading through the bush! And at one\npoint there was a large and official sign saying \u0026ldquo;Ignore GPS - do not take this\nturn\u0026rdquo; and sure enough, both Apple Maps and Google Maps wanted us to turn down a\nlittle country lane instead of keeping to the highway.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"speed-display\"\u003eSpeed Display:\u003c/h2\u003e\n\n\u003cp\u003eApart from the basic navigation apps, we tried a couple of speed display apps.\nThere are a lot of HUD speed apps out there that project the data on the the\nwindscreen but they had two problems:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThey only worked when it was dark. As soon as the sun got up, they became\ninvisible.\u003c/li\u003e\n\u003cli\u003eThey required you to place your iPhone flat on the dashboard so even if they\nhad worked during the day, the iPhone would have got far too hot and\nshut-down. (We have a mount that holds our iPhones in front of the air vents\nto avoid this over-heating problem. Any mount that sticks to the windscreen\nitself leaves the iPhone too exposed to the sun.)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eOne we stuck with (in non-HUD mode) was \u003ca href=\"https://itunes.apple.com/app/speedometer-+-hud-digital/id375318117\"\u003eSpeedometer + HUD\u003c/a\u003e. This had a clear\ndisplay with a few flaws:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhen moving from 99 kph to 100 kph, the display was not re-arranged for 3\ndigits. Moving from 101 down to 100 fixed it, but as 100 kph is the standard\nspeed limit, this was a frequent annoyance.\u003c/li\u003e\n\u003cli\u003eAdjusting the speed limit was too fiddly and difficult even for the passenger.\nIt would have been impossible for the driver.\u003c/li\u003e\n\u003cli\u003eIt only works in landscape mode which does not always suit the car mounts - we\nended up perching the 2nd iPhone on the unused ashtray.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe also tried \u003ca href=\"https://itunes.apple.com/app/talking-hud-voice-prompt-speedometer/id873194479\"\u003eTalking HUD\u003c/a\u003e but didn\u0026rsquo;t like it. It worked solely in HUD mode,\nso was only useful at night or very early morning. It had voice prompts to tell\nyou when to change gear but in an automatic car, they were just a distraction\nand it was not obvious how to turn them off.\u003c/p\u003e\n\n\u003cp\u003eBut overall, we found having a speed display app as well as a navigation app to\nbe the best combination. The audible alerts when you went over speed were very\nuseful when over-taking or getting up to speed as you could get the information\nwithout having to take your eyes off the road.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"future-app-plans\"\u003eFuture App Plans:\u003c/h2\u003e\n\n\u003cp\u003eHaving determined that a speed display app is really useful, but not finding one\nthat suited us perfectly, the obvious next step was to design my own. I wanted\nit to have the following features:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eclean display, visible in all light conditions\u003c/li\u003e\n\u003cli\u003eeasily settable speed limit\u003c/li\u003e\n\u003cli\u003eaudible and visual over-speed warnings\u003c/li\u003e\n\u003cli\u003eno HUD mode\u003c/li\u003e\n\u003cli\u003eApple Watch component for when you only had a single iPhone and it was\nnavigating but you still wanted a speed display\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSo watch this space for further news of my up-coming app\u0026hellip;\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"update\"\u003eUpdate\u003c/h2\u003e\n\n\u003cp\u003e\u0026ldquo;\u003ca href=\"/what-is-my-speed/\"\u003eWhat Is My Speed?\u003c/a\u003e\u0026rdquo; is available now from the \u003ca href=\"https://itunes.apple.com/app/what-is-my-speed/id1091394524\"\u003eiTunes App Store\u003c/a\u003e for\niPhone and Apple Watch.\u003c/p\u003e\n"
    },
    {
        "title" : "Structs vs Classes",
        "date_published" : "2016-03-30T00:00:00Z",
        "date_modified" : "2016-03-30T00:00:00Z",
        "id" : "https://troz.net/post/2016/structs-vs-classes/",
        "url" : "https://troz.net/post/2016/structs-vs-classes/",
        "content_html" : "\n\n\u003cp\u003eOne of the big debates among Swift developers is when to use \u003ccode\u003estructs\u003c/code\u003e and when\nto use \u003ccode\u003eclasses\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eClasses are the building blocks of object-oriented programming\nbut structs as provided by Swift are newly powerful. Structs have been around in\nC-based languages for a long time, but Swift has made them more powerful and\ngiven them more features so that they are almost indistinguishable from classes.\nSo what are the differences and which one should you use?\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"where-they-are-the-same\"\u003eWhere they are the same?\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eboth can define initializers\u003c/li\u003e\n\u003cli\u003eboth can define properties\u003c/li\u003e\n\u003cli\u003eboth can define methods\u003c/li\u003e\n\u003cli\u003eboth can conform to protocols\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"where-they-are-different\"\u003eWhere they are different?\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eclasses can inherit from other classes\u003c/li\u003e\n\u003cli\u003estructs cannot inherit from other structs\u003c/li\u003e\n\u003cli\u003eclasses are reference types\u003c/li\u003e\n\u003cli\u003estructs are value types\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eThe reference type vs value type difference is where things really get\ninteresting. Have a look at this example of a class with a single property:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003eclass PersonClass {\n    var name: String\n\n    init(name: String) {\n        self.name = name\n    }\n}\n\nvar personA = PersonClass(name: \u0026quot;Woody\u0026quot;)\npersonA.name // Woody\n\nvar personB = personA\npersonB.name = \u0026quot;Buzz\u0026quot;\npersonB.name // Buzz\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThat looks like standard stuff, but what do you think \u003ccode\u003epersonA\u003c/code\u003e\u0026rsquo;s name is now?\nIf you guessed \u0026ldquo;Buzz\u0026rdquo; then you win a prize! \u003cem\u003e(No, not a real prize - pat\nyourself on the back.)\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eThis is because when we created the \u003ccode\u003epersonB\u003c/code\u003e variable and assigned \u003ccode\u003epersonA\u003c/code\u003e to\nit, we did not assign the \u003cstrong\u003eVALUE\u003c/strong\u003e of \u003ccode\u003epersonA\u003c/code\u003e, we assigned a \u003cstrong\u003eREFERENCE\u003c/strong\u003e to\n\u003ccode\u003epersonA\u003c/code\u003e - actually the address in memory of \u003ccode\u003epersonA\u003c/code\u003e rather than the data\ninside.\u003c/p\u003e\n\n\u003cp\u003eSo now we have two objects and they are both looking at the same spot in memory\nfor their data. This means that changing the name of \u003ccode\u003epersonB\u003c/code\u003e changed the name\nof \u003ccode\u003epersonA\u003c/code\u003e as well.\u003c/p\u003e\n\n\u003cp\u003eLet\u0026rsquo;s try the same thing with a struct:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003estruct PersonStruct {\n  var name: String\n}\n\nvar personC = PersonStruct(name: \u0026quot;Rex\u0026quot;)\npersonC.name // Rex\n\nvar personD = personC\npersonD.name = \u0026quot;Hamm\u0026quot;\npersonD.name // Hamm\n\npersonC.name // Rex\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThis time, because we are using a struct, when we assign \u003ccode\u003epersonC\u003c/code\u003e to the new\n\u003ccode\u003epersonD\u003c/code\u003e variable, we are actually making a copy of \u003ccode\u003epersonC\u003c/code\u003e and setting the\nvalues of \u003ccode\u003epersonD\u003c/code\u003e to this new copy. So now we can change \u003ccode\u003epersonD\u003c/code\u003e without\nmessing with \u003ccode\u003epersonC\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNote that I did not have a define an \u003ccode\u003einit\u003c/code\u003e for the struct because it creates\none automatically. You can still add one yourself if you want to do anything\ndifferent, but you do not have to.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eAt first glance, you may think that you should now use structs all the time to\navoid these unintended consequences, but it isn\u0026rsquo;t quite as simple as that.\nSometimes a class is still the best thing to use.\u003c/p\u003e\n\n\u003cp\u003eThe inheritance capabilities of classes can make your decision simple: if you\nneed to create a button and want to start by sub-classing UIButton or NSButton,\nthen your button must be a class, not a struct. This will apply to most user\ninterface objects.\u003c/p\u003e\n\n\u003cp\u003eApple really wants us to use structs and in the Swift standard libraries, a very\nhigh percentage of the objects are structs. But structs are especially well\nsuited to a certain subset of objects.\u003c/p\u003e\n\n\u003cp\u003eThe best explanation that I have found of when to use a struct is the \u003ca href=\"http://faq.sealedabstract.com/structs_or_classes/#an-alternative-hypothesis\"\u003eJeff Trick\u003c/a\u003e. Reduced down, the rule is:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIf you can overload == to compare two instances of your object, use a struct.\n\u003cbr\u003e If this doesn\u0026rsquo;t make sense, use a class.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eSo use structs for your things: Person, Shape, Brick, Cat. \u003cbr\u003e Use classes for\neverything else.\u003c/p\u003e\n\n\u003cp\u003eI would add one caveat: don\u0026rsquo;t fight the compiler. If using a struct is giving\nlots of errors and warnings, change to a class.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eA logical consequence of this is that all structs should conform to the\n\u003ca href=\"http://swiftdoc.org/v2.2/protocol/Equatable/\"\u003eEquatable\u003c/a\u003e protocol.\u003c/p\u003e\n\n\u003cp\u003eExtending \u003ccode\u003ePersonStruct\u003c/code\u003e to make it conform just requires a single function:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003eextension PersonStruct: Equatable {\n  static func == (lhs: PersonStruct, rhs: PersonStruct) -\u0026gt; Bool {\n    return lhs.name == rhs.name\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eSince this struct only has one property, we can say that two instances of this\nstruct are equal if the names are equal.\u003c/p\u003e\n\n\u003cp\u003eTesting this, we can see:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003evar personC = PersonStruct(name: \u0026quot;Rex\u0026quot;)\nvar personD = personC\npersonD.name = \u0026quot;Hamm\u0026quot;\n\npersonC == personD // false\n\nlet personE = PersonStruct(name: \u0026quot;Rex\u0026quot;)\npersonC == personE // true\npersonC != personE // false\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eConveniently, providing an \u003ccode\u003e==\u003c/code\u003e function effectively gives us a \u003ccode\u003e!=\u003c/code\u003e function\nfor free as you can see from the last example.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eThere is one final point I would like to make about struct and that concerns\nmutating functions. Look at what happens if we include a function that changes\nthe \u003ccode\u003ename\u003c/code\u003e property in the struct:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/mutating.png\" alt=\"Mutating error\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eFix-it is very helpfully pointing out that the method needs to be marked as\n\u003ccode\u003emutating\u003c/code\u003e for this to work and is showing where this should go. Accepting the\nsuggestion will get rid of the error and then the name can be changed using this\nmethod.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003estruct PersonStruct: Equatable {\n    var name: String\n\n    mutating func changeName(to newName: String) {\n        if !newName.isEmpty {\n            name = newName\n        }\n    }\n}\n\nvar personC = PersonStruct(name: \u0026quot;Woody\u0026quot;)\npersonC.name // Woody\n\npersonC.changeName(to: \u0026quot;Sid\u0026quot;)\npersonC.name // Sid\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThere is no problem about using \u003ccode\u003emutating\u003c/code\u003e and it will not have the unintended\nconsequences of using classes. Despite the scary name, a mutating function\nactually returns a new copy of the struct.\u003c/p\u003e\n\n\u003cp\u003eThe problem arises if you have many nested structs and the mutating has to\nspread through the list. So don\u0026rsquo;t nest your structs - at least not more than two\ndeep!\u003c/p\u003e\n"
    },
    {
        "title" : "Learning Swift - Optionals",
        "date_published" : "2016-03-12T14:24:00+10:00",
        "date_modified" : "2016-03-12T14:24:00+10:00",
        "id" : "https://troz.net/post/2016/learning-swift-optionals/",
        "url" : "https://troz.net/post/2016/learning-swift-optionals/",
        "content_html" : "\u003cp\u003e\u003c/p\u003e\n\n\u003cp\u003eToday I plan to discuss optionals since they were a feature of Swift that I\nfound difficult to grasp at first.\u003c/p\u003e\n\n\u003ch2 id=\"what-is-an-optional-in-swift\"\u003eWhat is an optional in Swift?\u003c/h2\u003e\n\n\u003cp\u003eAn optional is a variable of a specified type that can also be nil.\u003c/p\u003e\n\n\u003ch2 id=\"why-does-this-matter\"\u003eWhy does this matter?\u003c/h2\u003e\n\n\u003cp\u003eIn Objective-C, any object type could be nil. If you declared a variable like\nthis:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-objectivec\"\u003eNSString *myString;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ethen \u003ccode\u003emyString\u003c/code\u003e was set to nil by default.\u003c/p\u003e\n\n\u003cp\u003eBut this could cause issues, especially as Objective-C does not complain if you\nsend a message to nil. This could lead to bugs that were very difficult to track\ndown.\u003c/p\u003e\n\n\u003cp\u003eThe other big use for nil is when returning from a function which has found no\nappropriate data to return. The classic example is when looking for the index of\nan element in an array. What should be returned if the element is not found in\nthe array?\u003c/p\u003e\n\n\u003cp\u003eSome languages return -1, Objective-C uses \u003ccode\u003eNSNotFound\u003c/code\u003e, but you have to know\nwhat each language is going to do. The more logical answer is nil. However if\nyour function is expected to return an integer, then it cannot return nil\nbecause nil is not an integer.\u003c/p\u003e\n\n\u003cp\u003eThis is where optionals come in: if the function is expected to return an\noptional integer, it can return with an integer with the index of the matching\nelement, or it can return nil if the element was not found. This is much clearer\nand less prone to error.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"how-does-swift-handle-optionals\"\u003eHow does Swift handle optionals?\u003c/h2\u003e\n\n\u003cp\u003eOne of the first things that struck me about Swift was how clean the code\nlooked, without so many non-alphanumeric characters scattered around. Gone were\nall the:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003e* ; [ ]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eBut instead, Swift code sprouted:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003e! ?\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWhat were these?\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eThe key to understanding optionals is to realise that when you declare an\noptional variable of a certain type, you are actually declaring a box that can\nhold a variable of that type or can hold nil.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eOnce you grasp that concept, it all becomes much more obvious.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003evar optionalInteger: Int?\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe ? indicates that this is an optional variable. It does not have to be\ninitialised as it is already set to nil which is valid for an optional variable.\nWithout the ? this would require initialisation as it would not be valid for it\nto be nil.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"setting-an-optional\"\u003eSetting an optional\u003c/h2\u003e\n\n\u003cp\u003eSetting the value of an optional variable is just the same as any other\nvariable:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003eoptionalInteger = 3\noptionalInteger = 42\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"getting-an-optional\"\u003eGetting an optional\u003c/h2\u003e\n\n\u003cp\u003eThe difference arises when you need to get the data out of the optional variable\nin order to use it. This process is called un-wrapping and it means to get the\nvariable value out of the \u0026lsquo;box\u0026rsquo; it is stored it.\u003c/p\u003e\n\n\u003ch3 id=\"the-most-obvious-way-is-to-use\"\u003eThe most obvious way is to use !\u003c/h3\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003elet newInteger = optionalInteger!\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003eDO NOT DO THIS!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThis is called forced-unwrapping and assumes that the optional variable is not\nnil. If the optional is nil, this will crash. In Xcode, when you connect\ninterface elements from your storyboard to a Swift file, Xcode will use ! like\nthis:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003e@IBOutlet weak var startButton: UIButton!\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eI have to assume Xcode knows what it is doing and the button will be available\nwhen needed, but you should not use ! - it is un-safe. By using it, you are\nvowing to the compiler that when it gets to that point, the optional value will\nnot be nil. There are much better and safer ways of doing that.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"use-if-let\"\u003eUse \u0026lsquo;if let\u0026rsquo;\u003c/h3\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003efunc doubleNumber(_ optionalInteger: Int?) -\u0026gt; Int? {\n    if let integerValue = optionalInteger {\n        // integerValue is not an optional\n        // and is guaranteed to contain an Int\n        return integerValue * 2\n    }\n\n    // no integer found in the optional,\n    // so return nil to indicate failure\n    return nil\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"use-guard\"\u003eUse guard\u003c/h3\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003efunc doubleNumber(_ optionalInteger: Int?) -\u0026gt; Int? {\n    guard let integerValue = optionalInteger else {\n        // get out quickly,\n        // returning nil to indicate failure\n        return nil\n    }\n\n    // integerValue is not an optional\n    // and is guaranteed to contain an Int\n    return integerValue * 2\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThese two alternatives (\u003ccode\u003eif let\u003c/code\u003e \u0026amp; \u003ccode\u003eguard\u003c/code\u003e) do the same job but in opposite\nways. In both cases, they perform a conditional un-wrapping that may or may not\ngive a valid result. \u003ccode\u003eif let\u003c/code\u003e checks if it is OK to proceed. \u003ccode\u003eguard\u003c/code\u003e checks to\nsee if it is NOT OK to proceed. Which you use is really a matter of personal\npreference and working out what is more logical in each case.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eguard\u003c/code\u003e statement is really good for checking data early in a process and\nmaking a quick exit it something is wrong. The \u003ccode\u003eif let\u003c/code\u003e construct encloses your\nsuccess code inside a block and can sometimes leave the failure code a long way\nfrom the check which can make it less obvious. The other potential issue with\n\u003ccode\u003eif let\u003c/code\u003e is the \u0026ldquo;pyramid of doom\u0026rdquo; common in early Swift code as demonstrated in\nthis rather contrived example:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003efunc isValidAddressBookEntry(firstName: String?,\n                             lastName: String?,\n                             emailAddress: String?,\n                             phoneNumber: String?) -\u0026gt; Bool {\n        if let validFirstName = firstName {\n            if let validLastName = lastName {\n                if let validEmail = emailAddress {\n                    if let validPhone = phoneNumber {\n                        return true\n                    }\n                }\n            }\n        }\n        return false\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThankfully, Swift now allows us to chain both \u003ccode\u003eif let\u003c/code\u003e and \u003ccode\u003eguard\u003c/code\u003e statements.\nHere is the previous example re-factored to use \u003ccode\u003eif let\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003efunc isValidAddressBookEntrySwift2(firstName: String?,\n                                   lastName: String?,\n                                   emailAddress: String?,\n                                   phoneNumber: String?) -\u0026gt; Bool {\n      if let validFirstName = firstName,\n          let validLastName = lastName,\n          let validEmail = emailAddress,\n          let validPhone = phoneNumber {\n          return true\n      }\n      return false\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAnd here is the same function but using \u003ccode\u003eguard\u003c/code\u003e which allows the inputs to be checked immediately and the function exited if the u=inputs are not valid. For a short function like this, the change is not really significant, but if the function does a lot of processing of the input data, checking first and getting out as soon as possible is more efficient.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003efunc isValidAddressBookEntryUsingGuard(firstName: String?,\n                                       lastName: String?,\n                                       emailAddress: String?,\n                                       phoneNumber: String?) -\u0026gt; Bool {\n    guard\n        let validFirstName = firstName,\n        let validLastName = lastName,\n        let validEmail = emailAddress,\n        let validPhone = phoneNumber else {\n            return false\n    }\n\n    return true\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"use-optional-chaining\"\u003eUse optional chaining\u003c/h3\u003e\n\n\u003cp\u003eThe final way to deal with optionals safely is to use optional chaining:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003estruct SocialMediaAccounts {\n    var facebook: Person?\n    var twitter: Person?\n}\n\nstruct Person {\n    var firstName: String?\n    var lastName: String?\n    var handle: String?\n}\n\nvar socialMedia: SocialMediaAccounts?\nsocialMedia = SocialMediaAccounts()\nvar twitterAccount = Person()\n\nsocialMedia?.twitter = twitterAccount\nlet twitterHandle = socialMedia?.twitter?.handle\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIn this example, we have defined a \u003ccode\u003eSocialMediaAccounts\u003c/code\u003e struct that holds\noptional \u003ccode\u003ePerson\u003c/code\u003e structs for the various social media outlets. The\n\u003ccode\u003esocialMedia\u003c/code\u003e variable is defined as an optional and then created. A\n\u003ccode\u003etwitterAccount\u003c/code\u003e variable of type \u003ccode\u003ePerson\u003c/code\u003e is also created but contains no data\nat the moment.\u003c/p\u003e\n\n\u003cp\u003eWhen assigning the \u003ccode\u003etwitterAccount\u003c/code\u003e to the \u003ccode\u003esocialMedia.twitter\u003c/code\u003e property, a ?\nis inserted which checks to see that \u003ccode\u003esocialMedia\u003c/code\u003e is not nil. If it is nil,\nthen execution of that line stops at the ? and nothing bad will happen.\u003c/p\u003e\n\n\u003cp\u003eIn the same way, when trying to read back the twitter handle, we chained\ntogether 2 optionals with ?\u0026rsquo;s. If either \u003ccode\u003esocialMedia\u003c/code\u003e or \u003ccode\u003esocialMedia.twitter\u003c/code\u003e\nis nil, that line will not complete. Again this is perfectly safe and the app\nwill not crash.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eAll the examples in this article are available in a \u003ca href=\"https://github.com/trozware/optionals\"\u003eSwift playground\u003c/a\u003e which\nhas been updated to Swift 4 syntax.\u003c/p\u003e"
    },
    {
        "title" : "Learning Swift - For-Loops",
        "date_published" : "2016-03-12T00:00:00Z",
        "date_modified" : "2016-03-12T00:00:00Z",
        "id" : "https://troz.net/post/2016/learning-swift-for-loops/",
        "url" : "https://troz.net/post/2016/learning-swift-for-loops/",
        "content_html" : "\u003cp\u003eLoops are a fundamental building block of any program. Doing repetitive tasks\nfast and accurately is what computers are really good at and what we humans get\nvery bored doing. Swift offers several different ways to perform loops, but\ntoday we are going to concentrate on for-loops.\u003c/p\u003e\n\n\u003cp\u003eThe most basic form of loop is the \u003ccode\u003efor-in\u003c/code\u003e loop. There are two ways this can be\nused: looping over the numbers in a range or looping over the elements in an\narray or dictionary.\u003c/p\u003e\n\n\u003cp\u003eFirstly, the range:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003efor x in 0 ..\u0026lt; 5 { printWithSpace(x) }\n// prints: 0 1 2 3 4\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cem\u003eI am using a custom print function that allows me to print the results on a\nsingle line for convenience.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eThis \u003ccode\u003efor-in\u003c/code\u003e loop uses a half-open range and it is effectively saying:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003estart with x at 0\nprint x with a space\nadd 1 to x\nis x still less than 5?\n    yes - go back to the print stage\n    no - stop\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIf we wanted to go all the way to 5 instead of stopping before 5, we would use a\nclosed range by replacing \u003ccode\u003e..\u0026lt;\u003c/code\u003e with \u003ccode\u003e...\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003efor x in 0 ... 5 { printWithSpace(x) }\n// prints: 0 1 2 3 4 5\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eThese methods work fine if we want to loop through a range of numbers one at a\ntime but what if we want a different increment? There are several ways to vary\nthe step.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003estride(from:to:by:)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estride(from:through:by:)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ewhere\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003efor x in stride(from: 0, to: 10, by: 2) {\n  printWithSpace(x)\n}\n// prints: 0 2 4 6 8\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003efor x in stride(from: 0, through: 10, by: 2) {\n  printWithSpace(x)\n}\n// prints: 0 2 4 6 8 10\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe 2 variations of \u003ccode\u003estride\u003c/code\u003e are analogous to the 2 ways of expressing the range\nin the the \u003ccode\u003efor-in\u003c/code\u003e loop.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003estride(from:to:by:)\u003c/code\u003e starts with the number in the \u003ccode\u003efrom\u003c/code\u003e parameter and each\ntime through the loop, increments that number by the amount of the \u003ccode\u003eby\u003c/code\u003e\nparameter. If the incremented number is less than the \u003ccode\u003eto\u003c/code\u003e parameter, the loop\ncontinues.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003estride(from:through:by:)\u003c/code\u003e works the same way but continues until the\nincremented number is greater than or equal to the \u003ccode\u003ethrough\u003c/code\u003e parameter.\u003c/p\u003e\n\n\u003cp\u003eUsing a negative value for \u003ccode\u003eby\u003c/code\u003e allows counting backwards:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003efor x in stride(from: 10, through: 0, by: -2) {\n  printWithSpace(x)\n}\n// prints: 10 8 6 4 2 0\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eStride can also be used for floating point loops although the result may contain\nsome unexpected changes in precision e.g 0.7000000000000001 instead of the\nexpected 0.7\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003elet startingNumber = 0.1\nfor x in stride(from: startingNumber, through: 1.0, by: 0.2) {\n  printWithSpace(x)\n}\n// prints: 0.1 0.3 0.5 0.7000000000000001 0.9\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNote that the result does not contain the \u003ccode\u003ethrough\u003c/code\u003e parameter as the next\niteration would have produced 1.1 which is greater than it. And also\n\u003ccode\u003estartingNumber\u003c/code\u003e did not have to be a variable as it is never actually changed.\u003c/p\u003e\n\n\u003cp\u003eUsing \u003ccode\u003ewhere\u003c/code\u003e makes it possible to step through a loop while conforming to some\nconditional:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003efor x in 0 ... 10 where x % 3 == 0 {\n  printWithSpace(x)\n}\n// prints: 0 3 6 9\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eThe other main use for \u003ccode\u003efor-in\u003c/code\u003e loops is for iterating through the elements of\nan array or dictionary:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003elet arrayOfInts = [ 1, 2, 3, 4, 5, 6 ]\nfor x in arrayOfInts {\n  printWithSpace(x * 2)\n}\n// prints: 2 4 6 8 10 12\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003elet myDict = [ 1: \u0026quot;one\u0026quot;, 2: \u0026quot;two\u0026quot;, 3: \u0026quot;three\u0026quot; ]\nfor (key, value) in myDict {\n  print(\u0026quot;\\(key) = \\(value)\u0026quot;)\n}\n// prints:\n// 2 = two\n// 3 = three\n// 1 = one\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAs a dictionary is un-sorted, the order of the items may vary.\u003c/p\u003e\n\n\u003cp\u003eIf you want to loop through an array while also monitoring the index of each\nelement, you can use \u003ccode\u003eenumerated()\u003c/code\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003elet arrayOfNames = [ \u0026quot;Andy\u0026quot;, \u0026quot;Buzz\u0026quot;, \u0026quot;Woody\u0026quot; ]\nfor (index, element) in arrayOfNames.enumerated() {\n  print(\u0026quot;The name at index \\(index) is \\(element)\u0026quot;)\n}\n// prints:\n// The name at index 0 is Andy\n// The name at index 1 is Buzz\n// The name at index 2 is Woody\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIf your array contains optionals, you can use \u003ccode\u003efor case let\u003c/code\u003e to test each value:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003elet arrayWithOptionals: [String?] = [ \u0026quot;Woody\u0026quot;, nil, \u0026quot;Buzz\u0026quot;, nil, \u0026quot;Rex\u0026quot; ]\nfor case let name? in arrayWithOptionals {\n  printWithSpace(name)\n}\n// prints: Woody Buzz Rex\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe \u003ccode\u003ename\u003c/code\u003e variable is un-wrapped each time through the loop so can be used\nsafely.\u003c/p\u003e\n\n\u003cp\u003eAny of these loop styles can be combined with \u003ccode\u003ewhere\u003c/code\u003e to perform checks on each\niteration:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003elet arrayWithOptionals: [String?] = [ \u0026quot;Woody\u0026quot;, nil, \u0026quot;Buzz\u0026quot;, nil, \u0026quot;Rex\u0026quot; ]\nfor case let name? in arrayWithOptionals where name.count \u0026lt; 5 {\n  printWithSpace(name)\n}\n// prints: Buzz Rex\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eSome of you may be wondering what happened to the old C-style loops like this:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003efor var x = 0; x \u0026lt; 5; x++ { print(x, terminator: \u0026quot; \u0026quot;) }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThis does not work in Swift 3+: the \u003ccode\u003e++\u003c/code\u003e and \u003ccode\u003e--\u003c/code\u003e operators and this style of\nloop declaration have been removed from the language. For further details, check\nout the relevant proposals at Swift Evolution:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md\"\u003eRemove C-style for-loops with conditions and incrementers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md\"\u003eRemove the ++ and \u0026ndash; operators\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eAll the examples in this article are available in a \u003ca href=\"https://github.com/trozware/for-loops\"\u003eSwift playground\u003c/a\u003e now\nupdated to Swift 4 syntax.\u003c/p\u003e\n"
    },
    {
        "title" : "Learning Swift - Generics",
        "date_published" : "2016-02-29T00:00:00Z",
        "date_modified" : "2016-02-29T00:00:00Z",
        "id" : "https://troz.net/post/2016/learning-swift-generics/",
        "url" : "https://troz.net/post/2016/learning-swift-generics/",
        "content_html" : "\u003cp\u003eOne of the nice things about Swift is how clean your code looks. A lot of the\nweird characters that pepper the code of other languages has been eliminated: No\nmore semi-colons, asterisks etc.\u003c/p\u003e\n\n\u003cp\u003eBut then you are reading somebody else\u0026rsquo;s code and you find these angle brackets\nall over the place and they don\u0026rsquo;t seem to make sense.\u003c/p\u003e\n\n\u003cp\u003eWhat does this mean?\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003efunc mid\u0026lt;T: Comparable\u0026gt;(array: [T]) -\u0026gt; T\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIt looks like it is a function to find the middle element in an array, but what\nis \u003ccode\u003e\u0026lt;T: Comparable\u0026gt;\u003c/code\u003e or \u003ccode\u003e[T]\u003c/code\u003e or even just \u003ccode\u003eT\u003c/code\u003e? They are describing Generic data\ntypes.\u003c/p\u003e\n\n\u003cp\u003eUsing the dictionary, I find the following definition for \u003ccode\u003egeneric\u003c/code\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003echaracteristic of or relating to a class or group of things; not specific.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAnd that really provides quite a good definition for Swift\u0026rsquo;s generics too. They\nallow you to assign a non-specific data type to a function so that function can\nbe used for many different data types.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eBut enough of the theory: by far the best way to understand generics is to\nencounter the problem they are meant to solve and then to solve it.\u003c/p\u003e\n\n\u003cp\u003eThe other day I was processing data to feed to a charting library. I ended up\nwith an array of CGFloats, but there were too many of them, so I wrote a\nfunction to give me the last x elements of an array of CGFloats:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003efunc endOf(array: [CGFloat], numberOfElementsToInclude: Int) -\u0026gt; [CGFloat] {\n  if numberOfElementsToInclude \u0026gt; array.count { return array }\n\n  let startingElement = array.count - numberOfElementsToInclude\n  let endOfArray = Array(array[startingElement ..\u0026lt; array.count])\n  return endOfArray\n}\n\nlet largeArray: [CGFloat] = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]\nlet smallArray = endOf(array: largeArray, numberOfElementsToInclude: 3)\n//smallArray now equals [8.0, 9.0, 10.0]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eOK, so \u003ccode\u003elargeArray\u003c/code\u003e isn\u0026rsquo;t actually the largest array you have ever seen, but it\nworks for demo purposes. In my code, I had over 20,000 entries in the large\narray and only wanted the last 5,000.\u003c/p\u003e\n\n\u003cp\u003eI was completely happy with that until I found another data source where the\ndata was an array of Ints. Still perfectly chartable using my charting library,\nbut I could not get the end of the array using my nice function. First thought\nwas to replicate the function:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003efunc endOf(array: [Int], numberOfElementsToInclude: Int) -\u0026gt; [Int] {\n  if numberOfElementsToInclude \u0026gt; array.count { return array }\n\n  let startingElement = array.count - numberOfElementsToInclude\n  let endOfArray = Array(array[startingElement ..\u0026lt; array.count])\n  return endOfArray\n}\n\nlet largeArrayInt = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] // type inferred to be Int\nlet smallArrayInt = endOf(array: largeArrayInt, numberOfElementsToInclude: 7)\n// smallArrayInt now equals [4, 5, 6, 7, 8, 9, 10]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eA quick glance will reveal that the declaration line was the only thing that\nchanged. I didn\u0026rsquo;t have to give the function a new name because the compiler\nworked out which of the two functions to use based on the types supplied. So all\nI was doing was replacing \u003ccode\u003eCGFloat\u003c/code\u003e with \u003ccode\u003eInt\u003c/code\u003e in two places (the\n\u003ccode\u003enumberOfElementsToInclude\u003c/code\u003e parameter remains an \u003ccode\u003eInt\u003c/code\u003e in both cases).\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAs soon as you find yourself replicating code and only changing the types of\nthe data, that is a sign that you need to use generics.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eFor my first attempt at creating a generic function, all I did was replace the\nword \u003ccode\u003eCGFloat\u003c/code\u003e with \u003ccode\u003eT\u003c/code\u003e where \u003ccode\u003eT\u003c/code\u003e indicates some type that will be specified\nwhen the function is called. The convention is to use single letters for generic\ntypes: \u003ccode\u003eT\u003c/code\u003e for Type, \u003ccode\u003eA\u003c/code\u003e for AnyObject, \u003ccode\u003eZ\u003c/code\u003e because you feel like it. The choice\nis up to you.\u003c/p\u003e\n\n\u003cp\u003eThat produced this error:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/Generics_error.png\" alt=\"Generics error\" /\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eUse of undeclared type 'T'\u003c/code\u003e. Well that seems fair enough\u0026hellip; how is the compiler\nsupposed to know what a \u003ccode\u003eT\u003c/code\u003e is?\u003c/p\u003e\n\n\u003cp\u003eIt turns out that this is where the angle brackets come into play. You have to\nwarn the compiler that this function is going to get a generic type and that the\n\u003ccode\u003eT\u003c/code\u003e is only a placeholder, not a real type. So this version compiles and works -\nnotice the \u003ccode\u003e\u0026lt;T\u0026gt;\u003c/code\u003e between the function name and the opening bracket:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003efunc endOf\u0026lt;T\u0026gt;(array: [T], numberOfElementsToInclude: Int) -\u0026gt; [T] {\n  if numberOfElementsToInclude \u0026gt; array.count { return array }\n\n  let startingElement = array.count - numberOfElementsToInclude\n  let endOfArray = Array(array[startingElement ..\u0026lt; array.count])\n  return endOfArray\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow I have no code duplication and if I ever get another data set that uses a\ndifferent object type, my function will still work.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eNow we know to use generics instead of replicating code that operates in the\nsame way on different data types.\u003c/p\u003e\n\n\u003cp\u003eAnd we know how to construct a generic function.\u003c/p\u003e\n\n\u003cp\u003eUsing it is identical to using the two functions I had before:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003elet largeArray: [CGFloat] = [ 1.0, 2.0, 3.0, 4.0, 5.0,6.0, 7.0, 8.0, 9.0, 10.0 ]\nlet smallArray = endOf(array: largeArray, numberOfElementsToInclude: 3)\n\nlet largeArrayInt = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] // type inferred to be Int\nlet smallArrayInt = endOf(array: largeArrayInt, numberOfElementsToInclude: 7)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou do not have to specify what \u003ccode\u003eT\u003c/code\u003e is when calling the function, that will be\ninferred from the supplied data.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eMoving on into more advanced use cases, we have two things to consider:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eFunctions where the generic parameters must conform to a protocol.\u003c/li\u003e\n\u003cli\u003eFunctions that take generic parameters of different types.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe example function I started with (not mine but I forget where I got it\u0026hellip; If\nit is yours, thanks you very much) used:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003efunc mid \u0026lt;T: Comparable\u0026gt; (array: [T]) -\u0026gt; T\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eInstead of specifying the type as completely generic, it specified that it must\nconform to the Comparable protocol. This is because the function body used a\n\u003ccode\u003esort()\u003c/code\u003e function so the generic function needed to be sure that the elements in\nthe array could be compared. This technique can also be used to restrict the\nparameter types to sub-classes of a certain class.\u003c/p\u003e\n\n\u003cp\u003eFor a function with more than one generic data type, you need to use more than\none placeholder letter:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003efunc genericWithTwoDifferentTypes\u0026lt;T, U\u0026gt;(param1: T, param2: U) -\u0026gt; Bool {\n  // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAnd in exactly the same way, both \u003ccode\u003eT\u003c/code\u003e and \u003ccode\u003eU\u003c/code\u003e can be set to conform to a\nprotocol or be members of a certain super-class.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eHopefully this has taken some of the mystery out of generics, but if you have\nany questions, please get in touch using the \u003ca href=\"/contact/\"\u003eContact page\u003c/a\u003e, comment below or\ncontact me via Twitter: \u003ca href=\"https://twitter.com/trozware\"\u003e@trozware\u003c/a\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "Singleton to Protocol",
        "date_published" : "2016-02-26T00:00:00Z",
        "date_modified" : "2016-02-26T00:00:00Z",
        "id" : "https://troz.net/post/2016/singleton-to-protocol/",
        "url" : "https://troz.net/post/2016/singleton-to-protocol/",
        "content_html" : "\n\n\u003cp\u003eI was driving through the town of \u003ca href=\"https://en.wikipedia.org/wiki/Singleton,_New_South_Wales\"\u003eSingleton\u003c/a\u003e the other day and of course, it\ngot me thinking about using singletons in my apps. Singletons were a commonly\nused pattern in Objective-C programming and appear in many of Apple\u0026rsquo;s own APIs,\nbut seem to be increasingly frowned upon in the Swift world.\u003c/p\u003e\n\n\u003ch2 id=\"so-what-is-a-singleton\"\u003eSo what is a singleton?\u003c/h2\u003e\n\n\u003cp\u003eA singleton is a class that only expects to have a single instance. Think of it\nas a global instance of a class. In some cases this makes perfect sense if there\ncan only ever be one instance of a particular class or if there is a default\nvariant that suits most cases e.g.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003eUIApplication.shared\nUserDefaults.standard\nNotificationCenter.default\nFileManager.default\nURLSession.shared\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIf you are using an object with a property name of \u0026ldquo;shared\u0026rdquo;, \u0026ldquo;standard\u0026rdquo; or\n\u0026ldquo;default\u0026rdquo; you can be pretty sure it is an singleton.\u003c/p\u003e\n\n\u003ch2 id=\"and-what-s-the-problem-with-singletons\"\u003eAnd what\u0026rsquo;s the problem with singletons?\u003c/h2\u003e\n\n\u003cp\u003eThere are probably many different opinions here but I have two thoughts about\nthis:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eThey are effectively global variables and global variables can make your code\nmessy and un-predictable.\u003c/li\u003e\n\u003cli\u003eIf they can be accessed by multiple other objects, possibly at the same time,\nthen you can get conflicts. These can be handled by clever use of background\nqueues, but it isn\u0026rsquo;t easy.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"what-to-use-instead\"\u003eWhat to use instead?\u003c/h2\u003e\n\n\u003cp\u003eAs I drove, I mused on a singleton that I had implemented recently. It was a\nlogging utility that allowed any object in my app (mostly view controllers) to\nsave a new entry to a log file. The basic structure of the Logger class was\nthis:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003eclass Logger {\n    static let sharedLogger = Logger()\n\n    func addToLog(event: String) {\n      // use private functions to find log file URL\n      // append event text with time stamp\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAny object in my app could use the Logger like this:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003eLogger.sharedLogger.addToLog(event: newLogEvent)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWhen I got to think about how I was using this, I realised that instead of a\nLogger \u003cem\u003eobject\u003c/em\u003e that everything could use, what I really needed was a Loggable\n\u003cem\u003ebehaviour\u003c/em\u003e that I could apply \u0026amp; restrict to the few classes that actually\nneeded to log events. For me, this was the break-through:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eCreate a behaviour, not an object.\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAs soon as I started thinking about this as a behaviour, a protocol became the\nobvious solution, so this is what I created:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003eprotocol Loggable {\n  // not declaring functions here\n  // as they should NOT be over-written\n}\n\nextension Loggable {\n\n    func addToLog(event: String) {\n      // use private functions to find log file URL\n      // append event text with time stamp\n    }\n\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWe run immediately into one of the peculiarities of Swift protocol extensions\nwhich has been very well explained by \u003ca href=\"http://cjwirth.com/2016/01/20/swift-protocol-extension-weirdness/\"\u003eCaesar Wirth\u003c/a\u003e. If I had declared\n\u003ccode\u003eaddToLog(_:)\u003c/code\u003e in the protocol, then any class or struct conforming to this\nprotocol would have been free to over-write this function and provide its own\nversion. This is not what I wanted here - I wanted every object to use the same\nversion. So I left the function declaration out of the protocol definition and\nonly included it in the protocol extension.\u003c/p\u003e\n\n\u003cp\u003eTo use this behaviour, a class or struct just has to be declared as conforming\nto the Loggable protocol:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003eclass MyClass: Loggable {\n  func doSomething() {\n    addToLog(event: \u0026quot;I did something!\u0026quot;)\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eFor my app, I knew that I would want all my NSViewControllers to be able to add\nlog events, so instead of setting them all individually as conforming to the\nprotocol, I used this shortcut which extends all NSViewControllers to conform to\nthe protocol.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003eextension NSViewController: Loggable {}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eI added this line to the Loggable.swift file where I declared the protocol and\nits extension, but outside both of them.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eProtocol-oriented programming is a new technique to me, so it really helps when\nI can find a practical example of where it solves a problem.\u003c/p\u003e\n\n\u003cp\u003eIf you are new to POP, I highly recommend the \u003ca href=\"https://developer.apple.com/videos/play/wwdc2015/408/\"\u003eCrusty talk\u003c/a\u003e from WWDC 2015.\nAnd this article by \u003ca href=\"http://matthijshollemans.com/2015/07/22/mixins-and-traits-in-swift-2/\"\u003eMatthijs Hollemans\u003c/a\u003e was invaluable to me in\ndemonstrating the problems with object inheritance that are solved by protocols.\u003c/p\u003e\n"
    },
    {
        "title" : "Three Rules for Writing Better Swift",
        "date_published" : "2016-02-24T00:00:00Z",
        "date_modified" : "2016-02-24T00:00:00Z",
        "id" : "https://troz.net/post/2016/three-rules-for-writing-better-swift/",
        "url" : "https://troz.net/post/2016/three-rules-for-writing-better-swift/",
        "content_html" : "\u003col\u003e\n\u003cli\u003eDo not use !.\u003c/li\u003e\n\u003cli\u003eUse let, not var.\u003c/li\u003e\n\u003cli\u003eAllow the compiler to infer types.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eRead on for more details\u0026hellip;\u003c/p\u003e\n\n\u003cp\u003e\u003c/p\u003e\n\n\u003ch2 id=\"1-do-not-use\"\u003e1. Do not use !\u003c/h2\u003e\n\n\u003cp\u003eSwift uses optionals for values that can be nil. To use an optional value, you\nneed to \u0026ldquo;un-wrap\u0026rdquo; it first, which means getting the actual value out, assuming\nthat the value exists and the optional is not actually nil.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/post/2016-02-12-learning-swift-optionals/\"\u003eOptionals\u003c/a\u003e are the subject of a complete post by themselves, but for now, I\nwill just say this: When you use ! you are \u003cstrong\u003epromising\u003c/strong\u003e the compiler that you\nwill make sure there is a real value in that optional by the time it is needed.\u003c/p\u003e\n\n\u003cp\u003eIf this is not the case, your app will crash as shown in this playground:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/Playground2.png\" alt=\"Playground crash\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eInstead of using ! you should use optional chaining with ? or check the value\nwith \u003ccode\u003eguard\u003c/code\u003e or \u003ccode\u003eif let\u003c/code\u003e before use.\u003c/p\u003e\n\n\u003cp\u003eOne trap to beware of is with Xcode\u0026rsquo;s attempts to be helpful and suggest fixes\nto problems. If you use an optional where it cannot work, Xcode will warn you\nthat it is incorrect, but the suggested fix will be to insert !\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/optional_fix.png\" alt=\"Optional fix\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eWhen you see this, do not accept the suggested fix, but use it as a warning to\nshow that you need to fix the problem properly.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"2-use-let-not-var\"\u003e2. Use let, not var\u003c/h2\u003e\n\n\u003cp\u003eUsing constants in C-based languages is a pain. I could never remember the\nObjective-C syntax for declaring a static constant, so used to fall back to\nusing \u003ccode\u003e#define\u003c/code\u003e for global constants. Inside my objects, all instance properties\nwere variables, not constants. Inside functions, it was the same.\u003c/p\u003e\n\n\u003cp\u003eIt doesn\u0026rsquo;t take much imagination to work out that your apps will perform better\nand more securely if values that do not need to change are allocated as\nconstants instead of variables.\u003c/p\u003e\n\n\u003cp\u003eWith Swift, this is easy as you just declare a constant using the \u003ccode\u003elet\u003c/code\u003e keyword\nand declare variables using \u003ccode\u003evar\u003c/code\u003e. The Swift compiler will now warn you if you\nhave used \u003ccode\u003evar\u003c/code\u003e where \u003ccode\u003elet\u003c/code\u003e would do, but I prefer to declare everything using\n\u003ccode\u003elet\u003c/code\u003e and only change to \u003ccode\u003evar\u003c/code\u003e when this causes an error as shown in this\nplayground example:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/Playground3.png\" alt=\"Playground let error\" /\u003e\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"3-allow-the-compiler-to-infer-types\"\u003e3. Allow the compiler to infer types\u003c/h2\u003e\n\n\u003cp\u003eWith Objective-C and many other languages, you have to tell the compiler exactly\nwhat each variable is going to be: a string, an integer, an object of a certain\ntype.\u003c/p\u003e\n\n\u003cp\u003eWith Swift, the compiler is clever enough to work this out for you, which can\nmake your code much cleaner looking and easy to read.\u003c/p\u003e\n\n\u003cp\u003eThere are a few exceptions to this rule which are shown in the playground below:\u003c/p\u003e\n\n\u003cp\u003eLines 3 - 6 are allowing the Swift compiler to decide what the type is and it is\nchoosing valid types: Int, Double, String and UIView.\u003c/p\u003e\n\n\u003cp\u003eLine 8 is a case where we do not want the default type, which would be Double so\nwe need to tell the compiler that this one really should be a CGFloat.\u003c/p\u003e\n\n\u003cp\u003eLines 10 \u0026amp; 11 both deal with an array of Ints. In line 10, the values are\nsupplied so the type of the array can be inferred. In the second case, the array\nis initially empty, so the type needs to be specified in the declaration.\u003c/p\u003e\n\n\u003cp\u003eLines 13 and 14 are the same but with dictionaries instead of arrays.\u003c/p\u003e\n\n\u003cp\u003eIn each case, it would have been valid Swift to specify the type but why bother?\nThe more text you enter , the more change of mistake and it leaves your code\nlooking cluttered.\u003c/p\u003e\n\n\u003cp\u003eIf you ever need to check what type has been assigned to a constant or variable,\nOption-click on it in Xcode and you willl get a popup telling you what it is.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/Playground4.png\" alt=\"Playground types\" /\u003e\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eThis was going to be five rules, but then I got a bit too verbose so will add\nmore rules in a separate post.\u003c/p\u003e"
    },
    {
        "title" : "Configuring Xcode",
        "date_published" : "2016-02-17T00:00:00Z",
        "date_modified" : "2016-02-17T00:00:00Z",
        "id" : "https://troz.net/post/2016/configuring-xcode/",
        "url" : "https://troz.net/post/2016/configuring-xcode/",
        "content_html" : "\n\n\u003cp\u003eWhile not strictly a part of my Learning Swift series, today I thought I would\ndiscuss some of the ways to configure and use Xcode to be a more productive and\ncomfortable programmer.\u003c/p\u003e\n\n\u003ch2 id=\"1-editor-color-themes-and-fonts\"\u003e1. Editor color themes and fonts:\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/XcodeFontPrefs.png\" alt=\"Editor\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eStep through the supplied themes and find the best one for you. Then click the\n\u0026lsquo;+\u0026rsquo; button at the bottom of the list and duplicate the selected theme. Now you\ncan tweak it to suit you. Each text category can have its own font and size, but\nyou can make multiple selections in order to do a bulk change. don\u0026rsquo;t forget to\ncheck out the Console section too - I dislike the default bold text for many of\nthe console reports, so always change that.\u003c/p\u003e\n\n\u003cp\u003eAn editing font should be mono-spaced i.e. every character should take up\nexactly the same width on the screen. This makes your code look neater and\nneater code is easier to read when you come back to it. I also much prefer a\nsans-serif font, but that is a matter of preference.\u003c/p\u003e\n\n\u003cp\u003eMenlo is the font used by Xcode as a default, but there are many other options\neither in the default installation of OS X or as free downloads. I change every\nnow and then just to keep things interesting, but my current selection is \u003ca href=\"https://github.com/tonsky/FiraCode\"\u003eFira\nCode\u003c/a\u003e. I love the way it merges two character symbols into a single\ncharacter for faster comprehension.\u003c/p\u003e\n\n\u003cp\u003eMy other favourites are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/adobe-fonts/source-code-pro\"\u003eSource Code Pro\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/chrissimpkins/hack\"\u003eHack\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/mozilla/Fira\"\u003eFira\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.fontsquirrel.com/fonts/Inconsolata\"\u003eInconsolata\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eLook for a font that makes it easy to distinguish the digit \u0026lsquo;1\u0026rsquo; from a lowercase\n\u0026lsquo;l\u0026rsquo; and where the digit \u0026lsquo;0\u0026rsquo; is different to the \u0026lsquo;O\u0026rsquo;.\u003c/p\u003e\n\n\u003cp\u003eTo install and use a new font, download the files and then double-click a TTF or\nOTF font file to install it in FontBook. Once the font is installed, you may\nneed to restart Xcode in order to make it available.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"2-add-ons\"\u003e2. Add-ons:\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eUpdate:\u003c/strong\u003e Xcode 8 has removed the ability to run any plugins or to use\nAlcatraz, so this sectrion is no longer valid. Instead Apple is offering offical\nsupport for Xcode Source Editor Extensions, so they are the way of the future.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"3-documentation\"\u003e3. Documentation:\u003c/h2\u003e\n\n\u003cp\u003eXcode has excellent documentation, but unless you specifically download it, this\nwill all be accessed online. If you have a bad or non-existent connection, this\ncan be annoying. Go to Xcode\u0026rsquo;s Preferences -\u0026gt; Downloads and download all the\ndocument sets you are interested in. They are quite large, but having them local\nwill be a big bonus.\u003c/p\u003e\n\n\u003cp\u003eThe other tool I use for documentation is \u003ca href=\"https://kapeli.com/dash\"\u003eDash\u003c/a\u003e. It supports many languages\nand is not just for use in Xcode. I found the Xcode integration plugin was not\nvery useful as it conflicted with other useful behaviours. So I set up a global\nshortcut in System Preferences to search Dash for the selected text. This is\nmuch faster than Xcode\u0026rsquo;s built-in documentation.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/Dash.png\" alt=\"Dash\" /\u003e\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"4-other-preferences\"\u003e4. Other preferences:\u003c/h2\u003e\n\n\u003cp\u003eGo through the preference panes in Xcode\u0026rsquo;s preferences and tweak to suit your\nstyle or your group\u0026rsquo;s preferred style.\u003c/p\u003e\n\n\u003cp\u003eGeneral and Text Editing are important. Text Editing has a second tab for\nIndentation which is easy to miss. Indentation styles seem to cause a lot of\nheated debate, so make sure you check this out.\u003c/p\u003e\n\n\u003cp\u003eAccounts is vital if you are publishing to the App Stores and also makes it easy\nto transfer all your develop information from one computer to another.\u003c/p\u003e\n\n\u003cp\u003eFonts \u0026amp; Colors and Downloads are discussed above.\u003c/p\u003e\n\n\u003cp\u003eI tend to leave the others set to the defaults.\u003c/p\u003e\n"
    },
    {
        "title" : "How do I start to learn Swift?",
        "date_published" : "2016-02-16T00:00:00Z",
        "date_modified" : "2016-02-16T00:00:00Z",
        "id" : "https://troz.net/post/2016/how-do-i-start-to-learn-swift/",
        "url" : "https://troz.net/post/2016/how-do-i-start-to-learn-swift/",
        "content_html" : "\u003cp\u003eThe first thing to do is to download the latest version of Apple\u0026rsquo;s \u003ca href=\"https://itunes.apple.com/book/swift-programming-language/id881256329\"\u003eSwift\nProgramming Language book\u003c/a\u003e from the iBooks Store.\u003c/p\u003e\n\n\u003cp\u003eYou can just read this book, especially the first section: \u0026ldquo;A Swift Tour\u0026rdquo;, but\nyou will get more out of it if you follow along with the playground. There is a\nlink to download the playground from the book which you can use directly if you\nare reading using iBooks on the Mac. If you are not, here is the \u003ca href=\"https://developer.apple.com/go/?id=swift-tour\"\u003edownload\nlink\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou will also need to install \u003ca href=\"https://itunes.apple.com/app/xcode/id497799835\"\u003eXcode\u003c/a\u003e from the Mac App Store. Xcode is\nApple\u0026rsquo;s IDE and is used for programming Mac, iPhones, iPads, Apple Watches and\nApple TVs.\u003c/p\u003e\n\n\u003cp\u003eSwift introduced the playground to Xcode. A playground is a fantastic way to\nlearn and experiment. You do not need to create a project, build, run a separate\napp, install on a device. Code typed into a playground is run immediately and\nyou can see the results instantly, line by line.\u003c/p\u003e\n\n\u003cp\u003eHere is an example of a playground showing the code on the left and the result\nof each line appearing on the right.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/Playground1.png\" alt=\"Playground\" /\u003e\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eOnce you have gone through the Swift Tour, Apple\u0026rsquo;s book becomes more of a\nreference guide to return to whenever you get stuck. The other way I use it is\nto check up on changes made when a new version of Swift is released. As the\nlanguage is still rapidly evolving, these can be quite extensive. Once I have\nthe latest version of the book, I go to the Revision History at the back and\nclick the links to read about the features that have been added or changed.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eApart from Apple\u0026rsquo;s documentation, there are a lot of great web sites, blogs and\nTwitter accounts out there. There are also useful newsletters that give a weekly\nsummary of exciting developments.\u003c/p\u003e\n\n\u003cp\u003eHere are some of my favourites:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.natashatherobot.com\"\u003eNatasha the Robot\u003c/a\u003e - my favourite Swift blogger - sign up for her\nnewsletter and follow her on Twitter.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/swift/blog/\"\u003eApple\u0026rsquo;s Swift Blog\u003c/a\u003e - not many posts, but good for learning about new\nfeatures.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://ericasadun.com\"\u003eErica Sadun\u003c/a\u003e - sometimes a bit too technical for me, but often contains\nsome really useful snippets. Erica has the distinction of being the first\nperson outside Apple to have had a Swift language proposal accepted as part of\nthe open source development process.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://andybargh.com\"\u003eAndy Bargh\u003c/a\u003e - detailed articles on various aspects of Swift, plus a\nweekly newsletter.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.raywenderlich.com\"\u003eRay Wenderlich tutorials\u003c/a\u003e - search for Swift and find heaps of tutorials\ncovering many different aspects.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://swiftsandbox.io\"\u003eSwift Sandbox\u003c/a\u003e - weekly newsletter filled with interesting articles.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://swiftmonthly.com\"\u003eSwiftMonthly\u003c/a\u003e - useful newsletter with links to tutorials, videos and\nprojects.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://swiftdoc.org\"\u003eSwiftDoc.org\u003c/a\u003e - the documentation in Xcode is still heavily skewed\ntowards Objective-C programmers and it can be difficult to find Swift-specific\nentries. This site makes it easy.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAnd I hope you will keep coming back to this site to see what new Swift-related\narticles are available.\u003c/p\u003e\n"
    },
    {
        "title" : "Icon Builder 3.2 Released",
        "date_published" : "2016-02-10T00:00:00Z",
        "date_modified" : "2016-02-10T00:00:00Z",
        "id" : "https://troz.net/post/2016/icon-builder-32-released/",
        "url" : "https://troz.net/post/2016/icon-builder-32-released/",
        "content_html" : "\u003cp\u003e\u003ca href=\"http://itunes.apple.com/app/icon-builder/id552293482\"\u003eIcon Builder 3.2\u003c/a\u003e is now available from the Mac App Store.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIcons for Apple Watch apps now have their alpha channel removed.\u003c/li\u003e\n\u003cli\u003eTidier folder structure for related files (iTunes Artwork files and Read Me).\u003c/li\u003e\n\u003cli\u003eUpdated to work with Xcode 7\u0026rsquo;s Assets.xcassets folders.\u003c/li\u003e\n\u003cli\u003eCreates iPad Pro icons for Xcode 7.2 or later.\u003c/li\u003e\n\u003cli\u003eFix for Retina Macs creating double-sized images.\u003c/li\u003e\n\u003c/ul\u003e\n"
    },
    {
        "title" : "Why is Swift so great?",
        "date_published" : "2016-02-10T00:00:00Z",
        "date_modified" : "2016-02-10T00:00:00Z",
        "id" : "https://troz.net/post/2016/why-is-swift-so-great/",
        "url" : "https://troz.net/post/2016/why-is-swift-so-great/",
        "content_html" : "\n\n\u003cp\u003eFirstly, I can give you the technical answer, as published by Apple:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eSwift is a new programming language for iOS, OS X, watchOS, and tvOS apps that\nbuilds on the best of C and Objective-C, without the constraints of C\ncompatibility. Swift adopts safe programming patterns and adds modern features\nto make programming easier, more flexible, and more fun. Swift’s clean slate,\nbacked by the mature and much-loved Cocoa and Cocoa Touch frameworks, is an\nopportunity to reimagine how software development works.\u003cbr\u003e\u003cbr\u003e Swift has\nbeen years in the making. Apple laid the foundation for Swift by advancing our\nexisting compiler, debugger, and framework infrastructure. We simplified\nmemory management with Automatic Reference Counting (ARC). Our framework\nstack, built on the solid base of Foundation and Cocoa, has been modernized\nand standardized throughout. Objective-C itself has evolved to support blocks,\ncollection literals, and modules, enabling framework adoption of modern\nlanguage technologies without disruption. Thanks to this groundwork, we can\nnow introduce a new language for the future of Apple software development.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eExcerpt From: Apple Inc. “\u003ca href=\"https://itunes.apple.com/book/swift-programming-language/id881256329\"\u003eThe Swift Programming Language (Swift 2.1)\u003c/a\u003e.”\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"now-i-can-give-you-my-opinion\"\u003eNow I can give you my opinion:\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eSwift makes for code that is easier \u0026amp; faster to write.\u003c/li\u003e\n\u003cli\u003eSwift makes for code that is easier \u0026amp; cleaner to read (much more important\nthan ease of writing).\u003c/li\u003e\n\u003cli\u003eSwift code is safer code.\u003c/li\u003e\n\u003cli\u003eSwift breaks free from the out-dated conventions of C-based languages.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eWhen Apple announced Swift at WWDC 2105, I was astounded. That such a major\nevent could have been kept completely secret was amazing. Then I watched every\nvideo from WWDC 2015 that discussed Swift. Some were beyond me and others I\nabsorbed. Looking back, I can see that the development of Objective-C over the\npast few years was all aimed at getting to this point, especially with the\nintroduction of ARC and blocks.\u003c/p\u003e\n\n\u003cp\u003eAt that time, I was deeply involved in an existing Objective-C project and not\nable to do much in Swift. But I went through the introduction at the start of\nthe \u003ca href=\"https://itunes.apple.com/book/swift-programming-language/id881256329\"\u003eSwift Programming Language\u003c/a\u003e book in iBooks and was able to get some\nideas about how the language worked.\u003c/p\u003e\n\n\u003cp\u003eSome months later, I was able to spend time on Swift. As a learning exercise, I\nconverted an existing Objective-C iOS app to Swift. As might be expected, I\nreally just wrote Objective-C code using Swift syntax. It took a lot more\nlearning before I was able to write Swift-y code instead of just translated\nObjective-C. In future posts of this series, I hope to enable others to cross\nthat divide faster than I did.\u003c/p\u003e\n\n\u003cp\u003eNow when I go back to an Objective-C app, I feel like I am walking a tight-rope.\nWhen I use an NSArray, NSSet or NSDictionary, I think \u0026ldquo;How can I tell what sort\nof objects are in that array?\u0026ldquo;. When I use an object, I think \u0026ldquo;What if that\nobject is nil?\u0026ldquo;. All of a sudden, code that appeared stable now feels random.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eOne of the big things that people have latched onto with Swift is that it allows\nfunctional programming. I plan several detailed posts on functional programming\nin this series. But for now I would just recommend that you not worry about the\ndistinction between procedural \u0026amp; functional programming. Both have their\nadvocates and their detractors. Both have their advantages and disadvantages.\nJust do what ever works for you and we can worry about this later.\u003c/p\u003e\n"
    },
    {
        "title" : "Learning Swift - An Introduction",
        "date_published" : "2016-02-09T00:00:00Z",
        "date_modified" : "2016-02-09T00:00:00Z",
        "id" : "https://troz.net/post/2016/learning-swift-an-introduction/",
        "url" : "https://troz.net/post/2016/learning-swift-an-introduction/",
        "content_html" : "\n\n\u003ch2 id=\"welcome-to-learning-swift\"\u003eWelcome to Learning Swift.\u003c/h2\u003e\n\n\u003cp\u003eThis is the first post in what I hope will be an extensive series dealing with\nthe Swift language. Here are some of the questions I hope to answer:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eShould I learn Swift? Why?\u003c/li\u003e\n\u003cli\u003eWhy is Swift so great?\u003c/li\u003e\n\u003cli\u003eHow should I start learning Swift?\u003c/li\u003e\n\u003cli\u003eI already know Objective-C - how do I convert?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAfter that, I am planning a series of posts discussing the major differences of\nSwift from the view point of an Objective-C programmer and the aspects of Swift\nthat I found difficult to grasp. Topics covered will include such things:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eoptionals\u003c/li\u003e\n\u003cli\u003eclosures\u003c/li\u003e\n\u003cli\u003efunctional programming\u003c/li\u003e\n\u003cli\u003eprotocols\u003c/li\u003e\n\u003cli\u003egenerics\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eI am coming from a background of Objective-C, so many of my posts will be\ndealing with aspects of Swift that are not familiar to Objective-C programmers.\nI will not assume any Objective-C programming experience, but some features of\nSwift that are new to me, will be familiar to people accustomed to other\nlanguages.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eSo let\u0026rsquo;s start by answering the first question:\u003c/p\u003e\n\n\u003ch2 id=\"should-i-learn-swift\"\u003eShould I learn Swift?\u003c/h2\u003e\n\n\u003cp\u003eIf you are writing or planning apps for any Apple platform - YES.\u003cbr\u003e If not,\nwait until Swift is available for the platforms you need to support.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"why\"\u003eWhy?\u003c/h2\u003e\n\n\u003ch3 id=\"if-you-are-already-an-ios-or-mac-developer-yes\"\u003eIf you are already an iOS or Mac developer: YES\u003c/h3\u003e\n\n\u003cp\u003eThis is the new language and Apple is very committed to it. Objective-C is not\ngoing away any time soon, but Swift is where it is going to end up, so why not\nmake the jump now while the language is still in development? You have to accept\nthat fact that every release of Xcode is going to break your code, but the\nautomatic re-factoring works very well. And by moving to Swift now, you get the\nchance to influence the direction of a new language. How often does that happen?\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"if-you-are-starting-to-learn-ios-or-mac-development-yes\"\u003eIf you are starting to learn iOS or Mac development: YES\u003c/h3\u003e\n\n\u003cp\u003eIf you have no history with Objective-C, then do not waste your time learning\nit. There is still a lot of sample code out there in Objective-C, but increasing\nnumbers of tutorial sites are using Swift and converting their existing\ntutorials to Swift. It will help if you know just enough Objective-C to read it,\nbut you do not need to know enough to write it.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"if-you-do-not-program-for-mac-or-ios-not-yet\"\u003eIf you do NOT program for Mac or iOS: NOT YET\u003c/h3\u003e\n\n\u003cp\u003eSwift went open source in late 2015. This is a big deal and Apple\u0026rsquo;s plans for\nSwift are quite clear. They want Swift to be such a main-stream language that it\nis used instead of Java for basic computer science courses in universities. This\nwas never going to happen unless the language was open-source and\ncross-platform. It is now open-source and available for \u003ca href=\"https://swift.org/download/#latest-development-snapshots\"\u003eLinux as well as\nMac/iOS\u003c/a\u003e. While Apple has not yet released any further ports, I think there\nare more on the way for Raspberry Pi, Arduino and other embedded systems as well\nas server-side Swift libraries like \u003ca href=\"http://perfect.org\"\u003ePerfect\u003c/a\u003e. I expect that a version for\nWindows will not be far behind.\u003c/p\u003e\n"
    },
    {
        "title" : "New Twitter account",
        "date_published" : "2016-02-09T00:00:00Z",
        "date_modified" : "2016-02-09T00:00:00Z",
        "id" : "https://troz.net/post/2016/new-twitter-account/",
        "url" : "https://troz.net/post/2016/new-twitter-account/",
        "content_html" : "\u003cp\u003eI have started a new Twitter account so that I can provide rapid support to\nusers of my apps. Please contact me \u003ca href=\"https://twitter.com/trozware\"\u003e@trozware\u003c/a\u003e if you have any questions,\nsuggestions, bug reports or would just like to chat.\u003c/p\u003e\n\n\u003cp\u003eI will also be using this account to promote my new \u003ca href=\"/post/2016-02-09-learning-swift-an-introduction/\"\u003eLearning Swift\u003c/a\u003e series.\u003c/p\u003e\n"
    },
    {
        "title" : "Possible issues with Icon Builder \u0026 Watch icons",
        "date_published" : "2016-02-06T00:00:00Z",
        "date_modified" : "2016-02-06T00:00:00Z",
        "id" : "https://troz.net/post/2016/possible-issues-with-iconbuilder/",
        "url" : "https://troz.net/post/2016/possible-issues-with-iconbuilder/",
        "content_html" : "\u003cp\u003eIt has come to my attention that there are two possible issues with Icon Builder\n3.0.1 when using icons created for an Apple Watch app. Once of them is something\nI can fix and the other appears to be a bug in Xcode 7.2\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003e\u003cstrong\u003eUpdate:\u003c/strong\u003e Version 3.2 of Icon Builder is now available in the \u003ca href=\"http://itunes.apple.com/app/icon-builder/id552293482\"\u003eMac App\nStore\u003c/a\u003e. This removes the alpha channel from icons for a watch app.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eThe first problem is that iTines Connect now requires that the icons for an\nApple Watch app include no alpha channel. This is becoming an increasing trend\nwith it first having applied to the large icon file you upload directly to\niTunes Connect, then to screen shots. I expect it to extend to iOS app icons\nsoon, but hopefully Mac app icons can continue to include transparency.\u003c/p\u003e\n\n\u003cp\u003eWith Apple Watch icons, you are supposed to create a set of square icons and\nwatchOS or iTunesConnect applies the rounding mask. Presumably this is more\ncomplicated if the icon contains an alpha channel even if there are no\ntransparent pixels. If your Watch app icons contain an alpha channel, you will\nsee errors like this after uploading your app to iTunes Connect:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eInvalid Icon - The watch application \u0026lsquo;AppName.app/Watch/AppName WatchKit\nApp.app\u0026rsquo; contains an icon file \u0026lsquo;AppName.app/Watch/AppName WatchKit\nApp.app/AppIcon-Watch24x24@2x.png\u0026rsquo; with an alpha channel. Icons should not\nhave an alpha channel.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eYou will probably get this error message for every icon size in the Watch app (8\nin total). Until I release a new version of Icon Builder that allows for this\nthis, I suggest you use this \u003ca href=\"https://www.cocoacontrols.com/controls/alpha-channel-remover\"\u003eAlpha Channel Remover app\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn your Xcode project, go to WatchKit App Assets.xcassets, select the AppIcon\nset, right-click and choose \u0026ldquo;Show in Finder\u0026rdquo;. A folder will open containing\neight .png files and one .json file. Drag \u0026amp; drop the .png files into the Alpha\nChannel Remover window and click the \u0026ldquo;Remove Alpha Channel\u0026rdquo; button. This will\nreplace all those image files with new versions without alpha channels. To\nconfirm this, select any of the images and press Command-I to get info. In the\nMore Info section, you will see \u0026ldquo;Alpha channel: No\u0026rdquo;.\u003c/p\u003e\n\n\u003cp\u003eYou can now submit your app again, but that only solves one of the issues.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eThe other problem is that you will get a warning about the 44x44@2x.png icon\nfile.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eInvalid Icon Name - The watch application \u0026lsquo;AppName.app/Watch/AppName WatchKit\nApp.app\u0026rsquo; contains an invalid icon file name \u0026lsquo;AppName.app/Watch/AppName\nWatchKit App.app/AppIcon-Watch44x44@2x.png\u0026rsquo;. Make sure that icon file names\nfollow the pattern\u003cbr\u003e \u0026ldquo;\u003ccode\u003e*\u0026lt;dimension\u0026gt;@\u0026lt;scale\u0026gt;x.png\u003c/code\u003e\u0026rdquo; and they match the\nrequired dimensions. Please visit \u003ca href=\"https://developer.apple.com/watchkit/\"\u003ehttps://developer.apple.com/watchkit/\u003c/a\u003e for\nmore information.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAs you can see in the error message, the icon name (which is set by Xcode) does\nconform to the required pattern, and the image is the correct size. This appears\nto be a \u003ca href=\"http://www.openradar.me/23801324\"\u003ebug in Xcode 7.2\u003c/a\u003e but does not stop you from submitting your app as\nit is only a warning and not an error. Presumably this will be fixed in later\nversion of Xcode. I am running Xcode 7.2.1 and still see this warning.\u003c/p\u003e\n"
    },
    {
        "title" : "Man Reader 1.5",
        "date_published" : "2016-01-31T00:00:00Z",
        "date_modified" : "2016-01-31T00:00:00Z",
        "id" : "https://troz.net/post/2016/man-reader-1.5/",
        "url" : "https://troz.net/post/2016/man-reader-1.5/",
        "content_html" : "\n\n\u003cp\u003eMan Reader has been updated to version 1.5 with a major improvement in the way\nit looks for available man pages.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/manreader/\"\u003eMan Reader 1.5\u003c/a\u003e is now available through the \u003ca href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\"\u003eMac App Store\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"change-log\"\u003eChange Log:\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eMuch improved searching for available man pages.\u003c/li\u003e\n\u003cli\u003eSand-boxed version now works just as well as the non-sand-boxed.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe main feature of this version is that it solves the previous problems with\nthe App Store version and sand-boxing. This was restricting the number of man\npages listed in Man Reader so I had to release a non-sand-boxed version of the\napp to allow for full functionality.\u003c/p\u003e\n\n\u003cp\u003eHowever I discovered that although this gave better results, it was still\nmissing a lot of man pages. Version 1.5 now queries the man page files in a\ncompletely different way which is listing many more man pages.\u003c/p\u003e\n\n\u003cp\u003eIf you previously had downloaded the Man Reader (no SB) version of the app from\nthis site, please revert to the App Store version which you would have needed to\nhave bought in order to use the downloaded app. If you bought the app from\nPaddle, \u003ca href=\"mailto:sarah@troz.net?subject=Man%20Reader%20transfer%20to%20App%20Store\"\u003econtact me\u003c/a\u003e and I will transfer you to the App Store version.\nNeither of these other versions will be supported or updated any more.\u003c/p\u003e\n"
    },
    {
        "title" : "Using 19th Hole on the Apple Watch",
        "date_published" : "2015-12-12T00:00:00Z",
        "date_modified" : "2015-12-12T00:00:00Z",
        "id" : "https://troz.net/post/2015/using-19th-hole-on-the-apple-watch/",
        "url" : "https://troz.net/post/2015/using-19th-hole-on-the-apple-watch/",
        "content_html" : "\u003cp\u003e19th Hole for iPhone and Apple Watch version 3 is now available through the\n\u003ca href=\"https://itunes.apple.com/us/app/the-19th-hole/id871686159?mt=8\u0026amp;uo=4\"\u003eiTunes App Store\u003c/a\u003e. This version is a complete re-write to accommodate the\nchanges in iOS 9 and watchOS2.\u003c/p\u003e\n\n\u003cp\u003eThe major changes are to do with the way the iPhone and the Watch communicate.\nIn watchOS1, all the brains of the app had to live in the iPhone, meaning that\nevery single interaction on the Watch had to be referred back to the iPhone for\nprocessing and the result sent back to the Watch for display. This lead to\ncommunications delays and breakdowns which caused third-party apps to work\nsluggishly or not at all. In watchOS2, the brains of the watch part of the app\ncan now operate inside the watch, greatly reducing the number of communications\nneeded. As well as that, Apple has now provided us with multiple ways of getting\ndata to and from the Watch which again improves performance and reliability.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eWith the 19th Hole, I made the decision to change the method of inputting\nscores. The previous version used a slider with plus and minus buttons to adjust\nscores. The problems with this were the small target area of the plus \u0026amp; minus\nbuttons as well as the fact that a slider with more than about 3 divisions was\nnot useful as a visual indicator.\u003c/p\u003e\n\n\u003cp\u003eWhen watchOS2 allowed developers access to the digital crown, I decided to\nswitch to using that instead. Now you tap the score box of the player you wish\nto adjust and use the digital crown to select a number. I think this will be\neasier to use while wearing a glove and hope that it is still easy to read out\ndoors.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eThe other suggestion is not to do with watchOS2 but is a general tip for using\napps of this kind. By default, the Apple Watch will always show the watch face\nwhen you raise your wrist. Normally this is the most useful thing, but when\nscoring a round of golf, it would be easier if The 19th Hole app stayed at the\nfront. To make this happen, you need to set to watch to show the last used app\ninstead of the watch face. This can be set using the Apple Watch app on the\nphone or on the watch itself.\u003c/p\u003e\n\n\u003cp\u003eOn the phone:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eOpen the Apple Watch app.\u003c/li\u003e\n\u003cli\u003eSelect My Watch from the tabs at the bottom.\u003c/li\u003e\n\u003cli\u003eTap \u0026ldquo;General\u0026rdquo; and then scroll down to tap \u0026ldquo;Wake Screen\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eMake sure \u0026ldquo;Resume Last Activity\u0026rdquo; is checked.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eOn the watch:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ePress the digital crown to see the app icons.\u003c/li\u003e\n\u003cli\u003eFind and tap the Settings icon.\u003c/li\u003e\n\u003cli\u003eScroll down and tap \u0026ldquo;General\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eTap \u0026ldquo;Wake Screen\u0026rdquo; and scroll down to make sure that \u0026ldquo;Previous Activity\u0026rdquo; is\nchecked in the \u0026ldquo;Resume To\u0026rdquo; section.\u003c/li\u003e\n\u003c/ul\u003e\n"
    },
    {
        "title" : "Dice Pass for Mac",
        "date_published" : "2015-05-30T00:00:00Z",
        "date_modified" : "2015-05-30T00:00:00Z",
        "id" : "https://troz.net/post/2015/dice-pass-for-mac/",
        "url" : "https://troz.net/post/2015/dice-pass-for-mac/",
        "content_html" : "\u003cp\u003eWe live in a world of passwords and passphrases and there is a constant struggle\nbetween having a secure and a memorable password. As a result, many of us re-use\npasswords even though we know this is a bad idea.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://xkcd.com/936/\"\u003eXKCD\u003c/a\u003e had a wonderful comic that illustrated the theory of using a\npassphrase composed of words that are easy to remember but with a combination\nthat made the passphrase very hard to guess. However even when deciding to use a\npassphrase like this, it is not easy for us humans to avoid using words that\nhave meaning for us, particularly when it is something we really need to\nremember.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://world.std.com/~reinhold/diceware.html\"\u003eDiceware\u003c/a\u003e was developed to solve this problem. You have a set of 5 dice and\na list of words assigned to each possible dice roll for 11111 to 66666. You roll\nthe five dice and get the matching word from the list. Repeat this for the\nnumber of words you want to use in your passphrase and you have a random phrase\nthat is hopefully still memorable.\u003c/p\u003e\n\n\u003cp\u003eBut this sounds like a lot of effort and not something you are likely to do when\nfaced by a password entry field on a web page. So \u003ca href=\"/dicepass/\"\u003eDice Pass\u003c/a\u003e was written to\ndo the work for you quickly and easily.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/DicePass_Mac.png\" alt=\"Dice Pass for Mac\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eSelect the number of words you want in your passphrase and see the phrase\nimmediately. Keep clicking the \u0026ldquo;Generate New Phrase\u0026rdquo; button until you get a\nphrase you like. If you feel that the computer is not to be trusted when\ngenerating a random number for the dice rolls, use your real dice and click the\ndice to change them to the roll you got. If you get a passphrase that is good\nexcept for one or two words, use the Re-Roll button beside those words to get a\nnew roll for just that word.\u003c/p\u003e\n\n\u003cp\u003eDice Pass is available from the \u003ca href=\"https://itunes.apple.com/app/dice-pass/id997688302?mt=12\u0026amp;uo=4\"\u003eMac App Store\u003c/a\u003e now.\u003c/p\u003e\n"
    },
    {
        "title" : "Dice Pass",
        "date_published" : "2015-05-29T00:00:00Z",
        "date_modified" : "2015-05-29T00:00:00Z",
        "id" : "https://troz.net/dicepass/",
        "url" : "https://troz.net/dicepass/",
        "content_html" : "\n\n\u003cp\u003eDice Pass is available from the \u003ca href=\"https://itunes.apple.com/us/app/dice-pass/id997688302\"\u003eMac App Store\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eDice Pass is a utility to app to generate random passphrases based on the\n\u003ca href=\"http://world.std.com/~reinhold/diceware.html\"\u003eDiceware system\u003c/a\u003e. Diceware uses a table of pre-defined words, each assigned\na 5 digit code number containing the digits 1 to 6. The official way to generate\na phrase is to roll 5 dice for each word you want in your passphrase and then\nconsult the words table to find the matching word.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/DicePass_Mac.png\" alt=\"Dice Pass for Mac\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThe resulting phrase uses real words or common abbreviations, so it is easier to\nremember than a random collection of characters. At the same time, the random\nselection of words makes the generated passphrase much more secure as it avoids\nthe human tendency to pick words with personal meaning.\u003c/p\u003e\n\n\u003cp\u003eThe Diceware system was invented by Arnold Reinhold. This utility is not\nassociated with or supported by Arnold Reinhold in any way, but uses his\ntechniques with thanks. For more information about Diceware, have a look at the\n\u003ca href=\"http://world.std.com/%7Ereinhold/dicewarefaq.html\"\u003eDiceware Passphrase FAQ page\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe default word list used in this app is a variation compiled by \u003ca href=\"http://world.std.com/~reinhold/beale.wordlist.asc\"\u003eAlan\nBeale\u003c/a\u003e that removes some of the more obscure words. But you can select the\noriginal Diceware word list or the Diceware 8k word list fromt rh Word List menu\nif you prefer to use something different. You can also provide your own word\nlist file if you prefer.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"f-a-q\"\u003eF.A.Q.\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eHow many words should I use in my passphrase?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eArnold Reinhold recommends 6 words. He used to suggest that 5 was sufficient for\nmost needs, but as of 2014 has increased this to 6. See the Diceware Passphrase\nFAQ page for more details. (Link above.)\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHow often can I re-generate the passphrase?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAs often as you like. Keep clicking until you get a phrase that you can\nremember. If you get a phrase where most of the words are good but you would\nlike to change one or two, you can click \u0026rsquo;Re-Roll\u0026rsquo; on individual words to change\nthem.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eIs there a way to check the strength of my passphrase?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere are many password strength checkers on the internet and three of these are\nlisted below. But always be careful when pasting your passphrase into a web\npage.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOnline password strength checkers:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://rumkin.com/tools/password/passchk.php\"\u003eRumkin.com Strength Test\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://howsecureismypassword.net\"\u003eHow Secure Is My Password?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.passwordmeter.com\"\u003eThe Password Meter\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eSome of the words in the phrase are not complete words.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe theory is that shorter words or abbreviations are easier to remember than\nlong ones, without compromising security. But if you get a word you don\u0026rsquo;t like\nor think that you will not be able to remember, just re-roll that word.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eWhat if I want to roll the dice myself?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eDice Pass allows you to tap on the 5 dice to set the numbers needed for each\nword manually. Each time you tap the number will go up be one, wrapping from 6\nback to 1. The app will then look up the word table for you and show the new\nword.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eWhen the phrase gets too long I can\u0026rsquo;t see all the words.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u0026ldquo;Copy\u0026rdquo; button will copy the complete passphrase even if it is not all\nvisible. You can also scroll by clicking and dragging along the passphrase.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDoes my passphrase get saved by the app or transmitted over the internet?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eNo. The app saves no data except for basic preferences (window positioning \u0026amp;\nsize, preferred word list etc.). There is never any data sent over the network\nand the app will work perfectly if you disconnect your computer before using.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eWhat are those 3 buttons: #, A and 1?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eSome sites may require a passphrase that contains a mix of character types.\nThese buttons will insert a special character, change the start of one word to\nuppercase, or insert a number. Tap the button again to undo the change. Again,\nthese characters are chosen using the dice roll system and the special\ncharacters are selected and positioned using the method and data suggested by\nArnold Reinhold.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eI thought there was a version of Dice Pass for iOS!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThere was, but with the need to update apps to support iOS 10, I decided to drop\nsupport for some under-performing iOS apps. If you bought the iOS version and\nwould like to switch to the Mac, send me a screen shot of the app running on\nyour iPhone or iPad and I will send you a free promo code for the Mac version.\u003c/p\u003e\n"
    },
    {
        "title" : "Apple Watch First Impressions",
        "date_published" : "2015-04-29T00:00:00Z",
        "date_modified" : "2015-04-29T00:00:00Z",
        "id" : "https://troz.net/post/2015/apple-watch-first-impressions/",
        "url" : "https://troz.net/post/2015/apple-watch-first-impressions/",
        "content_html" : "\n\n\u003cp\u003eI realise that every one has written one of these posts, but given that everyone\nlooks for and notices different things, I think it is still valid.\u003c/p\u003e\n\n\u003cp\u003eMy first impression was \u0026ldquo;Why does it come in such a large box?\u0026rdquo;. The courier\ndelivered two boxes - my 38mm Apple Watch Sport and Tim\u0026rsquo;s 42mm Apple Watch\nSport. They both came in long boxes, with the 42mm box significantly longer. And\nboth boxes were heavy!\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"un-boxing\"\u003eUn-boxing:\u003c/h3\u003e\n\n\u003cp\u003eOpening them was a typical Apple experience: pull the tag to open the external\ncardboard box, lift out the white internal box. This opens to reveal the watch\nwith the default strap attached (short for 38mm, long for 42mm). Lift the watch\nout and pull the tags to remove the plastic protective coating. (On a side note,\nit drives me crazy when people leave this coating on devices, but I can\u0026rsquo;t see\nthis happening on the watch.) Underneath there is a sleeve containing the other\nhalf watch strap so you can swap from long to short. My family tells me that\nthis also includes a user guide, but I didn’t read that - typical Apple user\u0026hellip;\nUnder the sleeve is the power block and charging cable. The charging puck is\nlarger than I expected and the cable is very long. Having removed all the\ncomponents, the packaging is still quite heavy, so I guess Apple just wanted to\nmake sure that no watches were damaged in transit and that it felt like a\nquality product.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"pairing\"\u003ePairing\u003c/h3\u003e\n\n\u003cp\u003ePairing my watch to my iPhone was amazingly slick. After selecting my language,\nthe watch displayed a sort of nebula pattern. On the iPhone, I launched the\nApple Watch app, selected the pairing option and pointed the phone camera at the\nwatch display. This did the pairing. Then I waited while all the relevant apps\ntransferred their Apple Watch components to the watch and I was ready to start\nusing it.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"the-watch\"\u003eThe Watch:\u003c/h3\u003e\n\n\u003cp\u003eThe watch comes with the modular watch face showing by default. This is a\ndigital time read-out with various \u0026lsquo;complications\u0026rsquo;. Force-touch the watch face\nto change it - this takes a surprisingly strong touch. Then you can swipe\nsideways to select a watch style. Once you have a style selected, some of them\noffer further customisations: select how much detail is shown, choose what extra\ninformation to display, adjust colors.\u003c/p\u003e\n\n\u003cp\u003eThis is a lot of fun and I am still changing mine very frequently. The good\nthing is that your customisations are stored, so if you set up the utility watch\nface in a particular way, then swap to the modular and configure it, when you go\nback to utility, your previous settings are all still there.\u003c/p\u003e\n\n\u003cp\u003eThe screen is gorgeous - very crisp and easy to read.\u003c/p\u003e\n\n\u003cp\u003eTwisting your wrist to show the time works well most of the time. There is a\ndelay that I would estimate at about half a second, presumably to avoid false\npositives triggering unnecessary displays. If you are holding your wrist at an\nunusual angle e.g. showing the watch to someone, this twist will not always\nwork, but tapping the screen will display the watch face instantly.\u003c/p\u003e\n\n\u003cp\u003eTapping on a complication will take you to the relevant parent app e.g. tapping\nthe current temperature will open the Weather app.\u003c/p\u003e\n\n\u003cp\u003eA minor quibble is that the phases of the moon are displayed from a northern\nhemisphere point of view and do not match what we actually see here in\nAustralia.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"battery-life\"\u003eBattery Life:\u003c/h3\u003e\n\n\u003cp\u003eThis is a complete non-issue. On my first day with the watch, the battery was at\n70% when I first turned it on. As you can imagine, usage was very intense that\nfirst day and I got to 8%. Since then, the battery level has only got down to 40\n-50% over a day and it recharges to 100% within 2 hours. Tim\u0026rsquo;s 42mm model gets\nslightly better battery life as expected.\u003c/p\u003e\n\n\u003cp\u003eI started off having the battery indicator as one of the \u0026lsquo;complications\u0026rsquo; on my\nwatch face, but now I just ignore it.\u003c/p\u003e\n\n\u003cp\u003eAnd the battery life of my iPhone has improved remarkably due to so many quick\ntransactions being done through the watch instead.\u003c/p\u003e\n\n\u003cp\u003eI did have a charging problem one night. I woke up and checked the time and\nrealised that the watch was quite warm to the touch. I checked the battery level\nwhich was actually lower than when I had put it on the charger. I took it off\nthe charger for a few hours, then put it back and all was well.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"notifications\"\u003eNotifications\u003c/h3\u003e\n\n\u003cp\u003eHere is where you need to be careful. I had turned off most notifications on my\nphone before getting the watch, so I have not been inconvenienced, in fact I\nhave been able to re-enable many notifications as they are no longer so\nintrusive.\u003c/p\u003e\n\n\u003cp\u003eAt first we thought some notifications were not getting through to the watch,\nthen we found out that if your iPhone is awake and un-locked, notifications are\nnot passed on to the watch. So drop the time until sleep on your phone to the\nminimum which saves your phone battery and makes sure you receive most\nnotifications on the watch.\u003c/p\u003e\n\n\u003cp\u003eIf you want to stop any apps sending notifications through to the watch, this is\neasily set in the iPhone\u0026rsquo;s Apple Watch app.\u003c/p\u003e\n\n\u003cp\u003eI have noticed there is a bit of a delay. I hear an email or message arriving on\nmy phone and it can be half a minute before it gets to my watch.\u003c/p\u003e\n\n\u003cp\u003eOnce you get a notification, you can tap it to go to the parent app, swipe up to\nprocess it in some way depending on the type of notification, or swipe to the\nleft to see a button that will clear the notification. If you want to get rid of\nall your notifications at once, do a force-touch on the notifications screen to\nget the option to clear them all.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"glances\"\u003eGlances\u003c/h3\u003e\n\n\u003cp\u003eGlances are designed to be one screen indicators giving you important\ninformation as quickly as possible. From there, you can decide whether to go to\nthe parent app or not. These are accessed by swiping up from the bottom of the\nscreen when looking at the watch face.\u003c/p\u003e\n\n\u003cp\u003eI found that the most important thing here was to reduce the number of glances\nshown, since they are displayed sequentially. If you have 20 glances installed,\nyou have to swipe at least 20 times to see them all. So go to the Apple Watch\napp on your iPhone and turn off the glances you do not find essential.\u003c/p\u003e\n\n\u003cp\u003eThe first glance in the sequence is essential though as it allows you to toggle\nairplane mode, do not disturb and silent mode. It also has a button that can\nmake your iPhone make a sound to help you locate it. Hold this button down to\nmake the iPhone flash come on as well.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"activity\"\u003eActivity\u003c/h3\u003e\n\n\u003cp\u003eHere I have to confess to my first disappointment. The activity app tracks three\nthings: Move, Exercise and Stand. When you first start the watch, you tell it\nyour age, sex, weight and height. It computes a suggested daily move goal for\nyou which you can adjust at any time. Then it tracks your daily activities and\nshows how well you are doing in relation to your goal. For exercise and standing\nthe goals are 30 minutes exercise and standing for at least one minute in an\nhour 12 times though the day.\u003c/p\u003e\n\n\u003cp\u003eThe move tracking seems to be fine. I am not sure what metrics it uses, but on\nmore active days, the numbers go up.\u003c/p\u003e\n\n\u003cp\u003eThe exercise one doesn\u0026rsquo;t work for me. We went for a walk and when we returned,\nTim\u0026rsquo;s watch showed 25 minutes exercise and mine showed 1 minute. We had walked\nthe same distance at the same speed, as confirmed by the pedometer. Subsequent\ntests revealed that I don\u0026rsquo;t swing my arms enough when walking to trigger what\never sensor this is using. I can\u0026rsquo;t quite see why it ignores the pedometer\ncompletely, but hopefully this can be fixed by a software update. For now, I\njust ignore this circle.\u003c/p\u003e\n\n\u003cp\u003eStanding is another issue since I use a standing desk, so I stand for many hours\neach day. Even when standing, I get my hourly reminders to stand. However I use\nthis as a trigger to make me to move about for a minute, so I suppose that is\nstill useful.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"communications\"\u003eCommunications\u003c/h3\u003e\n\n\u003cp\u003eThe various forms of communication are a real strength of the watch. With Tim \u0026amp;\nI both having watches, we can phone, message (audio or text) and use the new\nDigital Touch to send sketches, taps or heart beats. While it feels a bit weird\nto be talking to your wrist, this works really well and the sound quality is\namazing for such a small device. If you need more privacy, it is very easy to\ntransfer a phone call back to your phone.\u003c/p\u003e\n\n\u003cp\u003eOddly, the watch does not appear to offer FaceTime but always uses standard\nphone calls.\u003c/p\u003e\n\n\u003cp\u003eMessages are where the watch excels. If you get a message with a question, the\nwatch can suggest possible answers so you just have to tap a button. Even\nwithout this, there is a set of pre-defined answers which you can edit in the\nApple Watch app on your iPhone. And you can also use dictation or the new\nanimated emojis. Dictation seems a lot better on the watch than it ever was\nbefore on the phone. And even if dictation is not transcribed perfectly, you can\nsend the message as an audio recording instead of text.\u003c/p\u003e\n\n\u003cp\u003eWhen recording, tap the Done button as soon as you have finished speaking. The\ninclination is to wait for the text to be processed, but the recording carries\non, so stop the recording and let the text processing finish in its own time.\u003c/p\u003e\n\n\u003cp\u003eThe animated emojis work when you send them to other devices as they appear as\nGIFs. You can choose from 3 sets: faces, hands and hearts. Once you have swiped\nto select a set, use the crown to scroll between the options. You can also swipe\nfurther to get to the standard emojis.\u003c/p\u003e\n\n\u003cp\u003eDigital Touch works between watches only. It is a fun gimmick and I can imagine\nus developing a set of key codes or sketches, but neither of us can draw very\nwell, so the sketches are very rough. The heart beat is amusing, but the tapping\nis surprisingly effective as an attention-getter.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"summary\"\u003eSummary\u003c/h3\u003e\n\n\u003cp\u003eI think this is the start of a new way of interacting with our technology in a\nway that is both closer to us and less intrusive. I am loving the watch so far\nand can\u0026rsquo;t wait to see where it goes from here.\u003c/p\u003e\n\n\u003chr /\u003e\n"
    },
    {
        "title" : "Time In Words 4.0",
        "date_published" : "2015-04-15T00:00:00Z",
        "date_modified" : "2015-04-15T00:00:00Z",
        "id" : "https://troz.net/post/2015/time-in-words-4.0/",
        "url" : "https://troz.net/post/2015/time-in-words-4.0/",
        "content_html" : "\u003cp\u003e\u003ca href=\"/time-in-words/\"\u003eTime In Words\u003c/a\u003e for iOS started off as a fun gimmick, emulating the\n\u003ca href=\"http://www.qlocktwo.com/\"\u003eQlocktwo\u003c/a\u003e type of time display where the relevant words are highlighted in\nsome way to spell out the time as a sentence. This very quickly evolved into\nwhat I hoped would be more useful app, still showing the original display, but\nalso providing the current time \u0026amp; date as complete sentences. Then I added time\nconversions and discovered the real power and utility of writing out times as\nwords.\u003c/p\u003e\n\n\u003cp\u003eWhen it comes to converting times, I doubt there are many people in the world\nwho haven\u0026rsquo;t had problems.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIs that morning or afternoon for them?\u003c/li\u003e\n\u003cli\u003eAre they in tomorrow, today or yesterday?\u003c/li\u003e\n\u003cli\u003eWhat if they are using daylight-savings?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHaving the time written out removes all ambiguity. As an example, Time In Words\ncurrently reports very clearly:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIn Los Angeles, it is nine minutes to ten on Tuesday evening (daylight-savings\ntime).\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWhen writing \u003ca href=\"/time-in-words-for-mac/\"\u003eTime In Words for Mac\u003c/a\u003e, I focussed immediately on the time zone\nconversion facilities, and provided a menu bar app that can display as many time\nzones as you like (although more than will show on a single screen would\nprobably get annoying).\u003c/p\u003e\n\n\u003cp\u003eSo when I decided to do a complete re-write of Time In Words for iOS, the\nobvious move was to emulate the Mac version and allow for as many time zones as\nthe user wants, instead of the current 2 or 4 (iPhone or iPad). So I discarded\nthe Qlocktwo display and the separate date display which used a similar\nmechanic. I kept the display that shows the current date and time, but every\ndisplay after that shows the time in a different time zone. The time zones can\nbe changed and re-ordered, so the ones you need most are the fastest to get to\nonce the app opens.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eOne new feature (again taken from the Mac version), is the ability to calculate\n\u0026ldquo;What time will it be\u0026hellip;\u0026rdquo;\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/TiW_what_time.png\" alt=\"What time\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eYou dial in your local date and time to see what time that will be in your\nselected zone. And if you want to calculate the other way around, tap the \u0026ldquo;Swap\ntime zones\u0026rdquo; button.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eThe main impetus for a re-write was the Apple Watch. I thought this would be a\nperfect app for the watch as it could use the Apple Watch\u0026rsquo;s superb time-keeping\nin conjunction with my text generation, to add a significant level of usability\nto the Apple Watch as regards time zone conversions.\u003c/p\u003e\n\n\u003cp\u003eSadly, Apple disagrees…\u003c/p\u003e\n\n\u003cp\u003eI completed the app and submitted it to the App Store for review. The review\nprocess seems to be very fast at the moment and the app moved into review only\none day later. And there it stuck for 3 days. This was very odd. My experience\nis that once an app gets into review, it only takes a few hours, if that. For\n\u003ca href=\"/19th-hole/\"\u003e19th Hole\u003c/a\u003e - my other app with an Apple Watch component, the review process\ntook 30 hours. But 3 days!\u003c/p\u003e\n\n\u003cp\u003eThen I got a phone call from Apple where a very polite person explained to me\nthat although this was not mentioned in any of the documentation, the marketing\npeople had decided that no apps were to be allowed on the watch if they told the\ntime.\u003c/p\u003e\n\n\u003cp\u003eI offered to remove the initial screen telling the local time, so the app would\nnot actually supply the current time but only the time conversions, but that was\nnot acceptable either.\u003c/p\u003e\n\n\u003cp\u003eThen I tried appealing the rejection. My hopes were not high, but I didn\u0026rsquo;t see\nany harm in asking. I again offered to remove the local time display and\nemphasised the accessibility advantages of displaying times in this manner.\nAnother day, another phone call, another polite Apple person saying no.\u003c/p\u003e\n\n\u003cp\u003eSo now I have re-submitted the app for review without the Apple Watch component,\nwhich is a shame. I am hoping that after some months they will review this\npolicy and allow me to try again, but who knows.\u003c/p\u003e\n\n\u003cp\u003eSo you can see what you are missing, here are a couple of screen shots from the\nwatch app showing my local time, plus one time zone:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/Watch_1.png\" alt=\"Local time\" /\u003e\n\u003cspan class=\"float_right\"\u003e\u003cimg src=\"/images/Watch_2.png\" alt=\"Converted time\" /\u003e\u003c/span\u003e\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eOne more minor point. People who actually look at version numbers may wonder why\nI have gone from version 2.5 to version 4.0. When I was working on version 2.5,\nI considered making it version 3.0 and then changed my mind. However by that\ntime I had already created a version 3.0 in iTunesConnect, so I was not able to\nuse 3.0 again this time. This version was such a big change that I wanted it to\nbe a .0 release, so that meant going to version 4.0\u003c/p\u003e\n"
    },
    {
        "title" : "Apple Watch App - Rejected, then Accepted",
        "date_published" : "2015-04-11T00:00:00Z",
        "date_modified" : "2015-04-11T00:00:00Z",
        "id" : "https://troz.net/post/2015/apple-watch-rejected-then-accepted/",
        "url" : "https://troz.net/post/2015/apple-watch-rejected-then-accepted/",
        "content_html" : "\u003cp\u003eAs described in a \u003ca href=\"/post/2015-04-02-my-first-apple-watch-app/\"\u003eprevious post\u003c/a\u003e, about 9 days ago I submitted my first\nApple Watch app for review. The app was an extension of my golf scoring app:\n\u003ca href=\"/19th-hole/\"\u003eThe 19th Hole\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eI expected that App Store review times would go up dramatically once Apple had\nallowed developers to submit watch apps, but this proved to be incorrect. Three\ndays after submission, the app was marked as \u0026ldquo;In Review\u0026rdquo;. This seemed to happen\nlast thing on a Saturday, so there was no further action for two days, at which\npoint the app was rejected, with the following details (sic):\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWe noticed an issue in your app that contributes to a lower quality user\nexperience than Apple users expect. Specifically,\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ewhile using the Apple Watch app with the phone app is in the background mode\n(display off), the new data entry on the Watch App does not refresh\naccordingly until the phone app is turn back on.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eSo it appeared that the communication between the watch and the phone, which\nworked perfectly on the simulators, did not work at all on the actual devices.\nThis is the problem with developing for a device that you do not have.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eAfter some research, it appears that the problem is with the phone not operating\ncorrectly in background mode. Apple provides for communications from the watch\nto the phone. The phone can respond, but only the watch can initiate a\nconnection. I guess this makes sense since every watch will be paired with a\nphone but the reverse will not always be true.\u003c/p\u003e\n\n\u003cp\u003eTo talk to the phone, the watch uses this function:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003efunc openParentApplication(_ userInfo: [NSObject : AnyObject],\n  reply reply: (([NSObject : AnyObject]!, NSError!) -\u0026gt; Void)?) -\u0026gt; Bool\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe phone listens for messages in this event handler:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-swift\"\u003efunc application(_ application: UIApplication,\n  handleWatchKitExtensionRequest userInfo: [NSObject : AnyObject]?,\n  reply reply: (([NSObject : AnyObject]!) -\u0026gt; Void)!)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe name of the WatchKit function is slightly misleading as it does open the\nparent application, but only in the background. Then the parent app is supposed\nto do whatever tasks are called for in the handleWatchKitExtensionRequest\nfunction, and return any required data using the supplied reply() function.\u003c/p\u003e\n\n\u003cp\u003eSo far, so good, and it all worked perfectly in the simulator. But it appears\nthat although this call wakes the iPhone app, it does not stay awake long enough\nto do anything. Many thanks to Brian at \u003ca href=\"http://www.fiveminutewatchkit.com/blog/2015/3/11/one-weird-trick-to-fix-openparentapplicationreply\"\u003eFive Minute WatchKit\u003c/a\u003e who pointed\nout the way to make this work. Firstly, you create a dummy background task\nguaranteed to keep the iPhone app awake for 2 seconds. Then you perform your own\nwork, using another background task. When that is finished, the phone can send\nthe response and end the real background task. The dummy task will time out by\nitself after 2 seconds.\u003c/p\u003e\n\n\u003cp\u003eFor my needs, I could probably reduce the 2 seconds considerably, but since this\nis a problem I am unable to test, I decided just to go with Brian\u0026rsquo;s suggestion\nas it is.\u003c/p\u003e\n\n\u003cp\u003eI re-submitted the app the same day it was rejected, and two days later it was\nback in review. The review process took longer than usual, but about 30 hours\nlater, the app was marked \u0026ldquo;Pending an Apple Release\u0026rdquo;. I assumed this meant that\nApple would release all WatchKit apps on 24th April when the watches shipped,\nbut the following day the app was reported as \u0026ldquo;Pending Developer Release\u0026rdquo; (I had\nset it to release manually). Now I have told iTunesConnect to release the app\nand it is \u0026ldquo;Processing for App Store\u0026rdquo;.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eOn a related note, the start of pre-ordering for the Apple Watch was scheduled\nfor a very civilised 5:01 pm here in eastern Australia. I had three watches all\nlined up in my Favorites in the Apple Store app, ready for ordering. When the\nstore became live (at about 5:03 pm), I could not work out how to order all\nthree in a single operation, so had to place these orders one at a time. I got\nthe first two ordered for the soonest possible delivery, but by the time I got\nto the third (about 3 minutes later), I had missed out and it will ship in 4 to\n6 weeks!\u003c/p\u003e\n"
    },
    {
        "title" : "My First Apple Watch App",
        "date_published" : "2015-04-02T00:00:00Z",
        "date_modified" : "2015-04-02T00:00:00Z",
        "id" : "https://troz.net/post/2015/my-first-apple-watch-app/",
        "url" : "https://troz.net/post/2015/my-first-apple-watch-app/",
        "content_html" : "\u003cp\u003eI have just submitted my first Apple Watch app to the iTunes App Store. This is\na scary thing to do, since I have never seen, touched or used an Apple Watch and\nall I had to go on was the Simulator that Apple supplies with Xcode.\u003c/p\u003e\n\n\u003cp\u003eAt the moment, Apple has only made a limited set of Apple Watch features\navailable to developers, and all Apple Watch apps come tethered to an iOS app -\npresumably this will mainly be iPhone apps, but I wonder will we be able to\nconnect Apple Watches to iPads? Anyway, it made sense to extend one of my\nexisting apps to use the Apple Watch instead of starting from scratch.\u003c/p\u003e\n\n\u003cp\u003eOf my \u003ca href=\"/apps-ios/\"\u003eiOS apps\u003c/a\u003e, I decided that \u003ca href=\"/19th-hole/\"\u003eThe 19th Hole\u003c/a\u003e, my golf scoring app,\nwould be well suited to the Apple Watch. The problem with using the iPhone\nversion to score is that you have to keep pulling your iPhone in and out of your\ngolf bag, sometimes in the rain, sometimes in bright sunlight. Being able to\nenter the scores on your wrist sounds like a big improvement. We know that the\nApple Watch is at least somewhat water-resistant, but we are yet to see how well\nit performs in bright sunlight, however I would expect that Apple has put\nconsiderable effort into this.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eOnce I decided to write an Apple Watch app, the first step was to learn how. I\nread all Apple\u0026rsquo;s published documents to get a feel for what was possible and\nwhat user-interface objects would be available. I find online courses very\nhelpful and by far the best Apple Watch course that I found was \u003ca href=\"http://www.raywenderlich.com/video-tutorials#watchkit\"\u003eRay\nWenderlich\u0026rsquo;s WatchKit video tutorial series\u003c/a\u003e. The instructors were very clear\nand explained how the layout and sizing of objects works on the Apple Watch, as\nwell as how to set up and move between views and how to communicate from the\nWatch back to the iPhone. The layout section of the course was particularly\nvaluable as no other course I found even mentioned this, although it is crucial\nto the interface design and allowing for the two sizes of watch.\u003c/p\u003e\n\n\u003cp\u003eI had released an update to \u003ca href=\"/19th-hole/\"\u003eThe 19th Hole\u003c/a\u003e recently in preparation for this.\nI wanted to have squashed the bugs and updated the interface, so the only\nchanges needed would be the WatchKit ones.\u003c/p\u003e\n\n\u003cp\u003eThe first step in adding a WatchKit app to your existing app is to create a new\ntarget in the Xcode project. Choosing WatchKit actually adds two new targets:\nthe WatchKit Extension which lives on the iPhone and supplies the code for the\nWatch, and the WatchKit App which lives on the Watch and provides the interface.\u003c/p\u003e\n\n\u003cp\u003eI decided to use a paged interface with one page per hole. Each of these pages\nhas a table, with one row per player. A slider with plus \u0026amp; minus buttons lets\nyou enter the score for each player and the total score for each player is also\ndisplayed.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/19thHole-Watch2.png\" alt=\"Data entry\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eApart from this data entry view, I have a splash screen which shows you the\ncurrent round as set up on the iPhone and a final summary screen showing\neveryone\u0026rsquo;s totals.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/19thHole-Watch1.png\" alt=\"Splash screen\" /\u003e\n\u003cimg src=\"/images/19thHole-Watch3.png\" alt=\"Summary\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThese images are taken from the Apple Watch simulator running in 42mm mode.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eThe biggest programming problem was getting the communications working beween\nthe two devices. The 19th Hole uses Core Data for all data storage. My first\nattempt shared this data between the two apps, allowing both to read and update\nthe database. This almost worked, but if both apps were open, then changes in\none device did not get across to the other. It seemed that the data was cached\nand I was unable to find a way to force either app to update every time.\u003c/p\u003e\n\n\u003cp\u003eMy next attempt kept all the data in the iPhone app and had the WatchKit\nextension ask for whatever data it needed and send changes to the iPhone app.\nThis worked much better and I was able to get live updates between the two\ndevices.\u003c/p\u003e\n\n\u003cp\u003eThe other issue is the fact that I have never seen, touched or used an Apple\nWatch. This means that I had to guess a lot of things:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ehow well will it perform?\u003c/li\u003e\n\u003cli\u003ewill the icon look OK?\u003c/li\u003e\n\u003cli\u003eare the controls large enough to use?\u003c/li\u003e\n\u003cli\u003ewill the text be large enough to read?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eMy main philosophy was to keep the Watch app as simple as possible and use the\nstandard interface elements, font sizes etc. Hopefully that will work.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eThe final step was submitting the app to iTunes Connect for review. It was not\nclear to me how to do this, so I logged into iTunes Connect, created a new\nversion and entered the meta-data. I couldn\u0026rsquo;t see anywhere to say anything about\nthe Watch. I archived the main iOS app as usual and validated it with the Store.\nI had a few things to fix up, but I got the build submitted.\u003c/p\u003e\n\n\u003cp\u003eBack to iTunes Connect and once the uploaded build had been processed, I was\nable to select it and click \u0026ldquo;Submit for Review\u0026rdquo;. At this point, the page\nreported an error and showed me a new section where I could upload the Apple\nWatch icon and screen shots.\u003c/p\u003e\n\n\u003cp\u003eI had been unsure how the icon would look when made round, but it looks OK on\nthe iTunes Connect page. How it will look on a tiny watch screen remains to be\nseen. Anyway, once I had my icon and screen shots uploaded, I was able to\nproceed to the next step. But then I got a message saying that the app could not\nbe processed - no explanation. Thankfully, I had seen some developers on Twitter\nreporting this, and somebody said that the solution was to remove the alpha\nchannel from your screen shots. Sorry for not giving credit here - I forget who\nsaid this, but it worked, so thank you whoever you are.\u003c/p\u003e\n\n\u003cp\u003eSo now my app is waiting for review and who knows how long that will take.\nAccording to \u003ca href=\"http://appreviewtimes.com\"\u003eApp Review Times\u003c/a\u003e, the current estimate is 8 days, but the\ntrend is heading upwards. I would expect that to blow out in the next few weeks\nas developers try to get their apps ready for the Apple Watch release date of\nApril 24th.\u003c/p\u003e\n"
    },
    {
        "title" : "LiveCode stacks",
        "date_published" : "2015-03-18T00:00:00Z",
        "date_modified" : "2015-03-18T00:00:00Z",
        "id" : "https://troz.net/post/2015/livecode-stacks/",
        "url" : "https://troz.net/post/2015/livecode-stacks/",
        "content_html" : "\u003cp\u003eWhen I converted my site to Jekyll \u0026amp; GitHub, one of the things I left behind was\na collection of LiveCode (Revolution) stacks. For many years I was active in the\nRevolution community before going in other directions and over that time, I\nbuilt up a small library of stacks that I released into the public domain.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://livecode.com\"\u003eLiveCode\u003c/a\u003e is a cross-platform rapid development environment. There is an\nopen source community edition available for anyone wishing to get started.\u003c/p\u003e\n\n\u003cp\u003eI had assumed that since I had not been an active LiveCode user for many years,\nthese stacks would have become worthless. But in the last couple of days, I have\nreceived a couple of queries from people looking for them.\u003c/p\u003e\n\n\u003cp\u003eSo I created a new GitHub repository and uploaded them all to here: \u003cbr\u003e\n\u003ca href=\"https://github.com/trozware/rev_stacks\"\u003eLiveCode stacks\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eNone of these stacks have been updated recently, but feel free to use or adapt\nas you see fit. They have not been tested using recent versions of LiveCode, so\nmay not work as expected. As stacks are provided as is. Use at your own risk.\u003c/p\u003e\n"
    },
    {
        "title" : "Icon Builder 3.0.1",
        "date_published" : "2015-03-17T00:00:00Z",
        "date_modified" : "2015-03-17T00:00:00Z",
        "id" : "https://troz.net/post/2015/icon-builder-3.0.1/",
        "url" : "https://troz.net/post/2015/icon-builder-3.0.1/",
        "content_html" : "\n\n\u003cp\u003eSo why an announcement for such a minor upgrade?\u003c/p\u003e\n\n\u003cp\u003eVersion 3.0 got no announcement because it was not the release I wanted.\u003c/p\u003e\n\n\u003cp\u003eHaving downloaded the Xcode 6.2 \u0026amp; 6.3 betas, I had worked out what icons were\nneeded to a WatchKit app. This, combined with several other changes, made me\nbump the version number to 3.0.\u003c/p\u003e\n\n\u003cp\u003eSadly, Apple rejected the update because it referred to pre-release products. So\nI pulled all mentions of WatchKit out of the interface and meta data and got 3.0\nreleased.\u003c/p\u003e\n\n\u003cp\u003eAfter the Apple keynote on March 9th, I re-enabled the WatchKit portions of the\napp and re-submitted to the App Store, hoping that with the WatchKit SDK now\npart of the official Xcode release, Apple\u0026rsquo;s reviewers would allow it to get\nthrough this time.\u003c/p\u003e\n\n\u003cp\u003eThis worked - in fact the app was reviewed and accepted within 6 days - so now\nIcon Builder adds WatchKit to its list of supported platforms.\u003c/p\u003e\n\n\u003cp\u003eActually, Apple may have done me a favour in rejecting the first one as they\nchanged the specifications for the icons slightly between Xcode 6.2 beta and\nXcode 6.2 release.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://troz.net/icon-builder/\"\u003eIcon Builder page\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://itunes.apple.com/us/app/icon-builder/id552293482?mt=12\u0026amp;uo=4\"\u003eMac App Store link\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"what-s-new-in-version-3\"\u003eWhat’s New in version 3?\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eSupport for WatchKit app icons (version 3.0.1)\u003c/li\u003e\n\u003cli\u003eSimplified interface: removed display of smaller icons.\u003c/li\u003e\n\u003cli\u003eFix for @3x images not being saved when you selected iOS 6 support.\u003c/li\u003e\n\u003cli\u003eiTunesArtwork@2x file now saved as a JPG to avoid iTunes Connect errors.\u003c/li\u003e\n\u003cli\u003eRemoved CarPlay icon - Xcode sometimes gave errors when this was included.\u003c/li\u003e\n\u003c/ul\u003e\n"
    },
    {
        "title" : "19th Hole",
        "date_published" : "2015-03-16T00:00:00Z",
        "date_modified" : "2015-03-16T00:00:00Z",
        "id" : "https://troz.net/19th-hole/",
        "url" : "https://troz.net/19th-hole/",
        "content_html" : "\n\n\u003cp\u003e19th Hole is the golf scoring app for everyone, and it is available from the\n\u003ca href=\"https://itunes.apple.com/us/app/the-19th-hole/id871686159?mt=8\u0026uo=4\" target=\"itunes_store\"\u003eiTunes\nApp Store\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhether you are playing for the club championship, having a weekend round with\nfriends or playing pitch\u0026rsquo;n\u0026rsquo;putt with the kids, 19th Hole makes it easy to keep\nscore.\u003c/p\u003e\n\n\u003cp\u003eDesigned for fast, accurate score keeping with a color scheme chosen for optimal\noutdoor viewing, 19th Hole uses a simple setup process and an intuitive,\ngesture-based score entry system. During and after the round, you can see totals\nand results using various methods: total strokes, total putts, match play (Irish\nmatch play for more than 2 players) \u0026amp; Stableford.\u003c/p\u003e\n\n\u003cp\u003e19th Hole now includes an Apple Watch app so strokes can be entered quickly and\neasily using the watch to avoid having to pull your iPhone out of your bag.\u003c/p\u003e\n\n\u003cp\u003eWhen you have finished, you can archive the score card for future reference and\nemail the completed card to your fellow players.\u003c/p\u003e\n\n\u003ch2 id=\"scoring-a-round-is-very-simple\"\u003eScoring a round is very simple:\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eSelect a course - the last played course is pre-selected.\u003c/li\u003e\n\u003cli\u003eSelect the players - the last set of players is pre-selected.\u003c/li\u003e\n\u003cli\u003eTap \u0026lsquo;Start Round\u0026rsquo;\u003c/li\u003e\n\u003cli\u003eOptionally enter the players\u0026rsquo; handicaps - the last used handicaps are\npre-selected.\u003c/li\u003e\n\u003cli\u003eAfter each hole, enter the strokes played by each person, on your iPhone or\nApple Watch.\u003c/li\u003e\n\u003cli\u003eYou can also record putts and various other statistics (iPhone only).\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/19-1_4-500.png\" alt=\"Scoring\" /\u003e\n\u003cbr\u003eiPhone\u003c/p\u003e\n\n\u003cp\u003e\u003cimg title=\"Watch Scoring\" alt=\"Watch Scoring\" src=\"/images/19thHole-Watch-v3.jpg\" /\u003e\n\u003cbr\u003eApple Watch\u003c/p\u003e\n\n\u003cp\u003eCourses only need to be entered once and are then saved for future use.\u003cbr /\u003e\nEnter the course name, number of holes and select the tees in use. For each hole,\nenter the par, index/handicap, and the distance from each tee.\u003c/p\u003e\n\n\u003cp\u003eIf you are in a hurry to start the round, enter the name of the course and the\nnumber of holes. The rest of the data can be entered for each hole as you play,\nor can be edited later.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/19-3_4-500.png\" alt=\"Adding a course\" /\u003e\u003c/p\u003e\n\n\u003cp\u003ePlayers can be selected from your Contacts or entered manually. Add email\naddresses so the completed cards can be emailed after the round. Choose an icon\nfor each player. If a player was selected from Contacts, you can use the photo\nassigned in the Contacts app.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/19-4_4-500.png\" alt=\"Adding a player\" /\u003e\u003c/p\u003e\n\n\u003ch2 id=\"gesture-controlled\"\u003eGesture-controlled:\u003c/h2\u003e\n\n\u003cp\u003eAll scores are entered using a special number button that you tap, then drag\nyour finger up or down the screen to raise or lower the number.\u003c/p\u003e\n\n\u003cp\u003eHold your finger down on the number, then move it up or down to change the\nnumber displayed. To make it easier to see what you are doing, hold your finger\ndown on the number, then first drag to one side before dragging up or down. Play\nthe video below to see how this works.\u003c/p\u003e\n\n\u003cvideo controls poster=\"/images/19thHole-scoring-web.png\"\u003e\n  \u003csource src=\"/images/19thHole-scoring-web.mp4\" type=\"video/mp4\"\u003e\n\u003c/video\u003e\n\n\u003cp\u003e\u003cbr\u003e\nTo change hole, swipe left or right in the lower half of the screen, below the line. Swiping back from hole 1 allows you to change the handicaps. Swiping on from the last hole takes you to Notes where you can record any interesting events during this round.\u003c/p\u003e\n\n\u003cp\u003eDuring a round, cumulative statistics are shown at the bottom of the screen.\u003cbr /\u003e\nFor a more complete score card, you can swipe downwards in the middle of the screen.\u003c/p\u003e\n\n\u003cp\u003eTap on the hole details at the top of the screen to edit that data.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/19-5_4-500.png\" alt=\"Gestures\" /\u003e\u003c/p\u003e\n\n\u003ch2 id=\"after-the-game\"\u003eAfter the game:\u003c/h2\u003e\n\n\u003cp\u003eWhile relaxing at \u0026ldquo;The 19th Hole\u0026rdquo; after the game, you can check the scores and\nswipe back and forth between holes to see what happened during the round.\u003c/p\u003e\n\n\u003cp\u003eOnce you are sure the scores are correct, tap the \u0026ldquo;Action\u0026rdquo; button in the top\nright. You can add some notes to the round at this point or archive the round so\nthat the completed score card is saved on your iPhone. After this, you will not\nbe able to make any further changes.\u003c/p\u003e\n\n\u003cp\u003eCompleted rounds are listed when you tap \u0026ldquo;See Old Cards\u0026rdquo; with the most recent at\nthe top. Tap one to see the complete score card for that round. Tap \u0026ldquo;Strokes\u0026rdquo;,\n\u0026ldquo;Putts\u0026rdquo; or \u0026ldquo;Stableford\u0026rdquo; to change what is shown for each hole. The summary is\nshown at the bottom.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/19-2_4-500.png\" alt=\"Final Score Card\" /\u003e\u003c/p\u003e\n"
    },
    {
        "title" : "App Store Preview Videos",
        "date_published" : "2015-03-16T00:00:00Z",
        "date_modified" : "2015-03-16T00:00:00Z",
        "id" : "https://troz.net/post/2015/app-store-preview-videos/",
        "url" : "https://troz.net/post/2015/app-store-preview-videos/",
        "content_html" : "\u003cp\u003eApple now allows app developers to add a video preview of their app when\nuploading to iTunes Connect. This video is shown to potential purchasers when\nthey are looking at an app in the iTunes App Store, just like the screen shots.\u003c/p\u003e\n\n\u003cp\u003eI have been working on an update to \u003ca href=\"http://troz.net/19th-hole/\"\u003e19th Hole\u003c/a\u003e and since it uses a custom\nmethod for data input, I decided that a video would be really useful in this\ncase.\u003c/p\u003e\n\n\u003cp\u003eThe first step was to work out how to record video from my iPhone. In OS X\nYosemite (10.10), this can be done using QuickTime Player. Connect your device\nto your Mac using a Lightning cable (I think it has to be a Lightning cable -\nthe old cables will not work). Open up QuickTime Player and choose \u0026ldquo;New Movie\nRecording\u0026rdquo; from the File menu. By default this shows input from the Mac\u0026rsquo;s\nFaceTime camera, but just to the right of the red Record button, there is a down\narrow that shows a popup menu. Click this and you can select your iPhone as the\nCamera. Since I wanted the sound effects included, I also selected my iPhone as\nthe Microphone, but if you want to provide a voice-over or sound-track, you\nmight want to change this.\u003c/p\u003e\n\n\u003cp\u003eThat handles the technical side of recording, but I needed a way to show where I\nwas tapping and pressing on the iPhone screen. After some searching, I found\n\u003ca href=\"https://github.com/toddreed/Touchpose\"\u003eTouchpose\u003c/a\u003e which was exactly what I wanted. Since it requires changing the\nmain.m file, as well as changes to the app delegate, I created a branch in my\napp\u0026rsquo;s git repository so that I could apply these changes temporarily, but save\nthem for next time. The only alternation I made to the default settings was to\nchange the color of the cursor indicator to suit the color scheme of my app. And\nsince this was a temporary change, I set it to show the cursor indicator all the\ntime, not just when the screen was mirrored. All the details are shown in the\nsample project.\u003c/p\u003e\n\n\u003cp\u003eNext step was to actually record a session. After my first attempt (which lasted\nabout 67 seconds), I checked the Apple specs and found that the video could not\nbe longer than 30 seconds. So I re-thought what I wanted to include and tried\nagain. It took a few tries to get what I wanted, but finally I ended up with a\n.mov file that was 26 seconds long.\u003c/p\u003e\n\n\u003cp\u003eOn to iTunes Connect where I had the new version of the app set up already with\nits screen shots. Since I have an iPhone 6, the video was only suited for the\n4.7 inch section. So I dragged it into the drop zone and waited. No good - the\nvideo frame rate was too high. It has to be 30 fps or less. QuickTime Player had\nmade a video that was 50 fps.\u003c/p\u003e\n\n\u003cp\u003eThe app I usually turn to for any video conversion needs is \u003ca href=\"https://handbrake.fr\"\u003eHandbrake\u003c/a\u003e. So I\nran the app through Handbrake, specifying a frame rate of 30. This converted the\nvideo to .mp4 instead of .mov, but it was 30 fps. It wasn\u0026rsquo;t until I tried to\nupload it to iTunes Connect that I realised Handbrake had cropped the video from\n750 x 1334 to 750 x 1330. After searching through the settings, I found where I\nneeded to turn on custom clipping and set it to 0 so that the original\ndimensions were preserved. But iTunes Connect still didn\u0026rsquo;t like it, although\nthis time the error message was un-informative.\u003c/p\u003e\n\n\u003cp\u003eEventually, the brains trust on the other side of the room suggested iMovie. Not\nonly that, but he found that once the original had been dragged into iMovie, the\nshare options included an \u0026ldquo;App Preview\u0026rdquo; setting. This gave us a .mov file of the\ncorrect dimensions and the correct frame rate which iTunes Connect accepted.\u003c/p\u003e\n\n\u003cp\u003eiTunes Connect that allowed me to select the poster frame for the video and save\nthe changes to the app meta data. At that point, it showed a notice saying that\nthe app preview was being processed which could take up to 24 hours. It appears\nthat the processing has been finished, as that notice has disappeared.\u003c/p\u003e\n\n\u003cp\u003eFor the next stage, I ned to wait until the app gets reviewed and hopefully\napproved. Then it will be interesting to see how the video looks in the iTunes\nApp Store.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eAs a reward for reading this post, here is a pre-release of the video, showing\nhow to enter the score data for a hole of golf using \u003ca href=\"http://troz.net/19th-hole/\"\u003e19th Hole\u003c/a\u003e:\u003c/p\u003e\n\n\u003cvideo controls poster=\"/images/19thHole-scoring-web.png\"\u003e\n  \u003csource src=\"/images/19thHole-scoring-web.mp4\" type=\"video/mp4\"\u003e\n    Your browser does not support the video tag.\n\u003c/video\u003e\n"
    },
    {
        "title" : "Testing automation",
        "date_published" : "2015-03-12T00:00:00Z",
        "date_modified" : "2015-03-12T00:00:00Z",
        "id" : "https://troz.net/post/2015/testing-automation/",
        "url" : "https://troz.net/post/2015/testing-automation/",
        "content_html" : "\u003cp\u003eToday I am experimenting with automating post generation.\u003c/p\u003e\n\n\u003cp\u003eFirstly, there is the structure of the post Markdown document, which really\nboils down to the file name and the header.\u003c/p\u003e\n\n\u003cp\u003eI have set up a macro in \u003ca href=\"http://www.ergonis.com/products/typinator/\"\u003eTypinator\u003c/a\u003e so that I just type the title of the\npost in a text document. I copy that title to the clipboard and type the\nshortcut. The header is then created with the title and the formatted permalink.\u003c/p\u003e\n\n\u003cp\u003eTo save the document, I use another Typinator snippet to convert the title\n(still in the clipboard) to lower case and to replace the spaces in the title\nwith dashes.\u003c/p\u003e\n\n\u003cp\u003eFor starting the local Jekyll server, I have turned to an \u003ca href=\"http://www.alfredapp.com\"\u003eAlfred\u003c/a\u003e workflow.\nI have two actions in the workflow. One opens Terminal, cd\u0026rsquo;s to my site folder\nand runs the command to start the local Jekyll server. The second opens my\ndefault browser to the local Jekyll test address.\u003c/p\u003e\n\n\u003cp\u003eBoth these actions happen simultaneously so the browser usually fails until\nrefreshed. The server is left running in Terminal so I can shut it down when\nfinished testing.\u003c/p\u003e\n\n\u003cp\u003eAfter writing the post, the final stage is to publish, so I need to work out the\ncommands for doing a git commit and push. Then I should be able to automate\nthose tasks.\u003c/p\u003e\n\n\u003cp\u003eTesting the git commands using Terminal, I have come up with the following\nsequence:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003egit add .\ngit commit -a -m \u0026quot;Commit message here\u0026quot;\ngit push\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe commit message could be the title of the post, so I need a way to construct\nthe command and then execute it. Typinator is good at text manipulation, so I\nconstructed another macro that takes the clipboard, uses it as the commit\nmessage and performs the git commands. This gave a good commit message, but the\nactual commit failed, so that was no use.\u003c/p\u003e\n\n\u003cp\u003eSo then I went back to Alfred and created a workflow there with a series of\nTerminal commands to perform the actions above. This only allows a generic\ncommit message, but it works as expected.\u003c/p\u003e\n\n\u003cp\u003eSo there is still room for improvement, but with a set of macros, I can automate\na lot of the standard text entry, which is always good for reducing errors.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eThe sequence now is:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the text editor and type the title of the post.\u003c/li\u003e\n\u003cli\u003eCut this into the clipboard.\u003c/li\u003e\n\u003cli\u003eRun the Typinator macro to fill in the post header.\u003c/li\u003e\n\u003cli\u003eSave the post file, using the Typinator macro to construct the file name.\u003c/li\u003e\n\u003cli\u003eWrite the post, then use an Alfred workflow to test it locally.\u003c/li\u003e\n\u003cli\u003eWhen ready, use an Alfred workflow to publish.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003chr /\u003e\n"
    },
    {
        "title" : "Workflow for writing a post",
        "date_published" : "2015-03-10T00:00:00Z",
        "date_modified" : "2015-03-10T00:00:00Z",
        "id" : "https://troz.net/post/2015/workflow-for-writing-a-post/",
        "url" : "https://troz.net/post/2015/workflow-for-writing-a-post/",
        "content_html" : "\u003cp\u003eSo here is where I need to get used to Jekyll and how things are done. I will\nend up automating this when I am sure of the process, but for now, I am just\ngoing to work my way through it.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eStart up the local Jekyll server:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eI opened Terminal and used \u003ccode\u003ecd\u003c/code\u003e to get to the folder containing my site.\u003c/li\u003e\n\u003cli\u003eNext I started the Jekyll server locally using \u003ccode\u003ejekyll serve\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eThis gave me the address of the local server - in my case\n\u003ccode\u003ehttp://127.0.0.1:4000/\u003c/code\u003e - so I went there in my browser to see the default\npage.\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eMy goal is to write a new blog post (this one in fact).\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eFor advice on creating a new post, I went to the \u003ca href=\"http://jekyllrb.com/docs/posts/\"\u003eJekyll docs\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eJekyll needs the file name to be a specific format which includes the date\nand title.\u003c/li\u003e\n\u003cli\u003eLooking in the \u003ccode\u003e_posts\u003c/code\u003e folder of the site folder, I see the previous post\nfile is titled \u003ccode\u003e2015-03-08-new-site-for-trozware.md\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eAs it is now 10th March 2015, I am saving this file as:\n\u003ccode\u003e2015-03-10-workflow-for-writing-a-post.md\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eSaving at this point shows a Jekyll error in the Terminal, but the next\nstage will fix that.\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eFront matter:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eJekyll specifies that each file must have a \u003ca href=\"http://jekyllrb.com/docs/frontmatter/\"\u003efront matter block\u003c/a\u003e in a\ncertain format.\u003c/li\u003e\n\u003cli\u003eThe header has certain essential parameters and then more optional ones.\u003c/li\u003e\n\u003cli\u003eMy site was imported from WordPress, so the older posts contain several\nheader parameters that may not be necessary any more.\u003c/li\u003e\n\u003cli\u003eLook at the screen shot below to see what I have in this post file:\u003c/li\u003e\n\u003cli\u003eAfter saving, I see this entry in my Terminal:\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eRegenerating: 1 file(s) changed at 2015-03-10 13:50:40 ...done in 0.421789\nseconds.\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eNow I can see the title and the start of the post on my first page and when\nclicking on it, I can see all the text.\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eAdding an image:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThis is not really necessary for this post, but I wanted to document it as\npart of the workflow.\u003c/li\u003e\n\u003cli\u003eI wanted to show the front matter and start of this post, so I took a\nscreen shot of the top of my editor window.\u003c/li\u003e\n\u003cli\u003eThen I renamed the image file and moved it into the \u003ccode\u003eimages\u003c/code\u003e folder of my\nsite.\u003c/li\u003e\n\u003cli\u003eNow to embed the image using this Markdown: \u003ccode\u003e![Post header][2]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eAs you can see, I prefer to group all links (images \u0026amp; URLs) at the end of\nthe document and keep the body of the text as clean as possible.\u003c/li\u003e\n\u003cli\u003e\u003cimg src=\"/images/post_header.png\" alt=\"Post header\" /\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eProofing:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eNow that I have the text of my post, I need to proof-read it from the local\nJekyll server.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003ejekyll serve\u003c/code\u003e command running in Terminal keeps the pages up-to-date\nas you edit, but you will need to refresh your page in the browser manually\nto check your changes.\u003c/li\u003e\n\u003cli\u003eAnd I have found that if you make a major change to the site e.g. a CSS\nfile or a config file, then it is best to stop the Jekyll server and start\nit again to make it re-build all the files.\u003c/li\u003e\n\u003cli\u003eTo be completely sure, stop the server and run \u003ccode\u003ejekyll build\u003c/code\u003e in Terminal\nalthough this may only do what \u003ccode\u003ejekyll serve\u003c/code\u003e does on startup anyway.\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003ePublishing:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eNow it is time to publish.\u003c/li\u003e\n\u003cli\u003eAs I am using GitHub Pages to host, the site files are all part of a single\nGit repository.\u003c/li\u003e\n\u003cli\u003eAnd as I understand it, the data \u003cstrong\u003emust\u003c/strong\u003e be in the \u003ccode\u003emaster\u003c/code\u003e branch.\u003c/li\u003e\n\u003cli\u003eOpening up the GitHub client, I see that my repository has a bunch of\nchanges: - the file I am working on - the image I inserted - feed.xml -\nindex.html files for each page\u003c/li\u003e\n\u003cli\u003eThis is as expected, since all pages are pre-generated when using Jekyll,\nso pages of posts must be re-rendered when a new post is added to the top.\u003c/li\u003e\n\u003cli\u003eNote that several of the files appear twice: once from where they are\nedited and once from the _site folder which serves them.\u003c/li\u003e\n\u003cli\u003eJust two simple steps now, using the GitHub client: 1. Commit 2. Sync\u003c/li\u003e\n\u003cli\u003eAnd that\u0026rsquo;s it. My new post is online and ready for reading.\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eSummary:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThis was my first post after the one I wrote when setting up, so the first\nreal post.\u003c/li\u003e\n\u003cli\u003eWhile there appear to be a lot of steps, none of them are difficult.\u003c/li\u003e\n\u003cli\u003eBut I do have 4 apps running to do it: 1. TextWrangler for editing 1.\nTerminal to run the local Jekyll server 1. Safari to check the finished\npost 1. GitHub to commit and upload\u003c/li\u003e\n\u003cli\u003eAutomating this is an obvious next step, so stay tuned\u0026hellip;\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ol\u003e\n"
    },
    {
        "title" : "New Site for TrozWare",
        "date_published" : "2015-03-08T00:00:00Z",
        "date_modified" : "2015-03-08T00:00:00Z",
        "id" : "https://troz.net/post/2015/new-site-for-trozware/",
        "url" : "https://troz.net/post/2015/new-site-for-trozware/",
        "content_html" : "\n\n\u003ch2 id=\"welcome-to-trozware-s-new-site\"\u003eWelcome to TrozWare\u0026rsquo;s new site.\u003c/h2\u003e\n\n\u003cp\u003eIt appears that I am not alone in deciding to move away from WordPress.\nWordPress is great - easy to set up and with lots of cool themes to allow\ncustomisation of your site. But it is slow, especially if (like me) you are\nrunning on a low-cost shared server.\u003c/p\u003e\n\n\u003cp\u003eI had been reading about \u003ca href=\"http://jekyllrb.com\"\u003eJekyll\u003c/a\u003e, so I decide to give it a go and also host\nmy site on \u003ca href=\"https://pages.github.com\"\u003eGitHub\u003c/a\u003e, taking advantage of their faster servers.\u003c/p\u003e\n\n\u003cp\u003eI followed the advice given by \u003ca href=\"http://www.girliemac.com/blog/2013/12/27/wordpress-to-jekyll/\"\u003eGirlie Mac\u003c/a\u003e and performed the migration from\nmy self-hosted WordPress site. I am using the \u003ca href=\"http://pixyll.com\"\u003ePixyll\u003c/a\u003e theme by \u003ca href=\"http://johnotander.com\"\u003eJohn\nOtander\u003c/a\u003e with a few tweaks of my own. The site is much faster to load, and I\nam hoping that the easier editing will inspire me to write more posts.\u003c/p\u003e\n\n\u003cp\u003eOf course it wasn\u0026rsquo;t all positive. WordPress did give me some features I liked,\nbut I think overall the result is better.\u003c/p\u003e\n\n\u003ch3 id=\"wordpress\"\u003eWordPress\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eWordPress gave me a full LAMP stack, so I could run my own PHP scripts.\u003c/li\u003e\n\u003cli\u003eWordPress gave me a search function.\u003c/li\u003e\n\u003cli\u003eCommenting was built-in.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"jekyll\"\u003eJekyll\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eJekyll builds the pages out as static HTML, so all pages are pre-generated for\nfast loading.\u003c/li\u003e\n\u003cli\u003eWriting for Jekyll is pure Markdown so it is easier to write and preview\nlocally.\u003c/li\u003e\n\u003cli\u003eSome of the things I needed a plugin for in WordPress can be done natively in\nJekyll: - tables - syntax-highlighting\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFor comments, I have switched to \u003ca href=\"https://disqus.com\"\u003eDisqus\u003c/a\u003e, but I am not sure about it yet. I\nwill evaluate over the next few weeks. In WordPress, I used a plugin to handle\nthe spam that inevitably arrived. I am hoping that Disqus will protect me from\nthat, but I have to see how good a job it does and whether the few real comments\nare worth it. A better option might be to turn off comments completely and just\nhave a contact form (which I have added using \u003ca href=\"http://formspree.io\"\u003eFormspree\u003c/a\u003e). Working in\nMarkdown is great. I love how I can have a really clean look in my editor and\nstill end up with well formatted HTML. I use Coda 2 on my Mac as my standard web\neditor, so that is what I am writing in now. I will probably experiment with\nother Markdown editors as I go. And for any Mac users out there working in\nMarkdown, I highly recommend \u003ca href=\"http://brettterpstra.com/projects/markdown-service-tools/\"\u003eBrett Terpstra\u0026rsquo;s Markdown Service Tools\u003c/a\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "World Time In Words",
        "date_published" : "2015-02-10T00:00:00Z",
        "date_modified" : "2015-02-10T00:00:00Z",
        "id" : "https://troz.net/world-time-in-words/",
        "url" : "https://troz.net/world-time-in-words/",
        "content_html" : "\u003cp\u003e\u003ca href=\"http://itunes.apple.com/au/app/time-in-words/id509085586?mt=8\" target=\"_blank\"\u003eWorld\nTime In Words version 3.0\u003c/a\u003e is now available in the Mac App Store.\u003c/p\u003e\n\n\u003cp\u003eWith version 3.0 of this app, I have changed the name to \u0026ldquo;World Time In Words\u0026rdquo;.\nThis is to reflect what I feel to be the most useful feature of this app: the\nability to convert between time zones.\u003c/p\u003e\n\n\u003cp\u003eIt has two other new features:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eThe time shown in the menu bar can now be set to use 24-hour time. Go to\nPreferences to change this.\u003c/li\u003e\n\u003cli\u003eIf you temporarily need to see the time in digital format, hold down Option\nwhen opening the menu.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eAnd there is one other thing in this version that I am almost too embarrassed to\nmention: after using this app for about two years, it was finally pointed out to\nme that the 3rd of every month was being shown as the \u0026ldquo;3th\u0026rdquo;. Oh dear - it was a\ncopy-paste error but I should I found it a long time ago.\u003c/p\u003e\n\n\u003cp\u003eAs always, please let me know if you have any suggestions for future versions.\u003c/p\u003e\n"
    },
    {
        "title" : "Man Reader 1.4 Now Available",
        "date_published" : "2014-04-03T00:00:00Z",
        "date_modified" : "2014-04-03T00:00:00Z",
        "id" : "https://troz.net/post/2014/man-reader-1-4-now-available/",
        "url" : "https://troz.net/post/2014/man-reader-1-4-now-available/",
        "content_html" : "\n\n\u003cp\u003e\u003ca href=\"/manreader/\"\u003eMan Reader 1.4\u003c/a\u003e is now available through the \u003ca href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\"\u003eMac App Store\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch4 id=\"the-new-features-and-fixes-are\"\u003eThe new features and fixes are:\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eFix for plain text view not wrapping correctly for odd-sized fonts.\u003c/li\u003e\n\u003cli\u003eFix for HTML text view over-riding font colors that may be invisible.\u003c/li\u003e\n\u003cli\u003eSearch for missing entry (e.g. g++) no longer requires Enter or Return.\u003c/li\u003e\n\u003cli\u003eBetter automatic selection of matching entries while searching.\u003c/li\u003e\n\u003cli\u003eFix for animation warning message appearing in Console.\u003c/li\u003e\n\u003cli\u003eStatus display shows when man page list is being updated.\u003c/li\u003e\n\u003cli\u003eSearching inside a page now allows a minimum of 2 characters (was 3), so\nflags\u003cbr /\u003e\ne.g. ‘-b’ do not need to be escaped.\u003c/li\u003e\n\u003cli\u003eFixed path for Network Utility in tool bar (moved in OS X 10.9).\u003c/li\u003e\n\u003cli\u003eMore information available about the effects of sand-boxing for this app.\u003c/li\u003e\n\u003c/ul\u003e\n"
    },
    {
        "title" : "Email clients for Mac and iOS",
        "date_published" : "2014-03-25T00:00:00Z",
        "date_modified" : "2014-03-25T00:00:00Z",
        "id" : "https://troz.net/post/2014/email-clients-for-mac-ios/",
        "url" : "https://troz.net/post/2014/email-clients-for-mac-ios/",
        "content_html" : "\u003cp\u003eSome people are moving away from email, but for me, it remains the best way to\ncommunicate online. I get to keep a record of conversations and the attached\nfiles are with the text so I can always see the context.\u003c/p\u003e\n\n\u003cp\u003eBut I think everyone would agree that Apple have dropped the ball with Mail in\nOS X Mavericks, and to a lesser extent, in iOS 7.\u003c/p\u003e\n\n\u003cp\u003eSo I have been on a campaign lately to find an email client that suits my needs.\nI don\u0026rsquo;t feel that I have found the perfect answer yet, but I am getting there.\u003c/p\u003e\n\n\u003cp\u003eThe first step was to work out what I really needed in an email client:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003esupport for IMAP accounts and Gmail accounts\u003c/li\u003e\n\u003cli\u003e\u003cspan style=\"line-height: 1.5;\"\u003eunified inbox - all accounts shown\ntogether\u003c/span\u003e\u003c/li\u003e\n\u003cli\u003econversation threading\u003c/li\u003e\n\u003cli\u003esupport for POP accounts (optional)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003eOn the Mac, I have narrowed it down to two clients that I am swapping between\nevery few days: \u003ca href=\"https://www.uniboxapp.com\" target=\"_blank\"\u003eUnibox\u003c/a\u003e\nand \u003ca href=\"http://airmailapp.com\" target=\"_blank\"\u003eAirmail\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eUnibox is different in the way it displays your emails. It is much more focussed\non people and conversations, so the side bar shows all the people who you have\nsent emails to or received emails from, grouped by date. I really like the\nmerging of incoming \u0026amp; outgoing emails, but it can be a bit weird if you delete\nthe latest email from someone who then disappears from sight.\u003c/p\u003e\n\n\u003cp\u003eEmails are grouped by a single person, not by conversation. There is a button on\nappropriate emails to toggle conversation view for that particular thread, but\nit doesn\u0026rsquo;t stick.\u003c/p\u003e\n\n\u003cp\u003eIn order to show a conversation, they truncate emails in the main part of the\nwindow and show a \u0026ldquo;More\u0026rdquo; button at the bottom of the email to expand it. This\nwas annoying, but in the latest beta, it performs much better, so you are not\ncontinually tapping this to see a long email.\u003c/p\u003e\n\n\u003cp\u003eAirmail has a more conventional display. Threading and the layout of threaded\nemails are both very nice. There are multiple view options, which I find can get\na bit messy looking, so I prefer the \u0026ldquo;Minimized View\u0026rdquo; setting. Airmail also does\nPOP accounts which is a plus.\u003c/p\u003e\n\n\u003cp\u003eThe main reason I keep going back to Unibox is the unification. I have grown to\nlike having sent and received messages all in the same window without having to\ngo and find them somewhere else.\u003c/p\u003e\n\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\n\u003cp\u003eOn the iPad, I am currently using\n\u003ca href=\"http://www.getboxer.com\" target=\"_blank\"\u003eBoxer\u003c/a\u003e and have tried\nnumerous others. \u003ca href=\"http://www.moltoapp.com/\" target=\"_blank\"\u003eMolto\u003c/a\u003e\nwas quite good and the interface was fun, but it would only use landscape mode\nand like to be able to swap. Boxer is not great in portrait mode, but it does\nwork.\u003c/p\u003e\n\n\u003cp\u003eSo the jury is still out for iPad email clients, but on the Mac, I am leaning\ntowards Unibox.\u003c/p\u003e\n"
    },
    {
        "title" : "Berio Sequenza VII",
        "date_published" : "2013-11-07T00:00:00Z",
        "date_modified" : "2013-11-07T00:00:00Z",
        "id" : "https://troz.net/post/2013/berio-sequenza-vii/",
        "url" : "https://troz.net/post/2013/berio-sequenza-vii/",
        "content_html" : "\u003cp\u003eSo my latest app is way outside my usual sphere but that\u0026rsquo;s what happens when\nfamily decide that what you do might actually be useful!\u003c/p\u003e\n\n\u003cp\u003eMy son is an oboist and he is currently learning Berio\u0026rsquo;s Sequenza VII for Oboe.\nThis is a weird piece without a standard time signature. Instead each line has\n13 bars with each bar being allocated a certain time span in actual seconds. As\ncan easily be imagined, this makes learning and practicing this piece more of a\nmathematical exercise than a musical one.\u003c/p\u003e\n\n\u003cp\u003eSo I wrote him an app to sound out the end of each bar. Once he and his teacher\nused it, a few more features crept in and now I think it will be of great\nassistance to any student or teacher trying to work on this piece.\u003c/p\u003e\n\n\u003cp\u003eWhile I doubt that many oboists frequent this web site, it anyone who does can\npass this on to any oboist, I would be very grateful, and I think the oboist\nwould be too!\u003c/p\u003e\n\n\u003cp\u003eThe app is available through the\n\u003ca href=\"https://itunes.apple.com/us/app/sequenza-vii/id730234638?mt=8\u0026uo=4\" target=\"_blank\"\u003eiTunes\nApp Store\u003c/a\u003e.\u003cbr /\u003e\nMore details are on \u003ca href=\"/berio/\" title=\"Berio’s Sequenza VII\"\u003ethis page\u003c/a\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "Berio's Sequenza VII",
        "date_published" : "2013-11-06T00:00:00Z",
        "date_modified" : "2013-11-06T00:00:00Z",
        "id" : "https://troz.net/berio/",
        "url" : "https://troz.net/berio/",
        "content_html" : "\u003cp\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Luciano_Berio\" target=\"itunes_store\"\u003eLuciano\nBerio\u003c/a\u003e wrote a series of Sequenzas for various instruments with Sequenza VII\nbeing the one for oboe.\u003cbr /\u003e\n\u003cimg src=\"/images/Berio_icon.png\" alt=\"Sequenza VII icon\" width=\"86\" height=\"86\" /\u003e\u003c/p\u003e\n\n\u003cp\u003ePreparing this work creates some unique problems for the oboist as Berio did not\nadhere to any time signature that could be indicated by a metronome. Instead,\neach line consists of\n\u003ca href=\"http://www.nuoboe.com/berio/html/factsheet.html\" target=\"itunes_store\"\u003e13\nbars (measures) with each bar\u0026rsquo;s length specified in exact seconds\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhen my son (an oboist currently studying in Melbourne, Australia) started\ntrying to learn this piece, it occurred to him that having an iOS app developer\nin the family could be of some assistance. So with instructions from him and\nwith suggestions from other oboists, I have developed the\n\u003ca href=\"https://itunes.apple.com/us/app/sequenza-vii/id730234638?mt=8\u0026uo=4\" target=\"itunes_store\"\u003eBerio\nSequenza VII app for iPhone or iPod Touch\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/Berio_2-500.png\" alt=\"Berio's Sequenza VII\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eWith the default settings it will count the bar lengths, using metronome-like\nsounds to mark the starts of bars and lines. The player who needs to practice a\nspecific bar can easily set the app to start at that bar and even to repeat that\nbar length continuously.\u003c/p\u003e\n\n\u003cp\u003eTapping the \u0026ldquo;i\u0026rdquo; button at the bottom right of the screen takes you to the more\nadvanced options.\u003c/p\u003e\n\n\u003cp\u003eThe \u0026ldquo;Settings\u0026rdquo; section deals primarily with the B4 drone that is supposed to\naccompany the performance of this piece. While in an actual performance, the\ndynamics of this drone would vary, for this practice app it remains at a\nconstant volume as specified by you. The volume can be set to a percentage of\nthe iPhone\u0026rsquo;s current volume setting. If it is still too quiet, plug your iPhone\ninto a speaker or use some sort of physical amplification. If you prefer to play\nwith an A other than 440 Hz, that can be adjusted. And finally, the wave form\nused to generate this drone sound can be switched between a sine wave or a\ntriangle wave. Disclaimer: excessive use of this drone may cause loss of\nfriends!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/Berio_3-500.png\" alt=\"Settings\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThe Settings page also includes an option to slow down the times for practice.\nAt 100% speed, bar 1 on each line will last for 3 seconds. The speed can be\nreduced to allow each bar to last longer, for use during the learning process.\u003c/p\u003e\n\n\u003cp\u003eThe \u0026ldquo;Bars \u0026amp; Sounds\u0026rdquo; section allows you to customise the various options marking\nthe start of each new bar. You can specify the number of seconds \u0026amp; the sound\nused to count you in after tapping the Start button. You can also select which\nof the metronome sounds to use to mark the start of each bar, making the first\nbar of each line use a different sound if you prefer. Finally, in case you are\nplaying so loudly that you are unable to hear the iPhone, you can set the screen\nto flash a different color at the start of each new bar.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/Berio_4-500.png\" alt=\"Bars \u0026 Sounds\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eJacqueline Leclair wrote a\n\u003ca href=\"http://www.nuoboe.com/berio/index.html\" target=\"_blank\"\u003esupplementary\nedition\u003c/a\u003e of this work in 2000 using traditional time signatures in a way that\nalmost exactly duplicates the original timings. This app is designed for use\nwith the original score using Berio\u0026rsquo;s real time bar lengths.\u003c/p\u003e\n"
    },
    {
        "title" : "Icon Builder \u0026 iOS 7",
        "date_published" : "2013-09-23T00:00:00Z",
        "date_modified" : "2013-09-23T00:00:00Z",
        "id" : "https://troz.net/post/2013/icon-builder-ios-7/",
        "url" : "https://troz.net/post/2013/icon-builder-ios-7/",
        "content_html" : "\u003cp\u003eIcon Builder 1.2 was released on 18 September 2013.\u003cbr /\u003e\nIt was an update with 2 new functions:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe ability to create images to suit an Xcode 5 assets library\u003c/li\u003e\n\u003cli\u003eThe ability to create icons with the required sizes for IOS 7 apps.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eKnowing that iOS 7 apps can only be built using Xcode 5, I linked the switch for\nthese 2 abilities in a single check box.\u003cbr /\u003e\nThe problem was not really that they were in a single checkbox but that I had labelled\nit badly, so it was not obvious that this was what needed to be checked to create\niOS 7 sized icon files.\u003c/p\u003e\n\n\u003cp\u003eAfter some feedback from early users, it became clear to me that this was not\nenough. So 1.2.1 is now waiting for Apple\u0026rsquo;s approval.\u003cbr /\u003e\nThe changes in this version are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eMore informative labelling of the checkbox.\u003c/li\u003e\n\u003cli\u003eThe checkbox is checked by default is Xcode 5 is installed\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhile waiting for the new version to be approved, please be aware that iOS 7\nicon sizes will only be generated if you select \u0026ldquo;Check Assets (for Xcode 5.x or\nlater)\u0026rdquo;\u003c/p\u003e\n"
    },
    {
        "title" : "Icon apps updated",
        "date_published" : "2013-09-19T00:00:00Z",
        "date_modified" : "2013-09-19T00:00:00Z",
        "id" : "https://troz.net/post/2013/icon-apps-updated/",
        "url" : "https://troz.net/post/2013/icon-apps-updated/",
        "content_html" : "\u003cp\u003e\u003ca href=\"https://itunes.apple.com/au/app/icns-maker/id550942266?mt=12\" target=\"_blank\"\u003eIcns\nMaker\u003c/a\u003e and\n\u003ca href=\"https://itunes.apple.com/au/app/icon-builder/id552293482?mt=12\" target=\"_blank\"\u003eIcon\nBuilder\u003c/a\u003e have both just been updated to support Xcode 5.\u003c/p\u003e\n\n\u003cp\u003eIcon Builder is a Mac app that takes your images and creates all the required\nicon files for use in your iOS apps.\u003cbr /\u003e\nIt now supports Xcode 5\u0026rsquo;s image assets folders and if you are using Xcode 5, it will\ncreate the icon sizes required for iOS 7 app.\u003c/p\u003e\n\n\u003cp\u003eIcns Maker is a Mac app that takes your images and creates icons for use in your\nMac apps.\u003cbr /\u003e\nFor Xcode 4 or earlier, it creates a .icns file.\u003cbr /\u003e\nFor Xcode 5, it creates a folder of images for use in your project\u0026rsquo;s image\nassets folder.\u003c/p\u003e\n"
    },
    {
        "title" : "Markdown",
        "date_published" : "2013-04-01T00:00:00Z",
        "date_modified" : "2013-04-01T00:00:00Z",
        "id" : "https://troz.net/post/2013/markdown/",
        "url" : "https://troz.net/post/2013/markdown/",
        "content_html" : "\n\n\u003cp\u003eFor some time now, I have been aware of the increasing trend towards using\nMarkdown for text editing and for creating HTML. Markdown has been on my list of\n\u0026ldquo;things I should learn some day\u0026rdquo; so I was interested last week to read about a\nnew iBooks book called \u003ca href=\"http://macsparky.com/markdown\"\u003eThe MacSparky Markdown Field Guide\u003c/a\u003e. This was\nsufficient inspiration so I got the book and read through it this weekend.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://static.squarespace.com/static/5008676d84aeae82b8acdd8c/t/5147c7a6e4b0d224b4419401/1363658669971/Markdown%20Cover%20Art%20-%20JPG.jpg?format=500w\" alt=\"The MacSparky Markdown Field Guide\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eActually, to say that I \u003cem\u003eread\u003c/em\u003e through the book is a mis-representation. The\nbook was written using iBooks Author specially for the iPad and contains screen\ncasts and interviews as well as text. But by the end of it, I now feel I have a\nbasic understanding on Markdown and the ways in which I can use it.\u003c/p\u003e\n\n\u003cp\u003eI guess the really big thing about using Markdown is that is creates plain text\nfiles that are human-readable even without being converted to HTML. This makes\nthem future-proof since they are not tied to a proprietary file format that may\ncease to exist at any time.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"using-markdown\"\u003eUsing Markdown:\u003c/h2\u003e\n\n\u003cp\u003eSince this web site is a self-hosted WordPress site, my next step was to look\nfor a WordPress plugin that would allow me to use Markdown to create my posts. I\ncould have used a Markdown editor that had HTML export, but I wanted to try\nsomething that would eliminate the extra step. The first one I decide to try was\n\u003ca href=\"http://wordpress.org/extend/plugins/markdown-on-save-improved/\"\u003eMarkdown on Save Improved\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eOne of the main reasons for choosing this one was that it stores the posts as\nboth Markdown and as HTML. This saves time when going back to edit a post,\navoids the constant changes that creep in when converting between formats all\nthe time, and makes it so that the post will still display correctly even if\nMarkdown is no longer supported. The only problem I have found so far is that it\ndoesn\u0026rsquo;t automatically create links \u0026amp; image links using the Markdown format, but\nuses standard \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e links instead.\u003c/p\u003e\n\n\u003cp\u003eMy next stop, since I always use a Mac, was to get Brett Terpstra\u0026rsquo;s collection\nof \u003ca href=\"http://brettterpstra.com/projects/markdown-service-tools/\"\u003eServices for Markdown\u003c/a\u003e. These add a lot on convenient shortcuts: one of\nmy favourites is the ability to convert inline links to references links for\nincreased readability while editing.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"first-impressions\"\u003eFirst Impressions:\u003c/h2\u003e\n\n\u003cp\u003eSo having written this first post in Markdown, how do I feel about it? I haven\u0026rsquo;t\nreally tried anything too weird this time, but there are a few things that were\nvery easy to do. Particularly in the paragraph where I was talking about links \u0026amp;\nimages and wanted to include the tags as text without having it interpreted as\nHTML. All I had to do was surround the text with back-ticks.\u003c/p\u003e\n\n\u003cp\u003eLinks are vastly easier to manage and edit in Markdown. I miss the ability to\nspecify that links should open in a new tab - I prefer to have that setting for\nlinks that take you outside my web site, but the modern theories on usability\nseem to be heading towards deprecation of this feature, so I may just stop using\nit.\u003c/p\u003e\n\n\u003cp\u003eWith the standard WordPress editor, I always felt that I was fighting it. I had\nto swap between the visual \u0026amp; HTML editor tabs and when I swapped tabs, things\nwould sometimes change without me doing anything. So far, I feel more in control\nusing Markdown and although I have lost the WYSIWYG visual editor, I no longer\nhave to wade through the HTML editor to get the effect I want or to remove the\nresults of a few careless clicks.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"what-next\"\u003eWhat next?\u003c/h2\u003e\n\n\u003cp\u003eSome of the things on my wish list would be solved by a better editor and some\nby more powerful syntax.\u003c/p\u003e\n\n\u003cp\u003eEditor:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdding links \u0026amp; images using Markdown style instead of HTML\u003c/li\u003e\n\u003cli\u003eBeing able to create lists\n\n\u003cul\u003e\n\u003cli\u003eMarkdown makes this very easy but this WP plugin does not support lists as\nfar as I can tell\u003c/li\u003e\n\u003cli\u003eSo these lists are in HTML\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSyntax:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAlignment of text \u0026amp; images\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eUsing a stand-alone Markdown editor would solve the editor questions, but I\nwanted to try writing this post completely in WordPress.\u003cbr /\u003e\nAnd with the alignment, there is nothing to stop me adding CSS to the Markdown.\u003c/p\u003e\n\n\u003cp\u003eNext time, I will test out a different WordPress Markdown editor and see how\nthat goes. I will also test using a standalone editor and exporting its HTML to\ncreate a post.\u003c/p\u003e\n"
    },
    {
        "title" : "A Knight's Move 1.3",
        "date_published" : "2013-02-27T00:00:00Z",
        "date_modified" : "2013-02-27T00:00:00Z",
        "id" : "https://troz.net/post/2013/a-knights-move-1-3/",
        "url" : "https://troz.net/post/2013/a-knights-move-1-3/",
        "content_html" : "\n\n\u003cp\u003e\u003cstrong\u003eUPDATE:\u003c/strong\u003e September 2016 - A Knight\u0026rsquo;s Move for iOS is no longer available.\u003cbr\u003e\n\u003ca href=\"/knightsmove/\"\u003eA Knight\u0026rsquo;s Move for Mac\u003c/a\u003e is still supported.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eA Knight\u0026rsquo;s Move has been updated to version 1.3. The Mac version is available\nthrough the\n\u003ca href=\"https://itunes.apple.com/app/a-knights-move/id533321133?mt=12\" target=\"_blank\"\u003eMac\nApp Store\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"three-new-level-packs\"\u003eThree new level packs:\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eEight by Eight\u003c/li\u003e\n\u003cli\u003eBishops Rule\u003c/li\u003e\n\u003cli\u003eCastles\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eEight by Eight has every puzzle set in a chessboard sized grid with more\nconventional placing of pieces.\u003cbr /\u003e\nBishops Rule has at least one Bishop in every puzzle.\u003cbr /\u003e\nCastles has a Castle or Rook in every puzzle and is suited to players who would\nlike more of a challenge.\u003c/p\u003e\n\n\u003ch2 id=\"new-feature\"\u003eNew feature:\u003c/h2\u003e\n\n\u003cp\u003eWhen your knight has been taken, you have the option to undo the last move so\nyou can try again without losing the moves you have already made.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"Undo Last Move\" src=\"/images/KM-UndoLast.png\" /\u003e\u003c/p\u003e\n"
    },
    {
        "title" : "Man Reader (no SB)",
        "date_published" : "2013-02-06T00:00:00Z",
        "date_modified" : "2013-02-06T00:00:00Z",
        "id" : "https://troz.net/post/2013/man-reader-no-sb/",
        "url" : "https://troz.net/post/2013/man-reader-no-sb/",
        "content_html" : "\n\n\u003cp\u003eThese instructions are no longer valid. As of version 1.5, the App Store version\nof Man Reader has solved the sand-boxing issues and is now as powerful as the\nnon-sand-boxed version.\u003c/p\u003e\n\n\u003cp\u003eThe non-sand-boxed version will no longer be supported or updated, so please\nrevert to the App Store version.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eIf you find that Man Reader is not working well for you due to Apple\u0026rsquo;s\nsandboxing restrictions, then you can download a non-sandboxed version here. To\nfind out more about this, including how to test if you are affected, read the\n\u003ca href=\"/manreader-sandbox/\"\u003eSand-Boxing Man Reader\u003c/a\u003e page.\u003c/p\u003e\n\n\u003cp\u003eThe non-sandboxed version will only work if you have the App Store version of\nMan Reader already installed.\u003c/p\u003e\n\n\u003cp\u003eWhen you run \u0026lsquo;Man Reader (no SB)\u0026rsquo; for the first time, it will check to see if\nyou have a valid installation of \u0026lsquo;Man Reader\u0026rsquo; that you have purchased from the\nApp Store.\u003cbr /\u003e\nIf you do not, \u0026lsquo;Man Reader (no SB)\u0026rsquo; will offer to take you to the App Store and then\nquit.\u003c/p\u003e\n\n\u003cp\u003eIf you already own the App Store version of Man Reader and \u0026lsquo;Man Reader (no SB)\u0026rsquo;\nhas started once, you can delete the App Store version and \u0026lsquo;Man Reader (no SB)\u0026rsquo;\nwill keep working.\u003c/p\u003e\n\n\u003cp\u003eTo install \u0026lsquo;Man Reader (no SB)\u0026rsquo;, click the download link below. This will\ndownload \u0026lsquo;ManReader-noSB.zip\u0026rsquo;. Double-click on this file to un-zip it, and then\nmove the \u0026lsquo;Man Reader (no SB).app\u0026rsquo; into your Applications folder and use as\nnormal. Do not delete the App Store version of Man Reader until \u0026lsquo;Man Reader (no\nSB)\u0026rsquo; has been run at least once.\u003c/p\u003e\n\n\u003ch2 id=\"del-download-man-reader-no-sb-del-2\"\u003e\u003ca href=\"#\"\u003e\u003cdel\u003eDownload Man Reader (no SB)\u003c/del\u003e\u003c/a\u003e\u003c/h2\u003e\n\n\u003cp\u003eI found out today (thanks Ron) that under OS X 10.10.3 the security settings no\nlonger allow the downloaded version of Man Reader (no SB) to run, despite the\nfact that I have signed it with my Apple Developer ID. OS X gives a very\nun-helpful dialog reporting that the app is damaged. In fact the app is fine,\nbut being blocked by the security settings. The solution as shown at\n\u003ca href=\"http://www.tech-recipes.com/rx/45404/mac-downloaded-app-is-damaged-and-cant-be-opened-error-solved/\"\u003eTechRecipes\u003c/a\u003e is to change your security system preferences to allow\ndownloaded apps from anywhere. You only need to do this temporarily as after you\nhave run the app once you can set this setting back to whatever you had before.\u003c/p\u003e\n"
    },
    {
        "title" : "Sand-Boxing Man Reader",
        "date_published" : "2013-02-06T00:00:00Z",
        "date_modified" : "2013-02-06T00:00:00Z",
        "id" : "https://troz.net/post/2013/sand-boxing-man-reader/",
        "url" : "https://troz.net/post/2013/sand-boxing-man-reader/",
        "content_html" : "\u003cp\u003eThese instructions are no longer valid. As of version 1.5, the App Store version\nof Man Reader has solved the sand-boxing issues and is now as powerful as the\nnon-sand-boxed version.\u003c/p\u003e\n\n\u003cp\u003eThe non-sand-boxed version will no longer be supported or updated, so please\nrevert to the App Store version.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eAs with all apps in the App Store, \u003ca href=\"/manreader/\"\u003eMan Reader\u003c/a\u003e is restricted by Apple\u0026rsquo;s\nsand-boxing policy. Sand-boxing is a great thing. It isolates apps from each\nother and from the system, making it far less likely that a problem app will\ncause wide-spread havoc. However for an app like Man Reader, this can lead to a\ndrop in functionality.\u003c/p\u003e\n\n\u003cp\u003eDue to the permissions limitations of sand-boxing, Man Reader can only search\ndefined paths on your system drive e.g. /usr/, /opt/\u003cbr /\u003e\nThis is where the default man pages are all stored, but if you install other software\n(Xcode is a good example), then Man Reader may not be able to list all the available\nman pages on your system.\u003c/p\u003e\n\n\u003cp\u003eTo tell if Man Reader is missing man pages, copy \u0026amp; paste the following command\ninto the Terminal app:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ewhatis . \u0026gt;\u0026gt; ~/Desktop/whatis.txt\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eMan Reader runs this command internally when it starts, but the Terminal app is\nnot sand-boxed and so can access everything.\u003cbr /\u003e\nRunning this command will create a text file on your desktop with a list of all available\nman pages on your system. Open it in a text editor that can show the number of lines\nin a file. \u003ca href=\"http://www.barebones.com/products/textwrangler/\"\u003eTextWrangler from Bare Bones Software\u003c/a\u003e is a good free editor that\nwill do this.\u003c/p\u003e\n\n\u003cp\u003eTo check what man pages ManReader can read, go to Finder and select \u0026lsquo;Go to\nFolder\u0026hellip;\u0026rdquo; from the Go menu. Paste in the following path:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e~/Library/Containers/net.troz.Man-Reader/Data/Library/Application Support/Man Reader/\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou will see two files: open the one called \u0026lsquo;ManReader.raw\u0026rsquo; in your text editor.\nThis is the result of Man Reader running the whatis command. Compare the number\nof lines in the two files. Don\u0026rsquo;t worry about the order of the items in the file\nas that may vary, you are only concerned with the total number of lines in each.\u003c/p\u003e\n\n\u003cp\u003eThere may be one or two lines more in the whatis.txt file but if there is a big\ndifference, then you are being sand-boxed\u0026hellip;\u003cbr /\u003e\nAs an example, on my system, the whatis.txt file contains 8954 lines and the ManReader.raw\nfile contains 2320 lines!\u003c/p\u003e\n\n\u003cp\u003e\u003cdel\u003eIf you are affected by this or think that you might be, I now have a\nsolution - actually two possible solutions:\u003c/del\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cdel\u003eIf you have already bought Man Reader from the App Store, then you can\n\u003ca href=\"#\"\u003edownload a non-sandboxed version\u003c/a\u003e. This will only work if you have the App\nStore version of the app installed.\u003c/del\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cdel\u003eIf you do not already own a copy of Man Reader, and want to buy it\nun-sandboxed, then you can now \u003ca href=\"#\"\u003ebuy it directly\u003c/a\u003e.\u003c/del\u003e\u003c/p\u003e\n\n\u003cp\u003ePlease \u003ca href=\"mailto:sarah@troz.net?subject=Man%20Reader%20and%20Sand-Boxing\"\u003econtact me\u003c/a\u003e if you have any issues with this.\u003c/p\u003e\n"
    },
    {
        "title" : "Icns Maker \u0026 Icon Builder updated",
        "date_published" : "2013-01-19T00:00:00Z",
        "date_modified" : "2013-01-19T00:00:00Z",
        "id" : "https://troz.net/post/2013/icns-maker-icon-builder-updated/",
        "url" : "https://troz.net/post/2013/icns-maker-icon-builder-updated/",
        "content_html" : "\u003cp\u003eJanuary 18th 2013:\u003c/p\u003e\n\n\u003cp\u003eBoth of the icon building apps have now been updated to fix a but that made\nincorrect icon sizes when running on a Retina MacBook Pro.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/icns-maker/\" title=\"Icns Maker\"\u003e Icns Maker\u003c/a\u003e uses your image to create an icns file for Mac apps.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://itunes.apple.com/app/icns-maker/id550942266?mt=12\u0026uo=4\" target=\"itunes_store\"\u003e\u003cimg style=\"border: 0;\" alt=\"Icns Maker - TrozWare\" src=\"http://r.mzstatic.com/images/web/linkmaker/badge_macappstore-lrg.gif\" /\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/icon-builder/\" title=\"Icon Builder\"\u003eIcon Builder\u003c/a\u003e uses your image to create the suite of icon files needed for\niOS apps.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://itunes.apple.com/app/icon-builder/id552293482?mt=12\u0026uo=4\" target=\"itunes_store\"\u003e\u003cimg style=\"border: 0;\" alt=\"Icon Builder - TrozWare\" src=\"http://r.mzstatic.com/images/web/linkmaker/badge_macappstore-lrg.gif\" /\u003e\u003c/a\u003e\u003c/p\u003e\n"
    },
    {
        "title" : "Icon Makers \u0026 Retina Macs",
        "date_published" : "2013-01-14T00:00:00Z",
        "date_modified" : "2013-01-14T00:00:00Z",
        "id" : "https://troz.net/post/2013/icon-makers-retina-macs/",
        "url" : "https://troz.net/post/2013/icon-makers-retina-macs/",
        "content_html" : "\u003cp\u003eIcns Maker which makes an icns icon file for Mac apps, and Icon Builder which\nmakes the suite of png files needed for iOS apps, are both compatible with the\nRetina MacBook Pro.\u003c/p\u003e\n\n\u003cp\u003eHowever it was recently brought to my attention (thanks Cameron), that when\nrunning on a Retina MBP, all the icon files were exactly twice as large as they\nshould be. The Icon.png file which supplies the main app icon for iPhone apps\nshould be 57 pixels by 57 pixels. Using Icon Builder on a Retina MBP produced an\nIcon.png file that was 114 x 114 pixels.\u003c/p\u003e\n\n\u003cp\u003eI have now worked out how to persuade the Retina Mac that when I ask for an\nimage size, I actually want that size, not the size that OS X thinks would look\nbetter. Updates to these 2 apps will be submitted to the App Store for approval\nlater today which will solve the problem.\u003c/p\u003e\n\n\u003cp\u003eIn the meantime, there is a work-around for Retina MBP users: force the app to\nrun in low resolution mode.\u003c/p\u003e\n\n\u003cp\u003eIn Finder, open your Applications folder and select the app (this works for both\nIcns Maker and Icon Builder). Press Command-I or choose Get Info from the File\nmenu which will open a window like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"Selecting low resolution mode\" src=\"/images/LowRes.png\" width=\"379\" height=\"952\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eCheck the checkbox labelled \u0026ldquo;Open in Low Resolution\u0026rdquo;. Next time the app is\nopened, it will ignore the Retina options and use standard resolution only. This\nwill create icon files with the correct sizes. However text may look slightly\nfuzzy.\u003c/p\u003e\n\n\u003cp\u003eWhen the updates to these apps become available, make sure you go back and\nun-check this setting to return to Retina mode.\u003c/p\u003e\n"
    },
    {
        "title" : "A Knight's Move updates",
        "date_published" : "2012-10-15T00:00:00Z",
        "date_modified" : "2012-10-15T00:00:00Z",
        "id" : "https://troz.net/post/2012/a-knights-move-updates/",
        "url" : "https://troz.net/post/2012/a-knights-move-updates/",
        "content_html" : "\u003cp\u003e\u003cstrong\u003eUPDATE:\u003c/strong\u003e September 2016 - A Knight\u0026rsquo;s Move for iOS is no longer available.\u003cbr\u003e\n\u003ca href=\"/knightsmove/\"\u003eA Knight\u0026rsquo;s Move for Mac\u003c/a\u003e is still supported.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eA Knight\u0026rsquo;s Move for iOS has been updated to take advantage of the taller iPhone\n5 screen.\u003c/p\u003e\n\n\u003cp\u003eIn-app purchasing of packs has been removed from both Mac \u0026amp; iOS versions.\u003cbr /\u003e\nFor iOS, the app is now free but supported by iAds (please click through if you would\nlike to show your support).\u003cbr /\u003e\nApple does not have an ad system for Mac, so the Mac version is now a paid app\nthat includes all the puzzle packs.\u003c/p\u003e\n\n\u003cp\u003eThe in-app purchasing was an interesting experiment, but the ratio of purchases\nto downloads was too low to sustain the development.\u003c/p\u003e\n"
    },
    {
        "title" : "App Store Review Times",
        "date_published" : "2012-10-15T00:00:00Z",
        "date_modified" : "2012-10-15T00:00:00Z",
        "id" : "https://troz.net/post/2012/app-store-review-times/",
        "url" : "https://troz.net/post/2012/app-store-review-times/",
        "content_html" : "\u003cp\u003eThere are been a lots of stories going around about lengthening Mac App Store\nreview times.\n\u003ca href=\"http://reviewtimes.shinydevelopment.com\" target=\"_blank\"\u003eShiny\nDevelopments\u003c/a\u003e crowd-sourced data certainly backs this up although they have\nmuch more data for iOS apps than for Mac apps.\u003c/p\u003e\n\n\u003cp\u003eSome people, including\n\u003ca href=\"http://www.macworld.com/article/2011430/developers-stymied-by-mac-app-store-approval-delays.html\" target=\"_blank\"\u003eLex\nFriedman of MacWorld\u003c/a\u003e and\n\u003ca href=\"http://daringfireball.net/linked/2012/10/09/app-store-delays\" target=\"_blank\"\u003eJohn\nGruber of Daring Fireball\u003c/a\u003e, are suggesting that the delays are due to the\nrush of new apps to support the iPhone 5 and iOS 6. This implies that there is\nonly one set of review staff and that a large proportion of them have been moved\nfrom Mac to iOS apps.\u003c/p\u003e\n\n\u003cp\u003eI think this is an incorrect analysis. The slowdown started before iOS 6 and\nbefore the iPhone 5. I think it started in June when Apple started to enforce\nMac sandboxing.\u003c/p\u003e\n\n\u003cp\u003eAs discussed in a \u003ca href=\"/sandboxing-and-the-mac-app-store/\"\u003eprevious post\u003c/a\u003e, I have had a lot of trouble getting Man\nReader to be sandbox-compatible leading to many rejections. One problem was that\nI had implemented sand-boxing before the deadline, but with some temporary\nentitlements to allow read-only access to required system files. This\nentitlement was approved initially, but after one rejection, an Apple reviewer\ntold me that they had been approving all requested entitlements before the\ndeadline, but now were actually reviewing them all.\u003c/p\u003e\n\n\u003cp\u003eTo me, this seems like a rather silly thing to have done which has now returned\nto haunt them. Instead of allowing developers time to get used to the\nrestrictions, Apple reviewers allowed developers to think that their apps were\nsandbox-complient already. Then Apple was faced with the enormous task of\nre-checking all the entitlements that they had previously allowed without\nchecking. This was unfair to developers and has only created extra work for the\nreviewers.\u003c/p\u003e\n\n\u003cp\u003eHere is a table showing the recent review times for my Mac apps:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003eApp\u003c/th\u003e\n\u003cth align=\"left\"\u003eProcess\u003c/th\u003e\n\u003cth align=\"center\"\u003eReview days\u003c/th\u003e\n\u003cth align=\"center\"\u003eDates\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eTime In Words\u003c/td\u003e\n\u003ctd align=\"left\"\u003eupdate\u003c/td\u003e\n\u003ctd align=\"center\"\u003e22\u003c/td\u003e\n\u003ctd align=\"center\"\u003eSept 22 - Oct 14\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eIcns Maker\u003c/td\u003e\n\u003ctd align=\"left\"\u003enew app\u003c/td\u003e\n\u003ctd align=\"center\"\u003e24\u003c/td\u003e\n\u003ctd align=\"center\"\u003eAug 5 - Aug 29\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eA Knight\u0026rsquo;s Move\u003c/td\u003e\n\u003ctd align=\"left\"\u003eupdate\u003c/td\u003e\n\u003ctd align=\"center\"\u003e26\u003c/td\u003e\n\u003ctd align=\"center\"\u003eSept 6 - Oct 2\u003c/td\u003e\n\u003c/tr\u003e\n\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eIcon Builder\u003c/td\u003e\n\u003ctd align=\"left\"\u003enew app\u003c/td\u003e\n\u003ctd align=\"center\"\u003e33\u003c/td\u003e\n\u003ctd align=\"center\"\u003eAug 22 - Sept 24\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003e\u003cbr\u003e\nI have not included Man Reader as it was rejected too many times to be a valid data point.\u003c/p\u003e\n\n\u003cp\u003eBy comparison, when I submitted an update to A Knight\u0026rsquo;s Move for iOS in October,\nit was passed in only 8 days.\u003c/p\u003e\n"
    },
    {
        "title" : "Icon makers for Mac \u0026 iOS apps",
        "date_published" : "2012-10-15T00:00:00Z",
        "date_modified" : "2012-10-15T00:00:00Z",
        "id" : "https://troz.net/post/2012/icon-makers-for-mac-ios-apps/",
        "url" : "https://troz.net/post/2012/icon-makers-for-mac-ios-apps/",
        "content_html" : "\n\n\u003cp\u003eAnnouncing two new apps for creating icons for with Mac or iOS projects:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/icns-maker/\" title=\"Icns Maker\"\u003eIcns Maker\u003c/a\u003e helps you convert a single image into a .icns file in two\nsteps.\u003cbr /\u003e\n\u003ca href=\"/icon-builder/\" title=\"Icon Builder\"\u003eIcon Builder\u003c/a\u003e creates all the files needed to set up your icons for any iOS project.\u003c/p\u003e\n\n\u003ch2 id=\"creating-icon-files-for-mac-apps\"\u003eCreating icon files for Mac apps:\u003c/h2\u003e\n\n\u003cp\u003eIn versions of Xcode before 4.4, Apple provided an app called “Icon Composer”.\nIt allowed you to drag images into a window and export a .icns file for use in\nyour Mac apps. With Xcode 4.4, Apple has changed the way icons are handled for\nMac apps and “Icon Composer” is no longer supplied.\u003c/p\u003e\n\n\u003cp\u003eThe Xcode docs describe the process you need to go through to make a .icns file:\ncreate a suite of image files of the correct size and with the correct file\nnames, bundle them into a specially named folder and then use Terminal to stitch\nthem together.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/icns-maker/\" title=\"Icns Maker\"\u003eIcns Maker\u003c/a\u003e does all this for you in two easy steps.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eDrag in an image file (preferably 1024x1024 but 512x512 will also work).\u003c/li\u003e\n\u003cli\u003eClick a button.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThere are more options available for fine-tuning your icons allowing you to\nselect different images for the various sizes, but this is all that is needed\nfor basic operation.\u003c/p\u003e\n\n\u003cp\u003eIcns Maker is available from the\n\u003ca href=\"http://itunes.apple.com/app/icns-maker/id550942266?mt=12\u0026uo=4\" target=\"_blank\"\u003eMac\nApp Store\u003c/a\u003e.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"creating-icon-files-for-ios-apps\"\u003eCreating icon files for iOS apps:\u003c/h2\u003e\n\n\u003cp\u003eIcons for iOS apps are not bundled into a single file like a Mac .icns file. You\nadd various .png images to your project. Depending on the devices supported by\nyour app, you will need many different sizes of icon file. There are some icons\nfor iPad only, some for iPhone / iPod Touch only and others required for any\ndevice. Additionally, you will need larger versions of each image to support\nRetina displays.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/icon-builder/\" title=\"Icon Builder\"\u003eIcon Builder\u003c/a\u003e is a Mac app that does all this for you. As with Icns Maker,\nyou just drag your image into the app and click a button. You can also select\nwhich devices your icon needs to suit and use different images for the different\nsizes if you want finer control.\u003c/p\u003e\n\n\u003cp\u003eWhen the app creates your icon files, it generates a ReadMe file with the\ninformation needed for installing these files in your project, including\ninformation to copy \u0026amp; paste directly into your Info.plist file.\u003c/p\u003e\n\n\u003cp\u003eIcon Builder is available from the\n\u003ca href=\"http://itunes.apple.com/app/icon-builder/id552293482?mt=12\" target=\"_blank\"\u003eMac\nApp Store\u003c/a\u003e.\u003cbr /\u003e\nNote that although this app builds icon files for iOS app, it runs on a Mac.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"naming\"\u003eNaming\u003c/h2\u003e\n\n\u003cp\u003eOriginally these apps were named in a consistent manner: Mac Icon Builder and\niOS Icon Builder. However both these names were rejected by Apple - you are not\nallowed to use the words \u0026ldquo;Mac\u0026rdquo; or \u0026ldquo;iOS\u0026rdquo; in any app name sold through the Mac App\nStore.\u003c/p\u003e\n\n\u003cp\u003eThen I tried Icns Maker and Icon Maker. Icns Maker was approved, but there is\nalready an app called Icon Maker, so I went with Icon Builder. But by that time\nIcns Maker had already been released, so there was no way to make the names more\nconsistent.\u003c/p\u003e\n"
    },
    {
        "title" : "Icon Builder",
        "date_published" : "2012-10-01T00:00:00Z",
        "date_modified" : "2012-10-01T00:00:00Z",
        "id" : "https://troz.net/icon-builder/",
        "url" : "https://troz.net/icon-builder/",
        "content_html" : "\n\n\u003cp\u003e\u003ca href=\"http://itunes.apple.com/app/icon-builder/id552293482?mt=12\"\u003eIcon Builder 5.0\u003c/a\u003e will soon be available from the Mac App Store.\u003c/p\u003e\n\n\u003ch2 id=\"make-and-install-a-set-of-icons-for-an-ios-mac-or-apple-watch-app-in-3-steps\"\u003eMake and install a set of icons for an iOS, Mac or Apple Watch app in 3 steps:\u003c/h2\u003e\n\n\u003cp\u003e1: Drag an image into the window.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/IconBuilder1.png\" alt=\"Make an icon set in 3 steps\" /\u003e\u003c/p\u003e\n\n\u003cp\u003e2: Choose the device family you are building for: iOS Universal, iPhone, iPad, Apple Watch, Mac, Sticker Pack or iMessage.\u003c/p\u003e\n\n\u003cp\u003e3: Click \u0026ldquo;Create icon assets\u0026rdquo; and select the folder containing your Xcode project.\u003c/p\u003e\n\n\u003cp\u003eIcon Builder will create an AppIcon set inside the \u0026ldquo;Assets.xcassets\u0026rdquo; folder for\nthat project.\nThe icons are immediately ready for use in your project with no installation necessary.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"why-is-this-necessary\"\u003eWhy is this necessary?\u003c/h2\u003e\n\n\u003cp\u003eDepending on the devices supported by your app, you will need many different sizes of icon file. There are some icons for iPad only, some for iPhone / iPod Touch only and others required for any iOS device. Mac apps use completely different icon sizes. Apple Watch apps need a completely different set of icons and now with iOS 10, Messages apps and Sticker apps require even more - 2 different icon sets for Messages app. Additionally, you will need larger versions of each image to support Retina displays.\u003c/p\u003e\n\n\u003cp\u003eThese icons must be in PNG format, with the color space set to sRGB (or P3 for iOS apps, but Icon Builder always uses sRGB) and for iOS apps, with no transparency and with alpha channel in the image files.\u003c/p\u003e\n\n\u003cp\u003eYour Xcode project contains a special folder called “Assets.xcassets” which contains all the image files used in your project, including the app icons. Icon Builder will install the icon files into your “Assets.xcassets” folder automatically and the icons are immediately ready for use in your project with no installation necessary.\u003c/p\u003e\n\n\u003cp\u003eIcon Builder still allows you to create the old-style .icns file if required by selecting “Mac icns” in the device family popup menu. This can be useful for other development environments or when making icons for documents in your Mac app.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eYou will get the best results if you start with a 1024 x 1024 image.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"using-the-icon-images\"\u003eUsing the icon images:\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/IconBuilder2.png\" alt=\"Using the icons\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eIcon Builder creates all the required image files in a folder called “AppIcon.appiconset”, “AppIcon-Watch.appiconset” or “iMessage App Icon.stickersiconset” inside the “Assets.xcassets” folder for your project. If you already have images stored in an appiconset folder, Icon Builder will not over-write them, but will add a new folder e.g. “AppIcon-1.appiconset”. You can then switch between AppIcon sets in the project settings for your target app.\u003c/p\u003e\n\n\u003cp\u003eIf you prefer to add the icon files manually, select a folder that does not contain a .xcodeproj file and the icon sets will be saved directly to that folder. You can then drag the iconset folder manually into “Assets.xcassets” in your Xcode project.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"what-s-new-in-version-5\"\u003eWhat\u0026rsquo;s New in version 5?\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIcon images have the correct sRGB color profile attached.\u003c/li\u003e\n\u003cli\u003eFor iOS icons, transparency is replaced by white and the alpha channel is removed from the image file.\u003c/li\u003e\n\u003cli\u003eThe icons created match the latest Apple guidelines.\u003c/li\u003e\n\u003cli\u003eThe app has been completely re-written in Swift to use the latest macOS APIs so only supports macOS 10.13.x or later.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"faq\"\u003eFAQ\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eI thought there were only 2 steps before - why are there 3 now?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe 2 step process gave you a folder of image files. You then had to install them manually. So really, there were always three steps, but the app was not helping you with step 3. By adding a third step asking you to locate your project folder, I was able to make the app install the icons for you automatically. So the app is doing step 3 for you.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eWhat if I want to install the icon files myself?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhen asked to select a folder to save the icons, select a folder that does not contain a .xcodeproj file. Icon Builder will save all the files, but not install them into an Assets.xcassets or Images.xcassets folder automatically.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eWhat image types can I use?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAny image type compatible with QuickTime, including JPEG, PNG, TIFF, GIF, PDF, PSD, BMP.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eDoes Icon Builder create icons for use in Mac apps?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eYes. Mac apps use image assets just like iOS apps, but with different image sizes. Select \u0026ldquo;Mac App\u0026rdquo; in the Device popup to create icons for a Mac app.\u003c/li\u003e\n\u003cli\u003eIcon Builder still allows you to create the old-style .icns file if required by selecting \u0026ldquo;Mac icns file\u0026rdquo; in the Device popup menu. This can be useful for other development environments or when making icons for documents in your Mac app.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eWhat is the difference between Mac App Icon and Mac icns file?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u0026ldquo;Mac AppIcon\u0026rdquo; will create the modern AppIcon set of images for inclusion in your Assets.xcassets.\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;Mac icns file\u0026rdquo; will create an old style .icns file with all the image sizes embedded into a single file. Open the file in Preview to see the contents.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eDoes Icon Builder create icons for use in Watch Kit apps?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eYes. Select \u0026ldquo;Apple Watch\u0026rdquo; from the Device popup. Create a WatchKit target in your iOS project if necessary. When you are choosing the location to save the icons, select the folder containing the main .xcodeproj file. Icon Builder will find the WatchKit App folder and save the icons to the WatchKit App\u0026#39;s Assets.xcassets folder. The icon set will be called AppIcon-Watch to help you distinguish between sets when allocating them to your apps.\u003c/li\u003e\n\u003cli\u003eWhen the WatchKit icons have been made, Icon Builder will ask you if you want to use the same image to create the icons for the parent iOS app. Unless you want a different icon for the parent app, select the parent app device at this point to create the second set.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eDoes Icon Builder create icons for use in iMessage apps and Sticker Pack apps?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eYes. Select \u0026ldquo;Sticker Pack App\u0026rdquo; or \u0026ldquo;iMessage App\u0026rdquo; from the Device popup. When you are choosing the location to save the icons, select the folder containing the main .xcodeproj file and Icon Builder will create the icon sets accordingly.\u003c/li\u003e\n\u003cli\u003eiMessage apps require two sets: one for the Messages extension and one for the parent iOS app. When the iMessage icons have been made, Icon Builder will ask you if you want to use the same image to create the icons for the parent iOS app. Unless you want a different icon for the parent app, select the parent app device at this point to create the second set.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eWhy is my starting image re-sized for a Sticker Pack app or iMessage app?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eFor Mac, iOS and Apple Watch apps, all the icons are square. For Sticker Pack apps and iMessage apps, most (but not all) of the icons are letterbox-shaped. Icon Builder displays your starting image in letterbox format when you choose \u0026ldquo;Sticker Pack App\u0026rdquo; \u0026ldquo;iMessage App\u0026rdquo; so that you can see how it will look.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eWhen I choose any iOS app type, my starting image loses its transparent background!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eApple requires that iOS icons have no transparency so Icon Builder displays the image like that so you can confirm the look. If you do not like the default change, edit the image to remove the transparency before using Icon Builder.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eWhat versions of macOS and Xcode do I need?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThis app requires macOS 10.13 as it uses the latest APIs to manipulate images.\u003c/li\u003e\n\u003cli\u003eXcode 9 is the latest version, but Xcode 8 will probably work.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eI don\u0026rsquo;t use Xcode, I use an alternative IDE. Can I still use the icons created by this app?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eYes, you can save the icon set to a folder and install the icons manually in the IDE of your choice. If your IDE requires a .icns file, select \u0026ldquo;Mac icns file\u0026rdquo; from the device popup.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eWhat if my starting image is the wrong size?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf your image is not the correct size, it will be cropped or expanded when you drag it in.\u003c/li\u003e\n\u003cli\u003eIt will then be resized to create all the required image sizes.\u003c/li\u003e\n\u003cli\u003eIf this does not give the result you want, resize or crop the image before dropping it into Icon Builder.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eHow do I start again with a blank slate?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eChoose \u0026ldquo;New\u0026rdquo; from the File menu, or press Command-N.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eDo I have to drag images into the app?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eNo, you can copy \u0026amp; paste an image file, or an image.\u003c/li\u003e\n\u003cli\u003eOr choose \u0026ldquo;Open Image\u0026hellip;\u0026rdquo; from the File menu, or press Command-O.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eHow can I delete the icons from my project?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eSelect \u0026ldquo;Assets.xcassets\u0026rdquo; in the project navigator.\u003c/li\u003e\n\u003cli\u003eIn the next sidebar, you will see a list of the asset sets in your project.\u003c/li\u003e\n\u003cli\u003eSelect the one you want to delete (e.g. AppIcon, AppIcon-1, AppIcon-Watch) and press the Delete key.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eI have an old project with no \u0026ldquo;Assets.xcassets\u0026rdquo; - how do I add that?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eSelect the project at the top of the Project Navigator.\u003c/li\u003e\n\u003cli\u003eMake sure you are editing the target and go to the General tab.\u003c/li\u003e\n\u003cli\u003eIn the \u0026ldquo;App Icons\u0026rdquo; section, click the \u0026ldquo;Use Asset Catalog\u0026rdquo; button.\u003c/li\u003e\n\u003cli\u003eThe \u0026ldquo;Assets.xcassets\u0026rdquo; folder will be created and any existing icons will be migrated to the new structure.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eWhat if I want to use the images from a Mac .icns file?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eDrag it in just like any image file. However the largest image in an .icns bundle is 512 x 512, so you may want to create a larger version.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eWhy are there files with @2x and @3x in the names?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThese are for high-resolution displays. iOS knows it needs a certain image size, but if the device has a Retina display, the system will look for an @2x file so it can squeeze twice as many pixels in and make it look sharp. For the larger or more recent iPhones, the system will use the @3x files if they are available.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eI use Pixelmator. Can I drag my pxm files into Icon Builder?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eNo. Pixelmator\u0026rsquo;s pxm files cannot be used directly. Export them as png files first.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eI’m a programmer, not a graphic designer. How do I make icon images?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eOne easy way to create basic shapes with gradients, text, added images etc. is to use Keynote. I presume PowerPoint has the same sort of abilities.\u003c/li\u003e\n\u003c/ul\u003e\n"
    },
    {
        "title" : "Updating apps for iPhone 5",
        "date_published" : "2012-09-24T00:00:00Z",
        "date_modified" : "2012-09-24T00:00:00Z",
        "id" : "https://troz.net/post/2012/updating-apps-for-iphone-5/",
        "url" : "https://troz.net/post/2012/updating-apps-for-iphone-5/",
        "content_html" : "\u003cp\u003eI have started work updating my iOS apps to fill the larger screen of an iPhone\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eMy iPhone 5 is on order - I missed out on the first shipment, but hopefully\nit won\u0026rsquo;t be too long. Meanwhile, I will just test in the iPhone Simulator and\nhope this is OK.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eBut it was a puzzle to me how to get an app to fill the longer screen. I have\nthe latest Xcode and the latest Simulator which allows you to specify what\nscreen size iPhone to simulate. So I re-built an app and nothing changed - it\nshowing black strips top \u0026amp; bottom and left my app at the old size.\u003c/p\u003e\n\n\u003cp\u003eAfter trying many different things and reading a lot of the new sections of the\nApple developer documentation, I finally found the answer online:\u003c/p\u003e\n\n\u003cp style=\"padding-left: 30px;\"\u003e\n  \u003cstrong\u003eIf you want your app to fill the 4\" screen, you must provide\u003c/strong\u003e\u003cbr /\u003e \u003cstrong\u003e a new launch image file called \"Default-568h@2x.png\".\u003c/strong\u003e\u003cbr /\u003e \u003cstrong\u003e This image must be exactly 640 x 1136 pixels.\u003c/strong\u003e\n\u003c/p\u003e\n\n\u003cp\u003eApparently the system uses the presence or absence of this file this to detect\nwhether your app supports the longer iPhone.\u003c/p\u003e\n\n\u003cp\u003eI read that Xcode is supposed to warn you of the consequences if this file is\nmissing, but in my case, when I opened my project, Xcode helpfully used the old\nlaunch image in its place. It showed a warning icon that the image was the wrong\nsize, but nothing else.\u003c/p\u003e\n\n\u003cp\u003eThe next problem was how to create this file. I use screen shots, but until the\napp worked in the correct format, I wasn\u0026rsquo;t going to be able to get the screen\nshot. So I made it a 2 step process: first I duplicated the original launch\nimage, renamed it and resized it. It looked wrong but this was irrelevant - it\nwas enough to get the app working in the correct format. Once I had the app\nworking, I was able to take a screen shot and create the final launch image.\u003c/p\u003e\n\n\u003cp\u003eOnce you have the app working in 2 sizes, you have to do more work with the\nlayout, either using springs \u0026amp; struts or using the modern auto-layout feature. I\nfind auto-layout confusing, but it is obviously more powerful and the way of the\nfuture, so I am trying to work it out. I found a good tutorial at\n\u003ca href=\"http://www.raywenderlich.com/20881/beginning-auto-layout-part-1-of-2\" target=\"_blank\"\u003eRay\nWenderlich\u0026rsquo;s site\u003c/a\u003e. While directed at iOS 6, it also applies to Mac apps.\u003c/p\u003e\n"
    },
    {
        "title" : "A Knight's Move for iOS 1.1",
        "date_published" : "2012-09-13T00:00:00Z",
        "date_modified" : "2012-09-13T00:00:00Z",
        "id" : "https://troz.net/post/2012/a-knights-move-for-ios-1-1/",
        "url" : "https://troz.net/post/2012/a-knights-move-for-ios-1-1/",
        "content_html" : "\u003cp\u003e\u003cstrong\u003eUPDATE:\u003c/strong\u003e September 2016 - A Knight\u0026rsquo;s Move for iOS is no longer available.\u003cbr\u003e\n\u003ca href=\"/knightsmove/\"\u003eA Knight\u0026rsquo;s Move for Mac\u003c/a\u003e is still supported.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eA Knight\u0026rsquo;s Move for iPad \u0026amp; iPhone has just been updated to version 1.1\u003c/p\u003e\n\n\u003cp\u003eThere were some minor changes:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eNew puzzle pack: Majestic.\u003c/li\u003e\n\u003cli\u003eiPhone now shows an info button of there is more help available for a\nparticular puzzle. (This info was already visible in the iPad version.)\u003c/li\u003e\n\u003cli\u003eMinor cosmetic fixes.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe big change was that all puzzles packs are now included in the free app,\nwhich is now supported by iAds. The sale of puzzle packs via in-app purchasing\nwas disappointing, so I have decided to try using iAds instead. Hopefully they\nwill not feel too intrusive, but if you want to support my apps, please tap on a\nfew of the ads.\u003c/p\u003e\n\n\u003cp\u003eNote that iAds will not appear in all countries. You may just see a banner\nlinking you to my other apps on the iPad. On iPhone, you will not see anything\ndifferent.\u003c/p\u003e\n"
    },
    {
        "title" : "Man Reader 1.1 Released",
        "date_published" : "2012-08-14T00:00:00Z",
        "date_modified" : "2012-08-14T00:00:00Z",
        "id" : "https://troz.net/post/2012/man-reader-1-1-released/",
        "url" : "https://troz.net/post/2012/man-reader-1-1-released/",
        "content_html" : "\u003cp\u003eThe update of \u003ca href=\"/manreader/\" title=\"Man Reader\"\u003eMan Reader\u003c/a\u003e to version 1.1 has just become available through\nthe Mac App Store. This update has a bunch of \u003ca href=\"/manreader/#new_features\"\u003enew features\u003c/a\u003e - thanks to\neveryone who made suggestions.\u003c/p\u003e\n\n\u003cp\u003eAs detailed in a \u003ca href=\"/sandboxing-and-the-mac-app-store/\"\u003eprevious post\u003c/a\u003e, there have been major issues getting this\napp approved with Apple\u0026rsquo;s new sand-boxing restrictions fully in place. But to\ntheir credit, the Apple reviewers have been unfailing helpful and polite in\nanswering my questions and keeping me informed.\u003c/p\u003e\n\n\u003cp\u003eI hope everyone finds the new features useful. Please \u003ca href=\"mailto:sarah@troz.net?subject=Man%20Reader\"\u003ekeep the suggestions\ncoming in\u003c/a\u003e to make this app even better!\u003c/p\u003e\n"
    },
    {
        "title" : "Sandboxing and the Mac App Store",
        "date_published" : "2012-07-28T00:00:00Z",
        "date_modified" : "2012-07-28T00:00:00Z",
        "id" : "https://troz.net/post/2012/sandboxing-and-the-mac-app-store/",
        "url" : "https://troz.net/post/2012/sandboxing-and-the-mac-app-store/",
        "content_html" : "\u003cp\u003eAs of June 2012, all apps submitted to the Mac App Store have to be sandboxed\ni.e. they have to be able to run in a limited environment where they cannot\ninterfere with other apps or other parts of the system. While this is generally\na good thing, there are problems when apps have legitimate reasons for requiring\naccess to other resources.\u003c/p\u003e\n\n\u003cp\u003eOne annoyance for developers is that Apple\u0026rsquo;s apps are mostly not sandboxed. To\ncheck what apps you have installed that are sandboxed, open up Activity Monitor\n(in Applications/Utilities). In the View menu, check that Sandbox is checked in\nthe Columns submenu. Then you can sort by clicking on the Sandbox title and work\nout which apps are already sandboxed. Mail, Preview and Text Edit are now\nsandboxed and so is the new Reminders app, but as far as I can tell, no other\nApple apps are. This causes two problems: firstly it is not fair to other\ndevelopers if Apple is enforcing a standard which only they are allowed to\nbreak. Secondly, if Apple developers had to follow the same rules as everyone\nelse, then maybe the system would evolve to become more usable for everyone.\u003c/p\u003e\n\n\u003cp\u003eIn the Apple developer documentation about sandboxing, there is a section headed\n\u0026ldquo;Determine Whether Your App Is Suitable for Sandboxing\u0026rdquo;. Here they list numerous\nreasons why any app might not work in the sandbox. But the Mac App Store now\nmakes sandboxing compulsory, so what to do with apps that are not suitable?\u003c/p\u003e\n\n\u003cp\u003eSome resources can be requested when building the app: access to various folders\n(Pictures, Music, Downloads etc), access to Address Book and Calendar data,\nprinting facilities, networking etc. Beyond the specified list of entitlements\nthat can be requested, developers can also apply for \u0026ldquo;temporary entitlements\u0026rdquo;\nwhich, if granted, will unlock access to other parts of the operating system.\nHowever these are subject to the whims of app reviewers and will be re-assessed\nwith every update. Apple has also made it clear that they are intended as a\ntransition feature and will not be available for ever.\u003c/p\u003e\n\n\u003cp\u003eThis has lead to a recent spate of popular apps leaving the App Store.\n\u003ca href=\"http://www.marco.org/2012/07/26/mac-app-store-future\" target=\"_blank\"\u003eMarco\nArment\u003c/a\u003e has discussed this problem with an emphasis on the issue of lack of\nconfidence in buying from the App Store. If you cannot be sure that an app you\nbuy will remain in the App Store, then you are less likely to buy it there.\u003c/p\u003e\n\n\u003cp\u003eI have run into direct issues with sandboxing already. With\n\u003ca href=\"http://www.picapod.com/\" target=\"_blank\"\u003ePic-a-POD\u003c/a\u003e, I used to have\nlinks to the Desktop and Screen Saver panes in System Preferences. These used\nAppleScripts which required a temporary entitlement to send an AppleEvent. The\napp was rejected because of this, so I had to modify this feature - it now just\ntakes you to the relevant section of System Prefs, but not directly to either\nDesktop or Screen Saver. However Pic-a-POD\u0026rsquo;s help, which runs in Apple\u0026rsquo;s Help\nViewer app, contains exactly the same AppleScripts and so is allowed to access\nthese preference panes directly. Try working out the logic of that one!\u003c/p\u003e\n\n\u003cp\u003eI have more serious problems with\n\u003ca title=\"Man Reader\" href=\"/manreader/\" target=\"_blank\"\u003eMan Reader\u003c/a\u003e. Man\nReader displays a list of the man pages on your system. Depending on the tools\nyou have installed, these pages may be in a variety of locations. The shell\ncommand that detects them first reads a config file and then checks the folders\nlisted in that config file. All it needs is read-only access. With the first\nsandboxed version, I asked for a temporary entitlement to give me read-only\naccess to the startup disk. This was granted, but I have since been informed\nthat all requested entitlements were granted before the App Store cut-off date.\nThis may have been meant to be helpful, but it was not useful to allow access\nthat would later be removed without any warning.\u003c/p\u003e\n\n\u003cp\u003eThe current version of Man Reader waiting for approval asks for read-only access\nto the config file directly and then to every folder listed in that config file.\nIf approved, this should be able to access all the man pages on a system. I have\nno idea whether these entitlements will be granted, but if not, then I will have\nto remove Man Reader from the App Store. It would be wrong to continue to sell\nan app that only functioned in a limited manner, even though the App Store is\nfar and away my best form of marketing.\u003c/p\u003e\n\n\u003cp\u003eSo what do I suggest Apple does? I think they need to allow apps that are not\nsand-boxed. However these apps could come with a warning before installation. In\nMountain Lion, the new security feature called Gatekeeper allows you to specify\nthe level of security you want when installing apps. Currently the options are\nto allow apps downloaded from:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eMac App Store\u003c/li\u003e\n\u003cli\u003eMac App Store and identified developers\u003c/li\u003e\n\u003cli\u003eAnywhere\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThey could split the first option in two and allow\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eMac App Store sandboxed\u003c/li\u003e\n\u003cli\u003eMac App Store any\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eOne further wrinkle is iCloud. Apple is encouraging users and developers towards\niCloud data storage and sharing. But only apps in the App Store are allowed to\nuse iCloud.\u003c/p\u003e\n\n\u003cp\u003eSo it will be interesting to see how this plays out. Obviously Apple is not\ngoing to care if a tiny developer like me leaves the App Store, but if enough\nhigh-profile developers leave, then there will surely be some consideration\ngiven to the problem.\u003c/p\u003e\n"
    },
    {
        "title" : "Update to Time In Words screen saver",
        "date_published" : "2012-07-27T00:00:00Z",
        "date_modified" : "2012-07-27T00:00:00Z",
        "id" : "https://troz.net/post/2012/update-to-time-in-words-screen-saver/",
        "url" : "https://troz.net/post/2012/update-to-time-in-words-screen-saver/",
        "content_html" : "\u003cp\u003e\u003ca href=\"/time-in-words-screen-saver-for-mac/\" title=\"Time In Words Screen Saver for Mac\"\u003eTime In Words screen saver\u003c/a\u003e has just been updated to version 1.1 and is now\nfully compatible with Mountain Lion. It is free to use and can be\n\u003ca href=\"/screensaver/TimeInWords-ScreenSaver.zip\"\u003edownloaded\u003c/a\u003e here.\u003c/p\u003e\n\n\u003cp\u003eThe basic screen saver worked before, but searching for an alternative time zone\nwould crash System Preferences. That is now fixed.\u003c/p\u003e\n\n\u003cp\u003eThe screen saver also shows a thumbnail image when in Mountain Lion and is\ncode-signed with my developer ID for compatibility with Mountain Lion\u0026rsquo;s\nGatekeeper.\u003c/p\u003e\n\n\u003cp\u003eThe current version is compatible with 10.8 and 10.7. It may work in 10.6 but I\ncannot be sure. If anyone tries it, please let me know.\u003c/p\u003e\n"
    },
    {
        "title" : "A Knight's Move Released",
        "date_published" : "2012-07-09T00:00:00Z",
        "date_modified" : "2012-07-09T00:00:00Z",
        "id" : "https://troz.net/post/2012/a-knights-move-released/",
        "url" : "https://troz.net/post/2012/a-knights-move-released/",
        "content_html" : "\u003cp\u003e\u003cstrong\u003eUPDATE:\u003c/strong\u003e September 2016 - A Knight\u0026rsquo;s Move for iOS is no longer available.\u003cbr\u003e\n\u003ca href=\"/knightsmove/\"\u003eA Knight\u0026rsquo;s Move for Mac\u003c/a\u003e is still supported.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003e\u0026ldquo;A Knight\u0026rsquo;s Move\u0026rdquo; is a fun, addictive and simple puzzle game based on the\nmovements of chess pieces. Your goal is to move your white knight across a board\nto a target square using the same movements as a knight in chess. Pawns may\nblock your way, while enemy bishops, castles, knights and the queen may try to\nstop you.\u003c/p\u003e\n\n\u003cp\u003eThe game is available for iPad, iPhone and iPod Touch from the iTunes Store and\nrequires iOS 5.0 or later. The Mac version is available from the Mac App Store\nand requires OS X 10.7 or later.\u003c/p\u003e\n\n\u003cp\u003ePerfect for when you have a few minutes to relax, like on the train to work,\nduring your lunch break or during a boring lecture or class (Kids: don\u0026rsquo;t take\nadvice from randoms, but you can turn the sound FX off. Just sayin\u0026rsquo;), \u0026ldquo;A\nKnight\u0026rsquo;s Move\u0026rdquo; will keep you coming back for \u0026ldquo;Just One More Go\u0026rdquo;!\u003c/p\u003e\n\n\u003cp\u003eOnce you have played the tutorial pack, you can move on to the other puzzle\npacks. Each pack comes with 25 more puzzles and there are many different packs\nallowing you to select easy puzzles, challenging puzzles or variety packs, some\nwith themes.\u003c/p\u003e\n\n\u003cp\u003eSee more about \u0026ldquo;A Knight\u0026rsquo;s Move\u0026rdquo; at the \u003ca href=\"/knightsmove/\"\u003eKnight\u0026rsquo;s Move web page\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eGet the game from the\n\u003ca href=\"http://itunes.apple.com/app/a-knights-move/id533321133\" target=\"_blank\"\u003eMac\nApp Store\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg title=\"Tutorial puzzle on iPhone\" src=\"/images/Tutorial-500.png\" alt=\"Tutorial puzzle on iPhone\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eTutorial puzzle on iPhone\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/images/PeskyPawns.png\"\u003e\u003cimg title=\"Pesky Pawns - one of the more difficult puzzles on Mac.\" src=\"/images/PeskyPawns-600.png\" alt=\"Pesky Pawns - one of the more difficult puzzles on Mac.\" /\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003ePesky Pawns - one of the more difficult puzzles on Mac.\u003c/p\u003e\n"
    },
    {
        "title" : "A Knight's Move",
        "date_published" : "2012-07-08T00:00:00Z",
        "date_modified" : "2012-07-08T00:00:00Z",
        "id" : "https://troz.net/knightsmove/",
        "url" : "https://troz.net/knightsmove/",
        "content_html" : "\n\n\u003cp\u003eA Knight\u0026rsquo;s Move is a puzzle game where you have to move your knight across a\nboard to a target square using the same movements as a knight in chess. Pawns\nmay block your way, while enemy bishops, castles, knights and the queen may try\nto stop you.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eUPDATE\u003c/strong\u003e: \u003ca href=\"http://itunes.apple.com/app/a-knights-move/id533321133\"\u003eVersion 1.3 for Mac now available\u003c/a\u003e.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAvailable from the \u003ca href=\"http://itunes.apple.com/app/a-knights-move/id533321133\"\u003eMac App Store\u003c/a\u003e for OS X 10.7 or later\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/KnightsMoveMac1.png\" alt=\"A Knight's Move for Mac\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eGet from the starting position to the target in the shortest possible number of\nmoves. Score stars based on the moves taken. If you need help, take a one star\npenalty to show all possible moves. If you really get stuck, after several tries\nthe Cheat button allows you to see a solution, although that will cost you all\nyour stars.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/KnightsMoveMac2.png\" alt=\"A Knight's Move for Mac\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eChoose your preferred board and chess pieces.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/KM-Prefs.png\" alt=\"A Knight's Move Preferences\" /\u003e\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"faq\"\u003eFAQ\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eQ.\u003c/strong\u003e Does the time I take to solve a puzzle count against me?\u003cbr /\u003e\n**A. **No - the number of stars you get depends solely on the number of moves taken.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eQ.\u003c/strong\u003e Are there any penalties for using Undo or Restart?\u003cbr /\u003e\n**A. **No - both Undo and Restart wind back the number of moves, so are not counted\ntowards your final number of moves.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eQ.\u003c/strong\u003e What are the best techniques for solving a large puzzle?\u003cbr /\u003e\n\u003cstrong\u003eA.\u003c/strong\u003e Sometimes it is easier to work backwards. Work out which squares get you to\nthe target safely and see if you can work out how to get to one of them. Another\ntechnique is to check all the possible moves and see how many can be eliminated because\nof danger or because they don\u0026rsquo;t lead anywhere except back to where you started. Just\nremember that trying and failing doesn\u0026rsquo;t count against you, so give it a go.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eQ.\u003c/strong\u003e What if I need help with a puzzle?\u003cbr /\u003e\n\u003cstrong\u003eA.\u003c/strong\u003e The first way to get help is to turn on \u0026ldquo;Show Moves\u0026rdquo;. This puts green circles\non any square that your White Knight can reach next move. It does not indicate whether\nthese squares are safe, but just shows you all legal moves. This option costs you\na one star penalty but you can always do the puzzle again to try for three stars.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eQ.\u003c/strong\u003e What if I think a puzzle is completely impossible?\u003cbr /\u003e\n\u003cstrong\u003eA.\u003c/strong\u003e All the puzzles have at least one solution. If you have tried and tried, using\nRestart or being captured at least 5 times, the Cheat button will become available.\nUsing the Cheat button will show you a possible solution but will mean that you can\nnever get any stars for that puzzle.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eQ.\u003c/strong\u003e You\u0026rsquo;re kidding, right? No stars… ever… just because I cheated?\u003cbr /\u003e\n\u003cstrong\u003eA.\u003c/strong\u003e OK, I\u0026rsquo;m kidding, but the way out of this is deliberately hidden and inconvenient.\nIf you go to Settings or Preferences, you can reset all the game scores which clears\nall records of stars won so far, allowing you to restart completely. If you reset\nthe scores three times in a row, this will also clear all records of cheating.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eQ.\u003c/strong\u003e I think I solved a puzzle in fewer moves than the minimum moves shown.\u003cbr /\u003e\n\u003cstrong\u003eA.\u003c/strong\u003e Great! Please take a screen shot of the puzzle and annotate it to show your\nmoves. Email it in to sarah@troz.net so that I can edit the puzzle for the next update.\u003c/p\u003e\n"
    },
    {
        "title" : "Easy access to the Library folder",
        "date_published" : "2012-05-16T00:00:00Z",
        "date_modified" : "2012-05-16T00:00:00Z",
        "id" : "https://troz.net/post/2012/easy-access-to-the-library-folder/",
        "url" : "https://troz.net/post/2012/easy-access-to-the-library-folder/",
        "content_html" : "\u003cp\u003eIn Mac OS X 10.7 (Lion), Apple decided to make it more difficult to access your\nLibrary folder, presumably to stop people doing stuff that made apps crash. But\nas a developer, I need access to my Library folder a lot. I need to check that\npreferences are being saved correctly. If I have an app that uses the\nApplication Support folder, then I need to be able to check it. And for\nsand-boxed apps, they keep all their data in the Containers folder inside the\nLibrary.\u003c/p\u003e\n\n\u003cp\u003eYou can easily get to the Library folder by holding down the Option key while\nchoosing the Go menu in Finder. This adds Library to the menu and you can get to\nthe folder that way. But this is not as convenient as single-click access from a\nFinder window, so here is my preferred method.\u003c/p\u003e\n\n\u003cp\u003eUse the Option key and the Finder\u0026rsquo;s Go menu to get the Library folder open in a\nFinder window. Switch this window to column view, which will display the Library\nfolder (slightly greyed out) in the first column. Drag this Library folder to\nthe side bar of your Finder window. Now it is there all the time, in every\nFinder window that is showing the side bar.\u003c/p\u003e\n\n\u003cp\u003eI have read about various Terminal tricks to get the Library to show up, but\nevery system update seems to turn it off again. This technique doesn\u0026rsquo;t involve\nanything except the Finder\u0026rsquo;s side bar preferences and so far (I\u0026rsquo;m now up to\n10.7.4), it hasn\u0026rsquo;t needed to be reset after any update.\u003c/p\u003e\n"
    },
    {
        "title" : "Man Reader update coming soon",
        "date_published" : "2012-05-11T00:00:00Z",
        "date_modified" : "2012-05-11T00:00:00Z",
        "id" : "https://troz.net/post/2012/man-reader-update-coming-soon/",
        "url" : "https://troz.net/post/2012/man-reader-update-coming-soon/",
        "content_html" : "\u003cp\u003eMan Reader launched on the Mac App Store a couple of days ago and yesterday I\ngot an email from a purchaser who reported that Man Reader was not displaying\nthe man pages for MacPorts, even though he had the paths set up correctly.\u003c/p\u003e\n\n\u003cp\u003eI installed MacPorts to check this out and ran into the same problem. Running\nthe command \u0026ldquo;man port\u0026rdquo; in Terminal worked fine, but \u0026ldquo;port\u0026rdquo; did not appear in Man\nReader\u0026rsquo;s list.\u003c/p\u003e\n\n\u003cp\u003eMan Reader uses the \u0026ldquo;apropos\u0026rdquo; command to list all available man pages, so I\ntested it next. When I found that it was not listing \u0026ldquo;port\u0026rdquo; either, I thought I\nhad discovered the problem. OS X offers two commands for searching for man\npages: apropos \u0026amp; whatis. The database files used by these commands are updated\nweekly by one of the periodic system commands. I manually ran this update\ncommand using:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-bash\"\u003esudo /etc/periodic/weekly/320.whatis\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThis did part of the job, as the apropos command when used in Terminal now\ncontained the MacPorts man pages. However Man Reader still did not show these\nman pages.\u003c/p\u003e\n\n\u003cp\u003eReverting to the Console log, I found that this was a sand-boxing problem. The\nMac OS X sand-box was preventing access to the man.conf file (which tells where\nto look for man pages), and the whatis database file containing the new data. I\nassume that without access to these files, the default locations for man pages\nwere still searched, but no non-standard locations were being searched.\u003c/p\u003e\n\n\u003cp\u003eI have just submitted an update to the App Store that still uses sand-boxing but\nrequests temporary read-only access to the file system to read these files. If\nApple rejects this, then I will release a version without sand-boxing.\u003c/p\u003e\n\n\u003cp\u003eEither way, you can be assured that the matter is being dealt with and the next\nupdate, whether sand-boxed or not, will allow access to all man pages.\u003c/p\u003e\n"
    },
    {
        "title" : "Pic-a-POD 2.0.4 for Mac",
        "date_published" : "2012-05-11T00:00:00Z",
        "date_modified" : "2012-05-11T00:00:00Z",
        "id" : "https://troz.net/post/2012/pic-a-pod-2-0-4-for-mac/",
        "url" : "https://troz.net/post/2012/pic-a-pod-2-0-4-for-mac/",
        "content_html" : "\n\n\u003cp\u003eThe latest update for \u003ca href=\"http://www.picapod.com/\"\u003ePic-a-POD for Mac\u003c/a\u003e is now available through the\n\u003ca href=\"http://itunes.apple.com/app/pic-a-pod/id477909802?mt=12\u0026uo=4\" target=\"_blank\"\u003eMac\nApp Store\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"bug-fix\"\u003eBug fix:\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eselecting an iPhoto pic from the Recent Desktops menu now works correctly.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"new-features\"\u003eNew features:\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBetter indication of downloads and when large pics are not yet available\u003c/li\u003e\n\u003cli\u003eDirect link to App Store in Help menu - please rate or review.\u003c/li\u003e\n\u003c/ul\u003e\n"
    },
    {
        "title" : "Making a Mac Screen Saver",
        "date_published" : "2012-05-09T00:00:00Z",
        "date_modified" : "2012-05-09T00:00:00Z",
        "id" : "https://troz.net/post/2012/making-a-mac-screen-saver/",
        "url" : "https://troz.net/post/2012/making-a-mac-screen-saver/",
        "content_html" : "\u003cp\u003eHaving just completed the my first screen saver for Mac - the \u003ca href=\"/time-in-words-screen-saver-for-mac/\" title=\"Time In Words Screen Saver for Mac\"\u003eTime In Words\nScreen Saver\u003c/a\u003e, I thought I would share some of the experiences. I am using OS\nX Lion (10.7) and Xcode 4.3.2\u003c/p\u003e\n\n\u003cp\u003eThe first thing is to create a new project in Xcode using the Screen Saver\ntemplate:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/images/ScreenSaverTemplate.png\"\u003e\u003cimg title=\"Xcode Screen Saver Template\" src=\"/images/ScreenSaverTemplate-441x300.png\" alt=\"Xcode Screen Saver Template\" /\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eXcode sets up a project for you with everything you need for a screen saver\nmodule. Start editing the ScreenSaverView.m file. The most important method here\nis animateOneFrame.\u003c/p\u003e\n\n\u003cp\u003eThis is called every time the animation time interval elapses. This interval is\nset in \u003ccode\u003einitWithFrame:isPreview:\u003c/code\u003e. I have seen some debate online as to whether\nthe drawing should be done in the \u003ccode\u003eanimateOneFrame\u003c/code\u003e method or in the \u003ccode\u003edrawRect\u003c/code\u003e\nmethod. I chose to use \u003ccode\u003eanimateOneFrame\u003c/code\u003e because they are both called when the\nscreen saver starts which can lead to an unpleasant flicker.\u003c/p\u003e\n\n\u003cp\u003eNow it is up to you to decide what to show in the \u003ccode\u003eanimateOneFrame\u003c/code\u003e method. For\nTime In Words, I assembled the data as a string, created a dictionary of text\nattributes, calculated the location where I wanted to show the text and used\n\u003ccode\u003edrawAtPoint:withAttributes:\u003c/code\u003e to display it.\u003c/p\u003e\n\n\u003cp\u003eThere are a couple of important tricks when working out locations: firstly, you\nwill need to know the bounds of the screen saver area. This will vary depending\non the monitor, screen size or whether the screen saver is appearing in the\npreview window in System Preferences. The screen saver view has a method that\ndoes this work for you.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-objectivec\"\u003eNSRect viewBounds = [self bounds];\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe next trick is that you are most likely going to need some random numbers.\nAgain, the screen saver framework supplies these to you in several forms. I used\n\u003ccode\u003eSSRandomFloatBetween\u003c/code\u003e but there are others. Check the documentation.\u003c/p\u003e\n\n\u003cp\u003eI ran into an oddity in System Preferences that made testing a bit tedious. I\nbuilt the screen saver module and double-clicked on it to install into System\nPreferences. That worked fine, but when I made some changes and repeated the\nprocess, the original screen saver was still in place. I found that I had to\nquit System Preferences each time. Deleting the old version of the screen saver\nwas not necessary, but quitting the System Prefs app was essential.\u003c/p\u003e\n\n\u003cp\u003eSo that gives the basic screen saver module but with no options. Adding options\nis not difficult, but as always, there are a few things that are not obvious on\nfirst glance.\u003c/p\u003e\n\n\u003cp\u003eAdd a xib file to your project: I used a window template. Then change the\nwindow\u0026rsquo;s class to NSPanel and configure it as shown:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg title=\"NSPanel Settings\" src=\"/images/PanelSettings.png\" alt=\"NSPanel Settings\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eSet the File\u0026rsquo;s Owner class to the class of your Screen Saver view. In your\nScreenSaverView.h file, declare a property for this new panel. e.g.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-objectivec\"\u003e @property (assign) IBOutlet NSPanel *optionsPanel;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e@synthesize this in the ScreenSaverView.m file. In the xib file, connect the\npanel to this outlet.\u003c/p\u003e\n\n\u003cp\u003eNow go back to ScreenSaverView.m and add the following code:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-objectivec\"\u003e* (BOOL)hasConfigureSheet { return YES; }\n\n* (NSWindow *)configureSheet { if (!self.optionsPanel) { [NSBundle\n  loadNibNamed:@\u0026quot;Options\u0026quot; owner:self]; } return self.optionsPanel; }\n\n- (IBAction)closeConfig:(id)sender { [[NSApplication sharedApplication]\n  endSheet:self.optionsPanel]; }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe \u003ccode\u003ehasConfigureSheet\u003c/code\u003e and \u003ccode\u003econfigureSheet\u003c/code\u003e stubs are already there for you,\nbut you can replace them with these versions.\u003c/p\u003e\n\n\u003cp\u003eGo back to the xib file and drag in a button to close the options panel. Connect\nit to the \u003ccode\u003ecloseConfig:\u003c/code\u003e action.\u003c/p\u003e\n\n\u003cp\u003eSave everything, build, install in System Preferences and test. Firstly, the\n\u0026ldquo;Options\u0026hellip;\u0026rdquo; button should be enabled. Clicking it should open your panel as a\nsheet, and when you click your button, the panel should close.\u003c/p\u003e\n\n\u003cp\u003eIf that doesn\u0026rsquo;t work, check the class assignments, the connections, the settings\nfor the NSPanel and the code in that order.\u003c/p\u003e\n\n\u003cp\u003eOnce the panel is opening and closing as required, you need to add the ability\nto store and retrieve the settings. Instead of using NSUserDefaults as you would\nin a standard Mac app, there is a special class call ScreenSaverDefaults for\nscreen savers. It needs a unique module name, so I used the bundle identifier.\nFor my Time In Words screen saver, this is\n\u0026ldquo;net.troz.Time-In-Words-Screen-Saver\u0026rdquo;. I defined a constant to hold this as a\nstring, so I could use it anywhere I needed.\u003c/p\u003e\n\n\u003cp\u003eIn the \u003ccode\u003einitWithFrame:isPreview:\u003c/code\u003e method, I got a reference to the screen saver\ndefaults for my screen saver and registered the defaults. I am never very sure\nabout the need to do this, but it is supposed to be a good practice.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-objectivec\"\u003eScreenSaverDefaults *defaults = [ScreenSaverDefaults defaultsForModuleWithName:kModuleName];\n[defaults registerDefaults:[NSDictionary dictionaryWithObjectsAndKeys:\n  @\u0026quot;NO\u0026quot;, @\u0026quot;UseAlternativeZone\u0026quot;, @\u0026quot;\u0026quot;,\n  @\u0026quot;AlternativeZoneName\u0026quot;, nil]\n];\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eUsing them is exactly the same as using NSUserDefaults:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-objectivec\"\u003e// Reading\nScreenSaverDefaults *defaults = [ScreenSaverDefaults defaultsForModuleWithName:kModuleName];\nBOOL useAlternativeZone = [defaults boolForKey:@\u0026quot;UseAlternativeZone\u0026quot;];\nNSString *alternativeZoneName = [defaults objectForKey:@\u0026quot;AlternativeZoneName\u0026quot;];\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u0026hellip;\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-objectivec\"\u003e// Writing\nScreenSaverDefaults *defaults = [ScreenSaverDefaults defaultsForModuleWithName:kModuleName]; [defaults setBool:useAlternative forKey:@\u0026quot;UseAlternativeZone\u0026quot;];\n[defaults setObject:alternativeZoneName forKey:@\u0026quot;AlternativeZoneName\u0026quot;];\n[defaults synchronize];\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eOne last thing: if you want to distribute the screen saver, you will want to\ncreate an archive, possibly code-signing with your Apple developer ID to allow\nfor Mountain Lion\u0026rsquo;s up-coming Gatekeeper security system. I code-signed the\nproject and built an archive, but when I clicked \u0026ldquo;Distribute\u0026rdquo; in the Organizer,\nthe only appropriate options was \u0026ldquo;Save Built Products\u0026rdquo;. I selected this option\nand ended up with a series of folders inside folders, with the screen saver\nmodule in about the fifth folder down. I don\u0026rsquo;t know why the module gets\ndistributed like this, but I pulled it out of the folders and it worked fine.\u003c/p\u003e\n\n\u003cp\u003eAnd that\u0026rsquo;s about it. A lot of this stuff is online or in Apple\u0026rsquo;s documentation,\nbut there are enough oddities to make it worthwhile gathering together all that\nI learnt while making this screen saver.\u003c/p\u003e\n\n\u003cp\u003eClick this icon to download the screen saver:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/screensaver/TimeInWords-ScreenSaver.zip\"\u003e\u003cimg src=\"/images/ScreenSaverIcon128.png\"\u003e\u003c/a\u003e\u003c/p\u003e\n"
    },
    {
        "title" : "Man Reader",
        "date_published" : "2012-05-08T00:00:00Z",
        "date_modified" : "2012-05-08T00:00:00Z",
        "id" : "https://troz.net/manreader/",
        "url" : "https://troz.net/manreader/",
        "content_html" : "\n\n\u003cp\u003eMan Reader is a utility app for reading macOS\u0026rsquo;s man pages. Man Reader allows\nquick, convenient and easy access to the man pages on your system, useful for\nprogrammers, system administrators and tweakers.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/images/MR_Start.png\"\u003e\u003cimg src=\"/images/MR_Start_small.png\" alt=\"MR\" title=\"Man Reader\" /\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://itunes.apple.com/app/man-reader/id522583774?mt=12\"\u003eBuy Man Reader from the Mac App Store\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eMan pages are available for the Unix commands used mostly in Terminal or when\nshell scripting. These man pages are normally displayed in Terminal using the\n\u0026ldquo;man\u0026rdquo; command e.g. \u0026ldquo;man man\u0026rdquo; gives you the man page for the man command.\u003c/p\u003e\n\n\u003cp\u003eHowever there are problems with this: the man page is displayed to you in your\nTerminal window page by page and when you have got to the bottom, you have to\nknow to press \u0026lsquo;q\u0026rsquo; to get out of the man page display, at which point it\ndisappears completely. Hope you have a good memory!\u003c/p\u003e\n\n\u003cp\u003eThere are various tricks to get around this: opening it in a separate window,\npiping it to Preview as a PDF, listing it as a single page etc, but none of\nthese are really convenient, which is why I wrote Man Reader. Basically, I\nreckon that if I want a utility, then there must be other people who would want\nthe same thing.\u003c/p\u003e\n\n\u003cp\u003eMan Reader assembles a list of the commands with available man pages on your\nsystem - this will vary according to what developer tools you have installed.\nThese commands are listed for you and you can click on any one to display the\nman page for that command.\u003c/p\u003e\n\n\u003ch2 id=\"man-reader-features\"\u003eMan Reader Features:\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eList of all available man pages on your system.\u003c/li\u003e\n\u003cli\u003eShow only a section of the pages.\u003c/li\u003e\n\u003cli\u003eSearch for a man page by name.\u003c/li\u003e\n\u003cli\u003eDisplay man page in text or HTML (different pages look best in different\nformats).\u003c/li\u003e\n\u003cli\u003eStep back \u0026amp; forward through recently viewed man pages.\u003c/li\u003e\n\u003cli\u003eLive links to \u0026lsquo;See Also\u0026rsquo; entries.\u003c/li\u003e\n\u003cli\u003e\u0026lsquo;Sticky notes\u0026rsquo; at the side to jump to sub-sections in a page.\u003c/li\u003e\n\u003cli\u003eChoose a font and size for the display.\u003c/li\u003e\n\u003cli\u003eConvenient buttons in the toolbar allow quick access to commonly used\nutilities.\u003c/li\u003e\n\u003cli\u003eSand-boxed for OS X Lion \u0026amp; later.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr /\u003e\n\n\u003ch4 id=\"man-reader-version-1-8-changes-23-oct-2016\"\u003eMan Reader version 1.8 changes (23 Oct 2016):\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eMore complete search for man pages, including in third-party IDEs.\u003c/li\u003e\n\u003cli\u003eFix for glitch when displaying previously selected page on launch.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"man-reader-version-1-7-changes-10-oct-2016\"\u003eMan Reader version 1.7 changes (10 Oct 2016):\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eUpdated for macOS Sierra.\u003c/li\u003e\n\u003cli\u003eList of pages now uses alternating colors even if not using the defaults.\u003c/li\u003e\n\u003cli\u003eMinimum supported system version raised to 10.11.\u003c/li\u003e\n\u003cli\u003eMinor display glitches fixed.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"man-reader-version-1-6-changes-13-jul-2016\"\u003eMan Reader version 1.6 changes (13 Jul 2016):\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eMuch improved searching for available man pages, including permissions fix for\nsome pages.\u003c/li\u003e\n\u003cli\u003eFixed error with new search term being over-written.\u003c/li\u003e\n\u003cli\u003eSand-boxed version now works just as well as the non-sand-boxed so please\nswitch back to this version.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"man-reader-version-1-5-changes\"\u003eMan Reader version 1.5 changes:\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eMuch improved searching for available man pages.\u003c/li\u003e\n\u003cli\u003eSand-boxed version now works just as well as the non-sand-boxed.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"man-reader-version-1-4-changes\"\u003eMan Reader version 1.4 changes:\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eFix for plain text view not wrapping correctly for odd-sized fonts.\u003c/li\u003e\n\u003cli\u003eFix for HTML text view over-riding font colors that may be invisible.\u003c/li\u003e\n\u003cli\u003eSearch for missing entry (e.g. g++) no longer requires Enter or Return.\u003c/li\u003e\n\u003cli\u003eBetter automatic selection of matching entries while searching.\u003c/li\u003e\n\u003cli\u003eFix for animation warning message appearing in Console.\u003c/li\u003e\n\u003cli\u003eStatus display shows when man page list is being updated.\u003c/li\u003e\n\u003cli\u003eSearching inside a page now allows a minimum of 2 characters (was 3), so flags\ne.g. \u0026lsquo;-b\u0026rsquo; do not need to be escaped.\u003c/li\u003e\n\u003cli\u003eFixed path for Network Utility in tool bar (moved in OS X 10.9).\u003c/li\u003e\n\u003cli\u003eMore information available about the effects of sand-boxing for this app.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"man-reader-version-1-3-changes\"\u003eMan Reader version 1.3 changes:\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eBetter formatting of plain text to allow for HTML entities.\u003c/li\u003e\n\u003cli\u003eFix for font in some HTML pages getting bigger \u0026amp; bigger.\u003c/li\u003e\n\u003cli\u003eFailed search for page will search for a matching man page anyway.\u003c/li\u003e\n\u003cli\u003eEditable apps in toolbar (see Preferences \u0026amp; View menu).\u003c/li\u003e\n\u003cli\u003eFixed bug when setting custom colors for marker tabs.\u003c/li\u003e\n\u003cli\u003eChanged shortcuts for Find (see Edit menu).\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"man-reader-version-1-2-changes\"\u003eMan Reader version 1.2 changes:\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eCustomizable colors for text, background, links, found text.\u003c/li\u003e\n\u003cli\u003eSearching for text within pages marks all matches.\u003c/li\u003e\n\u003cli\u003ePages will adjust line width to suit window size, even in plain text mode.\u003c/li\u003e\n\u003cli\u003eIf a search only results in a single page, press Return to display it.\u003c/li\u003e\n\u003cli\u003eMore man pages should be located on your system.\u003c/li\u003e\n\u003cli\u003eFix for bug where app did not always remember full screen setting.\u003c/li\u003e\n\u003cli\u003eFix for bug where some pages were being added to the history list twice.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"man-reader-version-1-1-changes\"\u003eMan Reader version 1.1 changes:\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eSearch for text within a man page.\u003c/li\u003e\n\u003cli\u003eBookmark frequently visited pages.\u003c/li\u003e\n\u003cli\u003eSearch man page list using \u0026ldquo;Starts with\u0026rdquo; or \u0026ldquo;Contains\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003ePreferences for the marker tabs: choose a pre-made color set or design your\nown.\u003c/li\u003e\n\u003cli\u003eFull screen mode now supported.\u003c/li\u003e\n\u003cli\u003eCustom toolbar configurations now saved \u0026amp; restored correctly.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eIf you have any problems with Man Reader, any suggestions for future versions or\nencounter any bugs, please \u003ca href=\"mailto:sarah@troz.net?subject=Man%20Reader\"\u003econtact me\u003c/a\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "Time In Words Screen Saver",
        "date_published" : "2012-05-07T00:00:00Z",
        "date_modified" : "2012-05-07T00:00:00Z",
        "id" : "https://troz.net/time-in-words-screen-saver-for-mac/",
        "url" : "https://troz.net/time-in-words-screen-saver-for-mac/",
        "content_html" : "\u003cp\u003eThe latest member of the Time In Words suite of apps is a screen saver module\nfor Macs.\u003cbr /\u003e\nVersion 1.2 updated January 2013: compatible with Lion (OS X 10.7), Mountain Lion\n(OS X 10.8), Mavericks (OS X 10.9) \u0026amp; Yosemite (OS X 10.10).\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/ScreenSaverIcon128.png\" alt=\"Time In Words Screen Saver Download\" /\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/screensaver/TimeInWords-ScreenSaver.zip\"\u003eDownload Time In Words Screen Saver\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eLike \u003ca href=\"/time-in-words/\" title=\"Time In Words\"\u003eTime In Words for iOS\u003c/a\u003e and \u003ca href=\"/time-in-words-for-mac/\" title=\"Worlds Time In Words for Mac\"\u003eWorld Time In Words for Mac\u003c/a\u003e, it\ndisplays the time and date in plain words which are easy to read and comprehend.\nWhile it only shows a single time and date, this can be configured to show your\nlocal time \u0026amp; date or any available time zone. Since the App Store does not have\na section for screen savers, the \u003ca href=\"/screensaver/TimeInWords-ScreenSaver.zip\"\u003eTime In Words screen saver\u003c/a\u003e is available as\na direct download from my site. Click the link or the icon above to download the\nscreen saver as a zip file. If the zip file does not open automatically,\ndouble-click the file to unzip it. Then double-click the \u0026ldquo;Time In Words Screen\nSaver.saver\u0026rdquo; file to install the screen saver in your System Preferences. You\nwill be asked whether you want to install it for the current user only or for\nall users. Selecting \u0026ldquo;All Users\u0026rdquo; will require you to enter your password, so I\nrecommend just installing for the current user.\u003c/p\u003e\n\n\u003cp\u003eScroll to the \u0026ldquo;Other\u0026rdquo; section of the list of screen savers and click \u0026ldquo;Time In\nWords Screen Saver\u0026rdquo; to activate it. Sometimes the installation leaves the screen\nsaver selected but not active. If this is the case, select another screen saver\nand then click back on Time In Words.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/images/ScreenSaver1.png\"\u003e\u003cimg src=\"/images/ScreenSaver1-small.png\" alt=\"Time In Words Screen Saver\" /\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eBy default, your local time \u0026amp; date will be displayed. To select a different time\nzone, click the \u0026ldquo;Screen Saver Options…\u0026rdquo; button to display the following:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/images/ScreenSaver2.png\"\u003e\u003cimg src=\"/images/ScreenSaver2-small.png\" alt=\"Time In Words Screen Saver Options\" /\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eClick the \u0026ldquo;Show Alternate Time\u0026rdquo; radio button to enable the time zone list. As\nwith Time In Words for Mac, you can type part of a city name in the search field\nto find a zone quickly. Select the zone you want to use and click \u0026ldquo;OK\u0026rdquo;. The\npreview will switch to showing your newly selected time zone.\u003c/p\u003e\n\n\u003cp\u003eFor anyone interested in the source code, here is a download link: \u003ca href=\"/screensaver/TimeInWordsScreenSaverXcode.zip\"\u003eTime In\nWords Screen Saver Xcode project\u003c/a\u003e. This was written using Xcode 4.x so is\nrather out-dated by now, but may prove useful to others wishing to start writing\ntheir own screen savers.\u003c/p\u003e\n"
    },
    {
        "title" : "Support for older operating systems",
        "date_published" : "2012-05-02T00:00:00Z",
        "date_modified" : "2012-05-02T00:00:00Z",
        "id" : "https://troz.net/post/2012/support-for-older-operating-systems/",
        "url" : "https://troz.net/post/2012/support-for-older-operating-systems/",
        "content_html" : "\u003cp\u003eWorking out what operating systems to support in your software is always a\ndifficult decision. I only program for Mac \u0026amp; iOS systems for starters. This is\nbecause they are the systems I use and understand. I am not interested in\nexpending the time \u0026amp; money needed to program and test my software for other\nsystems.\u003c/p\u003e\n\n\u003cp\u003eWithin the Mac \u0026amp; iOS ecosystems, there is still the decision of which versions\nto support. Partially, this is based on the usage statistics of each version. I\nfound a site that segments the current Mac market:\n\u003ca href=\"http://www.netmarketshare.com/operating-system-market-share.aspx?qprid=10\u0026qpcustomb=*2\" target=\"_blank\"\u003eDistribution\nof Mac OS X versions\u003c/a\u003e. This tells me that OS 10.6 \u0026amp; OS 10.7 between them have\n83% which makes 10.6 a good cut-off point.\u003c/p\u003e\n\n\u003cp\u003eDistribution of iOS versions is harder to discover, but I found a post that did\na good job of analysing the statistics that are available:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://pxldot.com/post/18754186750/ios-ebb-and-flow\"\u003e pxldot (iOS Ebb and Flow)\u003c/a\u003e. According to this post, by March 2012, iOS had\nabout 75% with the remainder being almost exclusively iOS 4.\u003c/p\u003e\n\n\u003cp\u003eSo based on statistics alone, it makes sense to support Mac OS X 10.6 or later\nand iOS 4 and later. However this doesn\u0026rsquo;t cover all the relevant issues. Another\nimportant factor is new techniques and APIs introduced in Apple\u0026rsquo;s developer\ntools.\u003c/p\u003e\n\n\u003cp\u003eIn iOS 4, Apple gave us ARC - Automatic Reference Counting - which basically\nremoves the tedious job of memory management. This was especially painful in iOS\napps where there is no garbage collection. \u003ca href=\"http://longweekendmobile.com/2011/09/07/objc-automatic-reference-counting-in-xcode-explained/\"\u003eThe Long Weekend Website\u003c/a\u003e has an\nexcellent summary of ARC - what it is and how to use it. Since this only\nexcludes iOS 3 or earlier, there is no issue using this for all iOS projects.\u003c/p\u003e\n\n\u003cp\u003eBut now Apple has extended ARC to Mac apps as well, but only for apps built to\nrun under 10.7 or later. Even though Mac apps could use garbage collection to\nremove some of the burden of memory management, this had its own inefficiencies\nand overheads. So in my case, I have decided that all future apps will require\n10.7 to take advantage of ARC. Existing apps will stay as is - requiring 10.6 or\nlater. With 10.8 not that far away, the usage statistics should follow this\ntrend.\u003c/p\u003e\n\n\u003cp\u003eBack to iOS, there is another new feature of Xcode that is really too attractive\nto ignore and that is story-boarding. This is a graphical way of laying out the\nnavigation logic for your app and providing segues between different views. Ray\nWenderlich has a good \u003ca href=\"http://www.raywenderlich.com/5138/beginning-storyboards-in-ios-5-part-1\"\u003eintroduction to storyboards\u003c/a\u003e. So this means that my\nfuture iOS apps will all require 10.5 or later.\u003c/p\u003e\n\n\u003cp\u003eOne final factor is testing. You really need to have a device running each\nversion of any supported operating system. I would rather concentrate on getting\nthe best result for users of the latest versions that spend my time tweaking for\nolder systems. With iOS, Apple makes it amazingly easy to update to the latest\nversion. With Macs it costs money which is always a barrier, but technically,\nthe App Store is making updates easier to apply.\u003c/p\u003e\n"
    },
    {
        "title" : "Time In Words \u0026 the new iPad",
        "date_published" : "2012-04-10T00:00:00Z",
        "date_modified" : "2012-04-10T00:00:00Z",
        "id" : "https://troz.net/post/2012/time-in-words-the-new-ipad/",
        "url" : "https://troz.net/post/2012/time-in-words-the-new-ipad/",
        "content_html" : "\u003cp\u003eThe new iPad has a Retina display, meaning that the pixel density is much\ngreater. For some apps, this is a problem as their graphics are now scaled and\nlook pixellated. However Time In Words is very simple. It uses standard fonts\nand interface widgets with no images or external graphics apart from the icon.\nThe icon may not look perfect on a new iPad, but the display itself should look\nreally great.\u003c/p\u003e\n\n\u003cp\u003eI had a report from one user that Time In Words will not work at all on his new\niPad. Unfortunately, the email address supplied did not work, so I was unable to\ncontact this person directly. If you are reading this, please contact me again.\u003c/p\u003e\n\n\u003cp\u003eThe person having the problem did not specify exactly what the problem was, so I\ndon\u0026rsquo;t know if the app will not start, or if it is not displaying correctly, or\nif it is showing the wrong times or what.\u003c/p\u003e\n\n\u003cp\u003eHowever I suggested two things to try, and I will list them now in case anyone\nelse is having issues:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eTry deleting the app from your iPad and then re-installing from the App\nStore.\u003c/li\u003e\n\u003cli\u003eDo a complete reboot of your iPad in case it is running low on memory.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eHopefully one or both of these ideas will solve any problems. They are both good\ngeneral tricks to try with any problem app.\u003c/p\u003e\n"
    },
    {
        "title" : "iPhone 4 Home Button",
        "date_published" : "2012-03-28T00:00:00Z",
        "date_modified" : "2012-03-28T00:00:00Z",
        "id" : "https://troz.net/post/2012/iphone-4-home-button/",
        "url" : "https://troz.net/post/2012/iphone-4-home-button/",
        "content_html" : "\u003cp\u003eMy iPhone 4 is now 18 months old, and it\u0026rsquo;s Home button is starting to feel the\nstrain. These buttons have been used much more than originally intended, with\nthe new multitasking required double-presses, not to mention access to the\ncamera etc. So basically , it is wearing out.\u003c/p\u003e\n\n\u003cp\u003eThe phone is out of warranty and there is no way I am going to pay for an\nexpensive repair when my current phone contract will expire later this year, and\nhopefully the iPhone 5 will be ready for me then. And a cheap repair or DIY is\ntoo risky.\u003c/p\u003e\n\n\u003cp\u003eI saw a post comparing the physical structure of the home buttons on iPhone 4 \u0026amp;\n4S. Unfortunately I cannot find the link now, but it showed that the actual\nhardware has been made a lot more robust since the iPhone 4 was released, so\nthis should only be a short term issue.\u003c/p\u003e\n\n\u003cp\u003eI read a article suggesting the use of WD-40 for a mis-behaving Home button.\nThis is a TERRIBLE idea! Do not spray a penetrating oil into your expensive\nelectronic device. For starters, it don\u0026rsquo;t believe it is a friction problem - I\nthink the mechanism is just wearing out.\u003c/p\u003e\n\n\u003cp\u003eSome people recommend recalibrating the Home button as shown in this post from\n\u003ca href=\"http://www.idownloadblog.com/2011/12/22/recalibrate-home-button-responsive/\"\u003eidownloadblog.com\u003c/a\u003e. I am a bit sceptical about this. I tried it, but I can\u0026rsquo;t\nsee that it did anything. Maybe if your problem is software rather than\nhardware, then it will do some good. Anyway, unlike the WD-40 trick, it can\u0026rsquo;t do\nany harm.\u003c/p\u003e\n\n\u003cp\u003eFinally, on to the workaround. If your iPhone button is really unreliable, but\nyou are not ready to repair or upgrade, then you can use the Accessibility tools\nto get a software Home button on the screen.\u003c/p\u003e\n\n\u003cp\u003eGo to Settings - General - Accessibility. Scroll down to \u0026ldquo;Physical \u0026amp; Motor\u0026rdquo;.\nTurn on AssistiveTouch.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/images/HomeButton1.png\"\u003e\u003cimg title=\"AssistiveTouch settings\" src=\"/images/HomeButton1-small.png\" alt=\"AssistiveTouch settings\" width=\"200\" height=\"300\" /\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eWhen you back out of Settings, you will see a white blob somewhere on your\nscreen. This can be dragged to any location around the edge of the screen, so\nyou can always move it out of the way in any app.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/images/HomeButton2.png\"\u003e\u003cimg title=\"The White Blob\" src=\"/images/HomeButton2-small.png\" alt=\"The White Blob\" width=\"200\" height=\"300\" /\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eTapping on the white blob gives you an overlay view with four options, one of\nwhich is Home. Tapping this is exactly the same as pressing the physical Home\nbutton. So with this and the power button, you can do everything, even if the\nHome button stops working completely.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/images/HomeButton3.png\"\u003e\u003cimg title=\"AssistiveTouch panel open\" src=\"/images/HomeButton3-small.png\" alt=\"AssistiveTouch panel open\" width=\"200\" height=\"300\" /\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThanks to Tom at our local Apple Store (Robina, Queensland, Australia) for this\ntip.\u003c/p\u003e\n"
    },
    {
        "title" : "Time In Words for Mac now available",
        "date_published" : "2012-03-20T00:00:00Z",
        "date_modified" : "2012-03-20T00:00:00Z",
        "id" : "https://troz.net/post/2012/time-in-words-for-mac-now-available/",
        "url" : "https://troz.net/post/2012/time-in-words-for-mac-now-available/",
        "content_html" : "\u003cp\u003eTime In Words for Mac has just been approved and is now available for free from\nthe\n\u003ca href=\"http://itunes.apple.com/au/app/time-in-words/id509085586?mt=12\" target=\"_blank\"\u003eMac\nApp Store\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor more details, check out the \u003ca href=\"/time-in-words-for-mac/\"\u003eTime In Words for Mac\u003c/a\u003e web page.\u003c/p\u003e\n"
    },
    {
        "title" : "World Time In Words for Mac",
        "date_published" : "2012-03-19T00:00:00Z",
        "date_modified" : "2012-03-19T00:00:00Z",
        "id" : "https://troz.net/time-in-words-for-mac/",
        "url" : "https://troz.net/time-in-words-for-mac/",
        "content_html" : "\u003cp\u003e\u003ca href=\"http://itunes.apple.com/au/app/time-in-words/id509085586?mt=8\" target=\"_blank\"\u003eWorld\nTime In Words for Mac\u003c/a\u003e version 3.0 is now available through the Mac App\nStore. This update changes the name from \u0026ldquo;Time In Words\u0026rdquo; to \u0026ldquo;World Time In\nWords\u0026rdquo; as an acknowledgment that the major feature of this app is converting\ntime between different time zones. This update adds the ability to show digital\ntime if you need greater accuracy - just hold down Option as you open the menu.\nI have also added the ability to show 24-hour time in the menu bar.\u003c/p\u003e\n\n\u003cp\u003eWorld Time In Words runs as a menu bar utility app that displays your current\ntime and date in words. Optionally, it can be set to display a number of time\nzones, again in plain English so it is always clear which day is being referred\nto. It shows the time in words in your menu bar all the time if you like, and\nnow offers a convenient way to work out what the time will be in other zones at\na specified local time.\u003c/p\u003e\n\n\u003cp\u003eThe first time you run the World Time In Words app, it will appear in your menu\nbar and pop down a menu that looks like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"/images/WTiW-web-1.png\" alt=\"World Time In Words starting menu\" width=\"257\" height=\"257\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eSelecting Preferences\u0026hellip; will take you to a window like\nthis\u003cimg src=\"/images/WTiW-web-2.png\" alt=\"World Time In Words Preferences\" width=\"562\" height=\"398\" /\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cspan style=\"text-align: center;\"\u003eType in part of a city name in the search area\nto find that city and its time zone. Drag or double-click a line in the table on\nthe right to move a time zone to the list on the left, which shows the time\nzones that will appear in the menu. Drag a line out of the list on the left to\nremove a zone, or double-click the unwanted line. Drag and drop to re-arrange\nthe zones in the selected list.\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003eMars geeks: scroll to the bottom of the time zone list or search for Mars,\nCuriosity or Opportunity to find the Mars Rovers. Adding them to your selected\ntime zones will show how many Sols (Martian days) the rovers have been on Mars.\u003c/p\u003e\n\n\u003cp\u003eOnce you have selected some time zones, your menu may look like\nthis:\u003cimg src=\"/images/WTiW-web-3.png\" alt=\"World Time In Words menu with added time zones\" width=\"280\" height=\"667\" /\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cspan style=\"text-align: center;\"\u003eNote that the menu will indicate which time\nzones are currently in daylight savings time.\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003eVersion 3.0 adds the ability to see all the time digitally if you have a\ntemporary need for greater accuracy. Hold down the Option key as you click in\nthe menu title and the menu will appear like this:\u003cbr /\u003e\n\u003cimg src=\"/images/WTiW-web-6.png\" alt=\"World Time In Words digital option\" width=\"262\" height=\"521\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eTo specify what will be displayed in the menu bar, you can toggle \u0026ldquo;Show time in\nwords as menu title\u0026rdquo;. If this is checked, you have two other methods for\nadjusting what you will see. Select your preferred accuracy: \u0026ldquo;To closest 5\nminutes\u0026rdquo; or \u0026ldquo;Precise\u0026rdquo;. Use the popup menu to select a time \u0026amp; date format to show\nin the menu bar. You can also choose 24 hour time for the menu title if you\nprefer.\u003cbr /\u003e\n\u003cimg src=\"/images/WTiW-web-4.png\" alt=\"Menu bar time \u0026 date formats\" width=\"561\" height=\"396\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eTo see what time it will be in your selected time zones at various hours during\nyour day, choose \u0026ldquo;What time will it be when\u0026hellip;\u0026rdquo; from the menu. Move the slider\nto different hours in your local zone and read what the corresponding time will\nbe in your preferred time zones.\u003cbr /\u003e\n\u003cimg src=\"/images/WTiW-web-5.png\" alt=\"What time will it be when...\" width=\"514\" height=\"435\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eIf you want to make World Time In Words start automatically whenever you log in\nto your Mac, check the \u0026ldquo;Auto start\u0026hellip;\u0026rdquo; checkbox. This uses Apple\u0026rsquo;s new methods\nof adding sandboxed items to the login startup list which has two consequences:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWorld Time In Words will not show up in your Login Items if you go to System\nPreferences\u003c/li\u003e\n\u003cli\u003eThe auto-start will only work if the app is installed in your Applications\nfolder.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhile I do not think the second item is a problem, since the App Store\nautomatically installs into your Applications folder, I disagree with the policy\nenforced in the first item. It means that if you wish to un-install World Time\nIn Words, you should ensure that you have turned off \u0026ldquo;Auto start\u0026hellip;\u0026rdquo; first, as\nthere is no easy way to do this from outside the app.\u003c/p\u003e\n\n\u003cp\u003eHowever, World Time In Words is sandboxed, so it\u0026rsquo;s data and settings are kept in\ntheir own container and isolated from other apps for better security.\u003c/p\u003e\n\n\u003cp\u003eIf you are having any problems with World Time In Words, or you have any\nsuggestions for future improvements, please \u003ca href=\"mailto:sarah@troz.net?subject=World%20Time%20In%20Words%20-%20Mac\"\u003eemail me\u003c/a\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "Interface options for selecting time zones",
        "date_published" : "2012-02-25T00:00:00Z",
        "date_modified" : "2012-02-25T00:00:00Z",
        "id" : "https://troz.net/post/2012/interface-options-for-selecting-time-zones/",
        "url" : "https://troz.net/post/2012/interface-options-for-selecting-time-zones/",
        "content_html" : "\u003cp\u003eAs part of the design for [Time In Words for Mac][1], I had to work out the\ninterface for selecting time zones. With [Time In Word for iOS][2], I used\npicker wheels which are excellent for selecting hierarchical data. On the Mac,\nthere is no such thing as the iOS picker wheel and so I had to consider what to\nuse instead.\u003c/p\u003e\n\n\u003cp\u003eWhen you ask the system (Mac or iOS) for the available time zones, you get a\nlist of names like this:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eAfrica/Abidjan\u003cbr /\u003e\nAfrica/Accra\u003cbr /\u003e\n\u0026hellip;\u003cbr /\u003e\nAmerica/Cayman\u003cbr /\u003e\nAmerica/Chicago\u003cbr /\u003e\n\u0026hellip;\u003cbr /\u003e\nEurope/Riga\u003cbr /\u003e\nEurope/Rome\u003cbr /\u003e\netc.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis seems obviously designed for a hierarchical display with the major regions\nas a first selection, filtering down to the cities in that region, making\nselection a two-step process. With the picker wheel in iOS, that is what I did.\nThe first wheel selects the region which then populates the second wheel with\nthe relevant city names. It makes it quick and easy to select a zone.\u003c/p\u003e\n\n\u003cp\u003eI always prefer to use standard user interface objects because people are\nfamiliar with them, they automatically update with the system, and there is much\nless chance of the App Store rejecting the app. So I scrolled through the\navailable Mac options and came to NSBrowser. This is basically what Finder uses\nwhen in column mode.\u003c/p\u003e\n\n\u003cp\u003eI created an NSBrowser object, worked out a way to populate it and tested. It\nwas incredibly slow! The list of regions appeared when the window opened, and\nthat was no problem. Then I clicked a region and the first set of city names\nappeared instantly. But subsequent selections took about 3 seconds to appear.\u003c/p\u003e\n\n\u003cp\u003eI added some timing tests and my data gathering was taking about 20\nmilliseconds. The log thought the browser had updated within about 100\nmilliseconds, so I guess the rest of the time was some redraw issue.\u003c/p\u003e\n\n\u003cp\u003eApple provides a large number of sample projects so I downloaded one that used\nNSBrowser. It seemed fast and responsive, so I duplicated it\u0026rsquo;s different method\nof assembling the data and tried again. No luck - it was as slow as before.\u003c/p\u003e\n\n\u003cp\u003eI am sure that if I kept at it, I would eventually work out what was causing the\nbottleneck and make NSBrowser work - after all, Finder is responsive enough,\neven if not great. But in the end, I decided that the advantages to using this\nform of interface didn\u0026rsquo;t justify the time spent, so I went with a simple table\nand a search field.\u003c/p\u003e\n\n\u003cp\u003eIt is fast to populate, responsive to searches and didn\u0026rsquo;t take long to set up.\nSo I am happy, although still perplexed about NSBrowser. It is on my to-do list\nof things I want to work out one day.\u003c/p\u003e\n\n\u003cp\u003e[1]: /time-in-words-for-mac/ [2]: /time-in-words/\u003c/p\u003e\n"
    },
    {
        "title" : "Scroll bars in Mac OX 10.6 and 10.7",
        "date_published" : "2012-02-25T00:00:00Z",
        "date_modified" : "2012-02-25T00:00:00Z",
        "id" : "https://troz.net/post/2012/scroll-bars-in-mac-ox-10-6-and-10-7/",
        "url" : "https://troz.net/post/2012/scroll-bars-in-mac-ox-10-6-and-10-7/",
        "content_html" : "\u003cp\u003eWith the introduction of OS X 10.7 (Lion), Apple removed the obvious scroll bars\nfrom windows and replaced them with a much more subtle scroll indicator, that\nonly appears when you are actually scrolling. This was designed to match the iOS\nscrolling, as was the swap of scroll direction which makes much more sense if\nyou use a trackpad.\u003c/p\u003e\n\n\u003cp\u003eWith the upcoming \u003ca href=\"/time-in-words-for-mac/\"\u003eTime In Words for Mac\u003c/a\u003e, I have a Preferences window to\nallow selection of time zones to display in the menu. The app will be compatible\nwith 10.6 or later. Under 10.6, the scrollbars are always visible and this is\nwhat the Preferences display looks like:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg title=\"Preferences 10.6\" src=\"/images/TiW-Prefs-10.6.png\" alt=\"Preferences 10.6\" width=\"550\" height=\"272\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis may change, but the basic layout is there. As you can see, I have a\n3-column table listing all the available time zones, with the final column right\njustified.\u003c/p\u003e\n\n\u003cp\u003eUnder 10.7, this doesn\u0026rsquo;t quite work:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg title=\"Preferences 10.7\" src=\"/images/TiW-Prefs-10.7.png\" alt=\"Preferences 10.7\" width=\"550\" height=\"272\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eI had to grab this screen shot quickly after swiping the trackpad, but you can\nsee the problem. When not scrolling, the scroll indicator is hidden and the\nright column is fully visible, but when dragging the scroll indicator appears on\ntop of the right-justified entries in that column.\u003c/p\u003e\n\n\u003cp\u003eSo now I am not quite sure what to do. Here are the options I have considered:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLeft or centre-justify the text in the final column.\u003c/li\u003e\n\u003cli\u003eAdd some spacing at the end of each line so that the scroll indicator appears\nin blank space.\u003c/li\u003e\n\u003cli\u003ePut up with it.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eI will have to experiment with various options and see what I can do.\u003c/p\u003e\n"
    },
    {
        "title" : "Time In Words available in the App Store",
        "date_published" : "2012-02-09T00:00:00Z",
        "date_modified" : "2012-02-09T00:00:00Z",
        "id" : "https://troz.net/post/2012/time-in-words-available-in-the-app-store/",
        "url" : "https://troz.net/post/2012/time-in-words-available-in-the-app-store/",
        "content_html" : "\u003cp\u003eTime In Words is now available at the App Store.\u003c/p\u003e\n\n\u003cp\u003eTime In Words is a clock and calendar app that takes you out of the digital era\nand back to when saying “quarter to seven” or “five past two” was accurate\nenough.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://itunes.apple.com/app/time-in-words/id498403851\"\u003e\u003cimg title=\"App Store link\" src=\"https://linkmaker.itunes.apple.com/htmlResources/assets/en_us//images/web/linkmaker/badge_appstore-lrg.png\" alt=\"App Store link\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eCheck out the \u003ca href=\"/time-in-words/\"\u003eTime In Words web page\u003c/a\u003e for more info and screen shots.\u003c/p\u003e\n"
    },
    {
        "title" : "Time In Words for iOS",
        "date_published" : "2012-02-08T00:00:00Z",
        "date_modified" : "2012-02-08T00:00:00Z",
        "id" : "https://troz.net/time-in-words/",
        "url" : "https://troz.net/time-in-words/",
        "content_html" : "\u003cp\u003eTime In Words is a clock and calendar app that takes you out of the digital era\nand back to when saying \u0026ldquo;quarter to seven\u0026rdquo; or \u0026ldquo;five past two\u0026rdquo; was accurate\nenough. When people look at an analog watch, they tend to interpret the time to\nthe closest five minutes which allows for inaccuracies in the watch as well as\nproviding only a useful level of detail. This app goes back to that, showing\ndate and/or time in multiple ways, but all in words.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://itunes.apple.com/app/time-in-words/id498403851\" target=\"_blank\"\u003eTime\nIn Words is available from the App Store.\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eDoes your job involve reading out the time from a clock? Perhaps over the radio\nor a public address system? Let Time In Words convert the time and date to words\nfor you, so you can\u0026rsquo;t make a mistake.\u003c/p\u003e\n\n\u003cp\u003eSwipe though the pages of the app to see a time display, date display, time and\ndate in words and finally, a time zone converter that explains the time and the\nday in words, so no conversion is needed to work out whether calling a friend in\nMinsk right now would be a bad idea.\u003c/p\u003e\n\n\u003cp\u003eConfigure the colors for the text and backgrounds and adjust the brightness to\nsuit your surroundings.\u003c/p\u003e\n\n\u003cp\u003eIf you set your device\u0026rsquo;s Auto-Lock to Never (Settings - General) and leave it\nconnected to power, then you can use this as a clock.\u003c/p\u003e\n\n\u003cp\u003eFor any problems with this app, please use the Contact Me link in the sidebar.\u003c/p\u003e\n\n\u003cp\u003eScreen shots are for iPhone or iPod Touch. iPad is similar but allows four time\nzone conversions.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg title=\"Time\" src=\"/images/TiW-iOS-1.png\" alt=\"Time\" /\u003e \n\u003cimg title=\"Date\" src=\"/images/TiW-iOS-2.png\" alt=\"Date\" /\u003e\n\u003cimg title=\"Time and Date\" src=\"/images/TiW-iOS-3.png\" alt=\"Time and Date\" /\u003e \n\u003cimg title=\"Time zone conversion\" src=\"/images/TiW-iOS-4.png\" alt=\"Time zone conversion\" /\u003e\n\u003cimg title=\"Settings\" src=\"/images/TiW-iOS-5.png\" alt=\"Settings\" /\u003e\u003c/p\u003e\n"
    }
    ]
}
